Imports Microsoft.VisualBasic
Imports System.Collections
Imports System.Collections.Generic
Imports System.Data
Imports System.Xml
Imports System.Configuration
Imports System.Runtime.Caching 'added 11/21/2013; needed to add reference 1st
'added 12/20/2013
Imports QuickQuote.CommonObjects
Imports IFM.DiamondServices.Services
Imports System.Web
Imports System.Web.UI.WebControls
Imports QuickQuote.CommonObjects.Umbrella
'Imports System

Namespace QuickQuote.CommonMethods 'added namespace 12/20/2013
    ''' <summary>
    ''' class used for common methods
    ''' </summary>
    ''' <remarks>can be used for formatting, math, specific lookups, etc.</remarks>
    <Serializable()> Public Class QuickQuoteHelperClass '8/4/2014 note: will not be inheriting QuickQuoteBaseObject

        'Dim QQxml As New QuickQuoteXML
        Dim qqCompressionHelper As New QuickQuoteCompressionHelperClass 'added 9/10/2015

        Private _ForceLob As Boolean


        ''' <summary>
        ''' valid replacement types for empty strings
        ''' </summary>
        ''' <remarks>used on various methods that give the option of what to use in place of empty strings</remarks>
        Enum QuickQuoteEmptyStringReplacementType 'added 1/29/2013 to optionally use in places to replace "" w/ 0 or N/A
            None = 0
            Zero = 1
            NonApplicable = 2
        End Enum
        'added 11/19/2013
        Enum PersOrComm
            None = 0
            Pers = 1
            Comm = 2
        End Enum
        'added 11/20/2013
        Enum QuickQuoteClassName
            None 'added 12/20/2013 so QuickQuoteClassName Enum variables would never be Nothing when it's the 1st item (since 0 = nothing)
            QuickQuoteAccidentViolation 'added 1/15/2014 for PPA
            QuickQuoteAdditionalInsured
            QuickQuoteAdditionalInterest
            QuickQuoteAddress
            QuickQuoteApplicant
            QuickQuoteAutoSymbol
            QuickQuoteBuilding
            QuickQuoteClassification
            QuickQuoteContractorsEquipmentScheduledItem
            QuickQuoteCoverage
            QuickQuoteCreditScore
            QuickQuoteDriver
            QuickQuoteEmail
            QuickQuoteEmploymentInfo 'added 5/12/2014
            QuickQuoteExclusion
            QuickQuoteExclusionOfAmishWorkerRecord
            QuickQuoteExclusionOfSoleProprietorRecord
            QuickQuoteGLClassification
            QuickQuoteHouseholdMember
            QuickQuoteInclusionExclusion
            QuickQuoteInclusionExclusionScheduledItem
            QuickQuoteInclusionOfSoleProprietorRecord
            QuickQuoteInlandMarine
            QuickQuoteLocation
            QuickQuoteLossHistoryDetailRecord
            QuickQuoteLossHistoryRecord
            QuickQuoteModifier
            QuickQuoteName
            QuickQuoteObject
            QuickQuoteOperator
            QuickQuotePackagePart
            QuickQuotePhone
            QuickQuotePolicyUnderwriting
            QuickQuotePriorCarrier
            QuickQuotePropertyInTheOpenRecord
            QuickQuoteResidenceInfo
            QuickQuoteResidenceInfoDetail
            QuickQuoteRvWatercraft
            QuickQuoteRvWatercraftMotor
            QuickQuoteScheduledCoverage
            QuickQuoteScheduledItem
            QuickQuoteScheduledRating
            QuickQuoteSectionCoverage
            QuickQuoteSectionIAndIICoverage
            QuickQuoteSectionICoverage
            QuickQuoteSectionIICoverage
            QuickQuoteThirdPartyData
            QuickQuoteThirdPartyDataAddress
            QuickQuoteUpdatesRecord
            QuickQuoteUserAgency
            QuickQuoteValidationItem 'added 4/2/2014
            QuickQuoteVehicle
            QuickQuoteVehicleSymbol 'added 4/15/2014
            QuickQuoteWaiverOfSubrogationRecord
            QuickQuotePropertyValuation 'added 8/14/2014; not in alphabetical order here to maintain existing enum values
            QuickQuotePropertyValuationRequest 'added 8/14/2014; not in alphabetical order here to maintain existing enum values
            QuickQuotePropertyValuationResponse 'added 8/14/2014; not in alphabetical order here to maintain existing enum values

            'added 4/28/2015 to capture new fields (for Farm or Comm IM/Crime) or ones that weren't previously using the static data file (Commercial)
            QuickQuoteAcreage
            QuickQuoteTieringInformation
            'added 5/8/2015 for Farm
            QuickQuoteScheduledPersonalPropertyCoverage
            'added 5/12/2015 for Farm
            QuickQuoteOptionalCoverage
            QuickQuoteFarmIncidentalLimit
            'added 6/24/2015 for Farm
            QuickQuoteOptionalCoverageE
            'added 12/11/2015 for Farm; should've already been there since some of the properties are already shown below
            QuickQuoteIncomeLoss

            QuickQuoteExclusionOfSoleProprietorRecord_IL 'added 10/15/2018

            'custom feeding and suffocation
            QuickQuoteCustomFeeding
            QuickQuoteSuffocation

            'Umbrella
            QuickQuoteUmbrella
        End Enum

        Enum LOBIFMVersions
            HOM2018Upgrade
            PARAchuteUpgrade ' Parachute
            WCKYUpgrade  ' KY WC 5-7-19 MGB
            CyberLiabilityUpgrade
            'PPAOHUpgrade
        End Enum
        Enum QuickQuotePropertyName
            None 'added 12/20/2013 so QuickQuotePropertyName Enum variables would never be Nothing when it's the 1st item (since 0 = nothing)

            'added 1/15/2014 for PPA
            AccidentSurchargeTypeId 'QuickQuoteAccidentViolation
            AccidentsViolationsCategoryId 'added 7/15/2014; grouped w/ QuickQuoteAccidentViolation but not in xml structure... field in AccidentsViolationsType table
            AccidentsViolationsTypeId 'QuickQuoteAccidentViolation
            MajorSurchargeTypeId 'QuickQuoteAccidentViolation
            MinorSurchargeTypeId 'QuickQuoteAccidentViolation
            ViolationConvictionTypeId 'QuickQuoteAccidentViolation
            ViolationSourceId 'QuickQuoteAccidentViolation

            CoverageCodeId 'QuickQuoteAdditionalInsured

            TypeId 'QuickQuoteAdditionalInterest (AdditionalInterestType table)
            GroupTypeId 'QuickQuoteAdditionalInterest (added 12/18/2013; AdditionalInterestGroupType table)

            StateId 'QuickQuoteAddress

            EducationTypeId 'QuickQuoteApplicant
            OccupationTypeId 'QuickQuoteApplicant
            RelationshipTypeId 'QuickQuoteApplicant
            'SpouseOccupancyTypeId 'QuickQuoteApplicant (same as OccupancyTypeId); 12/18/2013 note: wrong spelling (see below)
            SpouseOccupationTypeId 'QuickQuoteApplicant (same as OccupationTypeId); corrected spelling 12/18/2013
            USCitizenTypeId 'QuickQuoteApplicant

            'CoverageCodeId 'QuickQuoteAutoSymbol

            ClassificationTypeId 'QuickQuoteBuilding (also involves program, programAbbreviation, classification, and classCode)
            OccupancyId 'QuickQuoteBuilding
            ConstructionId 'QuickQuoteBuilding
            AutoIncreaseId 'QuickQuoteBuilding
            PropertyDeductibleId 'QuickQuoteBuilding
            ValuationId 'QuickQuoteBuilding
            ValuationMethodId 'QuickQuoteBuilding
            CondoCommercialUnitOwnersLimitId 'QuickQuoteBuilding
            SpoilagePropertyClassificationId 'QuickQuoteBuilding
            ProtectionClassId 'QuickQuoteBuilding
            EarthquakeBuildingClassificationTypeId 'QuickQuoteBuilding
            CauseOfLossTypeId 'QuickQuoteBuilding
            DeductibleId 'QuickQuoteBuilding
            CoinsuranceTypeId 'QuickQuoteBuilding
            RatingTypeId 'QuickQuoteBuilding
            InflationGuardTypeId 'QuickQuoteBuilding
            PersPropCov_PropertyTypeId 'QuickQuoteBuilding
            PersPropCov_RiskTypeId 'QuickQuoteBuilding
            PersPropCov_RatingTypeId 'QuickQuoteBuilding
            PersPropCov_CauseOfLossTypeId 'QuickQuoteBuilding
            PersPropCov_DeductibleId 'QuickQuoteBuilding
            PersPropCov_CoinsuranceTypeId 'QuickQuoteBuilding
            PersPropCov_ValuationId 'QuickQuoteBuilding
            PersPropOfOthers_RiskTypeId 'QuickQuoteBuilding
            PersPropOfOthers_RatingTypeId 'QuickQuoteBuilding
            PersPropOfOthers_CauseOfLossTypeId 'QuickQuoteBuilding
            PersPropOfOthers_DeductibleId 'QuickQuoteBuilding
            PersPropOfOthers_CoinsuranceTypeId 'QuickQuoteBuilding
            PersPropOfOthers_ValuationId 'QuickQuoteBuilding
            BusinessIncomeCov_CoinsuranceTypeId 'QuickQuoteBuilding
            BusinessIncomeCov_MonthlyPeriodTypeId 'QuickQuoteBuilding
            BusinessIncomeCov_BusinessIncomeTypeId 'QuickQuoteBuilding
            BusinessIncomeCov_RiskTypeId 'QuickQuoteBuilding
            BusinessIncomeCov_RatingTypeId 'QuickQuoteBuilding
            BusinessIncomeCov_CauseOfLossTypeId 'QuickQuoteBuilding
            BusinessIncomeCov_WaitingPeriodTypeId 'QuickQuoteBuilding
            PersonalProperty_EarthquakeRateGradeTypeId 'QuickQuoteBuilding
            OptionalTheftDeductibleId 'QuickQuoteBuilding
            OptionalWindstormOrHailDeductibleId 'QuickQuoteBuilding
            PersPropCov_OptionalTheftDeductibleId 'QuickQuoteBuilding
            PersPropCov_OptionalWindstormOrHailDeductibleId 'QuickQuoteBuilding
            PersPropOfOthers_OptionalTheftDeductibleId 'QuickQuoteBuilding
            PersPropOfOthers_OptionalWindstormOrHailDeductibleId 'QuickQuoteBuilding
            PersPropCov_DoesYardRateApplyTypeId 'QuickQuoteBuilding
            PersPropOfOthers_DoesYardRateApplyTypeId 'QuickQuoteBuilding

            'ClassificationTypeId 'QuickQuoteClassification (also involves ClassCode)

            'ValuationMethodId 'QuickQuoteContractorsEquipmentScheduledItem

            PersonalAutoReportingBureausTypeId 'QuickQuoteCreditScore

            'CoverageCodeId 'QuickQuoteCoverage
            CoverageLimitId 'QuickQuoteCoverage
            DeductibleTypeId 'QuickQuoteCoverage
            SubCoverageCodeId 'QuickQuoteCoverage
            AutomaticIncreasePercentTypeId 'QuickQuoteCoverage
            ValuationMethodTypeId 'QuickQuoteCoverage
            PropertyClassificationTypeId 'QuickQuoteCoverage
            DeductiblePerTypeId 'QuickQuoteCoverage
            'DeductibleId 'QuickQuoteCoverage
            DeductibleCategoryTypeId 'QuickQuoteCoverage
            NamedInsuredsBusinessTypeId 'QuickQuoteCoverage
            CoverageTypeId 'QuickQuoteCoverage
            OtherThanCollisionSubTypeId 'QuickQuoteCoverage
            OtherThanCollisionTypeId 'QuickQuoteCoverage
            CommercialOccupancyTypeId 'QuickQuoteCoverage
            'CauseOfLossTypeId 'QuickQuoteCoverage
            'CoinsuranceTypeId 'QuickQuoteCoverage
            'RatingTypeId 'QuickQuoteCoverage
            'InflationGuardTypeId 'QuickQuoteCoverage
            BusinessPropertyTypeId 'QuickQuoteCoverage
            RiskTypeId 'QuickQuoteCoverage
            MonthlyPeriodTypeId 'QuickQuoteCoverage
            BusinessIncomeTypeId 'QuickQuoteCoverage
            WaitingPeriodTypeId 'QuickQuoteCoverage
            PersonalPropertyRateGradeTypeId 'QuickQuoteCoverage
            DoesYardRateApplyTypeId 'QuickQuoteCoverage
            ConstructionTypeId 'QuickQuoteCoverage
            SpecialClassCodeTypeId 'QuickQuoteCoverage
            'ProtectionClassId 'QuickQuoteCoverage

            EnolVehicleUseTypeId 'QuickQuoteDriver (added 1/2/2014 for PPA)
            LicenseStatusId 'QuickQuoteDriver
            LicenseTypeId 'QuickQuoteDriver (added 1/2/2014 for PPA)
            DriverExcludeTypeId 'QuickQuoteDriver
            'RelationshipTypeId 'QuickQuoteDriver

            'TypeId 'QuickQuoteEmail
            'Type 'QuickQuoteEmail (added 12/11/2013; not using)

            EmploymentDurationTypeId 'QuickQuoteEmploymentInfo (added 5/12/2014 for PPA Driver)
            'OccupationTypeId 'QuickQuoteEmploymentInfo (added 5/12/2014 for PPA Driver)
            PreviousEmploymentDurationTypeId 'QuickQuoteEmploymentInfo (added 5/12/2014 for PPA Driver)

            ExclusionTypeId 'QuickQuoteExclusion

            PositionTitleTypeId 'QuickQuoteExclusionOfAmishWorkerRecord

            'PositionTitleTypeId 'QuickQuoteExclusionOfSoleProprietorRecord

            CLMRatingBaseId 'QuickQuoteGLClassification
            CLMSubsectionId 'QuickQuoteGLClassification
            OwnerTypeId 'QuickQuoteGLClassification

            'RelationshipTypeId 'QuickQuoteHouseholdMember

            CategoryTypeId 'QuickQuoteInclusionExclusion
            CoverageAppliesToTypeId 'QuickQuoteInclusionExclusion
            'CoverageTypeId 'QuickQuoteInclusionExclusion
            LiabilityCoverageTypeId 'QuickQuoteInclusionExclusion
            ParentTypeId 'QuickQuoteInclusionExclusion
            ProgramTypeId 'QuickQuoteInclusionExclusion
            'TypeId 'QuickQuoteInclusionExclusion

            ParagraphReferenceTypeId 'QuickQuoteInclusionExclusionScheduledItem
            'PositionTitleTypeId 'QuickQuoteInclusionExclusionScheduledItem
            PropertyExclusionTypeId 'QuickQuoteInclusionExclusionScheduledItem
            PropertyTypeId 'QuickQuoteInclusionExclusionScheduledItem
            'TypeId 'QuickQuoteInclusionExclusionScheduledItem
            WaiverOfSubrogationAmountTypeId 'QuickQuoteInclusionExclusionScheduledItem

            'PositionTitleTypeId 'QuickQuoteInclusionOfSoleProprietorRecord

            RateInformationTypeId 'QuickQuoteInlandMarine
            InlandMarineType 'QuickQuoteInlandMarine (added 12/5/2013 for enum property)
            'CoverageCodeId 'QuickQuoteInlandMarine
            DeductibleLimitId 'QuickQuoteInlandMarine

            'ProtectionClassId 'QuickQuoteLocation
            EquipmentBreakdownDeductibleId 'QuickQuoteLocation
            'CauseOfLossTypeId 'QuickQuoteLocation
            'DeductibleId 'QuickQuoteLocation
            'CoinsuranceTypeId 'QuickQuoteLocation
            'ValuationMethodTypeId 'QuickQuoteLocation
            EquipmentBreakdownOccupancyTypeId 'QuickQuoteLocation
            WindstormOrHailPercentageDeductibleId 'QuickQuoteLocation
            WindstormOrHailMinimumDollarDeductibleId 'QuickQuoteLocation
            CondoRentedTypeId 'QuickQuoteLocation
            'ConstructionTypeId 'QuickQuoteLocation
            'DeductibleLimitId 'QuickQuoteLocation
            WindHailDeductibleLimitId 'QuickQuoteLocation
            FamilyUnitsId 'QuickQuoteLocation
            FireDepartmentDistanceId 'QuickQuoteLocation
            FireHydrantDistanceId 'QuickQuoteLocation
            FormTypeId 'QuickQuoteLocation
            FoundationTypeId 'QuickQuoteLocation
            NumberOfFamiliesId 'QuickQuoteLocation
            OccupancyCodeId 'QuickQuoteLocation
            'ProgramTypeId 'QuickQuoteLocation
            StructureTypeId 'QuickQuoteLocation
            NumberOfUnitsId 'QuickQuoteLocation
            UsageTypeId 'QuickQuoteLocation
            'more added below 7/31/2014

            ChoicePointClaimTypeId 'QuickQuoteLossHistoryDetailRecord
            TypeOfLossId 'QuickQuoteLossHistoryDetailRecord

            LossHistoryFaultId 'QuickQuoteLossHistoryRecord
            LossHistoryLocationTypeId 'QuickQuoteLossHistoryRecord
            LossHistorySourceId 'QuickQuoteLossHistoryRecord
            LossHistorySurchargeId 'QuickQuoteLossHistoryRecord
            'TypeOfLossId 'QuickQuoteLossHistoryRecord

            ModifierGroupId 'QuickQuoteModifier
            ModifierLevelId 'QuickQuoteModifier
            ModifierOptionId 'QuickQuoteModifier
            ModifierTypeId 'QuickQuoteModifier
            ParentModifierTypeId 'QuickQuoteModifier

            DriversLicenseStateId 'QuickQuoteName
            MaritalStatusId 'QuickQuoteName
            NameAddressSourceId 'QuickQuoteName
            SexId 'QuickQuoteName
            TaxTypeId 'QuickQuoteName
            ThirdPartyEntityId 'QuickQuoteName
            ThirdPartyGroupId 'QuickQuoteName
            'TypeId 'QuickQuoteName
            EntityTypeId 'QuickQuoteName
            SuffixName 'QuickQuoteName; added 2/4/2014 for dropdown on PL name screens (uses Diamond's suffix table, but suffix_id isn't stored in Diamond... just text)

            LobType 'QuickQuoteObject (added 11/26/2013 for enum property)
            LobId 'QuickQuoteObject
            CompanyId 'QuickQuoteObject
            'StateId 'QuickQuoteObject
            OccurrenceLiabilityLimitId 'QuickQuoteObject
            TenantsFireLiabilityId 'QuickQuoteObject
            PropertyDamageLiabilityDeductibleId 'QuickQuoteObject
            PropertyDamageLiabilityDeductibleOptionId 'QuickQuoteObject
            BlanketRatingOptionId 'QuickQuoteObject
            EmployeeBenefitsLiabilityOccurrenceLimitId 'QuickQuoteObject
            ContractorsEquipmentInstallationLimitId 'QuickQuoteObject
            CrimeEmpDisLimitId 'QuickQuoteObject
            CrimeForgeryLimitId 'QuickQuoteObject
            BillToId 'QuickQuoteObject
            CurrentBilltoId 'QuickQuoteObject
            CurrentPayplanId 'QuickQuoteObject
            PolicyTermId 'QuickQuoteObject
            TransactionTypeId 'QuickQuoteObject
            VersionId 'QuickQuoteObject
            BillMethodId 'QuickQuoteObject
            BillingPayPlanId 'QuickQuoteObject
            PolicyOriginTypeId 'QuickQuoteObject
            RiskGradeLookupId 'QuickQuoteObject
            CPP_CGL_RiskGradeLookupId 'QuickQuoteObject
            CPP_CPR_RiskGradeLookupId 'QuickQuoteObject
            ErrorRiskGradeLookupId 'QuickQuoteObject
            ReplacementRiskGradeLookupId 'QuickQuoteObject
            CPP_CGL_ErrorRiskGradeLookupId 'QuickQuoteObject
            CPP_CGL_ReplacementRiskGradeLookupId 'QuickQuoteObject
            CPP_CPR_ErrorRiskGradeLookupId 'QuickQuoteObject
            CPP_CPR_ReplacementRiskGradeLookupId 'QuickQuoteObject
            EmployersLiabilityId 'QuickQuoteObject
            ExperienceModificationBureauTypeId 'QuickQuoteObject
            'ProgramTypeId 'QuickQuoteObject
            GeneralAggregateLimitId 'QuickQuoteObject
            ProductsCompletedOperationsAggregateLimitId 'QuickQuoteObject
            PersonalAndAdvertisingInjuryLimitId 'QuickQuoteObject
            DamageToPremisesRentedLimitId 'QuickQuoteObject
            MedicalExpensesLimitId 'QuickQuoteObject
            WaiverOfSubrogationPremiumId 'QuickQuoteObject
            LiquorLiabilityOccurrenceLimitId 'QuickQuoteObject
            LiquorLiabilityClassificationId 'QuickQuoteObject
            QuoteTypeId 'QuickQuoteObject
            GL_PremisesAndProducts_DeductibleId 'QuickQuoteObject
            GL_PremisesAndProducts_DeductibleCategoryTypeId 'QuickQuoteObject
            GL_PremisesAndProducts_DeductiblePerTypeId 'QuickQuoteObject
            NonOwnership_ENO_RatingTypeId 'QuickQuoteObject
            ComprehensiveDeductibleId 'QuickQuoteObject
            CollisionDeductibleId 'QuickQuoteObject
            Liability_UM_UIM_LimitId 'QuickQuoteObject
            MedicalPaymentsLimitId 'QuickQuoteObject
            PolicyTypeId 'QuickQuoteObject
            PackageTypeId 'QuickQuoteObject
            PackageModificationAssignmentTypeId 'QuickQuoteObject
            EFT_BankAccountTypeId 'QuickQuoteObject
            BlanketBuildingCauseOfLossTypeId 'QuickQuoteObject
            BlanketContentsCauseOfLossTypeId 'QuickQuoteObject
            BlanketBuildingAndContentsCauseOfLossTypeId 'QuickQuoteObject
            BlanketBusinessIncomeCauseOfLossTypeId 'QuickQuoteObject
            BlanketBuildingCoinsuranceTypeId 'QuickQuoteObject
            BlanketBuildingValuationId 'QuickQuoteObject
            BlanketContentsCoinsuranceTypeId 'QuickQuoteObject
            BlanketContentsValuationId 'QuickQuoteObject
            BlanketBuildingAndContentsCoinsuranceTypeId 'QuickQuoteObject
            BlanketBuildingAndContentsValuationId 'QuickQuoteObject
            BlanketBusinessIncomeCoinsuranceTypeId 'QuickQuoteObject
            BlanketBusinessIncomeValuationId 'QuickQuoteObject
            TierTypeId
            TierAdjustmentTypeId
            PersonalLiabilityLimitId

            'RelationshipTypeId 'QuickQuoteOperator

            AddFormsVersionId 'QuickQuotePackagePart
            PackagePartTypeId 'QuickQuotePackagePart
            RatingVersionId 'QuickQuotePackagePart
            'VersionId 'QuickQuotePackagePart
            'BlanketRatingOptionId 'QuickQuotePackagePart
            'DeductiblePerTypeId 'QuickQuotePackagePart
            'PackageModificationAssignmentTypeId 'QuickQuotePackagePart
            'PackageTypeId 'QuickQuotePackagePart
            'PolicyTypeId 'QuickQuotePackagePart
            'ProgramTypeId 'QuickQuotePackagePart
            'RiskGradeLookupId 'QuickQuotePackagePart

            'NameAddressSourceId 'QuickQuotePhone
            'TypeId 'QuickQuotePhone
            'Type 'QuickQuotePhone (added 12/11/2013; not using)

            PolicyUnderwritingAnswerTypeId 'QuickQuotePolicyUnderwriting
            PolicyUnderwritingCodeId 'QuickQuotePolicyUnderwriting
            PolicyUnderwritingExtraAnswerTypeId 'QuickQuotePolicyUnderwriting
            PolicyUnderwritingLevelId 'QuickQuotePolicyUnderwriting
            PolicyUnderwritingTabId 'QuickQuotePolicyUnderwriting

            PreviousInsurerTypeId 'QuickQuotePriorCarrier
            PriorDurationTypeId 'QuickQuotePriorCarrier
            RolloverId 'QuickQuotePriorCarrier
            'TypeId 'QuickQuotePriorCarrier

            'DeductibleId 'QuickQuotePropertyInTheOpenRecord
            'CoinsuranceTypeId 'QuickQuotePropertyInTheOpenRecord
            'ValuationId 'QuickQuotePropertyInTheOpenRecord
            'ConstructionTypeId 'QuickQuotePropertyInTheOpenRecord
            'RatingTypeId 'QuickQuotePropertyInTheOpenRecord
            'CauseOfLossTypeId 'QuickQuotePropertyInTheOpenRecord
            'OptionalTheftDeductibleId 'QuickQuotePropertyInTheOpenRecord
            'OptionalWindstormOrHailDeductibleId 'QuickQuotePropertyInTheOpenRecord
            'SpecialClassCodeTypeId 'QuickQuotePropertyInTheOpenRecord
            'InflationGuardTypeId 'QuickQuotePropertyInTheOpenRecord
            'ProtectionClassId 'QuickQuotePropertyInTheOpenRecord

            CurrentResidenceTypeId 'QuickQuoteResidenceInfo

            ResidenceInfoDetailTypeId 'QuickQuoteResidenceInfoDetail

            RvWatercraftTypeId 'QuickQuoteRvWatercraft
            PropertyDeductibleLimitId 'QuickQuoteRvWatercraft
            UninsuredMotoristBodilyInjuryLimitId 'QuickQuoteRvWatercraft

            MotorTypeId 'QuickQuoteRvWatercraftMotor

            UICoverageScheduledCoverageParentTypeId 'QuickQuoteScheduledCoverage

            ScheduledItemsCategoryId 'QuickQuoteScheduledItem
            ScheduledItemsComboId 'QuickQuoteScheduledItem
            ScheduledItemsTypeId 'QuickQuoteScheduledItem

            RiskCharacteristicTypeId 'QuickQuoteScheduledRating
            ScheduleRatingTypeId 'QuickQuoteScheduledRating

            'ConstructionTypeId 'QuickQuoteSectionCoverage
            CoverageExposureId 'QuickQuoteSectionCoverage
            'OccupancyCodeId 'QuickQuoteSectionCoverage
            'ProtectionClassId 'QuickQuoteSectionCoverage
            'UsageTypeId 'QuickQuoteSectionCoverage

            MainCoverageCodeId 'QuickQuoteSectionIAndIICoverage
            MainCoverageType 'QuickQuoteSectionIAndIICoverage (added 12/2/2013 for enum property)
            PropertyCoverageCodeId 'QuickQuoteSectionIAndIICoverage
            PropertyCoverageType 'QuickQuoteSectionIAndIICoverage (added 12/2/2013 for enum property)
            LiabilityCoverageCodeId 'QuickQuoteSectionIAndIICoverage
            LiabilityCoverageType 'QuickQuoteSectionIAndIICoverage (added 12/2/2013 for enum property)

            'CoverageCodeId 'QuickQuoteSectionICoverage
            CoverageType 'QuickQuoteSectionICoverage (added 11/27/2013 for enum property)
            DFR_CoverageType 'QuickQuoteSectionICoverage (added 11/27/2013 for enum property)
            HOM_CoverageType 'QuickQuoteSectionICoverage (added 11/27/2013 for enum property)
            IncreasedLimitId 'QuickQuoteSectionICoverage
            'DeductibleLimitId 'QuickQuoteSectionICoverage (added 12/19/2013; uses same private variable as IncreasedLimitId)
            'ConstructionTypeId 'QuickQuoteSectionICoverage
            'OccupancyCodeId 'QuickQuoteSectionICoverage
            'ProtectionClassId 'QuickQuoteSectionICoverage
            'UsageTypeId 'QuickQuoteSectionICoverage

            'CoverageCodeId 'QuickQuoteSectionIICoverage
            'CoverageType 'QuickQuoteSectionIICoverage (added 12/2/2013 for enum property)
            'HOM_CoverageType 'QuickQuoteSectionIICoverage (added 12/2/2013 for enum property)
            'DFR_CoverageType 'QuickQuoteSectionIICoverage (added 12/2/2013 for enum property)

            'CompanyId 'QuickQuoteThirdPartyData
            CompanyStateLobId 'QuickQuoteThirdPartyData
            'VersionId 'QuickQuoteThirdPartyData

            'NameAddressSourceId 'QuickQuoteThirdPartyDataAddress
            'StateId 'QuickQuoteThirdPartyDataAddress

            CentralHeatUpdateTypeId 'QuickQuoteUpdatesRecord
            ElectricUpdateTypeId 'QuickQuoteUpdatesRecord
            PlumbingUpdateTypeId 'QuickQuoteUpdatesRecord
            RoofUpdateTypeId 'QuickQuoteUpdatesRecord
            SupplementalHeatUpdateTypeId 'QuickQuoteUpdatesRecord
            WindowsUpdateTypeId 'QuickQuoteUpdatesRecord
            InspectionUpdateTypeId 'QuickQuoteUpdatesRecord

            UserAgencyRelationshipTypeId 'QuickQuoteUserAgency

            ValidationSeverityTypeId 'QuickQuoteValidationItem (added 4/2/2014)
            ValidationSeverityType 'QuickQuoteValidationItem (added 4/2/2014)

            'Liability_UM_UIM_LimitId 'QuickQuoteVehicle
            'MedicalPaymentsLimitId 'QuickQuoteVehicle
            'ComprehensiveDeductibleId 'QuickQuoteVehicle
            ComprehensiveDeductibleLimitId 'QuickQuoteVehicle
            'CollisionDeductibleId 'QuickQuoteVehicle
            CollisionDeductibleLimitId 'QuickQuoteVehicle
            TowingAndLaborDeductibleLimitId 'QuickQuoteVehicle
            VehicleRatingTypeId 'QuickQuoteVehicle
            VehicleUseTypeId 'QuickQuoteVehicle
            VehicleUsageTypeId 'QuickQuoteVehicle
            FarmUseCodeTypeId 'QuickQuoteVehicle
            UseCodeTypeId 'QuickQuoteVehicle
            OperatorTypeId 'QuickQuoteVehicle
            OperatorUseTypeId 'QuickQuoteVehicle
            RadiusTypeId 'QuickQuoteVehicle
            SizeTypeId 'QuickQuoteVehicle
            SecondaryClassTypeId 'QuickQuoteVehicle
            SecondaryClassUsageTypeId 'QuickQuoteVehicle
            UninsuredMotoristLiabilityLimitId 'QuickQuoteVehicle
            TrailerTypeId 'QuickQuoteVehicle
            PerformanceTypeId 'QuickQuoteVehicle
            BodyTypeId 'QuickQuoteVehicle
            BodilyInjuryLiabilityLimitId 'QuickQuoteVehicle
            PropertyDamageLimitId 'QuickQuoteVehicle
            UninsuredCombinedSingleLimitId 'QuickQuoteVehicle
            UninsuredMotoristPropertyDamageLimitId 'QuickQuoteVehicle
            UninsuredMotoristPropertyDamageDeductibleLimitId 'QuickQuoteVehicle
            TransportationExpenseLimitId 'QuickQuoteVehicle
            TapesAndRecordsLimitId 'QuickQuoteVehicle
            TripInterruptionLimitId 'QuickQuoteVehicle
            AntiLockTypeId 'QuickQuoteVehicle
            AntiTheftTypeId 'QuickQuoteVehicle
            DamageYesNoId 'QuickQuoteVehicle
            RegisteredStateId 'QuickQuoteVehicle
            RestraintTypeId 'QuickQuoteVehicle
            VehicleTypeId 'QuickQuoteVehicle
            VehicleValueId 'QuickQuoteVehicle

            'added 4/15/2014
            VehicleSymbolCoverageTypeId 'QuickQuoteVehicleSymbol
            SystemGeneratedSymbolVehicleInfoLookupTypeId 'QuickQuoteVehicleSymbol

            PremiumId 'QuickQuoteWaiverOfSubrogationRecord

            'added 7/31/2014 for HOM mobile home formTypes
            TheftDeductibleLimitId 'QuickQuoteLocation
            MobileHomeSkirtTypeId 'QuickQuoteLocation
            MobileHomeTieDownTypeId 'QuickQuoteLocation

            'added 8/14/2014 for e2Value; not in alphabetical order here to maintain existing enum values
            Vendor 'QuickQuotePropertyValuation
            VendorIntegrationType 'QuickQuotePropertyValuation; may not use because it's not really needed
            VendorEstimatorType 'QuickQuotePropertyValuation
            ConstructionType 'QuickQuotePropertyValuationRequest; QuickQuotePropertyValuationResponse
            RoofType 'QuickQuotePropertyValuationRequest; QuickQuotePropertyValuationResponse
            ArchitecturalStyle 'QuickQuotePropertyValuationRequest; QuickQuotePropertyValuationResponse; QuickQuoteLocation
            ConstructionQuality 'QuickQuotePropertyValuationRequest; QuickQuotePropertyValuationResponse
            PhysicalShape 'QuickQuotePropertyValuationRequest; QuickQuotePropertyValuationResponse
            PrimaryExterior 'QuickQuotePropertyValuationRequest; QuickQuotePropertyValuationResponse

            'added 4/28/2015 to capture new fields (for Farm or Comm IM/Crime) or ones that weren't previously using the static data file (Commercial)
            EPLICoverageLimitId 'QuickQuoteObject
            EPLIDeductibleId 'QuickQuoteObject
            EPLICoverageTypeId 'QuickQuoteObject
            ContractorsEquipmentScheduleCoinsuranceTypeId 'QuickQuoteObject; CIM
            ContractorsEquipmentScheduleDeductibleId 'QuickQuoteObject; CIM
            ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId 'QuickQuoteObject; CIM
            ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId 'QuickQuoteObject; CIM
            SmallToolsDeductibleId 'QuickQuoteObject; CIM
            InstallationBlanketCoinsuranceTypeId 'QuickQuoteObject; CIM
            InstallationBlanketDeductibleId 'QuickQuoteObject; CIM
            ScheduledPropertyCoinsuranceTypeId 'QuickQuoteObject; CIM
            ScheduledPropertyDeductibleId 'QuickQuoteObject; CIM
            ComputerCoinsuranceTypeId 'QuickQuoteObject; CIM
            ComputerValuationMethodTypeId 'QuickQuoteObject; CIM
            ComputerAllPerilsDeductibleId 'QuickQuoteObject; CIM
            BuildersRiskDeductibleId 'QuickQuoteObject; CIM
            FineArtsDeductibleCategoryTypeId 'QuickQuoteObject; CIM
            FineArtsDeductibleId 'QuickQuoteObject; CIM
            OwnersCargoAnyOneOwnedVehicleDeductibleId 'QuickQuoteObject; CIM
            TransportationCatastropheDeductibleId 'QuickQuoteObject; CIM
            MotorTruckCargoScheduledVehicleDeductibleId 'QuickQuoteObject; CIM
            SignsValuationMethodTypeId 'QuickQuoteObject; CIM
            SignsDeductibleId 'QuickQuoteObject; CIM
            EmployeeTheftDeductibleId 'QuickQuoteObject; CRM
            EmployeeTheftFaithfulPerformanceOfDutyTypeId 'QuickQuoteObject; CRM
            InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId 'QuickQuoteObject; CRM
            OutsideThePremisesDeductibleId 'QuickQuoteObject; CRM
            AggregateLiabilityIncrementTypeId 'QuickQuoteObject; FAR
            'EntityTypeId 'QuickQuoteObject; FAR; already being used above from Name
            LiabilityOptionId 'QuickQuoteObject; FAR
            LimitedPerilsCategoryTypeId 'QuickQuoteObject; FAR
            CPP_CRM_ProgramTypeId 'QuickQuoteObject; CPP w/ CRM
            LocationAcreageTypeId 'QuickQuoteAcreage; FAR
            TownshipCodeTypeId 'QuickQuoteAcreage; FAR
            CoverageBasisTypeId 'QuickQuoteCoverage; CoverageDetail
            ASLId 'QuickQuoteCoverage
            'StateId 'QuickQuoteCoverage; CoverageDetail (CIM)
            FaithfulPerformanceOfDutyTypeId 'QuickQuoteCoverage; CoverageDetail (CRM)
            LimitTypeId 'QuickQuoteCoverage; CoverageDetail (CRM)
            EmployeeTheftScheduleTypeId 'QuickQuoteCoverage; CoverageDetail (CRM)
            PremiumChargeTypeId 'QuickQuoteCoverage; CoverageDetail (CRM)
            BasisTypeId 'QuickQuoteCoverage; CoverageDetail (CRM)
            'CoinsuranceTypeId 'QuickQuoteIncomeLoss; FAR
            ExtendFarmIncomeOptionId 'QuickQuoteIncomeLoss; FAR
            DwellingTypeId 'QuickQuoteLocation; FAR
            ManualTierReasonId 'QuickQuoteTieringInformation
            'TierAdjustmentTypeId 'QuickQuoteTieringInformation
            TierLevelId 'QuickQuoteTieringInformation

            'added 4/30/2015
            Farm_F_and_G_DeductibleLimitId 'QuickQuoteObject; FAR
            FarmAllStarLimitId 'QuickQuoteObject; FAR
            'added 5/5/2015
            FarmFireLegalLiabilityLimitId 'QuickQuoteObject; FAR
            FarmContractGrowersCareCustodyControlLimitId 'QuickQuoteObject; FAR
            'added 5/8/2015 for Farm
            'CoverageType 'QuickQuoteScheduledPersonalPropertyCoverage; FAR
            'added 5/12/2015 for Farm
            'CoverageType 'QuickQuoteOptionalCoverage; FAR
            'CoverageType 'QuickQuoteFarmIncidentalLimit; FAR
            'IncreasedLimitId 'QuickQuoteFarmIncidentalLimit; FAR
            'added 5/19/2015 for Farm
            FAR_CoverageType 'QuickQuoteSectionICoverage and QuickQuoteSectionIICoverage
            'added 6/12/2015 for Farm
            BusinessPursuitTypeId 'QuickQuoteSectionIICoverage
            'added 6/15/2015 for Farm
            FarmStructureTypeId 'QuickQuoteBuilding
            FarmTypeId 'QuickQuoteBuilding
            'added 7/21/2015
            E_Farm_DeductibleLimitId 'QuickQuoteBuilding; FAR

            'added 9/24/2016 for Verisk Protection Class
            ProtectionClassSystemGeneratedId 'QuickQuoteLocation; HOM and DFR currently; uses normal ProtectionClass table but includes values that aren't uses w/ normal ProtectionClass
            PPCMatchTypeId 'QuickQuoteLocation; HOM and DFR currently

            'added 5/4/2017 for CIM (Golf)
            GolfCourseCoverageLimitId 'QuickQuoteObject
            GolfCourseDeductibleId 'QuickQuoteObject
            GolfCourseCoinsuranceTypeId 'QuickQuoteObject
            GolfCartDeductibleId 'QuickQuoteObject
            GolfCartCoinsuranceTypeId 'QuickQuoteObject
            GolfCartDebrisRemovalCoverageLimitId 'QuickQuoteObject
            'added 5/8/2017 for GAR (could also apply to CAP)
            Liability_UM_UIM_AggregateLiabilityIncrementTypeId 'QuickQuoteObject
            Liability_UM_UIM_DeductibleCategoryTypeId 'QuickQuoteObject
            MedicalPaymentsTypeId 'QuickQuoteObject
            PhysicalDamageCollisionDeductibleId 'QuickQuoteObject
            GarageKeepersOtherThanCollisionBasisTypeId 'QuickQuoteObject
            GarageKeepersOtherThanCollisionDeductibleCategoryTypeId 'QuickQuoteObject
            GarageKeepersOtherThanCollisionTypeId 'QuickQuoteObject
            GarageKeepersOtherThanCollisionDeductibleId 'QuickQuoteObject
            GarageKeepersCollisionBasisTypeId 'QuickQuoteObject
            GarageKeepersCollisionDeductibleId 'QuickQuoteObject
            LiabilityAggregateLiabilityIncrementTypeId 'QuickQuoteLocation
            LiabilityCoverageLimitId 'QuickQuoteLocation
            MedicalPaymentsCoverageLimitId 'QuickQuoteLocation
            UninsuredUnderinsuredMotoristBIandPDCoverageLimitId 'QuickQuoteLocation
            UninsuredUnderinsuredMotoristBIandPDDeductibleId 'QuickQuoteLocation
            'PhysicalDamageOtherThanCollisionStandardOpenLotsDeductibleCategoryTypeId 'QuickQuoteLocation; removed 5/15/2017 for new value good for all PD OtherThanCollision covs
            'PhysicalDamageOtherThanCollisionStandardOpenLotsOtherThanCollisionTypeId 'QuickQuoteLocation; removed 5/15/2017 for new value good for all PD OtherThanCollision covs
            'PhysicalDamageOtherThanCollisionStandardOpenLotsDeductibleId 'QuickQuoteLocation; removed 5/15/2017 for new value good for all PD OtherThanCollision covs
            PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId 'QuickQuoteLocation; added 5/15/2017 for all PD OtherThanCollision covs
            PhysicalDamageOtherThanCollisionTypeId 'QuickQuoteLocation; added 5/15/2017 for all PD OtherThanCollision covs
            PhysicalDamageOtherThanCollisionDeductibleId 'QuickQuoteLocation; added 5/15/2017 for all PD OtherThanCollision covs
            DealersBlanketCollisionDeductibleId 'QuickQuoteLocation
            'GarageKeepersOtherThanCollisionDeductibleCategoryTypeId 'QuickQuoteLocation
            'GarageKeepersOtherThanCollisionTypeId 'QuickQuoteLocation
            'GarageKeepersOtherThanCollisionDeductibleId 'QuickQuoteLocation
            'GarageKeepersCollisionDeductibleId 'QuickQuoteLocation
            Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId 'added 5/16/2017; QuickQuoteObject; same as Location
            Locations_PhysicalDamageOtherThanCollisionTypeId 'added 5/16/2017; QuickQuoteObject; same as Location
            Locations_PhysicalDamageOtherThanCollisionDeductibleId 'added 5/16/2017; QuickQuoteObject; same as Location

            'added 10/30/2017 for BOP/CPR Equipment Breakdown
            EquipmentBreakdown_MBR_PollutantCleanupRemovalCoverageLimitId 'QuickQuoteLocation
            EquipmentBreakdown_MBR_PollutantCleanupRemovalDeductibleId 'QuickQuoteLocation
            EquipmentBreakdown_MBR_RefrigerantContaminationCoverageLimitId 'QuickQuoteLocation
            EquipmentBreakdown_MBR_RefrigerantContaminationDeductibleId 'QuickQuoteLocation
            EquipmentBreakdown_MBR_SpoilageCoverageLimitId 'QuickQuoteLocation
            EquipmentBreakdown_MBR_SpoilageDeductibleId 'QuickQuoteLocation

            ShortFormName 'added 11/21/2017 For HOM upgrade - To help with reusing existing UI logic which use Form Name
            IncreasedCostOfLossId
            Text2

            'added 5/23/2018
            CondoDandODeductibleId 'QuickQuoteObject

            AnnualMileage 'QuickQuoteVehicle 5-8-18; originally from PARAchute branch
            PriorBiCoverageCodeLimitId '7-21-18 PARAchute

            'added 9/25/2018
            Liability_UM_UIM_DeductibleId 'QuickQuoteObject; covCodeId 21552
            UninsuredMotoristPropertyDamageDeductibleId 'QuickQuoteObject; covCodeId 21539
            UnderinsuredMotoristBodilyInjuryLiabilityLimitId 'QuickQuoteObject; covCodeId 21548

            'added 9/28/2018
            UnderinsuredCombinedSingleLimitId 'QuickQuoteVehicle; covCodeId 296
            UninsuredBodilyInjuryLimitId 'QuickQuoteVehicle; covCodeId 294
            UnderinsuredBodilyInjuryLimitId 'QuickQuoteVehicle; covCodeId 295

            CyberLiabilityDeductibleId
            CyberLiabilityLimitId

            'added 02/03/2020
            FundsTransferDeductibleId 'QuickQuoteObject; CRM
            ComputerFraudDeductibleId 'QuickQuoteObject; CRM
            ForgeryAlterationDeductibleId 'QuickQuoteObject; CRM

            'added 05/06/2020
            FarmCustomFeedingCattleLimitId 'QuickQuoteObject; FARM
            FarmCustomFeedingEquineLimitId 'QuickQuoteObject; FARM
            FarmCustomFeedingPoultryLimitId 'QuickQuoteObject; FARM
            FarmCustomFeedingSwineLimitId 'QuickQuoteObject; FARM
            FarmSuffocationCattleLimitId 'QuickQuoteObject; FARM
            FarmSuffocationEquineLimitId 'QuickQuoteObject; FARM
            FarmSuffocationPoultryLimitId 'QuickQuoteObject; FARM
            FarmSuffocationSwineLimitId 'QuickQuoteObject; FARM
            LiabilityLimitId 'QuickQuoteCustomFeeding element;

            'added 07/15/2020 - For Ohio and StopGap
            StopGapLimitId

            'Umbrella
            UmbrellaCoverageLimitId 'QuickQuoteObject; Umbrella
            UmbrellaUmUimLimitId 'QuickQuoteObject; Umbrella
            UmbrellaSelfInsuredRetentionLimitId  'QuickQuoteObject; Umbrella
            PersonalLiabilityTypeId  'QuickQuotePersonalLiability; Umbrella
            UmbrellaWaterCraftTypeId 'Umbrella
            UmbrellaVehicleTypeId 'Umbrella
            UmbrellaBodilyInjuryLimit 'Umbrella
            MiscellaneousLiabilityTypeId 'Umbrella
            ProfessionalLiabilityId 'Umbrella
            AnnualReceiptsTypeId 'Umbrella
            UmbrellaRecreationalBodyTypeId 'Umbrella
            UmbrellaMiscellaneousLiabilityTypeId 'Umbrella
            UmbrellaProfessionalLiabilityId 'Umbrella
            UmbrellaAnnualReceiptsTypeId 'Umbrella
            UmbrellaPersonalLiabilityTypeId 'Umbrella
            UmbrellaRecreationalVehicleTypeId 'Umbrella
            UmbrellaDwellingTypeId
            UmbrellaInvestmentPropertyTypeId
            UmbrellaYouthfulOperatorTypeId

            OtherLegalEntityDescription 'QuickQuoteName - Added 2/15/2022 MLW for EntityTypeId 5 = Other, If Other, selected need a description
            NAICS 'QuickQuoteName

            EarthquakeDeductibleId 'QuickQuotePropertyInTheOpenRecord CPP NewCo PropertyInTheOpen Earthquake, Building Earthquake

            FarmAllStarWaterBackupLimitId 'QuickQuoteObject; FAR
            FarmAllStarWaterDamageLimitId 'QuickQuoteObject; FAR

            UmbrellaCombinedAccidentPolicyEmployeeLimitId 'Umbrella

            OwnerOccupiedPercentageId 'QuickQuoteBuilding

            MotorTruckCargoUnScheduledVehicleDeductibleId 'QuickQuoteObject; CIM
        End Enum
        'added 2/13/2014 for logic to determine when to use Coverage.CoverageDetail
        Enum QuickQuoteYesNoMaybeType
            Maybe = 0
            Yes = 1
            No = 2
        End Enum

        'added 8/26/2017
        Enum QuickQuoteEnvironment
            None = 0
            QA = 1
            Patch = 2
            Mirror = 3
            Projects = 4
            NewBuildTest = 5
            NewRelease = 6
            OldRelease = 7
            EOMTest2 = 8
            Production = 9
        End Enum

        'added from VR 4/14/2021
        'these are in order and so the integer value is the same as the table
        'make adjustments as necessary
        Enum DiamondPolicyTypeId
            NA
            None
            AutomobileLiability
            PersonalLiability
            WatercraftLiability
            AircraftLiability
            ProfessionalLiability
            InvestmentPropertyLiability
            RecreationalVehicleLiabilityAuto
            RecreationalVehicleLiabilityHome
            OwnersMulti
            ApartmentUnit
            CondominiumUnit
            Manufactured
            SiteBuilt
            OwnersPossesive
            Renters
            Owned
            Rented
            LifeEstate
            LongTermContract
            VacantOrUnoccupied
            BusinessExposuresLiability
            RealEstateLiability
            RecreationalVehicleLiability
            EmployersLiability
            CommercialFarmLiability
            HomeBasedBusinessLiability
            MotorcycleLiability
            FarmPersonalLiability
            PremisesLiability
            NoPrimaryPolicy
            Owner
            NamedNonOwner
            NamedOperatorGovernmentEmployee
            Individual
            Partnership
            Corporation
            IndividualOther
            Other
            Auto
            Home
            Watercraft
            Motorcycle
            AllOther
            RecreationalVehicleLiabilityAuto2
            RecreationalVehicleLiabilityHome2
            Voluntary
            Ceded
            NonOwned
            FarmLiability
            RecreationalVehicle
            MiscellaneousLiability
            ConventionallyBuilt
            Modular
            Prefab
            Panelized
            MobileHome
            Log
            EmployersLiabilityCoverageB
            Standard
            Preferred
            GeneralLiability
            GarageOwnersLiability
            BusinessOwnersLiability
            WorkersCompLiability
            CPPStandard
            CPPPreferred
            POPStandard
            POPPreferred
            EmployersLiabilityStopGap
            AGGLAgribusinessLiability
            AGGLFarmCommercialLiability
            CoverageQEmployersLiability
            CoverageVEmployersLiability
            HiredAndNonOwnedAutomobileLiability
            DwellingFireLiability
            CommercialAutoLiability
        End Enum
        Public Shared Function QuickQuoteDatabaseConnectionStringForEnvironment(ByVal qqEnv As QuickQuoteEnvironment) As String
            Dim strConnQQ As String = ""

            Dim keyName As String = QuickQuoteDatabaseConnectionStringConfigKeyNameForEnvironment(qqEnv)
            If String.IsNullOrWhiteSpace(keyName) = False Then
                strConnQQ = configAppSettingValueAsString(keyName)
            End If

            Return strConnQQ
        End Function
        Public Shared Function QuickQuoteDatabaseConnectionStringConfigKeyNameForEnvironment(ByVal qqEnv As QuickQuoteEnvironment) As String
            Dim keyName As String = ""

            If qqEnv <> QuickQuoteEnvironment.None Then
                Select Case qqEnv
                    Case QuickQuoteEnvironment.QA
                        keyName = "connQQ_QA"
                    Case QuickQuoteEnvironment.Patch
                        keyName = "connQQ_Patch"
                    Case QuickQuoteEnvironment.Mirror
                        keyName = "connQQ_Mirror"
                    Case QuickQuoteEnvironment.Projects
                        keyName = "connQQ_Projects"
                    Case QuickQuoteEnvironment.NewBuildTest
                        keyName = "connQQ_NewBuildTest"
                    Case QuickQuoteEnvironment.NewRelease
                        keyName = "connQQ_NewRelease"
                    Case QuickQuoteEnvironment.OldRelease
                        keyName = "connQQ_OldRelease"
                    Case QuickQuoteEnvironment.EOMTest2
                        keyName = "connQQ_EOMTest2"
                    Case QuickQuoteEnvironment.Production
                        keyName = "connQQ_Prod"
                    Case Else

                End Select
            End If

            Return keyName
        End Function

        'Public Function GetAttributeValue(ByVal currentNode As XmlNode, ByVal attName As String) As String
        'updated 2/5/2015 w/ optional ByRef param
        Public Function GetAttributeValue(ByVal currentNode As XmlNode, ByVal attName As String, Optional ByRef hasAttribute As Boolean = False) As String
            GetAttributeValue = ""
            hasAttribute = False 'added 2/5/2015

            If Not currentNode.Attributes(attName) Is Nothing Then
                GetAttributeValue = currentNode.Attributes(attName).Value
                hasAttribute = True 'added 2/5/2015
            ElseIf currentNode.Attributes(attName.ToUpper) IsNot Nothing Then
                GetAttributeValue = currentNode.Attributes(attName.ToUpper).Value
                hasAttribute = True 'added 2/5/2015
            ElseIf currentNode.Attributes(attName.ToLower) IsNot Nothing Then
                GetAttributeValue = currentNode.Attributes(attName.ToLower).Value
                hasAttribute = True 'added 2/5/2015
            ElseIf currentNode.Attributes(CapitalizeFirstLetter(attName)) IsNot Nothing Then
                GetAttributeValue = currentNode.Attributes(CapitalizeFirstLetter(attName)).Value
                hasAttribute = True 'added 2/5/2015
            End If

        End Function
        'Public Function GetElementValue(ByVal currentNode As XmlNode, ByVal elementName As String) As String
        'updated 2/5/2015 w/ optional ByRef param
        Public Function GetElementValue(ByVal currentNode As XmlNode, ByVal elementName As String, Optional ByRef hasElement As Boolean = False) As String
            GetElementValue = ""
            hasElement = False 'added 2/5/2015

            If Not currentNode.Item(elementName) Is Nothing Then
                GetElementValue = currentNode.Item(elementName).InnerText
                hasElement = True 'added 2/5/2015
            ElseIf currentNode.Item(elementName.ToUpper) IsNot Nothing Then
                GetElementValue = currentNode.Item(elementName.ToUpper).InnerText
                hasElement = True 'added 2/5/2015
            ElseIf currentNode.Item(elementName.ToLower) IsNot Nothing Then
                GetElementValue = currentNode.Item(elementName.ToLower).InnerText
                hasElement = True 'added 2/5/2015
            ElseIf currentNode.Item(CapitalizeFirstLetter(elementName)) IsNot Nothing Then
                GetElementValue = currentNode.Item(CapitalizeFirstLetter(elementName)).InnerText
                hasElement = True 'added 2/5/2015
            End If

        End Function
        'Public Function GetSubElementAttributeValue(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal attName As String) As String
        'updated 2/5/2015 w/ optional ByRef params
        Public Function GetSubElementAttributeValue(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal attName As String, Optional ByRef hasElement As Boolean = False, Optional ByRef hasAttribute As Boolean = False) As String
            GetSubElementAttributeValue = ""
            hasElement = False 'added 2/5/2015
            hasAttribute = False 'added 2/5/2015

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)
                hasElement = True 'added 2/5/2015

                GetSubElementAttributeValue = GetAttributeValue(SubNode, attName, hasAttribute) 'updated 2/5/2015 to send optional param
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                hasElement = True 'added 2/5/2015

                GetSubElementAttributeValue = GetAttributeValue(SubNode, attName, hasAttribute) 'updated 2/5/2015 to send optional param
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                hasElement = True 'added 2/5/2015

                GetSubElementAttributeValue = GetAttributeValue(SubNode, attName, hasAttribute) 'updated 2/5/2015 to send optional param
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                hasElement = True 'added 2/5/2015

                GetSubElementAttributeValue = GetAttributeValue(SubNode, attName, hasAttribute) 'updated 2/5/2015 to send optional param
            End If
        End Function
        'Public Function GetSubElement(ByVal currentNode As XmlNode, ByVal subElementName As String) As XmlNode
        'updated 2/5/2015 w/ optional ByRef param
        Public Function GetSubElement(ByVal currentNode As XmlNode, ByVal subElementName As String, Optional ByRef hasElement As Boolean = False) As XmlNode
            GetSubElement = Nothing
            hasElement = False 'added 2/5/2015

            If Not currentNode.Item(subElementName) Is Nothing Then
                GetSubElement = currentNode.Item(subElementName)
                hasElement = True 'added 2/5/2015

            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                GetSubElement = currentNode.Item(subElementName.ToUpper)
                hasElement = True 'added 2/5/2015

            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                GetSubElement = currentNode.Item(subElementName.ToLower)
                hasElement = True 'added 2/5/2015

            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                GetSubElement = currentNode.Item(CapitalizeFirstLetter(subElementName))
                hasElement = True 'added 2/5/2015

            End If
        End Function
        Public Function GetSubElement2DeepAttributeValue(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal secondSubElementName As String, ByVal attName As String) As String
            GetSubElement2DeepAttributeValue = ""

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)

                'If Not SubNode.Item(secondSubElementName) Is Nothing Then
                '    SubNode = SubNode.Item(secondSubElementName)

                '    GetSubElement2DeepAttributeValue = GetAttributeValue(SubNode, attName)
                'End If
                GetSubElement2DeepAttributeValue = GetSubElementAttributeValue(SubNode, secondSubElementName, attName)
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                GetSubElement2DeepAttributeValue = GetSubElementAttributeValue(SubNode, secondSubElementName, attName)
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                GetSubElement2DeepAttributeValue = GetSubElementAttributeValue(SubNode, secondSubElementName, attName)
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                GetSubElement2DeepAttributeValue = GetSubElementAttributeValue(SubNode, secondSubElementName, attName)
            End If
        End Function
        Public Function GetSubElement2Deep(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal secondSubElementName As String) As XmlNode
            GetSubElement2Deep = Nothing

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)
                GetSubElement2Deep = GetSubElement(SubNode, secondSubElementName)
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                GetSubElement2Deep = GetSubElement(SubNode, secondSubElementName)
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                GetSubElement2Deep = GetSubElement(SubNode, secondSubElementName)
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                GetSubElement2Deep = GetSubElement(SubNode, secondSubElementName)
            End If
        End Function
        Public Function GetSubElement3DeepAttributeValue(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal secondSubElementName As String, ByVal thirdSubElementName As String, ByVal attName As String) As String
            GetSubElement3DeepAttributeValue = ""

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)

                'If Not SubNode.Item(secondSubElementName) Is Nothing Then
                '    SubNode = SubNode.Item(secondSubElementName)

                '    If Not SubNode.Item(thirdSubElementName) Is Nothing Then
                '        SubNode = SubNode.Item(thirdSubElementName)

                '        GetSubElement3DeepAttributeValue = GetAttributeValue(SubNode, attName)
                '    End If

                'End If
                GetSubElement3DeepAttributeValue = GetSubElement2DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, attName)
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                GetSubElement3DeepAttributeValue = GetSubElement2DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, attName)
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                GetSubElement3DeepAttributeValue = GetSubElement2DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, attName)
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                GetSubElement3DeepAttributeValue = GetSubElement2DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, attName)
            End If
        End Function
        Public Function GetSubElement3Deep(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal secondSubElementName As String, ByVal thirdSubElementName As String) As XmlNode
            GetSubElement3Deep = Nothing

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)
                GetSubElement3Deep = GetSubElement2Deep(SubNode, secondSubElementName, thirdSubElementName)
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                GetSubElement3Deep = GetSubElement2Deep(SubNode, secondSubElementName, thirdSubElementName)
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                GetSubElement3Deep = GetSubElement2Deep(SubNode, secondSubElementName, thirdSubElementName)
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                GetSubElement3Deep = GetSubElement2Deep(SubNode, secondSubElementName, thirdSubElementName)
            End If
        End Function
        Public Function GetSubElement4DeepAttributeValue(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal secondSubElementName As String, ByVal thirdSubElementName As String, ByVal fourthSubElementName As String, ByVal attName As String) As String
            GetSubElement4DeepAttributeValue = ""

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)

                'If Not SubNode.Item(secondSubElementName) Is Nothing Then
                '    SubNode = SubNode.Item(secondSubElementName)

                '    If Not SubNode.Item(thirdSubElementName) Is Nothing Then
                '        SubNode = SubNode.Item(thirdSubElementName)

                '        If Not SubNode.Item(fourthSubElementName) Is Nothing Then
                '            SubNode = SubNode.Item(fourthSubElementName)

                '            GetSubElement4DeepAttributeValue = GetAttributeValue(SubNode, attName)
                '        End If
                '    End If

                'End If
                GetSubElement4DeepAttributeValue = GetSubElement3DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName, attName)
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                GetSubElement4DeepAttributeValue = GetSubElement3DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName, attName)
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                GetSubElement4DeepAttributeValue = GetSubElement3DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName, attName)
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                GetSubElement4DeepAttributeValue = GetSubElement3DeepAttributeValue(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName, attName)
            End If
        End Function
        Public Function GetSubElement4Deep(ByVal currentNode As XmlNode, ByVal subElementName As String, ByVal secondSubElementName As String, ByVal thirdSubElementName As String, ByVal fourthSubElementName As String) As XmlNode
            GetSubElement4Deep = Nothing

            If Not currentNode.Item(subElementName) Is Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName)
                GetSubElement4Deep = GetSubElement3Deep(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName)
            ElseIf currentNode.Item(subElementName.ToUpper) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToUpper)
                GetSubElement4Deep = GetSubElement3Deep(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName)
            ElseIf currentNode.Item(subElementName.ToLower) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(subElementName.ToLower)
                GetSubElement4Deep = GetSubElement3Deep(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName)
            ElseIf currentNode.Item(CapitalizeFirstLetter(subElementName)) IsNot Nothing Then
                Dim SubNode As XmlNode = currentNode.Item(CapitalizeFirstLetter(subElementName))
                GetSubElement4Deep = GetSubElement3Deep(SubNode, secondSubElementName, thirdSubElementName, fourthSubElementName)
            End If
        End Function
        Public Function CapitalizeFirstLetter(ByVal txt As String) As String
            CapitalizeFirstLetter = ""

            If txt <> "" Then
                CapitalizeFirstLetter = Left(txt, 1).ToUpper & Right(txt, Len(txt) - 1).ToLower
            End If
        End Function
        Public Function getSelectedOrNotSelectedText(ByVal TorF As Boolean) As String
            Return If(TorF, "Selected", "Not Selected")
        End Function

        Public Function doUseNewBOPVersion(ByVal EffectiveDate As String) As Boolean '3/9/2017 - BOP stuff
            Dim NewBOPEffectiveDate As String = ConfigurationManager.AppSettings("NewBopEffectiveDate")
            If String.IsNullOrWhiteSpace(NewBOPEffectiveDate) OrElse Not IsDate(NewBOPEffectiveDate) Then
                NewBOPEffectiveDate = CDate("01/01/2017")
            End If

            If Not String.IsNullOrWhiteSpace(EffectiveDate) AndAlso IsDate(EffectiveDate) Then
                If CDate(EffectiveDate) >= CDate(NewBOPEffectiveDate) Then
                    Return True
                Else
                    Return False
                End If
            Else
                Return False
            End If
        End Function

        Public Function doUseNewVersionOfLOB(ByVal QuoteEffectiveDate As String, ByVal QuoteLOBType As QuickQuoteObject.QuickQuoteLobType, ByVal LOBNewVersion As LOBIFMVersions, Optional FallBackNewVersionDate As Date = Nothing) As Boolean
            Dim chc As New CommonHelperClass
            Dim appConfigDate As String = chc.ConfigurationAppSettingValueAsString(GetIFMLOBVersionKeyNameFromEnum(LOBNewVersion))
            Dim versionStartDate As Date
            Dim effectiveDate As Date
            Dim returnVar As Boolean
            Dim relatedLOBTypes As List(Of QuickQuoteObject.QuickQuoteLobType) = GetIFMLOBVersionLOBTypeRelationsListByEnum(LOBNewVersion)

            If relatedLOBTypes.Contains(QuoteLOBType) Then
                If Not String.IsNullOrWhiteSpace(appConfigDate) AndAlso IsDate(appConfigDate) Then
                    versionStartDate = CDate(appConfigDate)
                Else
                    If FallBackNewVersionDate <> Nothing Then
                        versionStartDate = FallBackNewVersionDate
                    End If
                End If

                If Not String.IsNullOrWhiteSpace(QuoteEffectiveDate) AndAlso IsDate(QuoteEffectiveDate) Then
                    effectiveDate = CDate(QuoteEffectiveDate)
                Else
                    effectiveDate = Date.Today
                End If

                If versionStartDate <> Nothing AndAlso effectiveDate <> Nothing Then
                    If effectiveDate >= versionStartDate Then
                        returnVar = True
                    Else
                        returnVar = False
                    End If
                Else
                    returnVar = False
                End If
            Else
                returnVar = False
            End If

            Return returnVar
        End Function

        Public Function doUseNewVersionOfLOB(ByVal Quote As QuickQuoteObject, ByVal LOBNewVersion As LOBIFMVersions, Optional FallBackNewVersionDate As Date = Nothing) As Boolean
            Dim returnVar As Boolean = False
            Dim requiredState As QuickQuoteState = QuickQuoteState.None

            If Quote IsNot Nothing Then
                If QuoteContainsRequiredIFMVersionState(Quote, requiredState, LOBNewVersion) OrElse requiredState = QuickQuoteState.None Then
                    returnVar = doUseNewVersionOfLOB(Quote.EffectiveDate, Quote.LobType, LOBNewVersion, FallBackNewVersionDate)
                End If
            End If

            Return returnVar
        End Function

        Private Function GetShortFormNameCore(ByVal Quote As QuickQuoteObject, ByRef IFMFormName As String) As String
            Dim returnVar As String = ""
            Dim chc As New CommonHelperClass

            'If Quote IsNot Nothing AndAlso Quote.Locations IsNot Nothing AndAlso Quote.Locations.Any AndAlso Quote.Locations(0) IsNot Nothing Then
            'updated 9/14/2018 to 2 IFs
            If Quote IsNot Nothing Then
                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(Quote, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Any AndAlso qqLocations(0) IsNot Nothing Then 'added IF 9/14/2018
                    Dim myEffectivedate As String = Quote.EffectiveDate

                    If String.IsNullOrWhiteSpace(myEffectivedate) Then
                        myEffectivedate = Date.Today
                    End If

                    If doUseNewVersionOfLOB(myEffectivedate, Quote.LobType, LOBIFMVersions.HOM2018Upgrade, "7/1/2018") = True Then
                        Dim myStructureTypeId As String = ""
                        Dim optionList As New List(Of QuickQuoteStaticDataAttribute)

                        'If chc.NumericStringComparison(Quote.Locations(0).StructureTypeId, CommonHelperClass.ComparisonOperators.GreaterThan, 0) Then
                        'updated 9/14/2018
                        If chc.NumericStringComparison(qqLocations(0).StructureTypeId, CommonHelperClass.ComparisonOperators.GreaterThan, 0) Then
                            'myStructureTypeId = Quote.Locations(0).StructureTypeId
                            'updated 9/14/2018
                            myStructureTypeId = qqLocations(0).StructureTypeId
                        Else
                            myStructureTypeId = "1" 'This method is used in places that the quote object's structuretypeid may not yet be set. So I will default to a non-mobile home structure type. This is because in the new version of HOM we are setting the structure type right away for mobile types.
                        End If

                        Dim myOption As New QuickQuoteStaticDataAttribute
                        myOption.nvp_name = "structureTypeID"
                        myOption.nvp_value = myStructureTypeId
                        optionList.Add(myOption)

                        'returnVar = GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FormTypeId, optionList, Quote.Locations(0).FormTypeId, QuickQuotePropertyName.ShortFormName, Quote.LobType, PersOrComm.Pers)
                        'IFMFormName = GetStaticDataTextForValue_MatchingOptionAttributes(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FormTypeId, optionList, Quote.Locations(0).FormTypeId, Quote.LobType)
                        'updated 9/14/2018
                        returnVar = GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FormTypeId, optionList, qqLocations(0).FormTypeId, QuickQuotePropertyName.ShortFormName, Quote.LobType, PersOrComm.Pers)
                        IFMFormName = GetStaticDataTextForValue_MatchingOptionAttributes(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FormTypeId, optionList, qqLocations(0).FormTypeId, Quote.LobType)
                    Else
                        'returnVar = GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.FormTypeId, Quote.Locations(0).FormTypeId).Substring(0, 4)
                        'IFMFormName = GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.FormTypeId, Quote.Locations(0).FormTypeId)
                        'updated 9/14/2018
                        returnVar = GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.FormTypeId, qqLocations(0).FormTypeId).Substring(0, 4)
                        IFMFormName = GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.FormTypeId, qqLocations(0).FormTypeId)
                    End If
                End If
            End If

            Return returnVar
        End Function

        Public Function GetShortFormName(ByVal Quote As QuickQuoteObject) As String
            Return GetShortFormNameCore(Quote, "")
        End Function

        Public Function GetShortFormName(ByVal Quote As QuickQuoteObject, ByRef IFMFormName As String) As String
            Return GetShortFormNameCore(Quote, IFMFormName)
        End Function

        Public Function GetIFMLOBVersionDate(ByVal LOBIFMVersion As LOBIFMVersions) As String
            Dim returnVar As String = Nothing

            Dim chc As New CommonHelperClass
            Dim myDate As String = chc.ConfigurationAppSettingValueAsString(GetIFMLOBVersionKeyNameFromEnum(LOBIFMVersion))
            If String.IsNullOrWhiteSpace(myDate) = False Then
                returnVar = myDate
            End If

            Return returnVar
        End Function


        Private Function GetIFMLOBVersionKeyNameFromEnum(ByVal LOBIFMVersion As LOBIFMVersions) As String
            Dim returnVar As String = Nothing

            If Not String.IsNullOrWhiteSpace(LOBIFMVersion) Then
                returnVar = "QuickQuote_LOBIFMVersions_" & LOBIFMVersion.ToString()
            End If

            Return returnVar
        End Function

        Private Function GetIFMLOBVersionLOBTypeRelationKeyNameFromEnum(ByVal LOBIFMVersion As LOBIFMVersions) As String
            Dim returnVar As String = Nothing

            If Not String.IsNullOrWhiteSpace(LOBIFMVersion) Then
                returnVar = "QuickQuote_LOBIFMVersions_LOBTypeRelation_" & LOBIFMVersion.ToString()
            End If

            Return returnVar
        End Function

        Private Function GetIFMLOBVersionRequiredStateKeyNameFromEnum(ByVal LOBIFMVersion As LOBIFMVersions) As String
            Dim returnVar As String = Nothing

            If Not String.IsNullOrWhiteSpace(LOBIFMVersion) Then
                returnVar = "QuickQuote_LOBIFMVersions_LOBRequiredStateRelation_" & LOBIFMVersion.ToString()
            End If

            Return returnVar
        End Function

        Private Function HasIFMLOBVersionRequiredState(ByVal LOBIFMVersion As LOBIFMVersions, ByRef State As QuickQuoteState) As Boolean
            Dim chc As New CommonHelperClass
            Dim stateString As String = chc.ConfigurationAppSettingValueAsString(GetIFMLOBVersionRequiredStateKeyNameFromEnum(LOBIFMVersion))
            If String.IsNullOrWhiteSpace(stateString) = False Then
                If [Enum].IsDefined(GetType(QuickQuoteState), stateString) Then
                    State = [Enum].Parse(GetType(QuickQuoteState), stateString)
                    Return True
                Else
                    State = QuickQuoteState.None
                    Return False
                End If
            Else
                State = QuickQuoteState.None
                Return False
            End If
        End Function

        Public Function GetIFMLOBVersionLOBTypeRelationsListByEnum(ByVal LOBIFMVersion As LOBIFMVersions) As List(Of QuickQuoteObject.QuickQuoteLobType)
            Dim chc As New CommonHelperClass
            Dim LOBString As String = chc.ConfigurationAppSettingValueAsString(GetIFMLOBVersionLOBTypeRelationKeyNameFromEnum(LOBIFMVersion))
            Dim LOBList As New List(Of QuickQuoteObject.QuickQuoteLobType)

            If String.IsNullOrWhiteSpace(LOBString) = False Then
                If LOBString.Contains(",") Then
                    For Each lobType As String In LOBString.Split(",")
                        If String.IsNullOrWhiteSpace(lobType) = False Then
                            If [Enum].IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) Then
                                LOBList.Add([Enum].Parse(GetType(QuickQuoteObject.QuickQuoteLobType), lobType))
                            End If
                        End If
                    Next
                Else
                    If [Enum].IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), LOBString) Then
                        LOBList.Add([Enum].Parse(GetType(QuickQuoteObject.QuickQuoteLobType), LOBString))
                    End If
                End If
            Else
                LOBList = Nothing
            End If

            Return LOBList
        End Function

        ''' <summary>
        ''' This returns a list of versions that have an uncrossable date line associated with them. An uncrossable date line is a specific date that, when the current date is before, you are not allowed to quote on or after the date. If the current date is on or after the date, you are not allowed to quote before the date.
        ''' </summary>
        ''' <returns>List(of LOBIFMVersions)</returns>
        Public Function GetIFMLOBVersionsListThatHaveUncrossableDateLine() As List(Of LOBIFMVersions)
            Dim chc As New CommonHelperClass
            Dim versions As String = chc.ConfigurationAppSettingValueAsString("QuickQuote_LOBIFMVersions_VersionsThatHaveUncrossableDateLine")
            Dim versionsList As New List(Of LOBIFMVersions)
            If String.IsNullOrWhiteSpace(versions) = False Then
                If versions.Contains(",") Then
                    For Each ver As String In versions.Split(",")
                        If String.IsNullOrWhiteSpace(ver) = False Then
                            If [Enum].IsDefined(GetType(LOBIFMVersions), ver) Then
                                versionsList.Add([Enum].Parse(GetType(LOBIFMVersions), ver))
                            End If
                        End If
                    Next
                Else
                    If [Enum].IsDefined(GetType(LOBIFMVersions), versions) Then
                        versionsList.Add([Enum].Parse(GetType(LOBIFMVersions), versions))
                    End If
                End If
            Else
                versionsList = Nothing
            End If

            Return versionsList
        End Function

        Private Function QuoteContainsRequiredIFMVersionState(Quote As QuickQuoteObject, ByRef requiredState As QuickQuoteState, UncrossableVersion As LOBIFMVersions) As Boolean
            Dim returnVar As Boolean = False

            If Quote IsNot Nothing Then
                returnVar = QuoteContainsRequiredIFMVersionState(QuickQuoteStatesForQuote(Quote), requiredState, UncrossableVersion)
            End If

            Return returnVar
        End Function

        Private Function QuoteContainsRequiredIFMVersionState(QuoteStates As List(Of QuickQuoteState), ByRef requiredState As QuickQuoteState, UncrossableVersion As LOBIFMVersions) As Boolean
            Dim returnVar As Boolean = False
            Dim chc As New CommonHelperClass

            If QuoteStates IsNot Nothing AndAlso QuoteStates.Count > 0 Then
                If HasIFMLOBVersionRequiredState(UncrossableVersion, requiredState) Then
                    If QuoteStates.Contains(requiredState) Then
                        returnVar = True
                    End If
                End If
            Else
                requiredState = QuickQuoteState.None
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks to see if the specified LOB has an uncrossable date line associated with it.
        ''' </summary>
        ''' <param name="Quote"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLine(ByVal Quote As QuickQuoteObject, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If Quote IsNot Nothing Then
                returnVar = HasIFMLOBVersionUncrossableDateLine(QuickQuoteStatesForQuote(Quote), Quote.LobType, IFMLOBVersionDictionary)
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks to see if the specified LOB has an uncrossable date line associated with it.
        ''' </summary>
        ''' <param name="QuoteStates"></param>
        ''' <param name="LOBType"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLine(ByVal QuoteStates As List(Of QuickQuoteState), ByVal LOBType As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If IFMLOBVersionDictionary IsNot Nothing Then
                IFMLOBVersionDictionary = Nothing
            End If

            If IFMLOBVersionDictionary Is Nothing Then
                IFMLOBVersionDictionary = New Dictionary(Of LOBIFMVersions, String)
            End If

            Dim UncrossableVersionList As List(Of LOBIFMVersions) = GetIFMLOBVersionsListThatHaveUncrossableDateLine()
            Dim requiredState As QuickQuoteState
            If UncrossableVersionList IsNot Nothing AndAlso UncrossableVersionList.Count > 0 Then
                For Each UncrossableVersion As LOBIFMVersions In UncrossableVersionList
                    Dim skipVersionCheck As Boolean = False

                    If QuoteStates Is Nothing Then
                        Dim chc As New CommonHelperClass
                        Dim stateString As String = chc.ConfigurationAppSettingValueAsString(GetIFMLOBVersionRequiredStateKeyNameFromEnum(UncrossableVersion))
                        If String.IsNullOrWhiteSpace(stateString) = False Then
                            skipVersionCheck = True
                        End If
                    End If

                    If skipVersionCheck = False AndAlso (QuoteContainsRequiredIFMVersionState(QuoteStates, requiredState, UncrossableVersion) OrElse requiredState = QuickQuoteState.None) Then
                        Dim relatedLOBs As List(Of QuickQuoteObject.QuickQuoteLobType) = GetIFMLOBVersionLOBTypeRelationsListByEnum(UncrossableVersion)
                        If relatedLOBs IsNot Nothing AndAlso relatedLOBs.Count > 0 AndAlso relatedLOBs.Contains(LOBType) Then
                            Dim myDate As String = GetIFMLOBVersionDate(UncrossableVersion)
                            IFMLOBVersionDictionary.Add(UncrossableVersion, myDate)
                        End If
                    End If
                Next
            End If

            If IFMLOBVersionDictionary.Count > 0 Then
                returnVar = True
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks to see if the specified LOB has an uncrossable date line associated with it that is also within the allowed quoting range.
        ''' </summary>
        ''' <param name="Quote"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLineWithinRangeOfToday(ByVal Quote As QuickQuoteObject, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If Quote IsNot Nothing Then
                returnVar = HasIFMLOBVersionUncrossableDateLineWithinRangeOfToday(QuickQuoteStatesForQuote(Quote), Quote.LobType, IFMLOBVersionDictionary)
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks to see if the specified LOB has an uncrossable date line associated with it that is also within the allowed quoting range.
        ''' </summary>
        ''' <param name="QuoteStates"></param>
        ''' <param name="LOBType"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLineWithinRangeOfToday(ByVal QuoteStates As List(Of QuickQuoteState), ByVal LOBType As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = HasIFMLOBVersionUncrossableDateLine(QuoteStates, LOBType, IFMLOBVersionDictionary)

            If returnVar = True Then
                If IFMLOBVersionDictionary IsNot Nothing AndAlso IFMLOBVersionDictionary.Count > 0 Then
                    Dim chc As New CommonHelperClass
                    Dim minKeyExists As Boolean
                    Dim maxKeyExists As Boolean
                    Dim min As Integer = chc.ConfigurationAppSettingValueAsInteger("VR_MinimumEffectiveDateDaysFromToday", minKeyExists)
                    Dim max As Integer = chc.ConfigurationAppSettingValueAsInteger("VR_MaximumEffectiveDateDaysFromToday", maxKeyExists)

                    If maxKeyExists AndAlso minKeyExists Then
                        Dim minDate As Date = Date.Now.AddDays(min).Date
                        Dim maxDate As Date = Date.Now.AddDays(max).Date
                        Dim itemsToRemove As New List(Of LOBIFMVersions)

                        For Each dictPair As KeyValuePair(Of LOBIFMVersions, String) In IFMLOBVersionDictionary
                            If String.IsNullOrWhiteSpace(dictPair.Value) = False AndAlso IsDate(dictPair.Value) Then
                                Dim uncrossableDate As Date = CDate(dictPair.Value).Date
                                If uncrossableDate < minDate OrElse uncrossableDate > maxDate Then
                                    itemsToRemove.Add(dictPair.Key)
                                End If
                            End If
                        Next

                        If itemsToRemove IsNot Nothing AndAlso itemsToRemove.Count > 0 Then
                            For Each item As LOBIFMVersions In itemsToRemove
                                IFMLOBVersionDictionary.Remove(item)
                            Next
                        End If

                        If IFMLOBVersionDictionary IsNot Nothing AndAlso IFMLOBVersionDictionary.Count > 0 Then
                            returnVar = True
                        Else
                            returnVar = False
                        End If
                    End If
                Else
                    returnVar = False
                End If
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks if there is an associated IFMLOBVersion with the passed LOBType. If so, it then checks if the IFMLOBVersion is before the passed effective date.
        ''' </summary>
        ''' <param name="Quote"></param>
        ''' <param name="EffectiveDate"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Private Function HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDate(ByVal Quote As QuickQuoteObject, ByVal EffectiveDate As String, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If Quote IsNot Nothing Then
                returnVar = HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDate(QuickQuoteStatesForQuote(Quote), Quote.LobType, EffectiveDate, IFMLOBVersionDictionary)
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks if there is an associated IFMLOBVersion with the passed LOBType. If so, it then checks if the IFMLOBVersion is before the passed effective date.
        ''' </summary>
        ''' <param name="QuoteStates"></param>
        ''' <param name="LOBType"></param>
        ''' <param name="EffectiveDate"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Private Function HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDate(ByVal QuoteStates As List(Of QuickQuoteState), ByVal LOBType As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType, ByVal EffectiveDate As String, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If IsDate(EffectiveDate) Then
                returnVar = HasIFMLOBVersionUncrossableDateLine(QuoteStates, LOBType, IFMLOBVersionDictionary)
                If returnVar = True Then
                    If IFMLOBVersionDictionary IsNot Nothing AndAlso IFMLOBVersionDictionary.Count > 0 Then
                        Dim itemsToRemove As New List(Of LOBIFMVersions)
                        Dim requiredState As QuickQuoteState
                        For Each dictPair As KeyValuePair(Of LOBIFMVersions, String) In IFMLOBVersionDictionary
                            If QuoteContainsRequiredIFMVersionState(QuoteStates, requiredState, dictPair.Key) OrElse requiredState = QuickQuoteState.None Then
                                If String.IsNullOrWhiteSpace(dictPair.Value) = False AndAlso IsDate(dictPair.Value) Then
                                    Dim uncrossableDate As Date = CDate(dictPair.Value).Date
                                    If uncrossableDate >= CDate(EffectiveDate).Date Then
                                        itemsToRemove.Add(dictPair.Key)
                                    End If
                                End If
                            End If
                        Next

                        If itemsToRemove IsNot Nothing AndAlso itemsToRemove.Count > 0 Then
                            For Each item As LOBIFMVersions In itemsToRemove
                                IFMLOBVersionDictionary.Remove(item)
                            Next
                        End If

                        If IFMLOBVersionDictionary IsNot Nothing AndAlso IFMLOBVersionDictionary.Count > 0 Then
                            returnVar = True
                        Else
                            returnVar = False
                        End If
                    Else
                        returnVar = False
                    End If
                End If
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks if there is an associated IFMLOBVersion for the passed LOBType. If so, checks to see if its date is before the effective date. Lastly, it checks if the uncrossable date is within range of the allowed effective date range.
        ''' </summary>
        ''' <param name="Quote"></param>
        ''' <param name="EffectiveDate"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(ByVal Quote As QuickQuoteObject, ByVal EffectiveDate As String, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If Quote IsNot Nothing Then
                returnVar = HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(QuickQuoteStateForQuote(Quote), Quote.LobType, EffectiveDate, IFMLOBVersionDictionary)
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks if there is an associated IFMLOBVersion for the passed LOBType. If so, checks to see if its date is before the effective date. Lastly, it checks if the uncrossable date is within range of the allowed effective date range.
        ''' </summary>
        ''' <param name="QuoteStates"></param>
        ''' <param name="LOBType"></param>
        ''' <param name="EffectiveDate"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(ByVal QuoteStates As List(Of QuickQuoteState), ByVal LOBType As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType, ByVal EffectiveDate As String, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            If IsDate(EffectiveDate) AndAlso HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDate(QuoteStates, LOBType, EffectiveDate, IFMLOBVersionDictionary) Then
                Dim minDate As Date = Date.Now.AddDays(MinimumEffectiveDateDaysFromToday()).Date
                Dim requiredState As QuickQuoteState = QuickQuoteState.None

                For Each dictPair As KeyValuePair(Of LOBIFMVersions, String) In IFMLOBVersionDictionary
                    If QuoteContainsRequiredIFMVersionState(QuoteStates, requiredState, dictPair.Key) OrElse requiredState = QuickQuoteState.None Then
                        If String.IsNullOrWhiteSpace(dictPair.Value) = False AndAlso IsDate(dictPair.Value) Then
                            Dim uncrossableDate As Date = CDate(dictPair.Value).Date
                            If uncrossableDate < minDate Then
                                Return True
                            End If
                        End If
                    End If
                Next
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks if there is an associated IFMLOBVersion for the passed LOBType. If so, checks to see if its date is before the effective date. Lastly, it checks if the uncrossable date is within range of the allowed effective date range.
        ''' </summary>
        ''' <param name="QuoteStateTypeId"></param>
        ''' <param name="LOBType"></param>
        ''' <param name="EffectiveDate"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(ByVal QuoteStateTypeId As String, ByVal LOBType As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType, ByVal EffectiveDate As String, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            returnVar = HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(QuickQuoteStateForDiamondStateId(QuoteStateTypeId, True), LOBType, EffectiveDate, IFMLOBVersionDictionary)

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks if there is an associated IFMLOBVersion for the passed LOBType. If so, checks to see if its date is before the effective date. Lastly, it checks if the uncrossable date is within range of the allowed effective date range.
        ''' </summary>
        ''' <param name="QuoteStateTypeIds"></param>
        ''' <param name="LOBType"></param>
        ''' <param name="EffectiveDate"></param>
        ''' <param name="IFMLOBVersionDictionary"></param>
        ''' <returns></returns>
        Public Function HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(ByVal QuoteStateTypeIds As List(Of String), ByVal LOBType As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType, ByVal EffectiveDate As String, ByRef IFMLOBVersionDictionary As Dictionary(Of LOBIFMVersions, String)) As Boolean
            Dim returnVar As Boolean = False

            For Each id As String In QuoteStateTypeIds
                If String.IsNullOrWhiteSpace(id) Then
                    returnVar = HasIFMLOBVersionUncrossableDateLineBeforeEffectiveDateAndIsOutsideAcceptableEffectiveDateRange(id, LOBType, EffectiveDate, IFMLOBVersionDictionary)
                    If returnVar = True Then
                        Exit For
                    End If
                End If
            Next

            Return returnVar
        End Function

        ''' <summary>
        ''' Checks to see if the LOBType has an associated uncrossable date line. If it does, checks to see if the original date to new date crosses the uncrossable date.
        ''' </summary>
        ''' <param name="Quote"></param>
        ''' <param name="OriginalDate"></param>
        ''' <param name="NewDate"></param>
        ''' <param name="ErrorMessage"></param>
        ''' <returns></returns>
        Public Function IsEffectiveDateChangeCrossingUncrossableDateLine(ByVal Quote As QuickQuoteObject, ByVal OriginalDate As Date, ByVal NewDate As Date, ByRef ErrorMessage As String) As Boolean
            Dim returnVar As Boolean = False
            Dim IFMLOBVersionDict As New Dictionary(Of QuickQuote.CommonMethods.QuickQuoteHelperClass.LOBIFMVersions, String)
            ErrorMessage = ""

            Dim chc As New CommonHelperClass
            Dim keyExists As Boolean = False
            Dim appConfigMessage As String = ""

            If HasIFMLOBVersionUncrossableDateLineWithinRangeOfToday(Quote, IFMLOBVersionDict) Then
                For Each ifmVersionPair As KeyValuePair(Of QuickQuoteHelperClass.LOBIFMVersions, String) In IFMLOBVersionDict
                    Dim requiredState As QuickQuoteState = QuickQuoteState.None

                    If QuoteContainsRequiredIFMVersionState(Quote, requiredState, ifmVersionPair.Key) OrElse requiredState = QuickQuoteState.None Then
                        If String.IsNullOrWhiteSpace(ifmVersionPair.Value) = False AndAlso IsDate(ifmVersionPair.Value) Then
                            Dim thisUncrossableDate As Date = CDate(ifmVersionPair.Value)
                            If NewDate >= thisUncrossableDate AndAlso OriginalDate < thisUncrossableDate Then
                                'Can't cross date
                                returnVar = True
                                appConfigMessage = chc.ConfigurationAppSettingValueAsString("QuickQuote_UncrossableDateLineErrorMessage_PastToFuture", keyExists)
                                If keyExists AndAlso String.IsNullOrWhiteSpace(appConfigMessage) = False Then
                                    ErrorMessage = appConfigMessage.Replace("#-DATE-#", thisUncrossableDate.ToString("MM/dd/yyyy"))
                                Else
                                    'Fall back incase key doesn't exist
                                    ErrorMessage = "Effective Date after " & thisUncrossableDate.ToString("MM/dd/yyyy") & " is not permitted. Please start a new quote"
                                End If
                            ElseIf NewDate < thisUncrossableDate AndAlso OriginalDate >= thisUncrossableDate Then
                                'Can't cross date
                                returnVar = True
                                appConfigMessage = chc.ConfigurationAppSettingValueAsString("QuickQuote_UncrossableDateLineErrorMessage_FutureToPast", keyExists)
                                If keyExists AndAlso String.IsNullOrWhiteSpace(appConfigMessage) = False Then
                                    ErrorMessage = appConfigMessage.Replace("#-DATE-#", thisUncrossableDate.ToString("MM/dd/yyyy"))
                                Else
                                    'Fall back incase key doesn't exist
                                    ErrorMessage = "Effective Date prior to " & thisUncrossableDate.ToString("MM/dd/yyyy") & " is not permitted. Choose a current date or greater to start your quote."
                                End If
                            End If
                        End If
                    End If
                Next
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' ''' Checks to see if the LOBType has an associated uncrossable date line. If it does, checks to see if the original date to new date crosses the uncrossable date.
        ''' </summary>
        ''' <param name="Quote"></param>
        ''' <param name="OriginalDate"></param>
        ''' <param name="NewDate"></param>
        ''' <param name="ErrorMessage"></param>
        ''' <returns></returns>
        Public Function IsEffectiveDateChangeCrossingUncrossableDateLine(ByVal Quote As QuickQuoteObject, ByVal OriginalDate As String, ByVal NewDate As String, ByRef ErrorMessage As String) As Boolean
            Dim returnVar As Boolean = False

            If IsDate(OriginalDate) AndAlso IsDate(NewDate) Then
                returnVar = IsEffectiveDateChangeCrossingUncrossableDateLine(Quote, CDate(OriginalDate), CDate(NewDate), ErrorMessage)
            End If

            Return returnVar
        End Function

        ''' <summary>
        ''' This is controlled by the "VR_MinimumEffectiveDateDaysFromTody web config key. If the key doesn't exist it returns -30. Otherwise, it will return the web conifg kye's value.
        ''' </summary>
        ''' <returns></returns>
        Public Shared Function MinimumEffectiveDateDaysFromToday() As Integer
            Dim chc As New CommonHelperClass
            Dim keyExists As Boolean = False
            Dim myVal As Integer = chc.ConfigurationAppSettingValueAsInteger("VR_MinimumEffectiveDateDaysFromToday", keyExists)

            If keyExists Then
                If myVal > 0 Then
                    myVal = myVal * -1
                End If
                Return myVal
            Else
                'defaulting value because key is nothing or doesn't exist
                Return -30
            End If
        End Function

        ''' <summary>
        ''' Returns the maximum days in the future that is currently allowed by Velociater.
        ''' This is controlled by the "VR_MaximumEffectiveDateDaysFromTody web config key. If the key doesn't exist it returns 90. Otherwise, it will return the web conifg kye's value."
        ''' </summary>
        ''' <returns></returns>
        Public Shared Function MaximumEffectiveDateDaysFromToday() As Integer
            Dim chc As New CommonHelperClass
            Dim keyExists As Boolean = False
            Dim myVal As Integer = chc.ConfigurationAppSettingValueAsInteger("VR_MaximumEffectiveDateDaysFromToday", keyExists)

            If keyExists Then
                If myVal < 0 Then
                    myVal = myVal * -1
                End If
                Return myVal
            Else
                'defaulting value because key is nothing or doesn't exist
                Return 60
            End If
        End Function


        'Public Sub SetBuildingClassificationType(ByVal classificationTypeId As String, ByRef program As String, ByRef classification As String, ByRef classCode As String, Optional ByRef programAbbrev As String = "")
        '3/9/2017 - BOP stuff
        Public Sub SetBuildingClassificationType(ByVal classificationTypeId As String, ByRef program As String, ByRef classification As String, ByRef classCode As String, Optional ByRef programAbbrev As String = "", Optional ByVal effectiveDate As String = "")
            programAbbrev = ""
            program = ""
            classification = ""
            classCode = ""
            If classificationTypeId <> "" AndAlso IsNumeric(classificationTypeId) = True Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
                    'sql.queryOrStoredProc = "Select ProgramType, ClassDesc, ClassCode FROM BOPClass WHERE Dia_classificationtype_id = " & CInt(classificationTypeId)
                    '3/9/2017 - BOP stuff
                    If doUseNewBOPVersion(effectiveDate) Then
                        sql.queryOrStoredProc = "Select ProgramType, ClassDesc, ClassCode FROM BOPClassNew WHERE UsedInNewBOP = 1 And Dia_classificationtype_id = " & CInt(classificationTypeId)
                    Else
                        sql.queryOrStoredProc = "Select ProgramType, ClassDesc, ClassCode FROM BOPClassNew WHERE UsedInOldBOP = 1 And Dia_classificationtype_id = " & CInt(classificationTypeId)
                    End If
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        programAbbrev = dr.Item("ProgramType").ToString.Trim
                        classification = dr.Item("ClassDesc").ToString.Trim
                        classCode = dr.Item("ClassCode").ToString.Trim
                    End If
                End Using
                Select Case UCase(programAbbrev)
                    Case "AP"
                        program = "Apartment"
                    Case "CT"
                        program = "Contractors"
                        If UCase(classification).Contains("OFFICE") = True Then
                            program = "Contractors - Office"
                        ElseIf UCase(classification).Contains("SHOP") = True Then
                            program = "Contractors - Shop"
                        End If
                    Case "CTO"
                        program = "Contractors - Office"
                    Case "CTS"
                        program = "Contractors - Shop"
                    Case "MO" '3/9/2017 - BOP stuff
                        program = "Motel"
                    Case "OF"
                        program = "Office"
                    Case "RS"
                        program = "Restaurant"
                    Case "RE"
                        program = "Retail"
                    Case "SE"
                        program = "Service"
                    Case "WH"
                        program = "Warehouse"
                    Case Else
                        program = programAbbrev
                End Select
            End If
        End Sub
        'Public Function GetBuildingClassificationTypeId(ByVal classification As String, ByVal classCode As String, ByVal programAbbrev As String, Optional ByVal program As String = "") As String
        '3/9/2017 - BOP stuff
        Public Function GetBuildingClassificationTypeId(ByVal classification As String, ByVal classCode As String, ByVal programAbbrev As String, Optional ByVal program As String = "", Optional ByVal effectiveDate As String = "") As String
            Dim classificationTypeId As String = ""

            '3/9/2017 - BOP stuff
            Dim useNewBOP As Boolean = doUseNewBOPVersion(effectiveDate)
            If useNewBOP = True Then
                'Convert old classcodes - this should then bring back the new classification ID as well
                Select Case True
                    Case String.Equals(classification, "Veterinarians Office - Office", StringComparison.OrdinalIgnoreCase)
                        If classCode = "60999" Then
                            classCode = "64191"
                        End If
                    Case String.Equals(classification, "Veterinarians Office - Condominium - Office", StringComparison.OrdinalIgnoreCase)
                        If classCode = "65121" Then
                            classCode = "64181"
                        End If
                End Select
            End If

            If classification <> "" AndAlso classCode <> "" AndAlso (programAbbrev <> "" OrElse program <> "") Then
                'Dim whereClause As String = "ClassDesc = '" & classification & "' and ClassCode = '" & classCode & "' and "
                'updated 9/25/2017 to handle for apostrophes
                Dim whereClause As String = "ClassDesc = '" & classification.Replace("'", "''") & "' and ClassCode = '" & classCode & "' and "
                If programAbbrev = "" AndAlso program <> "" Then
                    Select Case program
                        Case "Apartment"
                            programAbbrev = "AP"
                        Case "Contractors"
                            programAbbrev = "CT"
                        Case "Contractors - Office"
                            programAbbrev = "CTO"
                        Case "Contractors - Shop"
                            programAbbrev = "CTS"
                        Case "Motel" '3/9/2017 - BOP stuff
                            programAbbrev = "MO"
                        Case "Office"
                            programAbbrev = "OF"
                        Case "Restaurant"
                            programAbbrev = "RS"
                        Case "Retail"
                            programAbbrev = "RE"
                        Case "Service"
                            programAbbrev = "SE"
                        Case "Warehouse"
                            programAbbrev = "WH"
                        Case Else
                            programAbbrev = program
                    End Select
                End If

                'If programAbbrev = "CTO" Then
                'whereClause &= "(ProgramType = 'CTO' or (ProgramType = 'CT' and ClassDesc like '%office%'))"
                'ElseIf programAbbrev = "CTS" Then
                'whereClause &= "(ProgramType = 'CTS' or (ProgramType = 'CT' and ClassDesc like '%shop%'))"
                If programAbbrev = "CTO" OrElse programAbbrev = "CTS" Then
                    whereClause &= "(ProgramType = '" & programAbbrev & "' or (ProgramType = 'CT' and ClassDesc like '%" & If(programAbbrev = "CTO", "office", "shop") & "%'))"
                Else
                    whereClause &= "ProgramType = '" & programAbbrev & "'"
                End If

                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
                    'sql.queryOrStoredProc = "SELECT Dia_classificationtype_id FROM BOPClass WHERE " & whereClause
                    '3/9/2017 - BOP stuff
                    If useNewBOP = True Then
                        sql.queryOrStoredProc = "SELECT Dia_classificationtype_id FROM BOPClassNew WHERE UsedInNewBOP = 1 AND " & whereClause
                    Else
                        sql.queryOrStoredProc = "SELECT Dia_classificationtype_id FROM BOPClassNew WHERE UsedInOldBOP = 1 AND " & whereClause
                    End If
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        classificationTypeId = dr.Item("Dia_classificationtype_id").ToString.Trim
                    End If
                End Using

            End If

            Return classificationTypeId
        End Function
        Public Function BitToBoolean(ByVal strBit As String) As Boolean
            BitToBoolean = False

            If strBit <> "" AndAlso ((IsNumeric(strBit) = True AndAlso strBit = "1") OrElse UCase(strBit) = "TRUE") Then
                BitToBoolean = True
            End If
        End Function
        Public Function BooleanToInt(ByVal bool As Boolean) As Integer
            If bool = True Then
                BooleanToInt = 1
            Else
                BooleanToInt = 0
            End If
        End Function
        Public Function IntegerForString(ByVal str As String) As Integer 'added 7/18/2013; moved here from QuickQuoteXml class
            If str IsNot Nothing AndAlso str <> "" AndAlso IsNumeric(str) = True Then
                Return CInt(str)
            Else
                Return 0
            End If
        End Function
        Public Function DecimalForString(ByVal str As String) As Decimal 'added 8/13/2015
            If IsNumericString(str) = True Then
                Return CDec(str)
            Else
                Return CDec(0)
            End If
        End Function
        Public Function DateForString(ByVal str As String, Optional ByVal defaultDate As Date = #1/1/1800#) As Date 'added 9/23/2017; note: CDate("1/1/1800") didn't work for default
            If IsDateString(str) = True Then
                Return CDate(str)
            Else
                'Return CDate("1/1/1800")
                Return defaultDate
            End If
        End Function
        Public Function IsValidDateString(ByVal str As String, Optional ByVal mustBeGreaterThanDefaultDate As Boolean = False, Optional ByVal defaultDate As Date = #1/1/1800#) As Boolean 'added 9/29/2017
            Dim isValid As Boolean = False

            If IsDateString(str) = True Then
                If mustBeGreaterThanDefaultDate = True Then
                    If defaultDate = Nothing Then
                        defaultDate = CDate("1/1/1800")
                    End If
                    If CDate(str) > defaultDate Then
                        isValid = True
                    End If
                Else
                    isValid = True
                End If
            End If

            Return isValid
        End Function
        'Try/Parse Functions added 1/28/2014
        Public Shared Function TryParseStringToInteger(str As String, ByRef i As Integer) As Boolean
            Dim r As Boolean = False
            If IsNumeric(str) Then
                'r = Integer.TryParse(str, i)
                'updated 6/8/2017 since Integer.TryParse can't handle commas, etc.
                Dim qqHelper As New QuickQuoteHelperClass
                i = qqHelper.IntegerForString(str)
                r = True
            End If
            Return r
        End Function
        Public Shared Function TryParseStringToDate(str As String, ByRef d As Date) As Boolean
            Dim r As Boolean = False
            If IsDate(str) Then
                r = Date.TryParse(str, d)
            End If
            Return r
        End Function
        Public Shared Function TryParseStringToDecimal(str As String, ByRef d As Decimal) As Boolean
            Dim r As Boolean = False
            'If IsNumeric(d) Then
            'updated 6/9/2017 to actually validate the string param
            If IsNumeric(str) Then
                'r = Decimal.TryParse(str, d)
                'updated 1/31/2014 because Decimal.TryParse couldn't handle currency like CDec
                'r = Decimal.TryParse(str, Globalization.NumberStyles.Currency, Nothing, d)
                'updated 5/24/2017 to avoid ambiguous namespace for error Globalization... only happened when running locally... error referenced 'System.Web System', but I'm not sure there's a System.Web.Globalization
                r = Decimal.TryParse(str, System.Globalization.NumberStyles.Currency, Nothing, d)
            End If
            Return r
        End Function
        Public Shared Function TryParseStringToBoolean(str As String, ByRef b As Boolean) As Boolean
            Dim r As Boolean = False
            If Not String.IsNullOrWhiteSpace(str) Then
                r = Boolean.TryParse(str, b)
            End If
            Return r
        End Function
        Public Function appendText(ByVal existingText As String, ByVal addText As String, Optional ByVal splitter As String = " ", Optional ByVal appendErrorTextInFrontWithBreak As Boolean = False, Optional ByVal errorPrefix As String = "") As String
            appendText = ""

            If existingText <> "" Then
                appendText = existingText
            ElseIf appendErrorTextInFrontWithBreak = True Then
                If errorPrefix = "" Then
                    errorPrefix = "The following errors were encountered:"
                End If
                errorPrefix = errorPrefix.Replace("<br>", "") & "<br>"
                appendText = errorPrefix
            End If

            If addText <> "" Then
                If appendErrorTextInFrontWithBreak = True AndAlso appendText = errorPrefix Then
                    appendText &= addText
                ElseIf appendText <> "" Then
                    appendText &= splitter & addText
                Else
                    appendText = addText
                End If
            End If
        End Function
        Public Function getSum(ByVal num1 As String, ByVal num2 As String) As String
            Dim tot As String = "0"

            If IsNumeric(num1) = True Then
                tot = num1
            End If

            tot = CDec(tot).ToString

            If IsNumeric(num2) = True Then
                tot = (CDec(tot) + CDec(num2)).ToString
            End If

            Return tot
        End Function
        Public Function getSumAndOptionallyMaintainFormatting(ByVal num1 As String, ByVal num2 As String, Optional ByVal maintainFormattingOrDefaultValue As Boolean = True) As String
            Dim tot As String = "0"

            Dim hasNumeric As Boolean = False
            Dim anyDollarSigns As Boolean = False
            Dim anyDecimals As Boolean = False

            If IsNumeric(num1) = True Then
                If maintainFormattingOrDefaultValue = True Then
                    hasNumeric = True
                    If num1.Contains("$") = True Then
                        anyDollarSigns = True
                    End If
                    If num1.Contains(".") = True Then
                        anyDecimals = True
                    End If
                End If

                tot = num1
            End If

            tot = CDec(tot).ToString

            If IsNumeric(num2) = True Then
                If maintainFormattingOrDefaultValue = True Then
                    hasNumeric = True
                    If num2.Contains("$") = True Then
                        anyDollarSigns = True
                    End If
                    If num2.Contains(".") = True Then
                        anyDecimals = True
                    End If
                End If

                tot = (CDec(tot) + CDec(num2)).ToString
            End If

            If maintainFormattingOrDefaultValue = True Then
                If hasNumeric = True Then
                    If anyDollarSigns = True AndAlso tot.Contains("$") = False Then
                        'should have currency formatting
                        If anyDecimals = True Then
                            'show cents
                            tot = FormatCurrency(tot, 2).ToString
                        Else
                            'whole dollar w/o decimal
                            tot = FormatCurrency(tot, 0).ToString
                        End If
                    ElseIf anyDecimals = False AndAlso tot.Contains(".") = True Then
                        'should be whole number
                        tot = FormatNumber(tot, 0).ToString
                    End If
                Else
                    If IsZeroAmount(tot) = True Then
                        If String.IsNullOrWhiteSpace(num1) = False AndAlso String.IsNullOrWhiteSpace(num2) = False AndAlso isTextMatch(num1, num2, matchType:=TextMatchType.DecimalOrText_IgnoreCasing) = False Then
                            tot = appendText(num1, num2, splitter:=" ")
                        ElseIf String.IsNullOrWhiteSpace(num1) = False Then
                            tot = num1
                        ElseIf String.IsNullOrWhiteSpace(num2) = False Then
                            tot = num2
                        End If
                    End If
                End If
            End If

            Return tot
        End Function
        Public Function getDiff(ByVal num1 As String, ByVal num2 As String) As String 'added 8/14/2012 for QuoteSummary dec section calcs
            Dim tot As String = "0"

            If IsNumeric(num1) = True Then
                tot = num1
            End If

            tot = CDec(tot).ToString

            If IsNumeric(num2) = True Then
                tot = (CDec(tot) - CDec(num2)).ToString
            End If

            Return tot
        End Function
        Public Function getMultiplicationProduct(ByVal num1 As String, ByVal num2 As String) As String 'added 2/11/2013 (originally for BOP to get 'Business Owners Liability Products/Completed Operations Aggregate' based on OccLiabLimit)
            Dim tot As String = "0"

            If IsNumeric(num1) = True Then
                tot = num1
            End If

            tot = CDec(tot).ToString

            If IsNumeric(num2) = True Then
                tot = (CDec(tot) * CDec(num2)).ToString
            End If

            Return tot
        End Function
        Public Function getDivisionQuotient(ByVal num1 As String, ByVal num2 As String) As String 'added 5/23/2013 (originally for basic payment option calculations on proposal)
            Dim tot As String = "0"

            If IsNumeric(num1) = True Then
                tot = num1
            End If

            tot = CDec(tot).ToString

            If IsNumeric(num2) = True Then
                tot = (CDec(tot) / CDec(num2)).ToString
            End If

            Return tot
        End Function
        Public Sub ConvertToShortDate(ByRef dt As String)
            If IsDate(dt) = True Then
                dt = CDate(dt).ToShortDateString
                If dt.Length < 10 Then
                    dt = CDate(dt).Date.ToString("MM/dd/yyyy") 'Ran into a bug where a test server was not set to the correct Short Date option. This should fix it on the code side.
                End If
            End If
        End Sub
        Public Sub ConvertToTimeStamp(ByRef dt As String)
            If IsDate(dt) = True Then
                dt = CDate(dt).ToString
            End If
        End Sub
        Public Sub ConvertToDiamondDate(ByRef dt As String)
            If IsDate(dt) = True Then
                Dim dtNew As Date = CDate(dt)
                'dt = dtNew.Year.ToString() & "-" & dtNew.Month.ToString().PadLeft(2, "0") & "-" & dtNew.Day.ToString().PadLeft(2, "0")
                'updated 7/9/2014 to pad year... since it can be 1/1/0001 when blank in Diamond (even though object looks like 1/1/1800)... may be specific to certain dates (i.e. AccidentViolation.FirstAddedDate)
                dt = dtNew.Year.ToString().PadLeft(4, "0") & "-" & dtNew.Month.ToString().PadLeft(2, "0") & "-" & dtNew.Day.ToString().PadLeft(2, "0")
            End If
        End Sub
        Public Function DiamondDateFormat(ByVal dt As String) As String
            If IsDate(dt) = True Then
                Dim dtNew As Date = CDate(dt)
                'dt = dtNew.Year.ToString() & "-" & dtNew.Month.ToString().PadLeft(2, "0") & "-" & dtNew.Day.ToString().PadLeft(2, "0")
                'updated 7/9/2014 to pad year... since it can be 1/1/0001 when blank in Diamond (even though object looks like 1/1/1800)... may be specific to certain dates (i.e. AccidentViolation.FirstAddedDate)
                dt = dtNew.Year.ToString().PadLeft(4, "0") & "-" & dtNew.Month.ToString().PadLeft(2, "0") & "-" & dtNew.Day.ToString().PadLeft(2, "0")
            End If
            Return dt
        End Function
        Public Function DiamondAmountFormat(ByVal amt As String) As String
            If amt <> "" AndAlso IsNumeric(amt) = True Then
                amt = amt.Replace(",", "")
                amt = amt.Replace("$", "")
            End If

            Return amt
        End Function
        Public Sub ConvertToLimitFormat(ByRef lmt As String)
            If IsNumeric(lmt) = True Then
                'lmt = FormatCurrency(lmt, 0).ToString
                lmt = FormatNumber(lmt, 0).ToString
            End If
        End Sub
        'added 5/27/2017; copied similar logic from ConvertToQuotedPremiumFormat, but made replacementType required as to not change signature of original
        Public Sub ConvertToLimitFormat(ByRef lmt As String, ByVal emptyStringReplacementType As QuickQuoteEmptyStringReplacementType, Optional ByVal useCurrencyFormat As Boolean = False)
            If IsNumeric(lmt) = True Then
                If useCurrencyFormat = True Then
                    lmt = FormatCurrency(lmt, 0).ToString
                Else
                    lmt = FormatNumber(lmt, 0).ToString
                End If
            ElseIf lmt = "" AndAlso emptyStringReplacementType <> Nothing AndAlso emptyStringReplacementType <> QuickQuoteEmptyStringReplacementType.None Then
                Select Case emptyStringReplacementType
                    Case QuickQuoteEmptyStringReplacementType.Zero
                        If useCurrencyFormat = True Then
                            lmt = FormatCurrency("0", 0).ToString
                        Else
                            lmt = FormatNumber("0", 0).ToString
                        End If
                    Case QuickQuoteEmptyStringReplacementType.NonApplicable
                        lmt = "N/A"
                End Select
            End If
        End Sub
        'added 5/27/2017; copied similar logic from QuotedPremiumFormat
        Public Function LimitFormat(ByRef lmt As String, Optional ByVal emptyStringReplacementType As QuickQuoteEmptyStringReplacementType = QuickQuoteEmptyStringReplacementType.Zero, Optional ByVal useCurrencyFormat As Boolean = False, Optional ByVal useConvertMethodToAlwaysOverrideCurrentValue As Boolean = False) As String
            'passing qp in byref so we can optionally update the private variable; will just return the value for now w/o updating source
            Dim newLmt As String = lmt

            If useConvertMethodToAlwaysOverrideCurrentValue = True Then
                ConvertToLimitFormat(newLmt, emptyStringReplacementType, useCurrencyFormat:=useCurrencyFormat)
            Else
                If newLmt = "" Then
                    If emptyStringReplacementType <> Nothing AndAlso emptyStringReplacementType <> QuickQuoteEmptyStringReplacementType.None Then
                        Select Case emptyStringReplacementType
                            Case QuickQuoteEmptyStringReplacementType.Zero
                                If useCurrencyFormat = True Then
                                    newLmt = FormatCurrency("0", 0).ToString
                                Else
                                    newLmt = FormatNumber("0", 0).ToString
                                End If
                            Case QuickQuoteEmptyStringReplacementType.NonApplicable
                                newLmt = "N/A"
                        End Select
                    End If
                Else
                    'not empty string
                    If newLmt.Contains("$") = True Then
                        'appears to already be formatted
                    Else
                        If IsNumeric(newLmt) = True Then
                            If useCurrencyFormat = True Then
                                newLmt = FormatCurrency(newLmt, 0).ToString
                            Else
                                newLmt = FormatNumber(newLmt, 0).ToString
                            End If
                        End If
                    End If
                End If
            End If

            Return newLmt
        End Function
        Public Sub ConvertToQuotedPremiumFormat(ByRef qp As String, Optional ByVal emptyStringReplacementType As QuickQuoteEmptyStringReplacementType = QuickQuoteEmptyStringReplacementType.None)
            If IsNumeric(qp) = True Then
                qp = FormatCurrency(qp, 2).ToString
                'added ElseIf 1/29/2013 to optionally replace "" w/ 0 or N/A
            ElseIf qp = "" AndAlso emptyStringReplacementType <> Nothing AndAlso emptyStringReplacementType <> QuickQuoteEmptyStringReplacementType.None Then
                Select Case emptyStringReplacementType
                    Case QuickQuoteEmptyStringReplacementType.Zero
                        qp = FormatCurrency("0", 2).ToString
                    Case QuickQuoteEmptyStringReplacementType.NonApplicable
                        qp = "N/A"
                End Select
            End If
        End Sub
        'added 8/25/2014 for properties that use ConvertToQuotedPremiumFormat... to handle for IS update for 527 to condense rated xml and omit 0 premium nodes
        Public Function QuotedPremiumFormat(ByRef qp As String, Optional ByVal emptyStringReplacementType As QuickQuoteEmptyStringReplacementType = QuickQuoteEmptyStringReplacementType.Zero) As String
            'passing qp in byref so we can optionally update the private variable; will just return the value for now w/o updating source
            Dim newQP As String = qp

            If newQP = "" Then
                If emptyStringReplacementType <> Nothing AndAlso emptyStringReplacementType <> QuickQuoteEmptyStringReplacementType.None Then
                    Select Case emptyStringReplacementType
                        Case QuickQuoteEmptyStringReplacementType.Zero
                            newQP = FormatCurrency("0", 2).ToString
                        Case QuickQuoteEmptyStringReplacementType.NonApplicable
                            newQP = "N/A"
                    End Select
                End If
            Else
                'not empty string
                If newQP.Contains("$") = True Then
                    'appears to already be formatted
                Else
                    If IsNumeric(newQP) = True Then
                        newQP = FormatCurrency(newQP, 2).ToString
                    End If
                End If
            End If

            Return newQP
        End Function
        Public Function QuotedPremiumFormatNew(ByRef qp As String, Optional ByVal emptyStringReplacementType As QuickQuoteEmptyStringReplacementType = QuickQuoteEmptyStringReplacementType.Zero, Optional ByVal useConvertMethodToAlwaysOverrideCurrentValue As Boolean = False) As String
            'passing qp in byref so we can optionally update the private variable; will just return the value for now w/o updating source
            Dim newQP As String = qp

            If useConvertMethodToAlwaysOverrideCurrentValue = True Then
                ConvertToQuotedPremiumFormat(newQP, emptyStringReplacementType)
            Else
                newQP = QuotedPremiumFormat(qp, emptyStringReplacementType)
            End If

            Return newQP
        End Function
        Public Function IsZeroPremium(ByVal amt As String) As Boolean 'added 5/29/2013 (specific to hiding $0 premium LOB summary rows on quote proposal)
            If amt Is Nothing OrElse amt = "" OrElse IsNumeric(amt) = False OrElse CDec(amt) = 0 Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Function BytesFromString(ByVal str As String) As Byte()
            'Return System.Text.Encoding.ASCII.GetBytes(str)
            'updated 9/10/2015
            'Dim compressed As Boolean = qqCompressionHelper.ShouldCompressQuickQuoteXmls()
            Dim compressed As Boolean = ShouldCompressQuickQuoteXmls()
            Return qqCompressionHelper.BytesFromString(str, compressed)
        End Function
        Public Function StringFromBytes(ByVal bytes As Byte()) As String
            'Return System.Text.Encoding.ASCII.GetString(bytes)
            'updated 9/10/2015
            Return qqCompressionHelper.StringFromBytes(bytes)
        End Function

        Public Sub LoadUserAgencyDropDown(ByVal userId As Integer, ByRef ddl As DropDownList, Optional ByVal activeOnly As Boolean = True)
            '7/27/2012 - changed from Optional ByVal activeOnly As Boolean = False
            'If userId <> Nothing AndAlso userId > 0 AndAlso ddl IsNot Nothing Then
            'updated 4/28/2014 for integer... 0 equates to Nothing
            'If userId > 0 AndAlso ddl IsNot Nothing Then
            '    Dim agencies As Generic.List(Of QuickQuoteUserAgency) = GetUserAgencies(userId, activeOnly)
            '    LoadUserAgencyDropDown(agencies, ddl)
            'End If
            'updated 3/8/2021 to use new method
            Dim loadActiveAgenciesOnly As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe
            If activeOnly = True Then
                loadActiveAgenciesOnly = QuickQuoteYesNoMaybeType.Yes
            Else
                loadActiveAgenciesOnly = QuickQuoteYesNoMaybeType.No
            End If
            LoadUserAgencyDropDown_AllOptions(ddl, userId:=userId, loadActiveAgenciesOnly:=loadActiveAgenciesOnly)
        End Sub
        Public Sub LoadUserAgencyDropDown(ByRef ddl As DropDownList, Optional ByVal activeOnly As Boolean = True)
            '7/27/2012 - changed from Optional ByVal activeOnly As Boolean = False
            'If System.Web.HttpContext.Current?.Session("DiamondUserId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUserId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString) = True Then
            '    Dim agencies As Generic.List(Of QuickQuoteUserAgency) = GetUserAgencies(CInt(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString), activeOnly)
            '    LoadUserAgencyDropDown(agencies, ddl)
            'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '    Dim agencies As Generic.List(Of QuickQuoteUserAgency) = GetUserAgencies(CInt(ConfigurationManager.AppSettings("QuickQuoteTestUserId").ToString), activeOnly)
            '    LoadUserAgencyDropDown(agencies, ddl)
            'End If
            'updated 4/8/2014 to use helper Sub
            Dim uId As String = ""
            SetDiamondUserId(uId)
            'If uId <> "" AndAlso IsNumeric(uId) = True Then
            '    Dim agencies As Generic.List(Of QuickQuoteUserAgency) = GetUserAgencies(CInt(uId), activeOnly)
            '    LoadUserAgencyDropDown(agencies, ddl)
            'End If
            'updated 3/8/2021 to use existing method (that now calls new method below)
            If IsNumericString(uId) = True Then
                LoadUserAgencyDropDown(CInt(uId), ddl, activeOnly:=activeOnly)
            End If
        End Sub
        'new method 3/8/2021
        Public Sub LoadUserAgencyDropDown_AllOptions(ByRef ddl As DropDownList, Optional ByVal userId As Integer = 0, Optional ByVal loadActiveAgenciesOnly As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal onlyLoadCancelledAgenciesWithInforcePolicies As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe)
            If ddl IsNot Nothing Then
                If userId <= 0 Then
                    Dim uId As String = ""
                    SetDiamondUserId(uId)
                    If IsNumericString(uId) = True Then
                        userId = CInt(uId)
                    End If
                End If
                If userId > 0 Then
                    Dim agencies As Generic.List(Of QuickQuoteUserAgency) = GetUserAgencies_AllOptions(userId, loadActiveAgenciesOnly:=loadActiveAgenciesOnly, onlyLoadCancelledAgenciesWithInforcePolicies:=onlyLoadCancelledAgenciesWithInforcePolicies)
                    LoadUserAgencyDropDown(agencies, ddl)
                End If
            End If
        End Sub

        Public Sub LoadUserAgencyDropDown_AllOptions_Inverted(ByRef ddl As DropDownList, Optional ByVal userId As Integer = 0, Optional ByVal loadActiveAgenciesOnly As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal onlyLoadCancelledAgenciesWithInforcePolicies As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe)
            If ddl IsNot Nothing Then
                If userId <= 0 Then
                    Dim uId As String = ""
                    SetDiamondUserId(uId)
                    If IsNumericString(uId) = True Then
                        userId = CInt(uId)
                    End If
                End If
                If userId > 0 Then
                    Dim agencies As Generic.List(Of QuickQuoteUserAgency) = GetUserAgencies_AllOptions(userId, loadActiveAgenciesOnly:=loadActiveAgenciesOnly, onlyLoadCancelledAgenciesWithInforcePolicies:=onlyLoadCancelledAgenciesWithInforcePolicies)
                    LoadUserAgencyDropDown_Inverted(agencies, ddl)
                End If
            End If
        End Sub
        Public Sub LoadUserAgencyDropDown(ByVal agencies As Generic.List(Of QuickQuoteUserAgency), ByRef ddl As DropDownList)
            If agencies IsNot Nothing AndAlso agencies.Count > 0 Then
                ddl.Items.Clear()

                'added 3/8/2021
                Dim appendCancelledTextWhenNeeded As Boolean = False
                Dim cancelledTextKeyExists As Boolean = False
                Dim cancelledText As String = AgencyDropdown_CancelledTextToAppendWhenNecessary(keyExists:=cancelledTextKeyExists)
                If String.IsNullOrWhiteSpace(cancelledText) = False Then
                    appendCancelledTextWhenNeeded = True
                End If

                For Each agency As QuickQuoteUserAgency In agencies
                    Dim a As New ListItem
                    If agency.DiamondAgencyCode <> "" AndAlso agency.Name <> "" Then
                        a.Text = agency.DiamondAgencyCode & " | " & agency.Name
                    Else
                        a.Text = agency.DiamondAgencyCode
                    End If

                    'added 3/8/2021
                    If appendCancelledTextWhenNeeded = True AndAlso IsValidDateString(agency.CloseDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(agency.CloseDate) <= Date.Today Then
                        a.Text &= cancelledText
                    End If

                    a.Value = agency.DiamondAgencyId
                    ddl.Items.Add(a)
                Next
            End If
        End Sub

        Public Sub LoadUserAgencyDropDown_Inverted(ByVal agencies As Generic.List(Of QuickQuoteUserAgency), ByRef ddl As DropDownList)
            If agencies IsNot Nothing AndAlso agencies.Count > 0 Then
                ddl.Items.Clear()

                'added 3/8/2021
                Dim appendCancelledTextWhenNeeded As Boolean = False
                Dim cancelledTextKeyExists As Boolean = False
                Dim cancelledText As String = AgencyDropdown_CancelledTextToAppendWhenNecessary(keyExists:=cancelledTextKeyExists)
                If String.IsNullOrWhiteSpace(cancelledText) = False Then
                    appendCancelledTextWhenNeeded = True
                End If

                For Each agency As QuickQuoteUserAgency In agencies
                    Dim a As New ListItem
                    If agency.DiamondAgencyCode <> "" AndAlso agency.Name <> "" Then
                        a.Text = agency.Name & " | " & agency.DiamondAgencyCode
                    Else
                        a.Text = agency.DiamondAgencyCode
                    End If

                    'added 3/8/2021
                    If appendCancelledTextWhenNeeded = True AndAlso IsValidDateString(agency.CloseDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(agency.CloseDate) <= Date.Today Then
                        a.Text &= cancelledText
                    End If

                    a.Value = agency.DiamondAgencyId
                    ddl.Items.Add(a)
                Next
            End If
        End Sub
        Public Sub AgencyDropDown_SeparateCodeFromName(ByVal selectedText As String, ByRef code As String, ByRef name As String)
            code = ""
            name = ""

            If selectedText <> "" Then
                If selectedText.Contains(" | ") = True Then
                    Dim arSplit As Array = Split(selectedText, " | ")
                    code = arSplit(0).ToString.Trim
                    name = arSplit(1).ToString.Trim
                Else
                    code = selectedText
                End If
            End If
        End Sub
        Public Function GetUserAgencies(ByVal userId As Integer, Optional ByVal activeOnly As Boolean = True) As Generic.List(Of QuickQuoteUserAgency)
            ''7/27/2012 - changed from Optional ByVal activeOnly As Boolean = False
            'Dim agencies As Generic.List(Of QuickQuoteUserAgency) = Nothing 'updated 10/23/2014 to initialize to Nothing

            ''If userId <> Nothing AndAlso userId > 0 Then
            ''updated 4/28/2014 for integer... 0 equates to Nothing
            'If userId > 0 Then
            '    Using Sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamondReports"))
            '        Sql.queryOrStoredProc = "usp_GetUserAgencyCodes"
            '        Sql.parameters = New ArrayList
            '        Sql.parameters.Add(New SqlClient.SqlParameter("@userId", userId))
            '        Sql.parameters.Add(New SqlClient.SqlParameter("@activeOnly", BooleanToInt(activeOnly)))

            '        Dim dr As SqlClient.SqlDataReader = Sql.GetDataReader
            '        If dr IsNot Nothing AndAlso dr.HasRows = True Then
            '            System.Web.HttpContext.Current?.Session("DiamondAgencyIds") = ""
            '            System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") = ""
            '            System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff") = ""
            '            System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies") = "" 'added 10/24/2014

            '            agencies = New Generic.List(Of QuickQuoteUserAgency)
            '            Dim okayToAdd As Boolean = True 'added 10/23/2014
            '            While dr.Read
            '                okayToAdd = True 'added 10/23/2014
            '                If System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff").ToString = "" Then
            '                    If UCase(dr.Item("login_domain").ToString.Trim) = "IFM.IFMIC" Then
            '                        System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff") = "Yes"
            '                        If System.Web.HttpContext.Current?.Session("DiamondAgencyCode") Is Nothing OrElse System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString = "" OrElse System.Web.HttpContext.Current?.Session("DiamondAgencyId") Is Nothing OrElse System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString = "" Then
            '                            System.Web.HttpContext.Current?.Session("DiamondAgencyCode") = "6108-9999"
            '                            System.Web.HttpContext.Current?.Session("DiamondAgencyId") = "116"
            '                        End If
            '                    Else
            '                        System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff") = "No"
            '                    End If
            '                End If
            '                If dr.Item("agency_id").ToString.Trim = "116" Then 'added 10/23/2014
            '                    'IsHomeOfficeMainCode: 1 for ifm.ifmic domain; else 0 (agency)
            '                    'CanAccessEmployeePolicies: 1 for okay; else 0 (controlled by stored proc... either Diamond authority only or possibly Diamond Agency Access w/ or w/o Legacy Agency Access)
            '                    If BitToBoolean(dr.Item("CanAccessEmployeePolicies").ToString.Trim) = True Then
            '                        System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies") = "Yes"
            '                    Else
            '                        System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies") = "No"
            '                        okayToAdd = False
            '                    End If
            '                End If
            '                If okayToAdd = True Then 'added IF 10/23/2014
            '                    Dim agency As New QuickQuoteUserAgency
            '                    agency.DiamondAgencyId = dr.Item("agency_id").ToString.Trim
            '                    agency.DiamondAgencyCode = dr.Item("code").ToString.Trim
            '                    agency.Name = dr.Item("commercial_name1").ToString.Trim
            '                    agency.UserAgencyRelationshipTypeId = dr.Item("useragencyrelationtype_id").ToString.Trim
            '                    agency.CloseDate = dr.Item("close_date").ToString.Trim
            '                    System.Web.HttpContext.Current?.Session("DiamondAgencyIds") = appendText(System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString, agency.DiamondAgencyId, ", ")
            '                    System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") = appendText(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString, agency.DiamondAgencyCode, ", ")
            '                    agencies.Add(agency)
            '                End If
            '            End While
            '        End If
            '    End Using
            'End If

            'Return agencies

            'updated 3/8/2021 to call new private method
            Dim loadActiveAgenciesOnly As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe
            If activeOnly = True Then
                loadActiveAgenciesOnly = QuickQuoteYesNoMaybeType.Yes
            Else
                loadActiveAgenciesOnly = QuickQuoteYesNoMaybeType.No
            End If
            Return GetUserAgencies_AllOptions(userId, loadActiveAgenciesOnly:=loadActiveAgenciesOnly)
        End Function
        'new private method 3/8/2021
        Private Function GetUserAgencies_AllOptions(ByVal userId As Integer, Optional ByVal loadActiveAgenciesOnly As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal onlyLoadCancelledAgenciesWithInforcePolicies As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As Generic.List(Of QuickQuoteUserAgency)
            Dim agencies As Generic.List(Of QuickQuoteUserAgency) = Nothing

            If userId > 0 Then
                Dim activeOnly As Boolean = True
                Dim needToLookupActiveOnly As Boolean = False
                Dim activeOnlyKeyExists As Boolean = False
                Dim allowCancelledAgenciesWithActivePolicies As Boolean = False
                Dim needToLookupAllowCancelledAgencies As Boolean = False
                Dim allowCancelledAgenciesKeyExists As Boolean = False
                If loadActiveAgenciesOnly = QuickQuoteYesNoMaybeType.Yes Then
                    activeOnly = True
                ElseIf loadActiveAgenciesOnly = QuickQuoteYesNoMaybeType.No Then
                    activeOnly = False
                Else
                    'activeOnly = AgencyDropdown_LoadActiveAgenciesOnly()
                    needToLookupActiveOnly = True
                End If
                'If activeOnly = False Then
                If activeOnly = False OrElse needToLookupActiveOnly = True Then
                    If onlyLoadCancelledAgenciesWithInforcePolicies = QuickQuoteYesNoMaybeType.Yes Then
                        allowCancelledAgenciesWithActivePolicies = True
                    ElseIf onlyLoadCancelledAgenciesWithInforcePolicies = QuickQuoteYesNoMaybeType.No Then
                        allowCancelledAgenciesWithActivePolicies = False
                    Else
                        'allowCancelledAgenciesWithActivePolicies = AgencyDropdown_AllowCancelledAgenciesWithInforcePolicies()
                        needToLookupAllowCancelledAgencies = True
                    End If
                End If
                If needToLookupActiveOnly = True AndAlso needToLookupAllowCancelledAgencies = True Then
                    'neither set; allowCancelled flag should be priority when True; active flag can change allowCancelled default if false and allow key is missing
                    allowCancelledAgenciesWithActivePolicies = AgencyDropdown_AllowCancelledAgenciesWithInforcePolicies(keyExists:=allowCancelledAgenciesKeyExists)
                    If allowCancelledAgenciesWithActivePolicies = True Then
                        activeOnly = False
                    Else
                        activeOnly = AgencyDropdown_LoadActiveAgenciesOnly(keyExists:=activeOnlyKeyExists)
                        If activeOnly = False AndAlso allowCancelledAgenciesKeyExists = False Then
                            allowCancelledAgenciesWithActivePolicies = True 'change default value
                        End If
                    End If
                ElseIf needToLookupActiveOnly = True Then
                    'only allowCancelled flag set; allowCancelled flag priority
                    If allowCancelledAgenciesWithActivePolicies = True Then
                        activeOnly = False
                    Else
                        activeOnly = AgencyDropdown_LoadActiveAgenciesOnly(keyExists:=activeOnlyKeyExists)
                    End If
                ElseIf needToLookupAllowCancelledAgencies = True Then
                    'only active flag set; must be false
                    allowCancelledAgenciesWithActivePolicies = AgencyDropdown_AllowCancelledAgenciesWithInforcePolicies(keyExists:=allowCancelledAgenciesKeyExists)
                End If

                Using Sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamondReports"))
                    Sql.queryOrStoredProc = "usp_GetUserAgencyCodes"
                    Sql.parameters = New ArrayList
                    Sql.parameters.Add(New SqlClient.SqlParameter("@userId", userId))
                    Sql.parameters.Add(New SqlClient.SqlParameter("@activeOnly", BooleanToInt(activeOnly)))
                    Sql.parameters.Add(New SqlClient.SqlParameter("@onlyLoadCancelledAgenciesWithInforcePolicies", BooleanToInt(allowCancelledAgenciesWithActivePolicies)))

                    Dim dr As SqlClient.SqlDataReader = Sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        System.Web.HttpContext.Current?.Session.Add("DiamondAgencyIds", "")
                        System.Web.HttpContext.Current?.Session.Add("DiamondAgencyCodes", "")
                        System.Web.HttpContext.Current?.Session.Add("IsDiamondHomeOfficeStaff", "")
                        System.Web.HttpContext.Current?.Session.Add("CanAccessEmployeePolicies", "")
                        System.Web.HttpContext.Current?.Session.Add("DiamondAgencyIds_Cancelled", "")
                        System.Web.HttpContext.Current?.Session.Add("DiamondAgencyCodes_Cancelled", "")

                        agencies = New Generic.List(Of QuickQuoteUserAgency)
                        Dim okayToAdd As Boolean = True
                        While dr.Read
                            okayToAdd = True
                            If System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff").ToString = "" Then
                                If UCase(dr.Item("login_domain").ToString.Trim) = "IFM.IFMIC" Then
                                    System.Web.HttpContext.Current?.Session.Add("IsDiamondHomeOfficeStaff", "Yes")
                                    If System.Web.HttpContext.Current?.Session("DiamondAgencyCode") Is Nothing OrElse System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString = "" OrElse System.Web.HttpContext.Current?.Session("DiamondAgencyId") Is Nothing OrElse System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString = "" Then
                                        System.Web.HttpContext.Current?.Session.Add("DiamondAgencyCode", "6108-9999")
                                        System.Web.HttpContext.Current?.Session.Add("DiamondAgencyId", "116")
                                    End If
                                Else
                                    System.Web.HttpContext.Current?.Session.Add("IsDiamondHomeOfficeStaff", "No")
                                End If
                            End If
                            If dr.Item("agency_id").ToString.Trim = "116" Then 'added 10/23/2014
                                'IsHomeOfficeMainCode: 1 for ifm.ifmic domain; else 0 (agency)
                                'CanAccessEmployeePolicies: 1 for okay; else 0 (controlled by stored proc... either Diamond authority only or possibly Diamond Agency Access w/ or w/o Legacy Agency Access)
                                If BitToBoolean(dr.Item("CanAccessEmployeePolicies").ToString.Trim) = True Then
                                    System.Web.HttpContext.Current?.Session.Add("CanAccessEmployeePolicies", "Yes")
                                Else
                                    System.Web.HttpContext.Current?.Session.Add("CanAccessEmployeePolicies", "No")
                                    okayToAdd = False
                                End If
                            End If
                            If okayToAdd = True Then
                                Dim agency As New QuickQuoteUserAgency
                                agency.DiamondAgencyId = dr.Item("agency_id").ToString.Trim
                                agency.DiamondAgencyCode = dr.Item("code").ToString.Trim
                                agency.Name = dr.Item("commercial_name1").ToString.Trim
                                agency.UserAgencyRelationshipTypeId = dr.Item("useragencyrelationtype_id").ToString.Trim
                                agency.CloseDate = dr.Item("close_date").ToString.Trim
                                System.Web.HttpContext.Current?.Session.Add("DiamondAgencyIds", appendText(System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString, agency.DiamondAgencyId, ", "))
                                System.Web.HttpContext.Current?.Session.Add("DiamondAgencyCodes", appendText(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString, agency.DiamondAgencyCode, ", "))
                                If IsValidDateString(agency.CloseDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(agency.CloseDate) <= Date.Today Then
                                    System.Web.HttpContext.Current?.Session.Add("DiamondAgencyIds_Cancelled", appendText(System.Web.HttpContext.Current?.Session("DiamondAgencyIds_Cancelled").ToString, agency.DiamondAgencyId, ", "))
                                    System.Web.HttpContext.Current?.Session.Add("DiamondAgencyCodes_Cancelled", appendText(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes_Cancelled").ToString, agency.DiamondAgencyCode, ", "))
                                End If
                                agencies.Add(agency)
                            End If
                        End While
                    End If
                End Using
            End If

            Return agencies
        End Function
        Public Function IsHomeOfficeStaffUser() As Boolean
            Dim isStaff As Boolean = False

            If System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff") IsNot Nothing Then
                If UCase(System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff").ToString) = "YES" Then
                    isStaff = True
                Else
                    isStaff = False
                End If
            Else
                SetUserAgencyVariables()
                If System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff") IsNot Nothing Then
                    If UCase(System.Web.HttpContext.Current?.Session("IsDiamondHomeOfficeStaff").ToString) = "YES" Then
                        isStaff = True
                    Else
                        isStaff = False
                    End If
                End If
            End If

            Return isStaff
        End Function
        Public Function CanUserAccessEmployeePolicies() As Boolean 'added 10/23/2014
            Dim isOkay As Boolean = False

            If System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies") IsNot Nothing Then
                If UCase(System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies").ToString) = "YES" Then
                    isOkay = True
                Else
                    isOkay = False
                End If
            Else
                SetUserAgencyVariables()
                If System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies") IsNot Nothing Then
                    If UCase(System.Web.HttpContext.Current?.Session("CanAccessEmployeePolicies").ToString) = "YES" Then
                        isOkay = True
                    Else
                        isOkay = False
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Function IsAgencyOkayForUser(ByVal diamondAgencyCode As String) As Boolean
            Dim isOkay As Boolean = False

            'If diamondAgencyCode = "" Then
            '    isOkay = True
            'Else
            '    'If IsHomeOfficeStaffUser() = True Then
            '    'updated 10/23/2014 for Employee Quotes/Policies
            '    If (diamondAgencyCode.Contains("9999") = True AndAlso CanUserAccessEmployeePolicies() = True) OrElse (diamondAgencyCode.Contains("9999") = False AndAlso IsHomeOfficeStaffUser() = True) Then
            '        isOkay = True
            '    ElseIf System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString <> "" Then
            '        If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString.Contains(diamondAgencyCode) = True Then
            '            isOkay = True
            '        End If
            '        'updated 3/8/2021 to prevent match on partial from list (i.e. agencyId 1 would be in the string "133"; doesn't apply as much to agency codes since they should always have the same format); will just leave it as-is for now so we don't have to regression test... since this is used a lot
            '        'Dim strList As List(Of String) = ListOfStringFromString(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString, delimiter:=", ")
            '        'If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diamondAgencyCode) = True Then
            '        '    isOkay = True
            '        'End If
            '    Else
            '        SetUserAgencyVariables()
            '        If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString <> "" AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString.Contains(diamondAgencyCode) = True Then
            '            isOkay = True
            '        End If
            '        'updated 3/8/2021 to prevent match on partial from list (i.e. agencyId 1 would be in the string "133"; doesn't apply as much to agency codes since they should always have the same format); will just leave it as-is for now so we don't have to regression test... since this is used a lot
            '        'If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString <> "" Then
            '        '    Dim strList As List(Of String) = ListOfStringFromString(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString, delimiter:=", ")
            '        '    If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diamondAgencyCode) = True Then
            '        '        isOkay = True
            '        '    End If
            '        'End If
            '    End If
            'End If
            'updated 11/3/2023 to use new method
            isOkay = IsAgencyOkayForUser_CodeOrId(diamondAgencyCode, "")

            Return isOkay
        End Function
        Public Function IsAgencyOkayForUser_CodeOrId(ByVal diamondAgencyCode As String, ByVal diamondAgencyId As String) As Boolean 'added 11/3/2023 to handle for 6000-code change
            Dim isOkay As Boolean = False

            If diamondAgencyCode = "" Then
                isOkay = True
            Else
                'If IsHomeOfficeStaffUser() = True Then
                'updated 10/23/2014 for Employee Quotes/Policies
                If (diamondAgencyCode.Contains("9999") = True AndAlso CanUserAccessEmployeePolicies() = True) OrElse (diamondAgencyCode.Contains("9999") = False AndAlso IsHomeOfficeStaffUser() = True) Then
                    isOkay = True
                ElseIf System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString <> "" Then
                    If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString.Contains(diamondAgencyCode) = True Then
                        isOkay = True
                    End If
                    'updated 3/8/2021 to prevent match on partial from list (i.e. agencyId 1 would be in the string "133"; doesn't apply as much to agency codes since they should always have the same format); will just leave it as-is for now so we don't have to regression test... since this is used a lot
                    'Dim strList As List(Of String) = ListOfStringFromString(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString, delimiter:=", ")
                    'If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diamondAgencyCode) = True Then
                    '    isOkay = True
                    'End If
                Else
                    SetUserAgencyVariables()
                    If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString <> "" AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString.Contains(diamondAgencyCode) = True Then
                        isOkay = True
                    End If
                    'updated 3/8/2021 to prevent match on partial from list (i.e. agencyId 1 would be in the string "133"; doesn't apply as much to agency codes since they should always have the same format); will just leave it as-is for now so we don't have to regression test... since this is used a lot
                    'If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString <> "" Then
                    '    Dim strList As List(Of String) = ListOfStringFromString(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString, delimiter:=", ")
                    '    If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diamondAgencyCode) = True Then
                    '        isOkay = True
                    '    End If
                    'End If
                End If
            End If
            If isOkay = False AndAlso IsPositiveIntegerString(diamondAgencyId) = True Then
                isOkay = IsAgencyIdOkayForUser(diamondAgencyId)
            End If

            Return isOkay
        End Function
        Public Function IsAgencyIdOkayForUser(ByVal diamondAgencyId As String) As Boolean 'added 1/20/2014
            Dim isOkay As Boolean = False

            If diamondAgencyId = "" Then
                isOkay = True
            Else
                'If IsHomeOfficeStaffUser() = True Then
                'updated 10/24/2014 for Employee Quotes/Policies
                If (diamondAgencyId.Contains("116") = True AndAlso CanUserAccessEmployeePolicies() = True) OrElse (diamondAgencyId.Contains("116") = False AndAlso IsHomeOfficeStaffUser() = True) Then
                    isOkay = True
                ElseIf System.Web.HttpContext.Current?.Session("DiamondAgencyIds") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString <> "" Then
                    'If System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString.Contains(diamondAgencyId) = True Then
                    '    isOkay = True
                    'End If
                    'updated 3/8/2021 to prevent match on partial from list (i.e. agencyId 1 would be in the string "133")
                    Dim strList As List(Of String) = ListOfStringFromString(System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString, delimiter:=", ")
                    If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diamondAgencyId) = True Then
                        isOkay = True
                    End If
                Else
                    SetUserAgencyVariables()
                    'If System.Web.HttpContext.Current?.Session("DiamondAgencyIds") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString <> "" AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString.Contains(diamondAgencyId) = True Then
                    '    isOkay = True
                    'End If
                    'updated 3/8/2021 to prevent match on partial from list (i.e. agencyId 1 would be in the string "133")
                    If System.Web.HttpContext.Current?.Session("DiamondAgencyIds") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString <> "" Then
                        Dim strList As List(Of String) = ListOfStringFromString(System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString, delimiter:=", ")
                        If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diamondAgencyId) = True Then
                            isOkay = True
                        End If
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Sub SetUserAgencyVariables()
            'If System.Web.HttpContext.Current?.Session("DiamondUserId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUserId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString) = True Then
            '    GetUserAgencies(CInt(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString))
            'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '    GetUserAgencies(CInt(ConfigurationManager.AppSettings("QuickQuoteTestUserId").ToString))
            'End If
            'updated 4/8/2014 to use helper Sub
            Dim uId As String = ""
            SetDiamondUserId(uId)
            If uId <> "" AndAlso IsNumeric(uId) = True Then
                'GetUserAgencies(CInt(uId))
                'updated 3/8/2021 to use new method
                GetUserAgencies_AllOptions(CInt(uId))
            End If
        End Sub
        Public Function TranslatedEnumText(ByVal enumText As String) As String
            TranslatedEnumText = enumText
            If Left(TranslatedEnumText, 1) = "V" Then
                TranslatedEnumText = Right(TranslatedEnumText, Len(TranslatedEnumText) - 1)
            End If
            TranslatedEnumText = TranslatedEnumText.Replace("pc", "%")
            TranslatedEnumText = TranslatedEnumText.Replace("c", ",")
            TranslatedEnumText = TranslatedEnumText.Replace("s", "/")
            TranslatedEnumText = TranslatedEnumText.Replace("p", ".")
            TranslatedEnumText = TranslatedEnumText.Replace("d", "$")

            'Dim enumValues As Array = System.[Enum].GetValues(GetType(IconResource))

            'For Each resource As IconResource In enumValues
            '    Console.WriteLine("Resource: {0}", resource)
            'Next

        End Function
        'Public Sub LoadDropDownFromEnum(ByRef ddl As DropDownList, ByVal enumType As Type)
        '    'For Each a As QuickQuoteObject.EmployersLiabilityTest In System.[Enum].GetValues(GetType(QuickQuoteObject.EmployersLiabilityTest))
        '    '    a1 = a.ToString
        '    '    a1 = qqHelper.TranslatedEnumText(a1)
        '    '    'a2 = [Enum].GetName(GetType(QuickQuoteObject.EmployersLiabilityTest), a)
        '    '    a3 = CInt(a)
        '    'Next

        '    'For Each Val As QuickQuoteObject.EmployersLiabilityTest In System.Enum.GetValues(GetType(QuickQuoteObject))

        '    'Next
        '    'Dim a As enumType.DeclaringType
        '    'Dim a As typeof(enumtype)

        '    'For Each Val As enumType In System.Enum.GetValues(GetType(enumType))

        '    'Next


        'End Sub


        'Public Sub RateQuickQuote(ByRef quickQuote As QuickQuoteObject, ByRef quickQuoteXml As String, ByRef ratedQuickQuote As QuickQuoteObject, ByRef ratedQuickQuoteXml As String, Optional ByRef errorMessage As String = "")
        '    If quickQuote IsNot Nothing AndAlso quickQuote.AgencyCode <> "" AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
        '        Using ratingService As New CRS.ComparativeRatingService
        '            'Result = ratingService.SubmitAndRateEncrypted(Token, True, True, Originator, CompanyID, True, _
        '            '                                             StateID, True, LOBID, True, DateTime.Now, True, DateTime.Now, True, _
        '            '                                             TransTypeID, True, True, True, True, True, False, True, True, True, xmldoc)

        '            Dim originator As String = "nxtech"
        '            Dim loginName As String = "TestNxTech"
        '            Dim loginPassword As String = "TestNxTech1"

        '            Dim strToken As String = ""
        '            If Diamond.Web.BaseControls.SignedOnUser IsNot Nothing AndAlso Diamond.Web.BaseControls.SignedOnUser.LoginName <> "" AndAlso Diamond.Web.BaseControls.SignedOnUser.Password <> "" Then
        '                loginName = Diamond.Web.BaseControls.SignedOnUser.LoginName
        '                loginPassword = Diamond.Web.BaseControls.SignedOnUser.Password
        '            End If
        '            strToken = ratingService.GetAuthenticationToken(originator, loginName, loginPassword)

        '            If strToken IsNot Nothing AndAlso strToken <> "" Then
        '                Dim wf As CRS.WorkflowInformation = ratingService.GetAgencyWorkflowInformationEncrypted(originator, strToken, True, True, quickQuote.AgencyCode)
        '                If wf IsNot Nothing AndAlso IsNumeric(wf.WorkflowQueueId) = True Then
        '                    quickQuote.WorkflowQueueId = wf.WorkflowQueueId
        '                    'Session("AgencyID") = wf.AgencyId
        '                End If

        '                Dim xmlDoc As XmlDocument
        '                QQxml.BuildXml(quickQuote, xmlDoc)
        '                If xmlDoc IsNot Nothing Then
        '                    quickQuoteXml = xmlDoc.InnerXml
        '                    'ratedQuickQuoteXml = ratingService.SubmitAndRateEncrypted(strToken, True, True, originator, CInt(quickQuote.CompanyId), True, CInt(quickQuote.StateId), True, CInt(quickQuote.LobId), True, CDate(quickQuote.TransactionEffectiveDate), True, Date.Now, True, CInt(quickQuote.TransactionTypeId), True, True, True, True, True, False, True, True, True, quickQuoteXml)
        '                    ratedQuickQuoteXml = ratingService.SubmitAndRateEncrypted(strToken, True, True, originator, CInt(quickQuote.CompanyId), _
        '                                                                              True, CInt(quickQuote.StateId), True, CInt(quickQuote.LobId), _
        '                                                                              True, CDate(quickQuote.TransactionEffectiveDate), True, Date.Now, _
        '                                                                              True, CInt(quickQuote.TransactionTypeId), True, True, True, True, _
        '                                                                              True, False, True, True, True, quickQuoteXml)
        '                    If ratedQuickQuoteXml IsNot Nothing AndAlso ratedQuickQuoteXml <> "" Then
        '                        QQxml.ParseXmlString(ratedQuickQuoteXml, ratedQuickQuote)
        '                        If ratedQuickQuote IsNot Nothing Then
        '                            'okay
        '                        Else
        '                            errorMessage = "problem parsing rated xml"
        '                        End If
        '                    Else
        '                        errorMessage = "problem getting rated xml"
        '                    End If
        '                Else
        '                    errorMessage = "problem building quick quote xml"
        '                End If
        '            Else
        '                errorMessage = "problem getting authentication token"
        '            End If

        '        End Using
        '    Else
        '        errorMessage = "Invalid QuickQuoteObject (either nothing, missing agency code, or missing lob type)"
        '    End If
        'End Sub
        Public Sub SendEmail(ByVal fromAddress As String, ByVal toAddress As String, ByVal subj As String, ByVal body As String, Optional ByRef errorMsg As String = "")
            Using em As New EmailObject(ConfigurationManager.AppSettings("mailhost"))
                em.EmailFromAddress = fromAddress
                em.EmailToAddress = toAddress
                em.EmailSubject = subj
                em.EmailBody = body
                em.SendEmail()
                If em.hasError = True Then
                    errorMsg = em.errorMsg
                End If
            End Using
        End Sub

        'added 5/2/2013
        Public Sub SetPhoneVariables(ByVal phones As Generic.List(Of QuickQuotePhone), ByRef NaPhone As String, ByRef HomePhone As String, ByRef BusinessPhone As String, ByRef FaxPhone As String, ByRef CellularPhone As String, ByRef PagerPhone As String, ByRef OtherPhone As String, ByRef UnknownPhone As String)
            NaPhone = ""
            HomePhone = ""
            BusinessPhone = ""
            FaxPhone = ""
            CellularPhone = ""
            PagerPhone = ""
            OtherPhone = ""
            UnknownPhone = ""

            If phones IsNot Nothing AndAlso phones.Count > 0 Then
                For Each p As QuickQuotePhone In phones
                    If p IsNot Nothing AndAlso p.Number <> "" Then
                        'updated 5/27/2017 to use variable... so logic isn't in multiple spots; will now only show extension when it's a number > 0
                        Dim phoneWithExt As String = appendText(p.Number, If(IsPositiveIntegerString(p.Extension) = True, p.Extension, ""), " ")

                        Select Case p.Type
                            Case "N/A"
                                'NaPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                NaPhone = phoneWithExt
                            Case "Home"
                                'HomePhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                HomePhone = phoneWithExt
                            Case "Business"
                                'BusinessPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                BusinessPhone = phoneWithExt
                            Case "Fax"
                                'FaxPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                FaxPhone = phoneWithExt
                            Case "Cellular"
                                'CellularPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                CellularPhone = phoneWithExt
                            Case "Pager"
                                'PagerPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                PagerPhone = phoneWithExt
                            Case "Other"
                                'OtherPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                OtherPhone = phoneWithExt
                            Case Else
                                'UnknownPhone = appendText(p.Number, p.Extension, " ") 'updated 4/26/2014 for extension; was previously p.Number only
                                'updated 5/27/2017 to use new variable
                                UnknownPhone = phoneWithExt
                        End Select
                    End If
                Next
            End If
        End Sub
        Public Sub SetEmailVariables(ByVal emails As Generic.List(Of QuickQuoteEmail), ByRef NaEmail As String, ByRef HomeEmail As String, ByRef BusinessEmail As String, ByRef OtherEmail As String, ByRef UnKnownEmail As String)
            NaEmail = ""
            HomeEmail = ""
            BusinessEmail = ""
            OtherEmail = ""
            UnKnownEmail = ""

            If emails IsNot Nothing AndAlso emails.Count > 0 Then
                For Each e As QuickQuoteEmail In emails
                    If e IsNot Nothing AndAlso e.Address <> "" Then
                        Select Case e.Type
                            Case "N/A"
                                NaEmail = e.Address
                            Case "Home"
                                HomeEmail = e.Address
                            Case "Business"
                                BusinessEmail = e.Address
                            Case "Other"
                                OtherEmail = e.Address
                            Case Else
                                UnKnownEmail = e.Address
                        End Select
                    End If
                Next
            End If
        End Sub
        'added 8/6/2013
        Public Function CloneObject(ByVal obj As Object) As Object
            'Dim formatter As New Runtime.Serialization.Formatters.Binary.BinaryFormatter()
            'Dim st As System.IO.Stream = Nothing
            'formatter.Serialize(st, obj) 'Parameter '' cannot be null.        Parameter(name) : serializationStream()
            'Return formatter.Deserialize(st)

            'Try
            If obj Is Nothing Then
                Return Nothing
            Else
                Dim str As String = String.Empty
                Dim xml_serializer As New Serialization.XmlSerializer(obj.GetType)
                Dim string_writer As New IO.StringWriter
                xml_serializer.Serialize(string_writer, obj)
                str = string_writer.ToString()
                string_writer.Close()

                Dim string_reader As New IO.StringReader(str)
                Dim newObj As Object = xml_serializer.Deserialize(string_reader)
                string_reader.Close()

                'added 11/10/2016 to handle for ReadOnly properties not being serialized
                If newObj IsNot Nothing Then
                    If TypeOf obj Is QuickQuoteBaseObject AndAlso TypeOf newObj Is QuickQuoteBaseObject Then 'added 10/21/2021
                        CType(newObj, QuickQuoteBaseObject).Set_IsClone(True)
                    End If
                    If TypeOf obj Is QuickQuoteObject AndAlso TypeOf newObj Is QuickQuoteObject Then
                        'CType(newObj, QuickQuoteObject).Set_QuoteTransactionType(CType(obj, QuickQuoteObject).QuoteTransactionType)

                        'CType(newObj, QuickQuoteObject).Set_AnnualPremium(CType(obj, QuickQuoteObject).AnnualPremium) 'PolicyImage.premium_annual
                        'CType(newObj, QuickQuoteObject).Set_ChangeInFullTermPremium(CType(obj, QuickQuoteObject).ChangeInFullTermPremium) 'PolicyImage.premium_chg_fullterm
                        'CType(newObj, QuickQuoteObject).Set_ChangeInWrittenPremium(CType(obj, QuickQuoteObject).ChangeInWrittenPremium) 'PolicyImage.premium_chg_written
                        'CType(newObj, QuickQuoteObject).Set_DifferenceChangeInFullTermPremium(CType(obj, QuickQuoteObject).DifferenceChangeInFullTermPremium) 'PolicyImage.premium_diff_chg_fullterm
                        'CType(newObj, QuickQuoteObject).Set_DifferenceChangeInWrittenPremium(CType(obj, QuickQuoteObject).DifferenceChangeInWrittenPremium) 'PolicyImage.premium_diff_chg_written
                        'CType(newObj, QuickQuoteObject).Set_FullTermPremium(CType(obj, QuickQuoteObject).FullTermPremium) 'PolicyImage.premium_fullterm
                        'CType(newObj, QuickQuoteObject).Set_FullTermPremiumOffsetForPreviousImage(CType(obj, QuickQuoteObject).FullTermPremiumOffsetForPreviousImage) 'PolicyImage.ftp_offset_for_prev_image
                        'CType(newObj, QuickQuoteObject).Set_FullTermPremiumOnsetForCurrent(CType(obj, QuickQuoteObject).FullTermPremiumOnsetForCurrent) 'PolicyImage.ftp_onset_for_current
                        'CType(newObj, QuickQuoteObject).Set_OffsetPremiumForPreviousImage(CType(obj, QuickQuoteObject).OffsetPremiumForPreviousImage) 'PolicyImage.offset_for_prev_image
                        'CType(newObj, QuickQuoteObject).Set_OnsetPremiumForCurrentImage(CType(obj, QuickQuoteObject).OnsetPremiumForCurrentImage) 'PolicyImage.onset_for_current
                        'CType(newObj, QuickQuoteObject).Set_PreviousWrittenPremium(CType(obj, QuickQuoteObject).PreviousWrittenPremium) 'PolicyImage.premium_previous_written
                        'CType(newObj, QuickQuoteObject).Set_WrittenPremium(CType(obj, QuickQuoteObject).WrittenPremium) 'PolicyImage.premium_written
                        'CType(newObj, QuickQuoteObject).Set_PriorTermAnnual(CType(obj, QuickQuoteObject).PriorTermAnnual) 'PolicyImage.prior_term_annual_premium
                        'CType(newObj, QuickQuoteObject).Set_PriorTermFullterm(CType(obj, QuickQuoteObject).PriorTermFullterm) 'PolicyImage.prior_term_fullterm

                        'updated to use new common method
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteObjectToAnother(CType(obj, QuickQuoteObject), CType(newObj, QuickQuoteObject))

                    ElseIf TypeOf obj Is QuickQuoteLocation AndAlso TypeOf newObj Is QuickQuoteLocation Then
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationToAnother(CType(obj, QuickQuoteLocation), CType(newObj, QuickQuoteLocation))
                    ElseIf TypeOf obj Is QuickQuoteVehicle AndAlso TypeOf newObj Is QuickQuoteVehicle Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleToAnother(CType(obj, QuickQuoteVehicle), CType(newObj, QuickQuoteVehicle))
                    ElseIf TypeOf obj Is QuickQuotePackagePart AndAlso TypeOf newObj Is QuickQuotePackagePart Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuotePackagePartToAnother(CType(obj, QuickQuotePackagePart), CType(newObj, QuickQuotePackagePart))
                    ElseIf TypeOf obj Is List(Of QuickQuoteObject) AndAlso TypeOf newObj Is List(Of QuickQuoteObject) Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteObjectListToAnother(CType(obj, List(Of QuickQuoteObject)), CType(newObj, List(Of QuickQuoteObject)))
                    ElseIf TypeOf obj Is List(Of QuickQuoteLocation) AndAlso TypeOf newObj Is List(Of QuickQuoteLocation) Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(CType(obj, List(Of QuickQuoteLocation)), CType(newObj, List(Of QuickQuoteLocation)))
                    ElseIf TypeOf obj Is List(Of QuickQuoteVehicle) AndAlso TypeOf newObj Is List(Of QuickQuoteVehicle) Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(CType(obj, List(Of QuickQuoteVehicle)), CType(newObj, List(Of QuickQuoteVehicle)))
                    ElseIf TypeOf obj Is List(Of QuickQuotePackagePart) AndAlso TypeOf newObj Is List(Of QuickQuotePackagePart) Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuotePackagePartListToAnother(CType(obj, List(Of QuickQuotePackagePart)), CType(newObj, List(Of QuickQuotePackagePart)))
                    ElseIf TypeOf obj Is QuickQuoteVersionAndLobInfo AndAlso TypeOf newObj Is QuickQuoteVersionAndLobInfo Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteVersionAndLobInfoObjectToAnother(CType(obj, QuickQuoteVersionAndLobInfo), CType(newObj, QuickQuoteVersionAndLobInfo))
                    ElseIf TypeOf obj Is QuickQuoteLobRiskLevelInfoExtended AndAlso TypeOf newObj Is QuickQuoteLobRiskLevelInfoExtended Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteRiskLevelExtendedInfoObjectToAnother(CType(obj, QuickQuoteLobRiskLevelInfoExtended), CType(newObj, QuickQuoteLobRiskLevelInfoExtended))
                    ElseIf TypeOf obj Is QuickQuoteLobRiskLevelInfo AndAlso TypeOf newObj Is QuickQuoteLobRiskLevelInfo Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteRiskLevelInfoObjectToAnother(CType(obj, QuickQuoteLobRiskLevelInfo), CType(newObj, QuickQuoteLobRiskLevelInfo))
                    ElseIf TypeOf obj Is QuickQuoteTopLevelQuotePremiums AndAlso TypeOf newObj Is QuickQuoteTopLevelQuotePremiums Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelPremiumsObjectToAnother(CType(obj, QuickQuoteTopLevelQuotePremiums), CType(newObj, QuickQuoteTopLevelQuotePremiums))
                    ElseIf TypeOf obj Is QuickQuoteTopLevelQuoteInfo AndAlso TypeOf newObj Is QuickQuoteTopLevelQuoteInfo Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelQuoteInfoObjectToAnother(CType(obj, QuickQuoteTopLevelQuoteInfo), CType(newObj, QuickQuoteTopLevelQuoteInfo))
                    ElseIf TypeOf obj Is QuickQuoteTopLevelQuoteBase AndAlso TypeOf newObj Is QuickQuoteTopLevelQuoteBase Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseObjectToAnother(CType(obj, QuickQuoteTopLevelQuoteBase), CType(newObj, QuickQuoteTopLevelQuoteBase))
                    ElseIf TypeOf obj Is QuickQuoteTopLevelQuoteBase_CommonInfo AndAlso TypeOf newObj Is QuickQuoteTopLevelQuoteBase_CommonInfo Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseCommonObjectToAnother(CType(obj, QuickQuoteTopLevelQuoteBase_CommonInfo), CType(newObj, QuickQuoteTopLevelQuoteBase_CommonInfo))
                    ElseIf TypeOf obj Is QuickQuoteTopLevelStateAndLobParts AndAlso TypeOf newObj Is QuickQuoteTopLevelStateAndLobParts Then 'added 1/17/2019
                        CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelStateAndLobPartsObjectToAnother(CType(obj, QuickQuoteTopLevelStateAndLobParts), CType(newObj, QuickQuoteTopLevelStateAndLobParts))
                    End If
                End If

                Return newObj
            End If
            'Catch ex As Exception
            '    Return Nothing
            'End Try

        End Function
        'added 11/11/2016 to keep logic in one spot... to handle for CloneObject logic and ReadOnly properties not being serialized
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteObjectToAnother(ByVal fromQuote As QuickQuoteObject, ByRef toQuote As QuickQuoteObject)
            If fromQuote IsNot Nothing AndAlso toQuote IsNot Nothing Then
                toQuote.Set_QuoteTransactionType(fromQuote.QuoteTransactionType)

                'added 2/27/2019
                CopyQuoteTransactionTypeBearingPropertyValuesFromOneQuickQuoteObjectToAnother(fromQuote, toQuote)

                toQuote.Set_AnnualPremium(fromQuote.AnnualPremium) 'PolicyImage.premium_annual
                toQuote.Set_ChangeInFullTermPremium(fromQuote.ChangeInFullTermPremium) 'PolicyImage.premium_chg_fullterm
                toQuote.Set_ChangeInWrittenPremium(fromQuote.ChangeInWrittenPremium) 'PolicyImage.premium_chg_written
                toQuote.Set_DifferenceChangeInFullTermPremium(fromQuote.DifferenceChangeInFullTermPremium) 'PolicyImage.premium_diff_chg_fullterm
                toQuote.Set_DifferenceChangeInWrittenPremium(fromQuote.DifferenceChangeInWrittenPremium) 'PolicyImage.premium_diff_chg_written
                toQuote.Set_FullTermPremium(fromQuote.FullTermPremium) 'PolicyImage.premium_fullterm
                toQuote.Set_FullTermPremiumOffsetForPreviousImage(fromQuote.FullTermPremiumOffsetForPreviousImage) 'PolicyImage.ftp_offset_for_prev_image
                toQuote.Set_FullTermPremiumOnsetForCurrent(fromQuote.FullTermPremiumOnsetForCurrent) 'PolicyImage.ftp_onset_for_current
                toQuote.Set_OffsetPremiumForPreviousImage(fromQuote.OffsetPremiumForPreviousImage) 'PolicyImage.offset_for_prev_image
                toQuote.Set_OnsetPremiumForCurrentImage(fromQuote.OnsetPremiumForCurrentImage) 'PolicyImage.onset_for_current
                toQuote.Set_PreviousWrittenPremium(fromQuote.PreviousWrittenPremium) 'PolicyImage.premium_previous_written
                toQuote.Set_WrittenPremium(fromQuote.WrittenPremium) 'PolicyImage.premium_written
                toQuote.Set_PriorTermAnnual(fromQuote.PriorTermAnnual) 'PolicyImage.prior_term_annual_premium
                toQuote.Set_PriorTermFullterm(fromQuote.PriorTermFullterm) 'PolicyImage.prior_term_fullterm

                'added 1/17/2019
                toQuote.Set_OriginalEffectiveDate(fromQuote.OriginalEffectiveDate)
                toQuote.Set_OriginalExpirationDate(fromQuote.OriginalExpirationDate)
                toQuote.Set_OriginalTransactionEffectiveDate(fromQuote.OriginalTransactionEffectiveDate)
                toQuote.Set_OriginalTransactionExpirationDate(fromQuote.OriginalTransactionExpirationDate)

                toQuote.Set_QuoteLevel(fromQuote.QuoteLevel)
                '1/17/2019 note: could call CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelQuoteInfoObjectToAnother for TranType, Prems, Original vals, and QuoteLevel

                'If fromQuote.Locations IsNot Nothing AndAlso toQuote.Locations IsNot Nothing AndAlso fromQuote.Locations.Count = toQuote.Locations.Count Then
                '    Dim locCounter As Integer = 0
                '    For Each fromLoc As QuickQuoteLocation In fromQuote.Locations
                '        locCounter += 1
                '        Dim toLoc As QuickQuoteLocation = toQuote.Locations(locCounter - 1)
                '        CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationToAnother(fromLoc, toLoc)
                '    Next
                'End If
                'updated 9/14/2018
                Dim qqLocationsFrom As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(fromQuote, level:=MultiStateLevel.AllStates)
                If qqLocationsFrom IsNot Nothing AndAlso qqLocationsFrom.Count > 0 Then
                    Dim qqLocationsTo As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(toQuote, level:=MultiStateLevel.AllStates)
                    'If qqLocationsTo IsNot Nothing AndAlso qqLocationsTo.Count = qqLocationsFrom.Count Then
                    '    Dim locCounter As Integer = 0
                    '    For Each fromLoc As QuickQuoteLocation In qqLocationsFrom
                    '        locCounter += 1
                    '        Dim toLoc As QuickQuoteLocation = qqLocationsTo(locCounter - 1)
                    '        CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationToAnother(fromLoc, toLoc)
                    '    Next
                    'End If
                    'updated 1/17/2019
                    CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(qqLocationsFrom, qqLocationsTo)
                End If

                'added 1/17/2019
                Dim qqVehiclesFrom As List(Of QuickQuoteVehicle) = AllQuickQuoteVehicles(fromQuote, level:=MultiStateLevel.AllStates)
                If qqVehiclesFrom IsNot Nothing AndAlso qqVehiclesFrom.Count > 0 Then
                    Dim qqVehiclesTo As List(Of QuickQuoteVehicle) = AllQuickQuoteVehicles(toQuote, level:=MultiStateLevel.AllStates)
                    'If qqVehiclesTo IsNot Nothing AndAlso qqVehiclesTo.Count = qqVehiclesFrom.Count Then
                    '    Dim vehCounter As Integer = 0
                    '    For Each fromVeh As QuickQuoteVehicle In qqVehiclesFrom
                    '        vehCounter += 1
                    '        Dim toVeh As QuickQuoteVehicle = qqVehiclesTo(vehCounter - 1)
                    '        CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleToAnother(fromVeh, toVeh)
                    '    Next
                    'End If
                    CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(qqVehiclesFrom, qqVehiclesTo)
                End If

                'added 1/17/2019
                CopyReadOnlyPropertyValuesFromOneQuickQuotePackagePartListToAnother(fromQuote.PackageParts, toQuote.PackageParts)
                CopyReadOnlyPropertyValuesFromOneQuickQuoteObjectListToAnother(fromQuote.MultiStateQuotes, toQuote.MultiStateQuotes)
            End If
        End Sub
        Protected Friend Sub CopyQuoteTransactionTypeBearingPropertyValuesFromOneQuickQuoteObjectToAnother(ByVal fromQuote As QuickQuoteObject, ByRef toQuote As QuickQuoteObject) 'added 2/27/2019
            If fromQuote IsNot Nothing AndAlso toQuote IsNot Nothing Then
                If fromQuote.QuoteTransactionType = toQuote.QuoteTransactionType Then
                    If toQuote.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote OrElse toQuote.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage Then
                        toQuote.EffectiveDate = fromQuote.EffectiveDate
                        toQuote.ExpirationDate = fromQuote.ExpirationDate
                        toQuote.TransactionEffectiveDate = fromQuote.TransactionEffectiveDate
                        toQuote.TransactionExpirationDate = fromQuote.TransactionExpirationDate
                        toQuote.GuaranteedRatePeriodEffectiveDate = fromQuote.GuaranteedRatePeriodEffectiveDate
                        toQuote.GuaranteedRatePeriodExpirationDate = fromQuote.GuaranteedRatePeriodExpirationDate
                        toQuote.FirstWrittenDate = fromQuote.FirstWrittenDate
                    End If
                End If
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationToAnother(ByVal fromLoc As QuickQuoteLocation, ByRef toLoc As QuickQuoteLocation)
            If fromLoc IsNot Nothing AndAlso toLoc IsNot Nothing Then
                toLoc.Set_FireStationDistance(fromLoc.FireStationDistance)
                toLoc.Set_PPCMatchTypeId(fromLoc.PPCMatchTypeId)
                toLoc.Set_ProtectionClassSystemGeneratedId(fromLoc.ProtectionClassSystemGeneratedId)
                'updated 1/17/2019
                toLoc.Set_DisplayNum(fromLoc.DisplayNum)
            End If
        End Sub
        'added 1/17/2019
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleToAnother(ByVal fromVeh As QuickQuoteVehicle, ByRef toVeh As QuickQuoteVehicle)
            If fromVeh IsNot Nothing AndAlso toVeh IsNot Nothing Then
                toVeh.Set_DisplayNum(fromVeh.DisplayNum)
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuotePackagePartToAnother(ByVal fromPP As QuickQuotePackagePart, ByRef toPP As QuickQuotePackagePart)
            If fromPP IsNot Nothing AndAlso toPP IsNot Nothing Then

                'If fromPP.Locations IsNot Nothing AndAlso toPP.Locations IsNot Nothing AndAlso fromPP.Locations.Count = toPP.Locations.Count Then
                '    Dim locCounter As Integer = 0
                '    For Each fromLoc As QuickQuoteLocation In fromPP.Locations
                '        locCounter += 1
                '        Dim toLoc As QuickQuoteLocation = toPP.Locations(locCounter - 1)
                '        CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationToAnother(fromLoc, toLoc)
                '    Next
                'End If
                CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(fromPP.Locations, toPP.Locations)

                'If fromPP.Vehicles IsNot Nothing AndAlso toPP.Vehicles IsNot Nothing AndAlso fromPP.Vehicles.Count = toPP.Vehicles.Count Then
                '    Dim vehCounter As Integer = 0
                '    For Each fromVeh As QuickQuoteVehicle In fromPP.Vehicles
                '        vehCounter += 1
                '        Dim toVeh As QuickQuoteVehicle = toPP.Vehicles(vehCounter - 1)
                '        CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleToAnother(fromVeh, toVeh)
                '    Next
                'End If
                CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(fromPP.Vehicles, toPP.Vehicles)
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(ByVal fromLocations As List(Of QuickQuoteLocation), ByRef toLocations As List(Of QuickQuoteLocation))
            If fromLocations IsNot Nothing AndAlso toLocations IsNot Nothing AndAlso fromLocations.Count = toLocations.Count Then
                Dim locCounter As Integer = 0
                For Each fromLoc As QuickQuoteLocation In fromLocations
                    locCounter += 1
                    Dim toLoc As QuickQuoteLocation = toLocations(locCounter - 1)
                    CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationToAnother(fromLoc, toLoc)
                Next
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(ByVal fromVehicles As List(Of QuickQuoteVehicle), ByRef toVehicles As List(Of QuickQuoteVehicle))
            If fromVehicles IsNot Nothing AndAlso toVehicles IsNot Nothing AndAlso fromVehicles.Count = toVehicles.Count Then
                Dim vehCounter As Integer = 0
                For Each fromVeh As QuickQuoteVehicle In fromVehicles
                    vehCounter += 1
                    Dim toVeh As QuickQuoteVehicle = toVehicles(vehCounter - 1)
                    CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleToAnother(fromVeh, toVeh)
                Next
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuotePackagePartListToAnother(ByVal fromPackageParts As List(Of QuickQuotePackagePart), ByRef toPackageParts As List(Of QuickQuotePackagePart))
            If fromPackageParts IsNot Nothing AndAlso toPackageParts IsNot Nothing AndAlso fromPackageParts.Count = toPackageParts.Count Then
                Dim ppCounter As Integer = 0
                For Each fromPP As QuickQuotePackagePart In fromPackageParts
                    ppCounter += 1
                    Dim toPP As QuickQuotePackagePart = toPackageParts(ppCounter - 1)
                    CopyReadOnlyPropertyValuesFromOneQuickQuotePackagePartToAnother(fromPP, toPP)
                Next
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteObjectListToAnother(ByVal fromQuotes As List(Of QuickQuoteObject), ByRef toQuotes As List(Of QuickQuoteObject))
            If fromQuotes IsNot Nothing AndAlso toQuotes IsNot Nothing AndAlso fromQuotes.Count = toQuotes.Count Then
                Dim qqoCounter As Integer = 0
                For Each fromQQO As QuickQuoteObject In fromQuotes
                    qqoCounter += 1
                    Dim toQQO As QuickQuoteObject = toQuotes(qqoCounter - 1)
                    CopyReadOnlyPropertyValuesFromOneQuickQuoteObjectToAnother(fromQQO, toQQO)
                Next
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteVersionAndLobInfoObjectToAnother(ByVal fromVandLOB As QuickQuoteVersionAndLobInfo, ByRef toVandLOB As QuickQuoteVersionAndLobInfo)
            If fromVandLOB IsNot Nothing AndAlso toVandLOB IsNot Nothing Then

                CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(fromVandLOB.Locations, toVandLOB.Locations)

                CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(fromVandLOB.Vehicles, toVandLOB.Vehicles)
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteRiskLevelExtendedInfoObjectToAnother(ByVal fromRLE As QuickQuoteLobRiskLevelInfoExtended, ByRef toRLE As QuickQuoteLobRiskLevelInfoExtended)
            If fromRLE IsNot Nothing AndAlso toRLE IsNot Nothing Then

                CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(fromRLE.Locations, toRLE.Locations)

                CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(fromRLE.Vehicles, toRLE.Vehicles)
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteRiskLevelInfoObjectToAnother(ByVal fromRL As QuickQuoteLobRiskLevelInfo, ByRef toRL As QuickQuoteLobRiskLevelInfo)
            If fromRL IsNot Nothing AndAlso toRL IsNot Nothing Then

                CopyReadOnlyPropertyValuesFromOneQuickQuoteLocationListToAnother(fromRL.Locations, toRL.Locations)

                CopyReadOnlyPropertyValuesFromOneQuickQuoteVehicleListToAnother(fromRL.Vehicles, toRL.Vehicles)
            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelPremiumsObjectToAnother(ByVal fromP As QuickQuoteTopLevelQuotePremiums, ByRef toP As QuickQuoteTopLevelQuotePremiums)
            If fromP IsNot Nothing AndAlso toP IsNot Nothing Then

                toP.Set_AnnualPremium(fromP.AnnualPremium) 'PolicyImage.premium_annual
                toP.Set_ChangeInFullTermPremium(fromP.ChangeInFullTermPremium) 'PolicyImage.premium_chg_fullterm
                toP.Set_ChangeInWrittenPremium(fromP.ChangeInWrittenPremium) 'PolicyImage.premium_chg_written
                toP.Set_DifferenceChangeInFullTermPremium(fromP.DifferenceChangeInFullTermPremium) 'PolicyImage.premium_diff_chg_fullterm
                toP.Set_DifferenceChangeInWrittenPremium(fromP.DifferenceChangeInWrittenPremium) 'PolicyImage.premium_diff_chg_written
                toP.Set_FullTermPremium(fromP.FullTermPremium) 'PolicyImage.premium_fullterm
                toP.Set_FullTermPremiumOffsetForPreviousImage(fromP.FullTermPremiumOffsetForPreviousImage) 'PolicyImage.ftp_offset_for_prev_image
                toP.Set_FullTermPremiumOnsetForCurrent(fromP.FullTermPremiumOnsetForCurrent) 'PolicyImage.ftp_onset_for_current
                toP.Set_OffsetPremiumForPreviousImage(fromP.OffsetPremiumForPreviousImage) 'PolicyImage.offset_for_prev_image
                toP.Set_OnsetPremiumForCurrentImage(fromP.OnsetPremiumForCurrentImage) 'PolicyImage.onset_for_current
                toP.Set_PreviousWrittenPremium(fromP.PreviousWrittenPremium) 'PolicyImage.premium_previous_written
                toP.Set_WrittenPremium(fromP.WrittenPremium) 'PolicyImage.premium_written
                toP.Set_PriorTermAnnual(fromP.PriorTermAnnual) 'PolicyImage.prior_term_annual_premium
                toP.Set_PriorTermFullterm(fromP.PriorTermFullterm) 'PolicyImage.prior_term_fullterm

            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelQuoteInfoObjectToAnother(ByVal fromTL As QuickQuoteTopLevelQuoteInfo, ByRef toTL As QuickQuoteTopLevelQuoteInfo)
            If fromTL IsNot Nothing AndAlso toTL IsNot Nothing Then

                toTL.Set_QuoteTransactionType(fromTL.QuoteTransactionType)

                toTL.Set_OriginalEffectiveDate(fromTL.OriginalEffectiveDate)
                toTL.Set_OriginalExpirationDate(fromTL.OriginalExpirationDate)
                toTL.Set_OriginalTransactionEffectiveDate(fromTL.OriginalTransactionEffectiveDate)
                toTL.Set_OriginalTransactionExpirationDate(fromTL.OriginalTransactionExpirationDate)
                'note: could call CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseObjectToAnother

                toTL.Set_AnnualPremium(fromTL.AnnualPremium) 'PolicyImage.premium_annual
                toTL.Set_ChangeInFullTermPremium(fromTL.ChangeInFullTermPremium) 'PolicyImage.premium_chg_fullterm
                toTL.Set_ChangeInWrittenPremium(fromTL.ChangeInWrittenPremium) 'PolicyImage.premium_chg_written
                toTL.Set_DifferenceChangeInFullTermPremium(fromTL.DifferenceChangeInFullTermPremium) 'PolicyImage.premium_diff_chg_fullterm
                toTL.Set_DifferenceChangeInWrittenPremium(fromTL.DifferenceChangeInWrittenPremium) 'PolicyImage.premium_diff_chg_written
                toTL.Set_FullTermPremium(fromTL.FullTermPremium) 'PolicyImage.premium_fullterm
                toTL.Set_FullTermPremiumOffsetForPreviousImage(fromTL.FullTermPremiumOffsetForPreviousImage) 'PolicyImage.ftp_offset_for_prev_image
                toTL.Set_FullTermPremiumOnsetForCurrent(fromTL.FullTermPremiumOnsetForCurrent) 'PolicyImage.ftp_onset_for_current
                toTL.Set_OffsetPremiumForPreviousImage(fromTL.OffsetPremiumForPreviousImage) 'PolicyImage.offset_for_prev_image
                toTL.Set_OnsetPremiumForCurrentImage(fromTL.OnsetPremiumForCurrentImage) 'PolicyImage.onset_for_current
                toTL.Set_PreviousWrittenPremium(fromTL.PreviousWrittenPremium) 'PolicyImage.premium_previous_written
                toTL.Set_WrittenPremium(fromTL.WrittenPremium) 'PolicyImage.premium_written
                toTL.Set_PriorTermAnnual(fromTL.PriorTermAnnual) 'PolicyImage.prior_term_annual_premium
                toTL.Set_PriorTermFullterm(fromTL.PriorTermFullterm) 'PolicyImage.prior_term_fullterm
                'note: could call CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelPremiumsObjectToAnother

                toTL.Set_QuoteLevel(fromTL.QuoteLevel)
                'note: could also call CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseCommonObjectToAnother

            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseObjectToAnother(ByVal fromB As QuickQuoteTopLevelQuoteBase, ByRef toB As QuickQuoteTopLevelQuoteBase)
            If fromB IsNot Nothing AndAlso toB IsNot Nothing Then

                toB.Set_QuoteTransactionType(fromB.QuoteTransactionType)

                toB.Set_OriginalEffectiveDate(fromB.OriginalEffectiveDate)
                toB.Set_OriginalExpirationDate(fromB.OriginalExpirationDate)
                toB.Set_OriginalTransactionEffectiveDate(fromB.OriginalTransactionEffectiveDate)
                toB.Set_OriginalTransactionExpirationDate(fromB.OriginalTransactionExpirationDate)
                'note: could call CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseCommonObjectToAnother

            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelBaseCommonObjectToAnother(ByVal fromBC As QuickQuoteTopLevelQuoteBase_CommonInfo, ByRef toBC As QuickQuoteTopLevelQuoteBase_CommonInfo)
            If fromBC IsNot Nothing AndAlso toBC IsNot Nothing Then

                toBC.Set_QuoteTransactionType(fromBC.QuoteTransactionType)

                toBC.Set_OriginalEffectiveDate(fromBC.OriginalEffectiveDate)
                toBC.Set_OriginalExpirationDate(fromBC.OriginalExpirationDate)
                toBC.Set_OriginalTransactionEffectiveDate(fromBC.OriginalTransactionEffectiveDate)
                toBC.Set_OriginalTransactionExpirationDate(fromBC.OriginalTransactionExpirationDate)

            End If
        End Sub
        Protected Friend Sub CopyReadOnlyPropertyValuesFromOneQuickQuoteTopLevelStateAndLobPartsObjectToAnother(ByVal fromSandParts As QuickQuoteTopLevelStateAndLobParts, ByRef toSandParts As QuickQuoteTopLevelStateAndLobParts)
            If fromSandParts IsNot Nothing AndAlso toSandParts IsNot Nothing Then

                toSandParts.Set_QuoteLevel(fromSandParts.QuoteLevel)

            End If
        End Sub

        'added 12/19/2013
        'Public Sub LoadStaticDataOptionsDropDown(ByRef ddl As DropDownList, ByVal className As String, ByVal propertyName As String, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EvaluateAllEmptiesNonesAndZerosAsNothing As Boolean = False)
        '12/23/2013 - changed className/propertyName parameters from strings to enums
        'Public Sub LoadStaticDataOptionsDropDown(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EvaluateAllEmptiesNonesAndZerosAsNothing As Boolean = False)
        'updated 12/24/2013 to use Enum to determine how EmptyZeroOrNone should be handled
        'Public Sub LoadStaticDataOptionsDropDown(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText)
        'updated 4/2/2014 w/ optional param for converting text to upper-case
        Public Sub LoadStaticDataOptionsDropDown(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True)
            ''12/26/2013 note: could potentially get SDL 1st and use all options (since developer would only have access to ddl from here and wouldn't have access to change them), but if the sort is changed, it would affect the default sort on future calls
            ''Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(className, propertyName, lob, persOrComm)
            ''updated 12/26/2013 to use SDL options if possible (to improve performance)
            'Dim options As List(Of QuickQuoteStaticDataOption)
            'If (sortBy = Nothing OrElse sortBy = QuickQuoteStaticDataOption.SortBy.None) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
            '    'testing 12/26/2013 to see if sorting really affects future calls; confirmed
            '    'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
            '    Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            '    If sdl IsNot Nothing AndAlso sdl.HasOptionsToIgnoreForLists = False AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
            '        options = sdl.Options
            '    Else
            '        options = GetStaticDataOptions(sdl, lob, persOrComm)
            '    End If
            'Else
            '    options = GetStaticDataOptions(className, propertyName, lob, persOrComm)
            'End If

            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    'If ddl IsNot Nothing AndAlso ddl.Items IsNot Nothing Then '12/26/2013 - added IF to avoid possible object reference error; removed since ddl should always be something or instantiated when used programatically for testing
            '    ddl.Items.Clear()
            '    'End If

            '    'added 12/23/2013
            '    If sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then
            '        'SortStaticDataOptions(options, sortBy, EvaluateAllEmptiesNonesAndZerosAsNothing)
            '        'updated 12/24/2013 to use Enum to determine how EmptyZeroOrNone should be handled
            '        SortStaticDataOptions(options, sortBy, EmptyZeroOrNoneEvaluationTypeForSort)
            '    End If

            '    For Each o As QuickQuoteStaticDataOption In options
            '        Dim li As New ListItem
            '        li.Text = o.Text
            '        If returnTextInUpperCase = True Then 'added 4/2/2014
            '            li.Text = UCase(li.Text)
            '        End If
            '        li.Value = o.Value
            '        ddl.Items.Add(li)
            '    Next
            'End If

            'updated 8/19/2014 to use new method
            LoadStaticDataOptionsDropDownWithMatchingAttributes(ddl, className, propertyName, Nothing, sortBy, lob, persOrComm, EmptyZeroOrNoneEvaluationTypeForSort, returnTextInUpperCase)
            '3/5/2018 note: should update to call state method w/ Nothing for qqState
            'LoadStaticDataOptionsDropDownForState(ddl, className, propertyName, Nothing, sortBy:=sortBy, lob:=lob, persOrComm:=persOrComm, EmptyZeroOrNoneEvaluationTypeForSort:=EmptyZeroOrNoneEvaluationTypeForSort, returnTextInUpperCase:=returnTextInUpperCase)
        End Sub
        Public Sub LoadStaticDataOptionsDropDownForState(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True) 'added 3/5/2018
            LoadStaticDataOptionsDropDownWithMatchingAttributesForState(ddl, className, propertyName, qqState, Nothing, sortBy, lob, persOrComm, EmptyZeroOrNoneEvaluationTypeForSort, returnTextInUpperCase)
        End Sub
        Public Sub LoadStaticDataOptionsDropDownForStateAndCompany(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True) 'added 11/21/2022
            LoadStaticDataOptionsDropDownWithMatchingAttributesForStateAndCompany(ddl, className, propertyName, qqState, qqCompany, Nothing, sortBy, lob, persOrComm, EmptyZeroOrNoneEvaluationTypeForSort, returnTextInUpperCase)
        End Sub
        'added 8/18/2014 for new optionAttribute methods
        Public Sub LoadStaticDataOptionsDropDownWithMatchingAttributes(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True)
            Dim options As List(Of QuickQuoteStaticDataOption) = Nothing 'updated 3/6/2018 to default to nothing
            'If (sortBy = Nothing OrElse sortBy = QuickQuoteStaticDataOption.SortBy.None) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
            'updated 8/19/2014 for optionAttributes
            If (sortBy = Nothing OrElse sortBy = QuickQuoteStaticDataOption.SortBy.None) AndAlso (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
                Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
                If sdl IsNot Nothing AndAlso sdl.HasOptionsToIgnoreForLists = False AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
                    options = sdl.Options
                Else
                    options = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)
                End If
            Else
                options = GetStaticDataOptionsWithMatchingAttributes(className, propertyName, optionAttributes, lob, persOrComm)
            End If

            If options IsNot Nothing AndAlso options.Count > 0 Then
                'If ddl IsNot Nothing AndAlso ddl.Items IsNot Nothing Then '12/26/2013 - added IF to avoid possible object reference error; removed since ddl should always be something or instantiated when used programatically for testing
                ddl.Items.Clear()
                'End If

                If sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then
                    SortStaticDataOptions(options, sortBy, EmptyZeroOrNoneEvaluationTypeForSort)
                End If

                For Each o As QuickQuoteStaticDataOption In options
                    Dim li As New ListItem
                    li.Text = o.Text
                    If returnTextInUpperCase = True Then 'added 4/2/2014
                        li.Text = UCase(li.Text)
                    End If
                    li.Value = o.Value
                    ddl.Items.Add(li)
                Next
            End If
            '3/5/2018 note: should update to call state method w/ Nothing for qqState
            'LoadStaticDataOptionsDropDownWithMatchingAttributesForState(ddl, className, propertyName, Nothing, optionAttributes, sortBy:=sortBy, lob:=lob, persOrComm:=persOrComm, EmptyZeroOrNoneEvaluationTypeForSort:=EmptyZeroOrNoneEvaluationTypeForSort, returnTextInUpperCase:=returnTextInUpperCase)
        End Sub
        Public Sub LoadStaticDataOptionsDropDownWithMatchingAttributesForState(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True) 'added 3/5/2018
            Dim options As List(Of QuickQuoteStaticDataOption) = Nothing 'updated 3/6/2018 to default to nothing
            If (sortBy = Nothing OrElse sortBy = QuickQuoteStaticDataOption.SortBy.None) AndAlso (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
                Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
                If sdl IsNot Nothing AndAlso sdl.HasOptionsToIgnoreForLists = False AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
                    options = sdl.Options
                Else
                    options = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)
                End If
            Else
                options = GetStaticDataOptionsWithMatchingAttributesForState(className, propertyName, qqState, optionAttributes, lob, persOrComm)
            End If

            If options IsNot Nothing AndAlso options.Count > 0 Then
                'If ddl IsNot Nothing AndAlso ddl.Items IsNot Nothing Then '12/26/2013 - added IF to avoid possible object reference error; removed since ddl should always be something or instantiated when used programatically for testing
                ddl.Items.Clear()
                'End If

                If sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then
                    SortStaticDataOptions(options, sortBy, EmptyZeroOrNoneEvaluationTypeForSort)
                End If

                For Each o As QuickQuoteStaticDataOption In options
                    Dim li As New ListItem
                    li.Text = o.Text
                    If returnTextInUpperCase = True Then
                        li.Text = UCase(li.Text)
                    End If
                    li.Value = o.Value
                    ddl.Items.Add(li)
                Next
            End If
        End Sub
        Public Sub LoadStaticDataOptionsDropDownWithMatchingAttributesForStateAndCompany(ByRef ddl As DropDownList, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True) 'added 11/21/2022
            Dim options As List(Of QuickQuoteStaticDataOption) = Nothing 'updated 3/6/2018 to default to nothing
            If (sortBy = Nothing OrElse sortBy = QuickQuoteStaticDataOption.SortBy.None) AndAlso (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
                Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
                If sdl IsNot Nothing AndAlso sdl.HasOptionsToIgnoreForLists = False AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
                    options = sdl.Options
                Else
                    options = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)
                End If
            Else
                options = GetStaticDataOptionsWithMatchingAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, optionAttributes, lob, persOrComm)
            End If

            If options IsNot Nothing AndAlso options.Count > 0 Then
                'If ddl IsNot Nothing AndAlso ddl.Items IsNot Nothing Then '12/26/2013 - added IF to avoid possible object reference error; removed since ddl should always be something or instantiated when used programatically for testing
                ddl.Items.Clear()
                'End If

                If sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then
                    SortStaticDataOptions(options, sortBy, EmptyZeroOrNoneEvaluationTypeForSort)
                End If

                For Each o As QuickQuoteStaticDataOption In options
                    Dim li As New ListItem
                    li.Text = o.Text
                    If returnTextInUpperCase = True Then
                        li.Text = UCase(li.Text)
                    End If
                    li.Value = o.Value
                    ddl.Items.Add(li)
                Next
            End If
        End Sub
        'added 12/23/2013
        'Public Sub SortStaticDataOptionsOld(ByRef options As List(Of QuickQuoteStaticDataOption), ByVal sortBy As QuickQuoteStaticDataOption.SortBy, Optional ByVal EvaluateAllEmptiesNonesAndZerosAsNothing As Boolean = False)
        '    If options IsNot Nothing AndAlso options.Count > 0 AndAlso sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then

        '        If EvaluateAllEmptiesNonesAndZerosAsNothing = True Then
        '            Dim hasEmptiesAtBeginning As Boolean = False
        '            Dim counter As Integer = 0
        '            For Each o As QuickQuoteStaticDataOption In options
        '                'Select Case sortBy
        '                '    Case QuickQuoteStaticDataOption.SortBy.TextAscending, QuickQuoteStaticDataOption.SortBy.TextDescending

        '                '    Case QuickQuoteStaticDataOption.SortBy.ValueAscending, QuickQuoteStaticDataOption.SortBy.ValueDescending

        '                '    Case Else

        '                'End Select
        '                If (sortBy = QuickQuoteStaticDataOption.SortBy.TextAscending OrElse sortBy = QuickQuoteStaticDataOption.SortBy.TextDescending) AndAlso IsNothing(o.Text, True) = True Then
        '                    hasEmptiesAtBeginning = True
        '                    counter += 1
        '                ElseIf (sortBy = QuickQuoteStaticDataOption.SortBy.ValueAscending OrElse sortBy = QuickQuoteStaticDataOption.SortBy.ValueDescending) AndAlso IsNothing(o.Value, True) = True Then
        '                    hasEmptiesAtBeginning = True
        '                    counter += 1
        '                Else
        '                    Exit For
        '                End If
        '            Next

        '            If hasEmptiesAtBeginning = True AndAlso counter > 0 Then
        '                'Select Case sortBy
        '                '    Case QuickQuoteStaticDataOption.SortBy.TextAscending
        '                '        ' This method treats null as the lesser of two values.
        '                '        options.GetRange(0, counter).Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '                '                                              If x.Text Is Nothing AndAlso y.Text Is Nothing Then
        '                '                                                  Return 0
        '                '                                              ElseIf x.Text Is Nothing Then
        '                '                                                  Return -1
        '                '                                              ElseIf y.Text Is Nothing Then
        '                '                                                  Return 1
        '                '                                              Else
        '                '                                                  'Dim test As Integer = x.Text.CompareTo(y.Text)
        '                '                                                  'If test <> Nothing Then

        '                '                                                  'End If
        '                '                                                  Return x.Text.CompareTo(y.Text)
        '                '                                              End If
        '                '                                          End Function)
        '                '    Case QuickQuoteStaticDataOption.SortBy.ValueAscending
        '                '        ' This method treats null as the lesser of two values.
        '                '        options.GetRange(0, counter).Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '                '                                              If x.Value Is Nothing AndAlso y.Value Is Nothing Then
        '                '                                                  Return 0
        '                '                                              ElseIf x.Value Is Nothing Then
        '                '                                                  Return -1
        '                '                                              ElseIf y.Value Is Nothing Then
        '                '                                                  Return 1
        '                '                                              Else
        '                '                                                  Return x.Value.CompareTo(y.Value)
        '                '                                              End If
        '                '                                          End Function)
        '                '    Case QuickQuoteStaticDataOption.SortBy.TextDescending
        '                '        ' This method treats null as the lesser of two values.
        '                '        options.GetRange(0, counter).Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '                '                                              If x.Text Is Nothing AndAlso y.Text Is Nothing Then
        '                '                                                  Return 0
        '                '                                              ElseIf x.Text Is Nothing Then
        '                '                                                  Return 1
        '                '                                              ElseIf y.Text Is Nothing Then
        '                '                                                  Return -1
        '                '                                              Else
        '                '                                                  Return y.Text.CompareTo(x.Text)
        '                '                                              End If
        '                '                                          End Function)
        '                '    Case QuickQuoteStaticDataOption.SortBy.ValueDescending
        '                '        ' This method treats null as the lesser of two values.
        '                '        options.GetRange(0, counter).Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '                '                                              If x.Value Is Nothing AndAlso y.Value Is Nothing Then
        '                '                                                  Return 0
        '                '                                              ElseIf x.Value Is Nothing Then
        '                '                                                  Return 1
        '                '                                              ElseIf y.Value Is Nothing Then
        '                '                                                  Return -1
        '                '                                              Else
        '                '                                                  Return y.Value.CompareTo(x.Value)
        '                '                                              End If
        '                '                                          End Function)
        '                'End Select
        '                SortStaticDataOptions2(options.GetRange(0, counter), sortBy)
        '                Exit Sub
        '            End If
        '        End If

        '        'Select Case sortBy
        '        '    Case QuickQuoteStaticDataOption.SortBy.TextAscending
        '        '        ' This method treats null as the lesser of two values.
        '        '        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '        '                         'If x.Text Is Nothing AndAlso y.Text Is Nothing Then
        '        '                         If IsNothing(x.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) AndAlso IsNothing(y.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 0
        '        '                             'ElseIf x.Text Is Nothing Then
        '        '                         ElseIf IsNothing(x.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return -1
        '        '                             'ElseIf y.Text Is Nothing Then
        '        '                         ElseIf IsNothing(y.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 1
        '        '                         Else
        '        '                             'Dim test As Integer = x.Text.CompareTo(y.Text)
        '        '                             'If test <> Nothing Then

        '        '                             'End If
        '        '                             Return x.Text.CompareTo(y.Text)
        '        '                         End If
        '        '                     End Function)
        '        '    Case QuickQuoteStaticDataOption.SortBy.ValueAscending
        '        '        ' This method treats null as the lesser of two values.
        '        '        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '        '                         'If x.Value Is Nothing AndAlso y.Value Is Nothing Then
        '        '                         If IsNothing(x.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) AndAlso IsNothing(y.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 0
        '        '                             'ElseIf x.Value Is Nothing Then
        '        '                         ElseIf IsNothing(x.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return -1
        '        '                             'ElseIf y.Value Is Nothing Then
        '        '                         ElseIf IsNothing(y.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 1
        '        '                         Else
        '        '                             Return x.Value.CompareTo(y.Value)
        '        '                         End If
        '        '                     End Function)
        '        '    Case QuickQuoteStaticDataOption.SortBy.TextDescending
        '        '        ' This method treats null as the lesser of two values.
        '        '        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '        '                         'If x.Text Is Nothing AndAlso y.Text Is Nothing Then
        '        '                         If IsNothing(x.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) AndAlso IsNothing(y.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 0
        '        '                             'ElseIf x.Text Is Nothing Then
        '        '                         ElseIf IsNothing(x.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 1
        '        '                             'ElseIf y.Text Is Nothing Then
        '        '                         ElseIf IsNothing(y.Text, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return -1
        '        '                         Else
        '        '                             Return y.Text.CompareTo(x.Text)
        '        '                         End If
        '        '                     End Function)
        '        '    Case QuickQuoteStaticDataOption.SortBy.ValueDescending
        '        '        ' This method treats null as the lesser of two values.
        '        '        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
        '        '                         'If x.Value Is Nothing AndAlso y.Value Is Nothing Then
        '        '                         If IsNothing(x.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) AndAlso IsNothing(y.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 0
        '        '                             'ElseIf x.Value Is Nothing Then
        '        '                         ElseIf IsNothing(x.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return 1
        '        '                             'ElseIf y.Value Is Nothing Then
        '        '                         ElseIf IsNothing(y.Value, EvaluateAllEmptiesNonesAndZerosAsNothing) Then
        '        '                             Return -1
        '        '                         Else
        '        '                             Return y.Value.CompareTo(x.Value)
        '        '                         End If
        '        '                     End Function)
        '        'End Select
        '        SortStaticDataOptions2(options, sortBy)

        '    End If
        'End Sub
        'Public Sub SortStaticDataOptions(ByRef options As List(Of QuickQuoteStaticDataOption), ByVal sortBy As QuickQuoteStaticDataOption.SortBy, Optional ByVal EvaluateAllEmptiesNonesAndZerosAsNothing As Boolean = False)
        'updated 12/24/2013 to use Enum to determine how EmptyZeroOrNone should be handled
        Public Sub SortStaticDataOptions(ByRef options As List(Of QuickQuoteStaticDataOption), ByVal sortBy As QuickQuoteStaticDataOption.SortBy, Optional ByVal EmptyZeroOrNoneEvaluationType As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText)
            If options IsNot Nothing AndAlso options.Count > 0 AndAlso sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then

                'If EvaluateAllEmptiesNonesAndZerosAsNothing = True Then
                'updated 12/24/2013 to use Enum to determine how EmptyZeroOrNone should be handled
                If EmptyZeroOrNoneEvaluationType <> Nothing AndAlso (EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsText OrElse EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsNothing) Then
                    Dim hasEmptiesAtBeginning As Boolean = False
                    Dim counter As Integer = 0
                    Dim comparer As New QuickQuoteStaticDataOptionComparer
                    For Each o As QuickQuoteStaticDataOption In options
                        'If (sortBy = QuickQuoteStaticDataOption.SortBy.TextAscending OrElse sortBy = QuickQuoteStaticDataOption.SortBy.TextDescending) AndAlso IsNothing(o.Text, True) = True Then
                        '12/24/2013 - updated to use comparer function to check for EmptyZeroOrNone
                        If (sortBy = QuickQuoteStaticDataOption.SortBy.TextAscending OrElse sortBy = QuickQuoteStaticDataOption.SortBy.TextDescending) AndAlso comparer.IsEmptyZeroOrNone(o.Text) = True Then
                            hasEmptiesAtBeginning = True
                            counter += 1
                            'ElseIf (sortBy = QuickQuoteStaticDataOption.SortBy.ValueAscending OrElse sortBy = QuickQuoteStaticDataOption.SortBy.ValueDescending) AndAlso IsNothing(o.Value, True) = True Then
                            '12/24/2013 - updated to use comparer function to check for EmptyZeroOrNone
                        ElseIf (sortBy = QuickQuoteStaticDataOption.SortBy.ValueAscending OrElse sortBy = QuickQuoteStaticDataOption.SortBy.ValueDescending) AndAlso comparer.IsEmptyZeroOrNone(o.Value) = True Then
                            hasEmptiesAtBeginning = True
                            counter += 1
                        Else
                            Exit For
                        End If
                    Next

                    'If hasEmptiesAtBeginning = True AndAlso counter > 0 Then
                    'updated to make sure there's something left to sort
                    If hasEmptiesAtBeginning = True AndAlso counter > 0 AndAlso options.Count > counter Then
                        'SortStaticDataOptions2(options.GetRange(0, counter), sortBy)
                        'previous logic was only sorting beginning; now start on index after last record to ignore
                        'SortStaticDataOptions2(options.GetRange(counter, options.Count - counter), sortBy)
                        'testing 12/24/2013; works, which proves sorting range isn't retaining the range's sort order on the entire list
                        'Dim testOptions As New List(Of QuickQuoteStaticDataOption)
                        'For Each o As QuickQuoteStaticDataOption In options.GetRange(counter, options.Count - counter)
                        '    testOptions.Add(CloneObject(o))
                        'Next
                        'If testOptions IsNot Nothing Then
                        '    SortStaticDataOptions2(testOptions, sortBy)
                        '    If testOptions IsNot Nothing Then

                        '    End If
                        'End If
                        'replaced previous SortStaticDataOptions2 logic 12/24/2013
                        options.Sort(counter, options.Count - counter, StaticDataOptionComparerForSortBy(sortBy, EmptyZeroOrNoneEvaluationType))
                        Exit Sub
                    End If
                End If

                'SortStaticDataOptions2(options, sortBy)
                'replaced previous SortStaticDataOptions2 logic 12/24/2013
                options.Sort(StaticDataOptionComparerForSortBy(sortBy, EmptyZeroOrNoneEvaluationType))
                'options.Sort(AddressOf CompareStaticDataOptions)'another option, but not ideal for this scenario

            End If
        End Sub
        'added 12/24/2013
        Private Function StaticDataOptionComparerForSortBy(ByVal sortBy As QuickQuoteStaticDataOption.SortBy, Optional ByVal EmptyZeroOrNoneEvaluationType As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText) As IComparer(Of QuickQuoteStaticDataOption)
            If EmptyZeroOrNoneEvaluationType = Nothing Then
                EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText
            End If
            Dim comparer As IComparer(Of QuickQuoteStaticDataOption)
            Select Case sortBy
                Case QuickQuoteStaticDataOption.SortBy.TextAscending
                    If EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsNothing OrElse EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsNothing Then
                        comparer = New QuickQuoteStaticDataOptionComparer_TextAscending_EmptiesNonesAndZerosAreNothing
                    Else
                        comparer = New QuickQuoteStaticDataOptionComparer_TextAscending
                    End If
                Case QuickQuoteStaticDataOption.SortBy.ValueAscending
                    If EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsNothing OrElse EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsNothing Then
                        comparer = New QuickQuoteStaticDataOptionComparer_ValueAscending_EmptiesNonesAndZerosAreNothing
                    Else
                        comparer = New QuickQuoteStaticDataOptionComparer_ValueAscending
                    End If
                Case QuickQuoteStaticDataOption.SortBy.TextDescending
                    If EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsNothing OrElse EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsNothing Then
                        comparer = New QuickQuoteStaticDataOptionComparer_TextDescending_EmptiesNonesAndZerosAreNothing
                    Else
                        comparer = New QuickQuoteStaticDataOptionComparer_TextDescending
                    End If
                Case QuickQuoteStaticDataOption.SortBy.ValueDescending
                    comparer = New QuickQuoteStaticDataOptionComparer_ValueDescending
                Case Else
                    If EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsNothing OrElse EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsNothing Then
                        comparer = New QuickQuoteStaticDataOptionComparer_TextAscending_EmptiesNonesAndZerosAreNothing
                    Else
                        comparer = New QuickQuoteStaticDataOptionComparer_TextAscending
                    End If
            End Select
            Return comparer
        End Function
        'added 12/24/2013 for testing
        Private Function CompareStaticDataOptions(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption) As Integer
            Dim comparer As New QuickQuoteStaticDataOptionComparer
            Return comparer.Compare(x, y, Nothing, Nothing)
        End Function
        Private Sub SortStaticDataOptions2(ByRef options As List(Of QuickQuoteStaticDataOption), ByVal sortBy As QuickQuoteStaticDataOption.SortBy)
            If options IsNot Nothing AndAlso options.Count > 0 AndAlso sortBy <> Nothing AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then

                Select Case sortBy
                    Case QuickQuoteStaticDataOption.SortBy.TextAscending
                        ' This shows calling the Sort(Comparison(T) overload using
                        ' an anonymous delegate method.
                        ' This method treats null as the lesser of two values.
                        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
                                         If x.Text Is Nothing AndAlso y.Text Is Nothing Then
                                             Return 0
                                         ElseIf x.Text Is Nothing Then
                                             Return -1
                                         ElseIf y.Text Is Nothing Then
                                             Return 1
                                         Else
                                             'Dim test As Integer = 0 'x.Text.CompareTo(y.Text)
                                             'If IsNumeric(x) = True AndAlso IsNumeric(y) = True Then
                                             '    test = CType(x.Text, Double).CompareTo(CType(y.Text, Double))
                                             'Else
                                             '    test = x.Text.CompareTo(y.Text)
                                             'End If
                                             'If test <> Nothing Then

                                             'End If
                                             'added IF to sort numbers correctly instead of like normal string; previous logic is in ELSE
                                             'If IsNumeric(x) = True AndAlso IsNumeric(y) = True Then
                                             '12/24/2013 - corrected isnumeric calls
                                             If IsNumeric(x.Text) = True AndAlso IsNumeric(y.Text) = True Then
                                                 Return CType(x.Text, Double).CompareTo(CType(y.Text, Double))
                                             Else
                                                 Return x.Text.CompareTo(y.Text)
                                             End If
                                         End If
                                     End Function)
                    Case QuickQuoteStaticDataOption.SortBy.ValueAscending
                        ' This shows calling the Sort(Comparison(T) overload using
                        ' an anonymous delegate method.
                        ' This method treats null as the lesser of two values.
                        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
                                         If x.Value Is Nothing AndAlso y.Value Is Nothing Then
                                             Return 0
                                         ElseIf x.Value Is Nothing Then
                                             Return -1
                                         ElseIf y.Value Is Nothing Then
                                             Return 1
                                         Else
                                             'added IF to sort numbers correctly instead of like normal string; previous logic is in ELSE
                                             'If IsNumeric(x) = True AndAlso IsNumeric(y) = True Then
                                             '12/24/2013 - corrected isnumeric calls
                                             If IsNumeric(x.Value) = True AndAlso IsNumeric(y.Value) = True Then
                                                 Return CType(x.Value, Double).CompareTo(CType(y.Value, Double))
                                             Else
                                                 Return x.Value.CompareTo(y.Value)
                                             End If
                                         End If
                                     End Function)
                    Case QuickQuoteStaticDataOption.SortBy.TextDescending
                        ' This shows calling the Sort(Comparison(T) overload using
                        ' an anonymous delegate method.
                        ' This method treats null as the lesser of two values.
                        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
                                         If x.Text Is Nothing AndAlso y.Text Is Nothing Then
                                             Return 0
                                         ElseIf x.Text Is Nothing Then
                                             Return 1
                                         ElseIf y.Text Is Nothing Then
                                             Return -1
                                         Else
                                             'added IF to sort numbers correctly instead of like normal string; previous logic is in ELSE
                                             'If IsNumeric(y) = True AndAlso IsNumeric(x) = True Then
                                             '12/24/2013 - corrected isnumeric calls
                                             If IsNumeric(y.Text) = True AndAlso IsNumeric(x.Text) = True Then
                                                 Return CType(y.Text, Double).CompareTo(CType(x.Text, Double))
                                             Else
                                                 Return y.Text.CompareTo(x.Text)
                                             End If
                                         End If
                                     End Function)
                    Case QuickQuoteStaticDataOption.SortBy.ValueDescending
                        ' This shows calling the Sort(Comparison(T) overload using
                        ' an anonymous delegate method.
                        ' This method treats null as the lesser of two values.
                        options.Sort(Function(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption)
                                         If x.Value Is Nothing AndAlso y.Value Is Nothing Then
                                             Return 0
                                         ElseIf x.Value Is Nothing Then
                                             Return 1
                                         ElseIf y.Value Is Nothing Then
                                             Return -1
                                         Else
                                             'added IF to sort numbers correctly instead of like normal string; previous logic is in ELSE
                                             'If IsNumeric(y) = True AndAlso IsNumeric(x) = True Then
                                             '12/24/2013 - corrected isnumeric calls
                                             If IsNumeric(y.Value) = True AndAlso IsNumeric(x.Value) = True Then
                                                 Return CType(y.Value, Double).CompareTo(CType(x.Value, Double))
                                             Else
                                                 Return y.Value.CompareTo(x.Value)
                                             End If
                                         End If
                                     End Function)
                End Select
            End If
        End Sub
        'Private Function IsNothing(ByVal x As String, ByVal EvaluateAllEmptiesNonesAndZerosAsNothing As Boolean) As Boolean
        '    If x Is Nothing Then
        '        Return True
        '    ElseIf EvaluateAllEmptiesNonesAndZerosAsNothing <> Nothing AndAlso EvaluateAllEmptiesNonesAndZerosAsNothing = True Then
        '        Select Case Trim(UCase(x))
        '            Case "", "N/A", "NONE", "0", "-1"
        '                Return True
        '            Case Else
        '                Return False
        '        End Select
        '    Else
        '        Return False
        '    End If
        'End Function
        'Public Function StaticDataOptionsTextSortComparer(x As QuickQuoteStaticDataOption, y As QuickQuoteStaticDataOption) As Comparison(Of QuickQuoteStaticDataOption)
        '    If x.Text Is Nothing AndAlso y.Text Is Nothing Then
        '        Return 0
        '    ElseIf x.Text Is Nothing Then
        '        Return -1
        '    ElseIf y.Text Is Nothing Then
        '        Return 1
        '    Else
        '        Return x.Text.CompareTo(y.Text)
        '    End If
        'End Function
        'added 11/19/2013
        Public Function GetStaticDataOptions(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption)
            ''Dim options As List(Of QuickQuoteStaticDataOption)

            ''If className <> Nothing AndAlso propertyName <> Nothing Then
            ''    options = GetStaticDataOptions(System.Enum.GetName(GetType(QuickQuoteClassName), className), System.Enum.GetName(GetType(QuickQuotePropertyName), propertyName), lob, persOrComm)
            ''End If
            ''above logic could potentially return nothing for options

            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            'Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm)

            'Return options

            'updated 8/15/2014 to use new method
            Return GetStaticDataOptionsWithMatchingAttributes(className, propertyName, Nothing, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataOptionsForState(className, propertyName, Nothing, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetStaticDataOptionsForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataOptionsWithMatchingAttributesForState(className, propertyName, qqState, Nothing, lob, persOrComm)
        End Function
        Public Function GetStaticDataOptionsForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 11/21/2022
            Return GetStaticDataOptionsWithMatchingAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, lob, persOrComm)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetStaticDataOptionsWithMatchingAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption)
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)

            Return options
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataOptionsWithMatchingAttributesForState(className, propertyName, Nothing, optionAttributes, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetStaticDataOptionsWithMatchingAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 6/1/2018 (from original multi-state branch)
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)

            Return options
        End Function
        Public Function GetStaticDataOptionsWithMatchingAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 11/21/2022
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)

            Return options
        End Function
        '11/26/2013 - changed from Public to Private
        Private Function GetStaticDataOptions(ByVal className As String, ByVal propertyName As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption)
            ''Dim options As New List(Of QuickQuoteStaticDataOption)

            ''If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
            ''    Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            ''    options = StaticDataOptions(sdl, lob, persOrComm)
            ''End If

            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            'Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm)

            'Return options

            'updated 8/15/2014 to use new method
            Return GetStaticDataOptionsWithMatchingAttributes(className, propertyName, Nothing, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataOptionsForState(className, propertyName, Nothing, lob:=lob, persOrComm:=persOrComm)
        End Function
        Private Function GetStaticDataOptionsForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 6/1/2018 (from original multi-state branch)
            'Return GetStaticDataOptionsWithMatchingAttributes(className, propertyName, Nothing, lob, persOrComm)
            'fixed 11/23/2022
            Return GetStaticDataOptionsWithMatchingAttributesForState(className, propertyName, qqState, Nothing, lob, persOrComm)
        End Function
        Private Function GetStaticDataOptionsForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 11/23/2022
            Return GetStaticDataOptionsWithMatchingAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, lob, persOrComm)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Private Function GetStaticDataOptionsWithMatchingAttributes(ByVal className As String, ByVal propertyName As String, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption)
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)

            Return options
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataOptionsWithMatchingAttributesForState(className, propertyName, Nothing, optionAttributes, lob:=lob, persOrComm:=persOrComm)
        End Function
        Private Function GetStaticDataOptionsWithMatchingAttributesForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 6/1/2018 (from original multi-state branch)
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)

            Return options
        End Function
        Private Function GetStaticDataOptionsWithMatchingAttributesForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption) 'added 11/23/2022
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm)

            Return options
        End Function
        'Public Function GetStaticDataOptions(ByVal sdl As QuickQuoteStaticDataList, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As List(Of QuickQuoteStaticDataOption)
        'updated 12/6/2013 w/ param for ignoreForLists property
        Public Function GetStaticDataOptions(ByVal sdl As QuickQuoteStaticDataList, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal useIgnoreForListsProperty As Boolean = True) As List(Of QuickQuoteStaticDataOption)
            'Dim options As New List(Of QuickQuoteStaticDataOption)

            'If sdl IsNot Nothing AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
            '    Dim usePersOrComm As Boolean = False
            '    Dim useLob As Boolean = False

            '    'added 12/26/2013 - to only check for ignore for lists if it's been set on the SDL
            '    If useIgnoreForListsProperty = True AndAlso sdl.HasOptionsToIgnoreForLists = False Then
            '        useIgnoreForListsProperty = False
            '    End If

            '    'testing 12/6/2013 (to see if StaticDataList in memory persists any changes to Options when they are changed outside of this class)
            '    '12/6/2013 continued... test confirmed; can't do this here (have to persist original Options)
            '    'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso useIgnoreForListsProperty = False Then
            '    '    Return sdl.Options
            '    '    Exit Function
            '    'End If
            '    '12/9/2013 more testing; should do same thing but won't have to loop thru original options 1st
            '    If useIgnoreForListsProperty = False AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
            '        'updated 12/26/2013 to only check for ignore for lists if it's been set on the SDL; not needed w/ above logic to switch value of useIgnoreForListsProperty
            '        'If (useIgnoreForListsProperty = False OrElse (useIgnoreForListsProperty = True AndAlso sdl.HasOptionsToIgnoreForLists = False)) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
            '        options = CloneObject(sdl.Options)
            '        Return options
            '        Exit Function
            '    End If

            '    If sdl.isLobSpecific = True AndAlso lob <> Nothing AndAlso lob <> QuickQuoteObject.QuickQuoteLobType.None Then
            '        useLob = True
            '    End If
            '    If sdl.isPersOrCommSpecific = True AndAlso persOrComm <> Nothing AndAlso persOrComm <> QuickQuoteHelperClass.PersOrComm.None Then
            '        usePersOrComm = True
            '    End If

            '    For Each o As QuickQuoteStaticDataOption In sdl.Options
            '        Dim include As Boolean = False

            '        '12/6/2013 - added IF/ELSE for ignoreForLists property; previously used ELSE logic only
            '        If useIgnoreForListsProperty = True AndAlso o.ignoreForLists = True Then
            '            'ignore
            '        Else
            '            If useLob = True OrElse usePersOrComm = True Then
            '                If include = False AndAlso useLob = True Then
            '                    Dim lobText As String = String.Empty
            '                    Select Case lob
            '                        Case QuickQuoteObject.QuickQuoteLobType.AutoPersonal
            '                            lobText = "PPA"
            '                        Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
            '                            lobText = "CAP"
            '                        Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
            '                            lobText = "BOP"
            '                        Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
            '                            lobText = "CGL"
            '                        Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage
            '                            lobText = "CPP"
            '                        Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
            '                            lobText = "CPR"
            '                        Case QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal ', QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonalOld 'not needed anymore (11/27/2013)
            '                            lobText = "DFR"
            '                        Case QuickQuoteObject.QuickQuoteLobType.HomePersonal
            '                            lobText = "HOM"
            '                        Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
            '                            lobText = "WCP"
            '                    End Select
            '                    If String.IsNullOrEmpty(lobText) = False AndAlso String.IsNullOrEmpty(o.lobs) = False Then
            '                        If UCase(o.lobs).Contains(UCase(lobText)) = True Then
            '                            include = True
            '                        End If
            '                    Else
            '                        include = True
            '                    End If
            '                End If
            '                If include = False AndAlso usePersOrComm = True Then
            '                    If o.persOrComm <> Nothing AndAlso o.persOrComm <> QuickQuoteHelperClass.PersOrComm.None Then
            '                        If o.persOrComm = persOrComm Then
            '                            include = True
            '                        End If
            '                    Else
            '                        include = True
            '                    End If
            '                End If
            '            Else
            '                include = True
            '            End If
            '        End If

            '        If include = True Then
            '            'Dim qqOption As New QuickQuoteStaticDataOption
            '            'With qqOption
            '            '    .lobs = o.lobs
            '            '    .persOrComm = o.persOrComm
            '            '    .Text = o.Text
            '            '    .Value = o.Value
            '            'End With
            '            'options.Add(qqOption)

            '            'updated 11/26/2013 after adding logic for name/value pairs
            '            options.Add(CloneObject(o))
            '        End If
            '    Next
            'End If

            'Return options

            'updated 8/15/2014 to use new method
            Return GetStaticDataOptionsWithMatchingAttributes(sdl, Nothing, lob, persOrComm, useIgnoreForListsProperty)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetStaticDataOptionsWithMatchingAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal useIgnoreForListsProperty As Boolean = True) As List(Of QuickQuoteStaticDataOption)
            Dim options As New List(Of QuickQuoteStaticDataOption)

            If sdl IsNot Nothing AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
                Dim usePersOrComm As Boolean = False
                Dim useLob As Boolean = False

                'added 12/26/2013 - to only check for ignore for lists if it's been set on the SDL
                If useIgnoreForListsProperty = True AndAlso sdl.HasOptionsToIgnoreForLists = False Then
                    useIgnoreForListsProperty = False
                End If

                'If useIgnoreForListsProperty = False AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
                'updated 8/18/2014 for optionAttributes
                If useIgnoreForListsProperty = False AndAlso
                   (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso
                   (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso
                   (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
                    options = CloneObject(sdl.Options)
                    Return options
                    Exit Function
                End If

                If sdl.isLobSpecific = True AndAlso lob <> Nothing AndAlso lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                    useLob = True
                End If
                If sdl.isPersOrCommSpecific = True AndAlso persOrComm <> Nothing AndAlso persOrComm <> QuickQuoteHelperClass.PersOrComm.None Then
                    usePersOrComm = True
                End If

                For Each o As QuickQuoteStaticDataOption In sdl.Options
                    Dim include As Boolean = False

                    '12/6/2013 - added IF/ELSE for ignoreForLists property; previously used ELSE logic only
                    If useIgnoreForListsProperty = True AndAlso o.ignoreForLists = True Then
                        'ignore
                    Else
                        If useLob = True OrElse usePersOrComm = True Then
                            If include = False AndAlso useLob = True Then
                                Dim lobText As String = String.Empty
                                '12/7/2018 note: should probably update to use QuickQuote_ThreeLetterAbbreviation_ForLOB function to get abbreviation
                                'Select Case lob
                                '    Case QuickQuoteObject.QuickQuoteLobType.AutoPersonal
                                '        lobText = "PPA"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                                '        lobText = "CAP"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                                '        lobText = "BOP"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                                '        lobText = "CGL"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                                '        lobText = "CPP"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                                '        lobText = "CPR"
                                '    Case QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal ', QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonalOld 'not needed anymore (11/27/2013)
                                '        lobText = "DFR"
                                '    Case QuickQuoteObject.QuickQuoteLobType.HomePersonal
                                '        lobText = "HOM"
                                '    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                                '        lobText = "WCP"
                                '        'updated 1/21/2015
                                '    Case QuickQuoteObject.QuickQuoteLobType.Farm
                                '        lobText = "FAR"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialCrime
                                '        lobText = "CRM"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
                                '        lobText = "CIM"
                                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialGarage 'added 6/1/2018
                                '        lobText = "GAR"
                                'End Select
                                'updated 12/7/2018
                                lobText = QuickQuote_ThreeLetterAbbreviation_ForLOB(lob)
                                If String.IsNullOrEmpty(lobText) = False AndAlso String.IsNullOrEmpty(o.lobs) = False Then
                                    If UCase(o.lobs).Contains(UCase(lobText)) = True Then
                                        include = True
                                    End If
                                Else
                                    If _ForceLob = False OrElse (_ForceLob = True AndAlso String.IsNullOrEmpty(lobText)) Then
                                        include = True
                                    End If

                                End If

                            End If
                            If include = False AndAlso usePersOrComm = True Then
                                If o.persOrComm <> Nothing AndAlso o.persOrComm <> QuickQuoteHelperClass.PersOrComm.None Then
                                    If o.persOrComm = persOrComm Then
                                        include = True
                                    End If
                                Else
                                    include = True
                                End If
                            End If
                        Else
                            include = True
                        End If

                        'added 8/18/2014 for optionAttributes
                        If include = True Then
                            include = HasMatchOnAllAttributes(optionAttributes, o.MiscellaneousAttributes)
                        End If
                    End If

                    If include = True Then
                        'Dim qqOption As New QuickQuoteStaticDataOption
                        'With qqOption
                        '    .lobs = o.lobs
                        '    .persOrComm = o.persOrComm
                        '    .Text = o.Text
                        '    .Value = o.Value
                        'End With
                        'options.Add(qqOption)

                        'updated 11/26/2013 after adding logic for name/value pairs
                        options.Add(CloneObject(o))
                    End If
                Next
            End If
            _ForceLob = False
            Return options
        End Function

        Public Function GetStaticDataTextForValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim text As String = String.Empty

            ''If className <> Nothing AndAlso propertyName <> Nothing Then
            ''    text = GetStaticDataTextForValue(System.Enum.GetName(GetType(QuickQuoteClassName), className), System.Enum.GetName(GetType(QuickQuotePropertyName), propertyName), value, lob, persOrComm)
            ''End If
            ''either set of logic would work the same
            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            'text = GetStaticDataTextForValue(sdl, value, lob, persOrComm)

            'Return text

            'updated 8/15/2014 to use new method
            Return GetStaticDataTextForValue_MatchingOptionAttributes(className, propertyName, Nothing, value, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataTextForValueAndState(className, propertyName, Nothing, value, lob:=lob, persOrComm:=persOrComm)
        End Function

        ''' <summary>
        ''' Forces Diamond Static Data text look up to use the Specific LOB items only.
        ''' Otherwise it would look at the matching LOB and all Generic items. Usefull
        ''' for forcing non-standard Diamond options into dropdowns for things like
        ''' endorsements.
        ''' </summary>
        ''' <param name="ForceLob">True = Specific LOB only; False = Specific LOB and Non-specific items</param>
        ''' <param name="className"></param>
        ''' <param name="propertyName"></param>
        ''' <param name="value">The option's value. Usually a ddl value.</param>
        ''' <param name="lob"></param>
        ''' <param name="persOrComm"></param>
        ''' <returns></returns>
        Public Function GetStaticDataTextForValue_ForceLob(ForceLob As Boolean, ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            _ForceLob = ForceLob
            Return GetStaticDataTextForValue_MatchingOptionAttributes(className, propertyName, Nothing, value, lob, persOrComm)
        End Function
        Public Function GetStaticDataTextForValueAndState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataTextForValue_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, value, lob, persOrComm)
        End Function
        Public Function GetStaticDataTextForValueAndStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetStaticDataTextForValue_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, value, lob, persOrComm)
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataTextForValueWithSpecificTextMatching(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Dim text As String = String.Empty

            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(className, propertyName, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataTextForValueWithSpecificTextMatchingForState(className, propertyName, Nothing, value, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        Public Function GetStaticDataTextForValueWithSpecificTextMatchingForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        Public Function GetStaticDataTextForValueWithSpecificTextMatchingForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 11/23/2022
            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetStaticDataTextForValue_MatchingOptionAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            text = GetStaticDataTextForValue_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'text = GetStaticDataTextForValue_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, value, lob:=lob, persOrComm:=persOrComm)

            Return text
        End Function

        Public Function GetStaticDataTextForValue_MatchingOptionAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            text = GetStaticDataTextForValue_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm)

            Return text
        End Function
        Public Function GetStaticDataTextForValue_MatchingOptionAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/21/2022
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            text = GetStaticDataTextForValue_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm)

            Return text
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, value, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundValue:=foundValue)

            Return text
        End Function
        Public Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)

            Return text
        End Function
        Public Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 11/21/2022
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)

            Return text
        End Function
        Public Function GetStaticDataValueForText(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim value As String = String.Empty

            ''If className <> Nothing AndAlso propertyName <> Nothing Then
            ''    text = GetStaticDataValueForText(System.Enum.GetName(GetType(QuickQuoteClassName), className), System.Enum.GetName(GetType(QuickQuotePropertyName), propertyName), text, lob, persOrComm)
            ''End If
            ''either set of logic would work the same
            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            'value = GetStaticDataValueForText(sdl, text, lob, persOrComm)

            'Return value

            'updated 8/15/2014 to use new method
            Return GetStaticDataValueForText_MatchingOptionAttributes(className, propertyName, Nothing, text, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForTextAndState(className, propertyName, Nothing, text, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetStaticDataValueForTextAndState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataValueForText_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, text, lob, persOrComm)
        End Function
        Public Function GetStaticDataValueForTextAndStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetStaticDataValueForText_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, text, lob, persOrComm)
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataValueForTextWithSpecificTextMatching(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(className, propertyName, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForTextWithSpecificTextMatchingForState(className, propertyName, Nothing, text, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        Public Function GetStaticDataValueForTextWithSpecificTextMatchingForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        Public Function GetStaticDataValueForTextWithSpecificTextMatchingForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 11/23/2022
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetStaticDataValueForText_MatchingOptionAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            value = GetStaticDataValueForText_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'value = GetStaticDataValueForText_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, text, lob:=lob, persOrComm:=persOrComm)

            Return value
        End Function
        Public Function GetStaticDataValueForText_MatchingOptionAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            value = GetStaticDataValueForText_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm)

            Return value
        End Function
        Public Function GetStaticDataValueForText_MatchingOptionAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/22/2022
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            value = GetStaticDataValueForText_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm)

            Return value
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            value = GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)

            Return value
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, text, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        Public Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            value = GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)

            Return value
        End Function
        Public Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 11/21/2022
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            value = GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)

            Return value
        End Function
        '11/26/2013 - changed from Public to Private
        Private Function GetStaticDataTextForValue(ByVal className As String, ByVal propertyName As String, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim text As String = String.Empty

            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            'text = GetStaticDataTextForValue(sdl, value, lob, persOrComm)

            'Return text

            'updated 8/15/2014 to use new method
            Return GetStaticDataTextForValue_MatchingOptionAttributes(className, propertyName, Nothing, value, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataTextForValueAndState(className, propertyName, Nothing, value, lob:=lob, persOrComm:=persOrComm)
        End Function
        Private Function GetStaticDataTextForValueAndState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataTextForValue_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, value, lob, persOrComm)
        End Function
        Private Function GetStaticDataTextForValueAndStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetStaticDataTextForValue_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, value, lob, persOrComm)
        End Function
        'added new method 11/14/2017
        Private Function GetStaticDataTextForValueWithSpecificTextMatching(ByVal className As String, ByVal propertyName As String, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(className, propertyName, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataTextForValueWithSpecificTextMatchingForState(className, propertyName, Nothing, value, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        Private Function GetStaticDataTextForValueWithSpecificTextMatchingForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        Private Function GetStaticDataTextForValueWithSpecificTextMatchingForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 11/23/2022
            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Private Function GetStaticDataTextForValue_MatchingOptionAttributes(ByVal className As String, ByVal propertyName As String, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            text = GetStaticDataTextForValue_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm)

            Return text
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataTextForValue_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, value, lob:=lob, persOrComm:=persOrComm)
        End Function
        Private Function GetStaticDataTextForValue_MatchingOptionAttributesForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            text = GetStaticDataTextForValue_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm)

            Return text
        End Function
        Private Function GetStaticDataTextForValue_MatchingOptionAttributesForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/21/2022
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            text = GetStaticDataTextForValue_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm)

            Return text
        End Function
        'added new method 11/14/2017
        Private Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(ByVal className As String, ByVal propertyName As String, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)

            Return text
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, value, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        Private Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)

            Return text
        End Function
        Private Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String 'added 11/23/2022
            Dim text As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            text = GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)

            Return text
        End Function
        '11/26/2013 - changed from Public to Private
        Private Function GetStaticDataValueForText(ByVal className As String, ByVal propertyName As String, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim value As String = String.Empty

            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            'value = GetStaticDataValueForText(sdl, text, lob, persOrComm)

            'Return value

            'updated 8/15/2014 to use new method
            Return GetStaticDataValueForText_MatchingOptionAttributes(className, propertyName, Nothing, text, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForTextAndState(className, propertyName, Nothing, text, lob:=lob, persOrComm:=persOrComm)
        End Function
        Private Function GetStaticDataValueForTextAndState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataValueForText_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, text, lob, persOrComm)
        End Function
        Private Function GetStaticDataValueForTextAndStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetStaticDataValueForText_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, text, lob, persOrComm)
        End Function
        'added new method 11/14/2017
        Private Function GetStaticDataValueForTextWithSpecificTextMatching(ByVal className As String, ByVal propertyName As String, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(className, propertyName, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForTextWithSpecificTextMatchingForState(className, propertyName, Nothing, text, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        Private Function GetStaticDataValueForTextWithSpecificTextMatchingForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        Private Function GetStaticDataValueForTextWithSpecificTextMatchingForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 11/23/2022
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Private Function GetStaticDataValueForText_MatchingOptionAttributes(ByVal className As String, ByVal propertyName As String, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            value = GetStaticDataValueForText_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm)

            Return value
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForText_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, text, lob:=lob, persOrComm:=persOrComm)
        End Function
        Private Function GetStaticDataValueForText_MatchingOptionAttributesForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            value = GetStaticDataValueForText_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm)

            Return value
        End Function
        Private Function GetStaticDataValueForText_MatchingOptionAttributesForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/21/2022
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            value = GetStaticDataValueForText_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm)

            Return value
        End Function
        'added new method 11/14/2017
        Private Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(ByVal className As String, ByVal propertyName As String, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            value = GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)

            Return value
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, text, lob:=lob, persOrComm:=persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        Private Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 6/1/2018 (from original multi-state branch)
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            value = GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)

            Return value
        End Function
        Private Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributesForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String 'added 11/22/2022
            Dim value As String = String.Empty

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            value = GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, optionAttributes, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)

            Return value
        End Function
        Public Function GetStaticDataTextForValue(ByVal sdl As QuickQuoteStaticDataList, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim text As String = String.Empty

            ''Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm)
            ''updated 12/6/2013 for optional UseIgnoreForListsProperty param; should always get information here even if it's not returned w/ StaticDataOptions (for dropdowns)
            ''12/6/2013 - added IF/ELSE so it won't have to loop thru entire list of options just to add them if it doesn't need to; previously used ELSE logic only
            'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            '    'okay to use all Options here
            '    text = GetStaticDataTextForValue(sdl.Options, value)
            '    'testing 12/9/2013; clone works but okay sending sdl.Options here
            '    'text = GetStaticDataTextForValue(CloneObject(sdl.Options), value)
            'Else
            '    Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm, False)
            '    text = GetStaticDataTextForValue(options, value)
            'End If

            'Return text

            'updated 8/15/2014 to use new method
            Return GetStaticDataTextForValue_MatchingOptionAttributes(sdl, Nothing, value, lob, persOrComm)
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataTextForValueWithSpecificTextMatching(ByVal sdl As QuickQuoteStaticDataList, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Return GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(sdl, Nothing, value, lob, persOrComm, matchType:=matchType, foundValue:=foundValue)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetStaticDataTextForValue_MatchingOptionAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim text As String = String.Empty

            'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            'updated 8/18/2014 for optionAttribute
            If (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
                'okay to use all Options here
                text = GetStaticDataTextForValue(sdl.Options, value)
            Else
                Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, False)
                text = GetStaticDataTextForValue(options, value)
            End If

            Return text
        End Function

        'added new method 11/14/2017
        Public Function GetStaticDataTextForValueWithSpecificTextMatching_MatchingOptionAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Dim text As String = String.Empty
            foundValue = False

            If (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
                'okay to use all Options here
                text = GetStaticDataTextForValueWithSpecificTextMatching(sdl.Options, value, matchType:=matchType, foundValue:=foundValue)
            Else
                Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, False)
                text = GetStaticDataTextForValueWithSpecificTextMatching(options, value, matchType:=matchType, foundValue:=foundValue)
            End If

            Return text
        End Function
        Public Function GetStaticDataValueForText(ByVal sdl As QuickQuoteStaticDataList, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim value As String = String.Empty

            ''Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm)
            ''updated 12/6/2013 for optional UseIgnoreForListsProperty param; should always get information here even if it's not returned w/ StaticDataOptions (for dropdowns)
            ''12/6/2013 - added IF/ELSE so it won't have to loop thru entire list of options just to add them if it doesn't need to; previously used ELSE logic only
            'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            '    'okay to use all Options here
            '    value = GetStaticDataValueForText(sdl.Options, text)
            'Else
            '    Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm, False)
            '    value = GetStaticDataValueForText(options, text)
            'End If

            'Return value

            'updated 8/15/2014 to use new method
            Return GetStaticDataValueForText_MatchingOptionAttributes(sdl, Nothing, text, lob, persOrComm)
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataValueForTextWithSpecificTextMatching(ByVal sdl As QuickQuoteStaticDataList, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Return GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(sdl, Nothing, text, lob, persOrComm, matchType:=matchType, foundText:=foundText)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetStaticDataValueForText_MatchingOptionAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim value As String = String.Empty

            'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            'updated 8/18/2014 for optionAttribute
            If (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
                'okay to use all Options here
                value = GetStaticDataValueForText(sdl.Options, text)
            Else
                Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, False)
                value = GetStaticDataValueForText(options, text)
            End If

            Return value
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataValueForTextWithSpecificTextMatching_MatchingOptionAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Dim value As String = String.Empty
            foundText = False

            If (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
                'okay to use all Options here
                value = GetStaticDataValueForTextWithSpecificTextMatching(sdl.Options, text, matchType:=matchType, foundText:=foundText)
            Else
                Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, False)
                value = GetStaticDataValueForTextWithSpecificTextMatching(options, text, matchType:=matchType, foundText:=foundText)
            End If

            Return value
        End Function
        Public Function GetStaticDataTextForValue(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal value As String) As String
            'Dim text As String = String.Empty

            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If UCase(o.Value) = UCase(value) Then
            '            text = o.Text
            '            Exit For
            '        End If
            '    Next
            'End If

            'Return text

            'updated 12/2/2014 to use new method w/ additional param
            Dim foundValue As Boolean = False
            Return GetStaticDataTextForValue(options, value, foundValue)
        End Function
        Public Function GetStaticDataValueForText(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal text As String) As String
            'Dim value As String = String.Empty

            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If UCase(o.Text) = UCase(text) Then
            '            value = o.Value
            '            Exit For
            '        End If
            '    Next
            'End If

            'Return value

            'updated 12/2/2014 to use new method w/ additional param
            Dim foundText As Boolean = False
            Return GetStaticDataValueForText(options, text, foundText)
        End Function
        Public Function GetStaticDataTextForValue(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal value As String, ByRef foundValue As Boolean) As String
            Dim text As String = String.Empty
            foundValue = False

            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If UCase(o.Value) = UCase(value) Then
            '            foundValue = True
            '            text = o.Text
            '            Exit For
            '        End If
            '    Next
            'End If

            'updated 12/3/2014 to use new method
            Dim o As QuickQuoteStaticDataOption = GetStaticDataOption(options, StaticDataOptionSearchType.ByValue, value)
            If o IsNot Nothing Then
                foundValue = True
                text = o.Text
            End If

            Return text
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataTextForValueWithSpecificTextMatching(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal value As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundValue As Boolean = False) As String
            Dim text As String = String.Empty
            foundValue = False

            Dim o As QuickQuoteStaticDataOption = GetStaticDataOptionWithSpecificTextMatching(options, StaticDataOptionSearchType.ByValue, value, matchType:=matchType)
            If o IsNot Nothing Then
                foundValue = True
                text = o.Text
            End If

            Return text
        End Function
        Public Function GetStaticDataValueForText(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal text As String, ByRef foundText As Boolean) As String
            Dim value As String = String.Empty
            foundText = False

            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If UCase(o.Text) = UCase(text) Then
            '            foundText = True
            '            value = o.Value
            '            Exit For
            '        End If
            '    Next
            'End If

            'updated 12/3/2014 to use new method
            Dim o As QuickQuoteStaticDataOption = GetStaticDataOption(options, StaticDataOptionSearchType.ByText, text)
            If o IsNot Nothing Then
                foundText = True
                value = o.Value
            End If

            Return value
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataValueForTextWithSpecificTextMatching(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal text As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef foundText As Boolean = False) As String
            Dim value As String = String.Empty
            foundText = False

            Dim o As QuickQuoteStaticDataOption = GetStaticDataOptionWithSpecificTextMatching(options, StaticDataOptionSearchType.ByText, text, matchType:=matchType)
            If o IsNot Nothing Then
                foundText = True
                value = o.Value
            End If

            Return value
        End Function
        Public Function IsValidStaticDataText(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal text As String) As Boolean
            Dim foundText As Boolean = False
            Dim v As String = GetStaticDataValueForText(options, text, foundText)
            Return foundText
        End Function
        'added new method 11/14/2017
        Public Function IsValidStaticDataTextWithSpecificTextMatching(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal text As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean
            Dim foundText As Boolean = False
            Dim v As String = GetStaticDataValueForTextWithSpecificTextMatching(options, text, matchType:=matchType, foundText:=foundText)
            Return foundText
        End Function
        Public Function IsValidStaticDataValue(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal value As String) As Boolean
            Dim foundValue As Boolean = False
            Dim t As String = GetStaticDataTextForValue(options, value, foundValue)
            Return foundValue
        End Function
        'added new method 11/14/2017
        Public Function IsValidStaticDataValueWithSpecificTextMatching(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal value As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean
            Dim foundValue As Boolean = False
            Dim t As String = GetStaticDataTextForValueWithSpecificTextMatching(options, value, matchType:=matchType, foundValue:=foundValue)
            Return foundValue
        End Function
        'added 12/3/2014
        Enum StaticDataOptionSearchType
            None = 0
            ByValue = 1
            ByText = 2
        End Enum
        Public Function GetStaticDataOption(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String) As QuickQuoteStaticDataOption
            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    If searchType = StaticDataOptionSearchType.None Then
            '        searchType = StaticDataOptionSearchType.ByText
            '    End If
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If (searchType = StaticDataOptionSearchType.ByValue AndAlso UCase(o.Value) = UCase(valueOrText)) OrElse (searchType = StaticDataOptionSearchType.ByText AndAlso UCase(o.Text) = UCase(valueOrText)) Then
            '            Return o
            '            Exit For
            '        End If
            '    Next
            'End If

            'Return Nothing
            'updated 9/27/2021 to call newer method
            Return GetStaticDataOptionWithSpecificTextMatching(options, searchType, valueOrText, matchType:=TextMatchType.TextOnly_IgnoreCasing)
        End Function
        'added new method 11/14/2017
        Public Function GetStaticDataOptionWithSpecificTextMatching(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As QuickQuoteStaticDataOption
            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    If searchType = StaticDataOptionSearchType.None Then
            '        searchType = StaticDataOptionSearchType.ByText
            '    End If
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If (searchType = StaticDataOptionSearchType.ByValue AndAlso isTextMatch(o.Value, valueOrText, matchType:=matchType) = True) OrElse (searchType = StaticDataOptionSearchType.ByText AndAlso isTextMatch(o.Text, valueOrText, matchType:=matchType) = True) Then
            '            Return o
            '            Exit For
            '        End If
            '    Next
            'End If

            'Return Nothing
            'updated 9/27/2021 to use new method
            Dim o As QuickQuoteStaticDataOption = Nothing

            Dim retOptions As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsByTextOrValue(options, searchType, valueOrText, matchType:=matchType, maxReturnCount:=1)
            If retOptions IsNot Nothing AndAlso retOptions.Count > 0 AndAlso retOptions(0) IsNot Nothing Then
                o = retOptions(0)
            End If

            Return o
        End Function
        Public Function IsValidStaticDataText(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As Boolean
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataText(options, text)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'isValid = IsValidStaticDataTextForState(className, propertyName, Nothing, text, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)

            Return isValid
        End Function
        Public Function IsValidStaticDataTextForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As Boolean 'added 6/1/2018 (from original multi-state branch)
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataText(options, text)

            Return isValid
        End Function
        Public Function IsValidStaticDataTextForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As Boolean 'added 11/23/2022
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataText(options, text)

            Return isValid
        End Function
        'added new method 11/14/2017
        Public Function IsValidStaticDataTextWithSpecificTextMatching(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataTextWithSpecificTextMatching(options, text, matchType:=matchType)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'isValid = IsValidStaticDataTextWithSpecificTextMatchingForState(className, propertyName, Nothing, text, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty, matchType:=matchType)

            Return isValid
        End Function
        Public Function IsValidStaticDataTextWithSpecificTextMatchingForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean 'added 6/1/2018 (from original multi-state branch)
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataTextWithSpecificTextMatching(options, text, matchType:=matchType)

            Return isValid
        End Function
        Public Function IsValidStaticDataTextWithSpecificTextMatchingForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal text As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean 'added 11/23/2022
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataTextWithSpecificTextMatching(options, text, matchType:=matchType)

            Return isValid
        End Function
        Public Function IsValidStaticDataValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As Boolean
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataValue(options, value)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'isValid = IsValidStaticDataValueForState(className, propertyName, Nothing, value, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)

            Return isValid
        End Function
        Public Function IsValidStaticDataValueForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As Boolean 'added 6/1/2018 (from original multi-state branch)
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataValue(options, value)

            Return isValid
        End Function
        Public Function IsValidStaticDataValueForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As Boolean 'added 11/23/2022
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataValue(options, value)

            Return isValid
        End Function
        'added new method 11/14/2017
        Public Function IsValidStaticDataValueWithSpecificTextMatching(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataValueWithSpecificTextMatching(options, value, matchType:=matchType)

            Return isValid
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return IsValidStaticDataValueWithSpecificTextMatchingForState(className, propertyName, Nothing, value, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty, matchType:=matchType)
        End Function
        Public Function IsValidStaticDataValueWithSpecificTextMatchingForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean 'added 6/1/2018 (from original multi-state branch)
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataValueWithSpecificTextMatching(options, value, matchType:=matchType)

            Return isValid
        End Function
        Public Function IsValidStaticDataValueWithSpecificTextMatchingForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal value As String, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean 'added 11/23/2022
            Dim isValid As Boolean = False

            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
            Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, useIgnoreForListsProperty)
            isValid = IsValidStaticDataValueWithSpecificTextMatching(options, value, matchType:=matchType)

            Return isValid
        End Function
        Public Function GetStaticDataList(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName) As QuickQuoteStaticDataList
            Dim sdl As QuickQuoteStaticDataList = Nothing 'updated 3/2/2018 to default to nothing

            If className <> Nothing AndAlso propertyName <> Nothing Then
                sdl = GetStaticDataList(System.Enum.GetName(GetType(QuickQuoteClassName), className), System.Enum.GetName(GetType(QuickQuotePropertyName), propertyName))
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call GetStaticDataListForState w/ Nothing for qqState
            'sdl = GetStaticDataListForState(className, propertyName, Nothing)

            Return sdl
        End Function
        Public Function GetStaticDataListForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState) As QuickQuoteStaticDataList 'added 6/1/2018 (from original multi-state branch)
            Dim sdl As QuickQuoteStaticDataList = Nothing

            If className <> Nothing AndAlso propertyName <> Nothing Then
                sdl = GetStaticDataListForState(System.Enum.GetName(GetType(QuickQuoteClassName), className), System.Enum.GetName(GetType(QuickQuotePropertyName), propertyName), qqState)
            End If

            Return sdl
        End Function
        Public Function GetStaticDataListForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany) As QuickQuoteStaticDataList 'added 11/21/2022
            Dim sdl As QuickQuoteStaticDataList = Nothing

            If className <> Nothing AndAlso propertyName <> Nothing Then
                sdl = GetStaticDataListForStateAndCompany(System.Enum.GetName(GetType(QuickQuoteClassName), className), System.Enum.GetName(GetType(QuickQuotePropertyName), propertyName), qqState, qqCompany)
            End If

            Return sdl
        End Function
        '11/26/2013 - changed from Public to Private
        Private Function GetStaticDataList(ByVal className As String, ByVal propertyName As String, Optional ByRef retryAttempt As Integer = 0) As QuickQuoteStaticDataList
            Dim sdl As QuickQuoteStaticDataList = Nothing 'updated 6/1/2018 (from original multi-state branch) to default to nothing

            If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
                sdl = RetrieveStaticDataListFromMemory(className, propertyName)
                If sdl Is Nothing Then
                    Dim xmlDoc As XmlDocument = GetStaticDataXmlDoc() 'updated 6/1/2018 (from original multi-state branch) to explicitly declare type
                    If xmlDoc IsNot Nothing Then
                        Dim lookupSection As XmlNode
                        lookupSection = xmlDoc.SelectSingleNode("/LookupLists/" & className & "/" & propertyName)

                        If lookupSection Is Nothing Then
                            lookupSection = xmlDoc.Item("LookupLists/" & className & "/" & propertyName)
                        End If

                        If lookupSection Is Nothing Then
                            lookupSection = xmlDoc.GetElementsByTagName("LookupLists/" & className & "/" & propertyName).Item(0)
                        End If

                        'If lookupSection IsNot Nothing AndAlso lookupSection.HasChildNodes = True Then'previously looking for both; will now check separately so it will always get attributes if the node exists
                        If lookupSection IsNot Nothing Then
                            sdl = New QuickQuoteStaticDataList

                            sdl.ClassToUse = className
                            sdl.PropertyToUse = propertyName

                            If lookupSection.Attributes IsNot Nothing Then
                                For Each att As XmlAttribute In lookupSection.Attributes
                                    Select Case UCase(att.Name)
                                        Case UCase("isLobSpecific")
                                            If UCase(att.Value) = "YES" OrElse UCase(att.Value) = "TRUE" Then
                                                sdl.isLobSpecific = True
                                            End If
                                        Case UCase("isPersOrCommSpecific")
                                            If UCase(att.Value) = "YES" OrElse UCase(att.Value) = "TRUE" Then
                                                sdl.isPersOrCommSpecific = True
                                            End If
                                        Case UCase("classToUse")
                                            If String.IsNullOrEmpty(att.Value) = False Then
                                                sdl.ClassToUse = att.Value
                                            End If
                                        Case UCase("propertyToUse")
                                            If String.IsNullOrEmpty(att.Value) = False Then
                                                sdl.PropertyToUse = att.Value
                                            End If
                                    End Select
                                Next
                            End If

                            If UCase(sdl.ClassToUse) <> UCase(className) OrElse UCase(sdl.PropertyToUse) <> UCase(propertyName) Then
                                'need to use a separate xml node
                                '*store what we got in memory/cache
                                StoreStaticDataListInMemory(sdl, className, propertyName)
                                If retryAttempt >= 20 Then
                                    'make sure there's not an endless loop caused by circular references or something
                                    Return sdl
                                    Exit Function
                                Else
                                    retryAttempt += 1
                                End If
                                Return GetStaticDataList(sdl.ClassToUse, sdl.PropertyToUse, retryAttempt)
                                Exit Function
                            End If

                            If lookupSection.HasChildNodes = True Then 'previous code had this statement included w/ lookupSection IsNot Nothing
                                sdl.Options = New List(Of QuickQuoteStaticDataOption)

                                For Each node As XmlNode In lookupSection.ChildNodes
                                    Select Case node.NodeType
                                        Case XmlNodeType.Element
                                            Select Case UCase(node.Name)
                                                Case "OPTION"
                                                    Dim qqOption As New QuickQuoteStaticDataOption

                                                    If node.Attributes IsNot Nothing Then
                                                        For Each oAtt As XmlAttribute In node.Attributes
                                                            Select Case UCase(oAtt.Name)
                                                                Case UCase("lobs")
                                                                    qqOption.lobs = oAtt.Value
                                                                Case UCase("persOrComm")
                                                                    Select Case UCase(oAtt.Value)
                                                                        Case "PERS"
                                                                            qqOption.persOrComm = QuickQuoteHelperClass.PersOrComm.Pers
                                                                        Case "COMM"
                                                                            qqOption.persOrComm = QuickQuoteHelperClass.PersOrComm.Comm
                                                                    End Select
                                                                Case UCase("ignoreForLists") 'added 12/6/2013
                                                                    If UCase(oAtt.Value) = "YES" OrElse UCase(oAtt.Value) = "TRUE" Then
                                                                        qqOption.ignoreForLists = True
                                                                        'added 12/26/2013
                                                                        sdl.HasOptionsToIgnoreForLists = True
                                                                    End If
                                                                Case Else 'added 8/15/2014
                                                                    If qqOption.MiscellaneousAttributes Is Nothing Then
                                                                        qqOption.MiscellaneousAttributes = New List(Of QuickQuoteStaticDataAttribute)
                                                                    End If
                                                                    Dim miscAtt As New QuickQuoteStaticDataAttribute
                                                                    If miscAtt.NameValuePair Is Nothing Then
                                                                        miscAtt.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                    End If
                                                                    miscAtt.NameValuePair.Name = oAtt.Name
                                                                    miscAtt.NameValuePair.Value = oAtt.Value
                                                                    qqOption.MiscellaneousAttributes.Add(miscAtt)
                                                            End Select
                                                        Next
                                                    End If

                                                    For Each oNode As XmlNode In node.ChildNodes
                                                        Select Case oNode.NodeType
                                                            Case XmlNodeType.Element
                                                                Select Case UCase(oNode.Name)
                                                                    Case "TEXT"
                                                                        qqOption.Text = oNode.InnerText
                                                                    Case "VALUE"
                                                                        qqOption.Value = oNode.InnerText
                                                                    Case Else 'added 11/26/2013
                                                                        'If qqOption.NameValuePairs Is Nothing Then
                                                                        '    qqOption.NameValuePairs = New List(Of QuickQuoteStaticDataNameValuePair)
                                                                        'End If
                                                                        'Dim nvp As New QuickQuoteStaticDataNameValuePair
                                                                        'nvp.Name = oNode.Name
                                                                        'nvp.Value = oNode.InnerText

                                                                        'qqOption.NameValuePairs.Add(nvp)

                                                                        'updated 8/15/2014
                                                                        If qqOption.MiscellaneousElements Is Nothing Then
                                                                            qqOption.MiscellaneousElements = New List(Of QuickQuoteStaticDataElement)
                                                                        End If
                                                                        Dim miscEl As New QuickQuoteStaticDataElement
                                                                        If miscEl.NameValuePair Is Nothing Then
                                                                            miscEl.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                        End If
                                                                        miscEl.NameValuePair.Name = oNode.Name
                                                                        miscEl.NameValuePair.Value = oNode.InnerText

                                                                        If oNode.Attributes IsNot Nothing AndAlso oNode.Attributes.Count > 0 Then
                                                                            If miscEl.Attributes Is Nothing Then
                                                                                miscEl.Attributes = New List(Of QuickQuoteStaticDataAttribute)
                                                                            End If
                                                                            For Each eAtt As XmlAttribute In oNode.Attributes
                                                                                Dim miscElAtt As New QuickQuoteStaticDataAttribute
                                                                                If miscElAtt.NameValuePair Is Nothing Then
                                                                                    miscElAtt.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                                End If
                                                                                miscElAtt.NameValuePair.Name = eAtt.Name
                                                                                miscElAtt.NameValuePair.Value = eAtt.Value
                                                                                miscEl.Attributes.Add(miscElAtt)
                                                                            Next
                                                                        End If

                                                                        qqOption.MiscellaneousElements.Add(miscEl)
                                                                End Select
                                                        End Select
                                                    Next
                                                    sdl.Options.Add(qqOption)
                                            End Select
                                    End Select
                                Next
                            End If
                            '*store what we got in memory/cache
                            StoreStaticDataListInMemory(sdl, className, propertyName)
                        Else
                            'no dice
                        End If
                    End If
                Else
                    'sdl was found in memory

                    If UCase(sdl.ClassToUse) <> UCase(className) OrElse UCase(sdl.PropertyToUse) <> UCase(propertyName) Then
                        'need to use a separate xml node
                        If retryAttempt >= 20 Then
                            'make sure there's not an endless loop caused by circular references or something
                            Return sdl
                            Exit Function
                        Else
                            retryAttempt += 1
                        End If
                        Return GetStaticDataList(sdl.ClassToUse, sdl.PropertyToUse, retryAttempt)
                        Exit Function
                    End If
                End If
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call GetStaticDataListForState w/ Nothing for qqState
            'sdl = GetStaticDataListForState(className, propertyName, Nothing, retryAttempt:=retryAttempt)

            Return sdl
        End Function
        Private Function GetStaticDataListForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, Optional ByRef retryAttempt As Integer = 0) As QuickQuoteStaticDataList 'added 6/1/2018 (from original multi-state branch)
            Dim sdl As QuickQuoteStaticDataList = Nothing

            If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
                sdl = RetrieveStaticDataListFromMemoryForState(className, propertyName, qqState)
                If sdl Is Nothing Then
                    Dim xmlDoc As XmlDocument = GetStaticDataXmlDocForState(qqState)
                    If xmlDoc IsNot Nothing Then
                        Dim lookupSection As XmlNode
                        lookupSection = xmlDoc.SelectSingleNode("/LookupLists/" & className & "/" & propertyName)

                        If lookupSection Is Nothing Then
                            lookupSection = xmlDoc.Item("LookupLists/" & className & "/" & propertyName)
                        End If

                        If lookupSection Is Nothing Then
                            lookupSection = xmlDoc.GetElementsByTagName("LookupLists/" & className & "/" & propertyName).Item(0)
                        End If

                        'If lookupSection IsNot Nothing AndAlso lookupSection.HasChildNodes = True Then'previously looking for both; will now check separately so it will always get attributes if the node exists
                        If lookupSection IsNot Nothing Then
                            sdl = New QuickQuoteStaticDataList

                            sdl.ClassToUse = className
                            sdl.PropertyToUse = propertyName

                            If lookupSection.Attributes IsNot Nothing Then
                                For Each att As XmlAttribute In lookupSection.Attributes
                                    Select Case UCase(att.Name)
                                        Case UCase("isLobSpecific")
                                            If UCase(att.Value) = "YES" OrElse UCase(att.Value) = "TRUE" Then
                                                sdl.isLobSpecific = True
                                            End If
                                        Case UCase("isPersOrCommSpecific")
                                            If UCase(att.Value) = "YES" OrElse UCase(att.Value) = "TRUE" Then
                                                sdl.isPersOrCommSpecific = True
                                            End If
                                        Case UCase("classToUse")
                                            If String.IsNullOrEmpty(att.Value) = False Then
                                                sdl.ClassToUse = att.Value
                                            End If
                                        Case UCase("propertyToUse")
                                            If String.IsNullOrEmpty(att.Value) = False Then
                                                sdl.PropertyToUse = att.Value
                                            End If
                                    End Select
                                Next
                            End If

                            If UCase(sdl.ClassToUse) <> UCase(className) OrElse UCase(sdl.PropertyToUse) <> UCase(propertyName) Then
                                'need to use a separate xml node
                                '*store what we got in memory/cache
                                StoreStaticDataListInMemoryForState(sdl, className, propertyName, qqState)
                                If retryAttempt >= 20 Then
                                    'make sure there's not an endless loop caused by circular references or something
                                    Return sdl
                                    Exit Function
                                Else
                                    retryAttempt += 1
                                End If
                                Return GetStaticDataListForState(sdl.ClassToUse, sdl.PropertyToUse, qqState, retryAttempt)
                                Exit Function
                            End If

                            If lookupSection.HasChildNodes = True Then 'previous code had this statement included w/ lookupSection IsNot Nothing
                                sdl.Options = New List(Of QuickQuoteStaticDataOption)

                                For Each node As XmlNode In lookupSection.ChildNodes
                                    Select Case node.NodeType
                                        Case XmlNodeType.Element
                                            Select Case UCase(node.Name)
                                                Case "OPTION"
                                                    Dim qqOption As New QuickQuoteStaticDataOption

                                                    If node.Attributes IsNot Nothing Then
                                                        For Each oAtt As XmlAttribute In node.Attributes
                                                            Select Case UCase(oAtt.Name)
                                                                Case UCase("lobs")
                                                                    qqOption.lobs = oAtt.Value
                                                                Case UCase("persOrComm")
                                                                    Select Case UCase(oAtt.Value)
                                                                        Case "PERS"
                                                                            qqOption.persOrComm = QuickQuoteHelperClass.PersOrComm.Pers
                                                                        Case "COMM"
                                                                            qqOption.persOrComm = QuickQuoteHelperClass.PersOrComm.Comm
                                                                    End Select
                                                                Case UCase("ignoreForLists")
                                                                    If UCase(oAtt.Value) = "YES" OrElse UCase(oAtt.Value) = "TRUE" Then
                                                                        qqOption.ignoreForLists = True
                                                                        sdl.HasOptionsToIgnoreForLists = True
                                                                    End If
                                                                Case Else
                                                                    If qqOption.MiscellaneousAttributes Is Nothing Then
                                                                        qqOption.MiscellaneousAttributes = New List(Of QuickQuoteStaticDataAttribute)
                                                                    End If
                                                                    Dim miscAtt As New QuickQuoteStaticDataAttribute
                                                                    If miscAtt.NameValuePair Is Nothing Then
                                                                        miscAtt.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                    End If
                                                                    miscAtt.NameValuePair.Name = oAtt.Name
                                                                    miscAtt.NameValuePair.Value = oAtt.Value
                                                                    qqOption.MiscellaneousAttributes.Add(miscAtt)
                                                            End Select
                                                        Next
                                                    End If

                                                    For Each oNode As XmlNode In node.ChildNodes
                                                        Select Case oNode.NodeType
                                                            Case XmlNodeType.Element
                                                                Select Case UCase(oNode.Name)
                                                                    Case "TEXT"
                                                                        qqOption.Text = oNode.InnerText
                                                                    Case "VALUE"
                                                                        qqOption.Value = oNode.InnerText
                                                                    Case Else
                                                                        If qqOption.MiscellaneousElements Is Nothing Then
                                                                            qqOption.MiscellaneousElements = New List(Of QuickQuoteStaticDataElement)
                                                                        End If
                                                                        Dim miscEl As New QuickQuoteStaticDataElement
                                                                        If miscEl.NameValuePair Is Nothing Then
                                                                            miscEl.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                        End If
                                                                        miscEl.NameValuePair.Name = oNode.Name
                                                                        miscEl.NameValuePair.Value = oNode.InnerText

                                                                        If oNode.Attributes IsNot Nothing AndAlso oNode.Attributes.Count > 0 Then
                                                                            If miscEl.Attributes Is Nothing Then
                                                                                miscEl.Attributes = New List(Of QuickQuoteStaticDataAttribute)
                                                                            End If
                                                                            For Each eAtt As XmlAttribute In oNode.Attributes
                                                                                Dim miscElAtt As New QuickQuoteStaticDataAttribute
                                                                                If miscElAtt.NameValuePair Is Nothing Then
                                                                                    miscElAtt.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                                End If
                                                                                miscElAtt.NameValuePair.Name = eAtt.Name
                                                                                miscElAtt.NameValuePair.Value = eAtt.Value
                                                                                miscEl.Attributes.Add(miscElAtt)
                                                                            Next
                                                                        End If

                                                                        qqOption.MiscellaneousElements.Add(miscEl)
                                                                End Select
                                                        End Select
                                                    Next
                                                    sdl.Options.Add(qqOption)
                                            End Select
                                    End Select
                                Next
                            End If
                            '*store what we got in memory/cache
                            StoreStaticDataListInMemoryForState(sdl, className, propertyName, qqState)
                        Else
                            'no dice
                        End If
                    End If

                    'added 6/1/2018 (from original multi-state branch)
                    If sdl Is Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                        Return GetStaticDataList(className, propertyName)
                    End If
                Else
                    'sdl was found in memory

                    If UCase(sdl.ClassToUse) <> UCase(className) OrElse UCase(sdl.PropertyToUse) <> UCase(propertyName) Then
                        'need to use a separate xml node
                        If retryAttempt >= 20 Then
                            'make sure there's not an endless loop caused by circular references or something
                            Return sdl
                            Exit Function
                        Else
                            retryAttempt += 1
                        End If
                        Return GetStaticDataListForState(sdl.ClassToUse, sdl.PropertyToUse, qqState, retryAttempt)
                        Exit Function
                    End If
                End If
            End If

            Return sdl
        End Function
        Private Function GetStaticDataListForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, Optional ByRef retryAttempt As Integer = 0, Optional ByVal justSearchForCompanyStateOrBaseIfNothingFound As Boolean = True) As QuickQuoteStaticDataList 'added 11/21/2022
            Dim sdl As QuickQuoteStaticDataList = Nothing

            If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
                sdl = RetrieveStaticDataListFromMemoryForStateAndCompany(className, propertyName, qqState, qqCompany)
                If sdl Is Nothing Then
                    Dim xmlDoc As XmlDocument = GetStaticDataXmlDocForStateAndCompany(qqState, qqCompany)
                    If xmlDoc IsNot Nothing Then
                        Dim lookupSection As XmlNode
                        lookupSection = xmlDoc.SelectSingleNode("/LookupLists/" & className & "/" & propertyName)

                        If lookupSection Is Nothing Then
                            lookupSection = xmlDoc.Item("LookupLists/" & className & "/" & propertyName)
                        End If

                        If lookupSection Is Nothing Then
                            lookupSection = xmlDoc.GetElementsByTagName("LookupLists/" & className & "/" & propertyName).Item(0)
                        End If

                        'If lookupSection IsNot Nothing AndAlso lookupSection.HasChildNodes = True Then'previously looking for both; will now check separately so it will always get attributes if the node exists
                        If lookupSection IsNot Nothing Then
                            sdl = New QuickQuoteStaticDataList

                            sdl.ClassToUse = className
                            sdl.PropertyToUse = propertyName

                            If lookupSection.Attributes IsNot Nothing Then
                                For Each att As XmlAttribute In lookupSection.Attributes
                                    Select Case UCase(att.Name)
                                        Case UCase("isLobSpecific")
                                            If UCase(att.Value) = "YES" OrElse UCase(att.Value) = "TRUE" Then
                                                sdl.isLobSpecific = True
                                            End If
                                        Case UCase("isPersOrCommSpecific")
                                            If UCase(att.Value) = "YES" OrElse UCase(att.Value) = "TRUE" Then
                                                sdl.isPersOrCommSpecific = True
                                            End If
                                        Case UCase("classToUse")
                                            If String.IsNullOrEmpty(att.Value) = False Then
                                                sdl.ClassToUse = att.Value
                                            End If
                                        Case UCase("propertyToUse")
                                            If String.IsNullOrEmpty(att.Value) = False Then
                                                sdl.PropertyToUse = att.Value
                                            End If
                                    End Select
                                Next
                            End If

                            If UCase(sdl.ClassToUse) <> UCase(className) OrElse UCase(sdl.PropertyToUse) <> UCase(propertyName) Then
                                'need to use a separate xml node
                                '*store what we got in memory/cache
                                StoreStaticDataListInMemoryForStateAndCompany(sdl, className, propertyName, qqState, qqCompany)
                                If retryAttempt >= 20 Then
                                    'make sure there's not an endless loop caused by circular references or something
                                    Return sdl
                                    Exit Function
                                Else
                                    retryAttempt += 1
                                End If
                                Return GetStaticDataListForStateAndCompany(sdl.ClassToUse, sdl.PropertyToUse, qqState, qqCompany, retryAttempt)
                                Exit Function
                            End If

                            If lookupSection.HasChildNodes = True Then 'previous code had this statement included w/ lookupSection IsNot Nothing
                                sdl.Options = New List(Of QuickQuoteStaticDataOption)

                                For Each node As XmlNode In lookupSection.ChildNodes
                                    Select Case node.NodeType
                                        Case XmlNodeType.Element
                                            Select Case UCase(node.Name)
                                                Case "OPTION"
                                                    Dim qqOption As New QuickQuoteStaticDataOption

                                                    If node.Attributes IsNot Nothing Then
                                                        For Each oAtt As XmlAttribute In node.Attributes
                                                            Select Case UCase(oAtt.Name)
                                                                Case UCase("lobs")
                                                                    qqOption.lobs = oAtt.Value
                                                                Case UCase("persOrComm")
                                                                    Select Case UCase(oAtt.Value)
                                                                        Case "PERS"
                                                                            qqOption.persOrComm = QuickQuoteHelperClass.PersOrComm.Pers
                                                                        Case "COMM"
                                                                            qqOption.persOrComm = QuickQuoteHelperClass.PersOrComm.Comm
                                                                    End Select
                                                                Case UCase("ignoreForLists")
                                                                    If UCase(oAtt.Value) = "YES" OrElse UCase(oAtt.Value) = "TRUE" Then
                                                                        qqOption.ignoreForLists = True
                                                                        sdl.HasOptionsToIgnoreForLists = True
                                                                    End If
                                                                Case Else
                                                                    If qqOption.MiscellaneousAttributes Is Nothing Then
                                                                        qqOption.MiscellaneousAttributes = New List(Of QuickQuoteStaticDataAttribute)
                                                                    End If
                                                                    Dim miscAtt As New QuickQuoteStaticDataAttribute
                                                                    If miscAtt.NameValuePair Is Nothing Then
                                                                        miscAtt.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                    End If
                                                                    miscAtt.NameValuePair.Name = oAtt.Name
                                                                    miscAtt.NameValuePair.Value = oAtt.Value
                                                                    qqOption.MiscellaneousAttributes.Add(miscAtt)
                                                            End Select
                                                        Next
                                                    End If

                                                    For Each oNode As XmlNode In node.ChildNodes
                                                        Select Case oNode.NodeType
                                                            Case XmlNodeType.Element
                                                                Select Case UCase(oNode.Name)
                                                                    Case "TEXT"
                                                                        qqOption.Text = oNode.InnerText
                                                                    Case "VALUE"
                                                                        qqOption.Value = oNode.InnerText
                                                                    Case Else
                                                                        If qqOption.MiscellaneousElements Is Nothing Then
                                                                            qqOption.MiscellaneousElements = New List(Of QuickQuoteStaticDataElement)
                                                                        End If
                                                                        Dim miscEl As New QuickQuoteStaticDataElement
                                                                        If miscEl.NameValuePair Is Nothing Then
                                                                            miscEl.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                        End If
                                                                        miscEl.NameValuePair.Name = oNode.Name
                                                                        miscEl.NameValuePair.Value = oNode.InnerText

                                                                        If oNode.Attributes IsNot Nothing AndAlso oNode.Attributes.Count > 0 Then
                                                                            If miscEl.Attributes Is Nothing Then
                                                                                miscEl.Attributes = New List(Of QuickQuoteStaticDataAttribute)
                                                                            End If
                                                                            For Each eAtt As XmlAttribute In oNode.Attributes
                                                                                Dim miscElAtt As New QuickQuoteStaticDataAttribute
                                                                                If miscElAtt.NameValuePair Is Nothing Then
                                                                                    miscElAtt.NameValuePair = New QuickQuoteStaticDataNameValuePair
                                                                                End If
                                                                                miscElAtt.NameValuePair.Name = eAtt.Name
                                                                                miscElAtt.NameValuePair.Value = eAtt.Value
                                                                                miscEl.Attributes.Add(miscElAtt)
                                                                            Next
                                                                        End If

                                                                        qqOption.MiscellaneousElements.Add(miscEl)
                                                                End Select
                                                        End Select
                                                    Next
                                                    sdl.Options.Add(qqOption)
                                            End Select
                                    End Select
                                Next
                            End If
                            '*store what we got in memory/cache
                            StoreStaticDataListInMemoryForStateAndCompany(sdl, className, propertyName, qqState, qqCompany)
                        Else
                            'no dice
                        End If
                    End If

                    'nothing for state and company, so just look for state (similar to how state method will just look for base)
                    'If sdl Is Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteCompany), qqCompany) = True AndAlso qqCompany <> QuickQuoteCompany.None Then
                    '    Return GetStaticDataListForState(className, propertyName, qqState)
                    '    Exit Function
                    'End If
                    'maybe look for just company 1st and then just state
                    If sdl Is Nothing AndAlso justSearchForCompanyStateOrBaseIfNothingFound = True Then
                        If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None AndAlso System.Enum.IsDefined(GetType(QuickQuoteCompany), qqCompany) = True AndAlso qqCompany <> QuickQuoteCompany.None Then
                            'we have State and Company; try Company by itself
                            sdl = GetStaticDataListForStateAndCompany(className, propertyName, QuickQuoteState.None, qqCompany, justSearchForCompanyStateOrBaseIfNothingFound:=False)
                        End If
                        If sdl Is Nothing Then
                            'still nothing, so try State by itself, which will try Base if nothing
                            sdl = GetStaticDataListForState(className, propertyName, qqState)
                        End If
                    End If
                Else
                    'sdl was found in memory

                    If UCase(sdl.ClassToUse) <> UCase(className) OrElse UCase(sdl.PropertyToUse) <> UCase(propertyName) Then
                        'need to use a separate xml node
                        If retryAttempt >= 20 Then
                            'make sure there's not an endless loop caused by circular references or something
                            Return sdl
                            Exit Function
                        Else
                            retryAttempt += 1
                        End If
                        Return GetStaticDataListForStateAndCompany(sdl.ClassToUse, sdl.PropertyToUse, qqState, qqCompany, retryAttempt)
                        Exit Function
                    End If
                End If
            End If

            Return sdl
        End Function
        Public Function RetrieveStaticDataListFromMemory(ByVal className As String, ByVal propertyName As String) As QuickQuoteStaticDataList
            Dim sdl As QuickQuoteStaticDataList = Nothing 'updated 6/1/2018 (from original multi-state branch) to default to nothing

            Dim sdlName As String = GetStaticDataListName(className, propertyName)
            If String.IsNullOrEmpty(sdlName) = False Then
                'If HttpContext.Current?.Cache(sdlName) IsNot Nothing Then
                '    sdl = CType(HttpContext.Current?.Cache(sdlName), QuickQuoteStaticDataList)
                'End If
                If MemoryCache.Default.Item(sdlName) IsNot Nothing Then
                    sdl = CType(MemoryCache.Default.Item(sdlName), QuickQuoteStaticDataList)
                End If
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call RetrieveStaticDataListFromMemoryForState w/ Nothing for qqState
            'sdl = RetrieveStaticDataListFromMemoryForState(className, propertyName, Nothing)

            Return sdl
        End Function
        Public Function RetrieveStaticDataListFromMemoryForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState) As QuickQuoteStaticDataList 'added 6/1/2018 (from original multi-state branch)
            Dim sdl As QuickQuoteStaticDataList = Nothing

            Dim sdlName As String = GetStaticDataListNameForState(className, propertyName, qqState)
            If String.IsNullOrEmpty(sdlName) = False Then
                If MemoryCache.Default.Item(sdlName) IsNot Nothing Then
                    sdl = CType(MemoryCache.Default.Item(sdlName), QuickQuoteStaticDataList)
                End If
            End If

            Return sdl
        End Function
        Public Function RetrieveStaticDataListFromMemoryForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany) As QuickQuoteStaticDataList 'added 11/21/2022
            Dim sdl As QuickQuoteStaticDataList = Nothing

            Dim sdlName As String = GetStaticDataListNameForStateAndCompany(className, propertyName, qqState, qqCompany)
            If String.IsNullOrEmpty(sdlName) = False Then
                If MemoryCache.Default.Item(sdlName) IsNot Nothing Then
                    sdl = CType(MemoryCache.Default.Item(sdlName), QuickQuoteStaticDataList)
                End If
            End If

            Return sdl
        End Function
        Public Sub StoreStaticDataListInMemory(ByVal sdl As QuickQuoteStaticDataList, ByVal className As String, ByVal propertyName As String)
            If sdl IsNot Nothing Then
                Dim sdlName As String = GetStaticDataListName(className, propertyName)
                If String.IsNullOrEmpty(sdlName) = False Then
                    StoreStaticDataObjectInMemory(sdlName, sdl)
                End If
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call StoreStaticDataListInMemoryForState w/ Nothing for qqState
            'StoreStaticDataListInMemoryForState(sdl, className, propertyName, Nothing)
        End Sub
        Public Sub StoreStaticDataListInMemoryForState(ByVal sdl As QuickQuoteStaticDataList, ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState) 'added 6/1/2018 (from original multi-state branch)
            If sdl IsNot Nothing Then
                Dim sdlName As String = GetStaticDataListNameForState(className, propertyName, qqState)
                If String.IsNullOrEmpty(sdlName) = False Then
                    StoreStaticDataObjectInMemoryForState(sdlName, sdl, qqState)
                End If
            End If
        End Sub
        Public Sub StoreStaticDataListInMemoryForStateAndCompany(ByVal sdl As QuickQuoteStaticDataList, ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany) 'added 11/21/2022
            If sdl IsNot Nothing Then
                Dim sdlName As String = GetStaticDataListNameForStateAndCompany(className, propertyName, qqState, qqCompany)
                If String.IsNullOrEmpty(sdlName) = False Then
                    StoreStaticDataObjectInMemoryForStateAndCompany(sdlName, sdl, qqState, qqCompany)
                End If
            End If
        End Sub
        Public Function GetStaticDataListName(ByVal className As String, ByVal propertyName As String) As String
            Dim sdlName As String = String.Empty

            If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
                sdlName = "QuickQuote_StaticDataList_" & className & "_" & propertyName
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call GetStaticDataListNameForState w/ Nothing for qqState
            'GetStaticDataListNameForState(className, propertyName, Nothing)

            Return sdlName
        End Function
        Public Function GetStaticDataListNameForState(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState) As String 'added 6/1/2018 (from original multi-state branch)
            Dim sdlName As String = String.Empty

            If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
                'sdlName = appendText("QuickQuote_StaticDataList_", StateAbbreviationForQuickQuoteState(qqState), splitter:="_") & "_" & className & "_" & propertyName
                'updated 8/19/2018 to prevent it from having multiple underscores after StaticDataList; can now find the same list in Memory from GetStaticDataListName when passing qqState=None here
                sdlName = appendText("QuickQuote_StaticDataList", StateAbbreviationForQuickQuoteState(qqState), splitter:="_") & "_" & className & "_" & propertyName
            End If

            Return sdlName
        End Function
        Public Function GetStaticDataListNameForStateAndCompany(ByVal className As String, ByVal propertyName As String, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany) As String 'added 11/21/2022
            Dim sdlName As String = String.Empty

            If String.IsNullOrEmpty(className) = False AndAlso String.IsNullOrEmpty(propertyName) = False Then
                sdlName = appendText("QuickQuote_StaticDataList", StateAbbreviationForQuickQuoteState(qqState), splitter:="_")

                Dim compId As Integer = DiamondCompanyIdForQuickQuoteCompany(qqCompany, defaultToIndianaFarmersMutual:=False)
                If compId > 0 Then
                    sdlName &= "_Company" & compId.ToString
                End If

                sdlName &= "_" & className & "_" & propertyName
            End If

            Return sdlName
        End Function
        'added 11/26/2013
        Public Function GetRelatedStaticDataValueForOptionValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            ''Dim relatedValue As String = String.Empty

            ' ''could write a different way but no point looking for options if enum isn't valid
            ''If relatedPropertyName <> Nothing Then
            ''    Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            ''    relatedValue = GetRelatedStaticDataValueForOptionValue(sdl, oValue, relatedPropertyName, lob, persOrComm)
            ''End If

            ''Return relatedValue

            ''updated 8/15/2014 to use new method
            'Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(className, propertyName, oValue, relatedPropertyName, Nothing, lob, persOrComm)

            'updated 8/18/2014 to use new method
            Return GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(className, propertyName, Nothing, oValue, relatedPropertyName, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetRelatedStaticDataValueForOptionValueAndState(className, propertyName, Nothing, oValue, relatedPropertyName, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueForOptionValueAndState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, oValue, relatedPropertyName, lob, persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueForOptionValueAndStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, oValue, relatedPropertyName, lob, persOrComm)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(className, propertyName, optionAttributes, oValue, relatedPropertyName, Nothing, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, oValue, relatedPropertyName, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForState(className, propertyName, qqState, optionAttributes, oValue, relatedPropertyName, Nothing, lob, persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, optionAttributes, oValue, relatedPropertyName, Nothing, lob, persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueForOptionValue(ByVal sdl As QuickQuoteStaticDataList, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            ''Dim relatedValue As String = String.Empty

            ' ''could write a different way but no point looking for options if enum isn't valid
            ''If relatedPropertyName <> Nothing Then
            ''    'Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm)
            ''    'updated 12/6/2013 for optional UseIgnoreForListsProperty param; should always get information here even if it's not returned w/ StaticDataOptions (for dropdowns)
            ''    '12/6/2013 - added IF/ELSE so it won't have to loop thru entire list of options just to add them if it doesn't need to; previously used ELSE logic only
            ''    If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            ''        'okay to use all Options here
            ''        relatedValue = GetRelatedStaticDataValueForOptionValue(sdl.Options, oValue, relatedPropertyName)
            ''    Else
            ''        Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm, False)
            ''        relatedValue = GetRelatedStaticDataValueForOptionValue(options, oValue, relatedPropertyName)
            ''    End If
            ''End If

            ''Return relatedValue

            ''updated 8/15/2014 to use new method
            'Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(sdl, oValue, relatedPropertyName, Nothing, lob, persOrComm)

            'updated 8/18/2014 to use new method
            Return GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(sdl, Nothing, oValue, relatedPropertyName, lob, persOrComm)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(sdl, optionAttributes, oValue, relatedPropertyName, Nothing, lob, persOrComm)
        End Function
        'added 8/15/2014 for new overload methods
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim relatedValue As String = String.Empty

            ''could write a different way but no point looking for options if enum isn't valid
            'If relatedPropertyName <> Nothing Then
            '    Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
            '    relatedValue = GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(sdl, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
            'End If

            'Return relatedValue

            'updated 8/18/2014 to use new method
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(className, propertyName, Nothing, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValueAndState(className, propertyName, Nothing, oValue, relatedPropertyName, relatedPropertyAttributes, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValueAndState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForState(className, propertyName, qqState, Nothing, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValueAndStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForStateAndCompany(className, propertyName, qqState, qqCompany, Nothing, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim relatedValue As String = String.Empty

            'could write a different way but no point looking for options if enum isn't valid
            If relatedPropertyName <> Nothing Then
                Dim sdl As QuickQuoteStaticDataList = GetStaticDataList(className, propertyName)
                relatedValue = GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(sdl, optionAttributes, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
            End If

            Return relatedValue
            '6/1/2018 (from original multi-state branch) note: should update to call state method w/ Nothing for qqState
            'Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForState(className, propertyName, Nothing, optionAttributes, oValue, relatedPropertyName, relatedPropertyAttributes, lob:=lob, persOrComm:=persOrComm)
        End Function
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForState(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 6/1/2018 (from original multi-state branch)
            Dim relatedValue As String = String.Empty

            'could write a different way but no point looking for options if enum isn't valid
            If relatedPropertyName <> Nothing Then
                Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
                relatedValue = GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(sdl, optionAttributes, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
            End If

            Return relatedValue
        End Function
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributesForStateAndCompany(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String 'added 11/23/2022
            Dim relatedValue As String = String.Empty

            'could write a different way but no point looking for options if enum isn't valid
            If relatedPropertyName <> Nothing Then
                Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)
                relatedValue = GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(sdl, optionAttributes, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
            End If

            Return relatedValue
        End Function
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(ByVal sdl As QuickQuoteStaticDataList, ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            'Dim relatedValue As String = String.Empty

            ''could write a different way but no point looking for options if enum isn't valid
            'If relatedPropertyName <> Nothing Then
            '    'Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm)
            '    'updated 12/6/2013 for optional UseIgnoreForListsProperty param; should always get information here even if it's not returned w/ StaticDataOptions (for dropdowns)
            '    '12/6/2013 - added IF/ELSE so it won't have to loop thru entire list of options just to add them if it doesn't need to; previously used ELSE logic only
            '    If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            '        'okay to use all Options here
            '        relatedValue = GetRelatedStaticDataValueForOptionValue(sdl.Options, oValue, relatedPropertyName, relatedPropertyAttributes)
            '    Else
            '        Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptions(sdl, lob, persOrComm, False)
            '        relatedValue = GetRelatedStaticDataValueForOptionValue(options, oValue, relatedPropertyName)
            '    End If
            'End If

            'Return relatedValue

            'updated 8/18/2014 to use new method
            Return GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(sdl, Nothing, oValue, relatedPropertyName, relatedPropertyAttributes, lob, persOrComm)
        End Function
        'added 8/18/2014 for new optionAttribute methods
        Public Function GetRelatedStaticDataValueWithMatchingAttributesForOptionValue_MatchingOptionAttributes(ByVal sdl As QuickQuoteStaticDataList, ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute), Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None) As String
            Dim relatedValue As String = String.Empty

            If relatedPropertyName <> Nothing Then
                'If (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
                'updated 8/18/2014 for optionAttributes
                If (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
                    'okay to use all Options here
                    relatedValue = GetRelatedStaticDataValueForOptionValue(sdl.Options, oValue, relatedPropertyName, relatedPropertyAttributes)
                Else
                    Dim options As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob, persOrComm, False)
                    relatedValue = GetRelatedStaticDataValueForOptionValue(options, oValue, relatedPropertyName)
                End If
            End If

            Return relatedValue
        End Function
        Public Function GetRelatedStaticDataValueForOptionValue(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName) As String
            'Dim relatedValue As String = String.Empty

            ''If options IsNot Nothing AndAlso options.Count > 0 Then
            ''    For Each o As QuickQuoteStaticDataOption In options
            ''        If UCase(o.Value) = UCase(oValue) Then
            ''            relatedValue = GetRelatedStaticDataValueForOption(o, relatedPropertyName)
            ''            Exit For
            ''        End If
            ''    Next
            ''End If

            ''both do the same thing... no point looking for correct option if enum isn't valid
            'If relatedPropertyName <> Nothing Then
            '    If options IsNot Nothing AndAlso options.Count > 0 Then
            '        For Each o As QuickQuoteStaticDataOption In options
            '            If UCase(o.Value) = UCase(oValue) Then
            '                relatedValue = GetRelatedStaticDataValueForOption(o, System.Enum.GetName(GetType(QuickQuotePropertyName), relatedPropertyName))
            '                Exit For
            '            End If
            '        Next
            '    End If
            'End If

            'Return relatedValue

            'updated 8/15/2014 to use new method
            Return GetRelatedStaticDataValueForOptionValue(options, oValue, relatedPropertyName, Nothing)
        End Function
        'added overload 8/15/2014
        Public Function GetRelatedStaticDataValueForOptionValue(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal oValue As String, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute)) As String
            Dim relatedValue As String = String.Empty

            If relatedPropertyName <> Nothing Then
                If options IsNot Nothing AndAlso options.Count > 0 Then
                    For Each o As QuickQuoteStaticDataOption In options
                        If UCase(o.Value) = UCase(oValue) Then
                            relatedValue = GetRelatedStaticDataValueForOption(o, System.Enum.GetName(GetType(QuickQuotePropertyName), relatedPropertyName), relatedPropertyAttributes)
                            Exit For
                        End If
                    Next
                End If
            End If

            Return relatedValue
        End Function
        Public Function GetRelatedStaticDataValueForOption(ByVal o As QuickQuoteStaticDataOption, ByVal relatedPropertyName As QuickQuotePropertyName) As String
            'Dim relatedValue As String = String.Empty

            'If relatedPropertyName <> Nothing Then
            '    relatedValue = GetRelatedStaticDataValueForOption(o, System.Enum.GetName(GetType(QuickQuotePropertyName), relatedPropertyName))
            'End If

            'Return relatedValue

            'updated 8/15/2014 to use new method
            Return GetRelatedStaticDataValueForOption(o, relatedPropertyName, Nothing)
        End Function
        'added overload 8/15/2014
        Public Function GetRelatedStaticDataValueForOption(ByVal o As QuickQuoteStaticDataOption, ByVal relatedPropertyName As QuickQuotePropertyName, ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute)) As String
            Dim relatedValue As String = String.Empty

            If relatedPropertyName <> Nothing Then
                relatedValue = GetRelatedStaticDataValueForOption(o, System.Enum.GetName(GetType(QuickQuotePropertyName), relatedPropertyName), relatedPropertyAttributes)
            End If

            Return relatedValue
        End Function
        'Private Function GetRelatedStaticDataValueForOption(ByVal o As QuickQuoteStaticDataOption, ByVal relatedPropertyName As String) As String
        'updated 8/15/2014 for optional Attributes to match on
        Private Function GetRelatedStaticDataValueForOption(ByVal o As QuickQuoteStaticDataOption, ByVal relatedPropertyName As String, Optional ByVal relatedPropertyAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing) As String
            Dim relatedValue As String = String.Empty

            If String.IsNullOrEmpty(relatedPropertyName) = False Then
                'If o IsNot Nothing AndAlso o.NameValuePairs IsNot Nothing AndAlso o.NameValuePairs.Count > 0 Then
                '    For Each nvp As QuickQuoteStaticDataNameValuePair In o.NameValuePairs
                '        If UCase(nvp.Name) = UCase(relatedPropertyName) Then
                '            relatedValue = nvp.Value
                '            Exit For
                '        End If
                '    Next
                'End If
                'updated 8/15/2014
                If o IsNot Nothing AndAlso o.MiscellaneousElements IsNot Nothing AndAlso o.MiscellaneousElements.Count > 0 Then
                    For Each miscEl As QuickQuoteStaticDataElement In o.MiscellaneousElements
                        If miscEl.NameValuePair IsNot Nothing AndAlso UCase(miscEl.NameValuePair.Name) = UCase(relatedPropertyName) Then
                            'Dim matchOnAllAttributes As Boolean = True
                            'If relatedPropertyAttributes IsNot Nothing AndAlso relatedPropertyAttributes.Count > 0 Then
                            '    For Each rpa As QuickQuoteStaticDataAttribute In relatedPropertyAttributes
                            '        matchOnAllAttributes = IsAttributeValidForList(rpa, miscEl.Attributes)
                            '        If matchOnAllAttributes = False Then
                            '            Exit For
                            '        End If
                            '    Next
                            'End If
                            'updated 8/18/2014 to use new function
                            Dim matchOnAllAttributes As Boolean = HasMatchOnAllAttributes(relatedPropertyAttributes, miscEl.Attributes)

                            If matchOnAllAttributes = True Then
                                relatedValue = miscEl.NameValuePair.Value
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return relatedValue
        End Function
        'added 8/18/2014 for reusability
        Private Function HasMatchOnAllAttributes(ByVal attributesPassedIn As List(Of QuickQuoteStaticDataAttribute), ByVal attributesFromFile As List(Of QuickQuoteStaticDataAttribute)) As Boolean
            Dim matchOnAllAttributes As Boolean = True
            If attributesPassedIn IsNot Nothing AndAlso attributesPassedIn.Count > 0 Then
                For Each a As QuickQuoteStaticDataAttribute In attributesPassedIn
                    matchOnAllAttributes = IsAttributeValidForList(a, attributesFromFile)
                    If matchOnAllAttributes = False Then
                        Exit For
                    End If
                Next
            End If
            Return matchOnAllAttributes
        End Function
        'added 8/15/2014
        Private Function IsAttributeValidForList(ByVal att As QuickQuoteStaticDataAttribute, ByVal atts As List(Of QuickQuoteStaticDataAttribute)) As Boolean
            Dim isValid As Boolean = False

            'If att IsNot Nothing AndAlso att.NameValuePair IsNot Nothing AndAlso att.NameValuePair.Name <> "" AndAlso att.NameValuePair.Value <> "" Then
            'updated 9/28/2021
            If att IsNot Nothing AndAlso ((att.NameValuePair IsNot Nothing AndAlso att.NameValuePair.Name <> "" AndAlso att.NameValuePair.Value <> "") OrElse (att.ValidNameValuePairs IsNot Nothing AndAlso att.ValidNameValuePairs.Count > 0)) Then
                If atts IsNot Nothing AndAlso atts.Count > 0 Then
                    For Each a As QuickQuoteStaticDataAttribute In atts
                        'If a.NameValuePair IsNot Nothing AndAlso UCase(a.NameValuePair.Name) = UCase(att.NameValuePair.Name) AndAlso UCase(a.NameValuePair.Value).Contains(UCase(att.NameValuePair.Value)) = True Then
                        '    'name matches and value passed in is contained in current value
                        '    isValid = True
                        '    Exit For
                        'End If
                        'updated 8/18/2014... can't just use contain because that would find a match for 1 if the value was 10
                        'If a.NameValuePair IsNot Nothing AndAlso UCase(a.NameValuePair.Name) = UCase(att.NameValuePair.Name) Then
                        '    'name matches
                        '    If UCase(a.NameValuePair.Value) = UCase(att.NameValuePair.Value) Then
                        '        'value matches exactly
                        '        isValid = True
                        '        Exit For
                        '    Else
                        '        'see if there are multiple values in attribute from file, parse through them, and look for match on each
                        '        If a.NameValuePair.Value.Contains("|") = True Then
                        '            Dim arValues As String() = a.NameValuePair.Value.Split("|") '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                        '            Dim exitOuterLoop As Boolean = False
                        '            For Each v As String In arValues
                        '                If Trim(UCase(v)) = Trim(UCase(att.NameValuePair.Value)) Then 'use trim to handle for spaces before/after separator
                        '                    isValid = True
                        '                    exitOuterLoop = True
                        '                    Exit For
                        '                End If
                        '            Next
                        '            If exitOuterLoop = True Then
                        '                Exit For
                        '            End If
                        '        End If
                        '        If a.NameValuePair.Value.Contains(",") = True Then 'may not need separate IF... could be ELSEIF
                        '            Dim arValues As String() = a.NameValuePair.Value.Split(",") '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                        '            Dim exitOuterLoop As Boolean = False
                        '            For Each v As String In arValues
                        '                If Trim(UCase(v)) = Trim(UCase(att.NameValuePair.Value)) Then 'use trim to handle for spaces before/after separator
                        '                    isValid = True
                        '                    exitOuterLoop = True
                        '                    Exit For
                        '                End If
                        '            Next
                        '            If exitOuterLoop = True Then
                        '                Exit For
                        '            End If
                        '        End If
                        '    End If
                        'End If
                        'updated 9/28/2021 to call new method
                        If IsMatchForFileAttribute(att, a) = True Then
                            isValid = True
                            Exit For
                        End If
                    Next
                End If
            Else
                isValid = True
            End If

            Return isValid
        End Function
        'Public Function LoopThruApplicationVariables() As String
        '    Dim vars As String = String.Empty
        '    For Each c As String In HttpContext.Current?.Application.Contents
        '        If String.IsNullOrEmpty(vars) = False Then
        '            vars &= "<br />"
        '        End If
        '        vars &= c.ToString
        '    Next
        '    Return vars
        'End Function
        'Public Function LoopThruApplicationStaticVariables() As String
        '    Dim vars As String = String.Empty
        '    For Each c As String In HttpContext.Current?.Application.StaticObjects
        '        If String.IsNullOrEmpty(vars) = False Then
        '            vars &= "<br />"
        '        End If
        '        vars &= c.ToString
        '    Next
        '    Return vars
        'End Function
        'Public Sub AddTestApplicationVariables()
        '    Dim testAppVar1 As String = "testAppVar1Value"
        '    HttpContext.Current?.Application("testAppVar1") = testAppVar1

        'End Sub
        'Public Shared Property TestProp As String = "TestPropValue"
        'Public Sub TestCache()
        '    Dim dtAbsoluteExpiration As Date
        '    Dim cd As CacheDependency
        '    Dim tsSlidingExpiration As TimeSpan
        '    Dim cbOnRemoveCallback As CacheItemRemovedCallback
        '    HttpContext.Current?.Cache.Add("key", "value", cd, dtAbsoluteExpiration, tsSlidingExpiration, Caching.CacheItemPriority.Normal, cbOnRemoveCallback)

        '    'Dim p As HttpCachePolicy

        '    Dim filePath As String = ConfigurationManager.AppSettings("QuickQuote_StaticDataFile").ToString
        '    If filePath.Contains("\") = False AndAlso filePath.Contains("/") = False Then 'should just need to look for \ since / is for web path
        '        'assume it's just the file name and append the local path
        '        filePath = System.Web.HttpContext.Current?.Server.MapPath(System.Web.HttpContext.Current?.Request.ApplicationPath) & "\" & filePath
        '    End If
        '    'needs reference to System.Runtime.Caching
        '    Dim cache As ObjectCache = MemoryCache.Default
        '    Dim fileContents As String = TryCast(cache("filecontents"), String)

        '    If fileContents Is Nothing Then
        '        Dim policy As New CacheItemPolicy()
        '        policy.AbsoluteExpiration = _
        '            DateTimeOffset.Now.AddSeconds(10.0)
        '        Dim filePaths As New List(Of String)()
        '        Dim cachedFilePath As String = filePath
        '        filePaths.Add(cachedFilePath)
        '        policy.ChangeMonitors.Add(New  _
        '            HostFileChangeMonitor(filePaths))

        '        ' Fetch the file contents.
        '        'fileContents = File.ReadAllText(cachedFilePath) & _
        '        '        vbCrLf & " Using built-in cache " & _
        '        '        DateTime.Now.ToString()
        '        'Cache.Set("filecontents", fileContents, policy)
        '        fileContents = IO.File.ReadAllText(cachedFilePath) & _
        '                vbCrLf & " Using built-in cache " & _
        '                DateTime.Now.ToString()
        '        cache.Set("filecontents", fileContents, policy)

        '    End If

        'End Sub
        Public Function GetStaticDataXmlFilePath() As String
            Dim filePath As String = String.Empty

            If HttpContext.Current?.Cache("QuickQuote_StaticDataXmlFilePath") IsNot Nothing Then
                filePath = CType(HttpContext.Current?.Cache("QuickQuote_StaticDataXmlFilePath"), String)
            End If
            If String.IsNullOrEmpty(filePath) = True Then
                If ConfigurationManager.AppSettings("QuickQuote_StaticDataFile") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuote_StaticDataFile").ToString <> "" Then
                    filePath = ConfigurationManager.AppSettings("QuickQuote_StaticDataFile").ToString
                    If filePath.Contains("\") = False AndAlso filePath.Contains("/") = False Then 'should just need to look for \ since / is for web path
                        'assume it's just the file name and append the local path
                        If System.Environment.UserInteractive AndAlso IO.File.Exists(filePath) Then
                            filePath = IO.Path.GetFullPath(filePath)
                        Else
                            filePath = System.Web.HttpContext.Current?.Server.MapPath(System.Web.HttpContext.Current?.Request.ApplicationPath) & "\" & filePath
                        End If
                    End If
                    If filePath <> "" AndAlso UCase(Right(filePath, 4)) = ".XML" AndAlso IO.File.Exists(filePath) = True Then
                        'okay
                        HttpContext.Current?.Cache.Insert("QuickQuote_StaticDataXmlFilePath", filePath)
                    Else
                        filePath = String.Empty
                    End If
                End If
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call GetStaticDataXmlFilePathForState w/ Nothing for qqState
            'filePath = GetStaticDataXmlFilePathForState(Nothing)

            Return filePath
        End Function
        Public Function GetStaticDataXmlFilePathForState(ByVal qqState As QuickQuoteState) As String 'added 6/1/2018 (from original multi-state branch)
            Dim filePath As String = String.Empty

            Dim pathName As String = appendText("QuickQuote_StaticDataXmlFilePath", StateAbbreviationForQuickQuoteState(qqState), splitter:="_")

            If HttpContext.Current?.Cache(pathName) IsNot Nothing Then
                filePath = CType(HttpContext.Current?.Cache(pathName), String)
            End If
            If String.IsNullOrEmpty(filePath) = True Then
                Dim keyName As String = appendText("QuickQuote_StaticDataFile", StateAbbreviationForQuickQuoteState(qqState), splitter:="_Overrides_")
                If ConfigurationManager.AppSettings(keyName) IsNot Nothing AndAlso ConfigurationManager.AppSettings(keyName).ToString <> "" Then
                    filePath = ConfigurationManager.AppSettings(keyName).ToString
                    If filePath.Contains("\") = False AndAlso filePath.Contains("/") = False Then 'should just need to look for \ since / is for web path
                        'assume it's just the file name and append the local path
                        filePath = System.Web.HttpContext.Current?.Server.MapPath(System.Web.HttpContext.Current?.Request.ApplicationPath) & "\" & filePath
                    End If
                    If filePath <> "" AndAlso UCase(Right(filePath, 4)) = ".XML" AndAlso IO.File.Exists(filePath) = True Then
                        'okay
                        HttpContext.Current?.Cache.Insert(pathName, filePath)
                    Else
                        filePath = String.Empty
                    End If
                End If
            End If

            Return filePath
        End Function
        Public Function GetStaticDataXmlFilePathForStateAndCompany(ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany) As String 'added 11/21/2022
            Dim filePath As String = String.Empty

            Dim pathName As String = appendText("QuickQuote_StaticDataXmlFilePath", StateAbbreviationForQuickQuoteState(qqState), splitter:="_")

            Dim compId As Integer = DiamondCompanyIdForQuickQuoteCompany(qqCompany, defaultToIndianaFarmersMutual:=False)
            If compId > 0 Then
                pathName &= "_Company" & compId.ToString
            End If

            If HttpContext.Current?.Cache(pathName) IsNot Nothing Then
                filePath = CType(HttpContext.Current?.Cache(pathName), String)
            End If
            If String.IsNullOrEmpty(filePath) = True Then
                Dim keyName As String = appendText("QuickQuote_StaticDataFile", StateAbbreviationForQuickQuoteState(qqState), splitter:="_Overrides_")
                If compId > 0 Then
                    If keyName.Contains("_Overrides") = False Then
                        keyName &= "_Overrides"
                    End If
                    keyName &= "_Company" & compId.ToString
                End If
                If ConfigurationManager.AppSettings(keyName) IsNot Nothing AndAlso ConfigurationManager.AppSettings(keyName).ToString <> "" Then
                    filePath = ConfigurationManager.AppSettings(keyName).ToString
                    If filePath.Contains("\") = False AndAlso filePath.Contains("/") = False Then 'should just need to look for \ since / is for web path
                        'assume it's just the file name and append the local path
                        filePath = System.Web.HttpContext.Current?.Server.MapPath(System.Web.HttpContext.Current?.Request.ApplicationPath) & "\" & filePath
                    End If
                    If filePath <> "" AndAlso UCase(Right(filePath, 4)) = ".XML" AndAlso IO.File.Exists(filePath) = True Then
                        'okay
                        HttpContext.Current?.Cache.Insert(pathName, filePath)
                    Else
                        filePath = String.Empty
                    End If
                End If
            End If

            Return filePath
        End Function
        Public Function GetStaticDataXmlDoc() As XmlDocument
            Dim xmlDoc As XmlDocument = Nothing 'updated 6/1/2018 (from original multi-state branch) to default to nothing

            'If HttpContext.Current?.Cache("QuickQuote_StaticDataXmlDoc") IsNot Nothing Then
            '    xmlDoc = CType(HttpContext.Current?.Cache("QuickQuote_StaticDataXmlDoc"), XmlDocument)
            'End If
            If MemoryCache.Default.Item("QuickQuote_StaticDataXmlDoc") IsNot Nothing Then
                xmlDoc = CType(MemoryCache.Default.Item("QuickQuote_StaticDataXmlDoc"), XmlDocument)
            End If
            If xmlDoc Is Nothing Then
                Dim filePath As String = GetStaticDataXmlFilePath()
                If String.IsNullOrEmpty(filePath) = False Then
                    xmlDoc = New XmlDocument
                    xmlDoc.Load(filePath)
                    'HttpContext.Current?.Cache("QuickQuote_StaticDataXmlDoc") = xmlDoc
                    StoreStaticDataObjectInMemory("QuickQuote_StaticDataXmlDoc", xmlDoc, filePath)
                End If
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call GetStaticDataXmlDocForState w/ Nothing for qqState
            'xmlDoc = GetStaticDataXmlDocForState(Nothing)

            Return xmlDoc
        End Function
        Public Function GetStaticDataXmlDocForState(ByVal qqState As QuickQuoteState) As XmlDocument 'added 6/1/2018 (from original multi-state branch)
            Dim xmlDoc As XmlDocument = Nothing

            Dim docName As String = appendText("QuickQuote_StaticDataXmlDoc", StateAbbreviationForQuickQuoteState(qqState), splitter:="_")

            If MemoryCache.Default.Item(docName) IsNot Nothing Then
                xmlDoc = CType(MemoryCache.Default.Item(docName), XmlDocument)
            End If
            If xmlDoc Is Nothing Then
                Dim filePath As String = GetStaticDataXmlFilePathForState(qqState)
                If String.IsNullOrEmpty(filePath) = False Then
                    xmlDoc = New XmlDocument
                    xmlDoc.Load(filePath)
                    StoreStaticDataObjectInMemoryForState(docName, xmlDoc, qqState, filePath)
                End If
            End If

            Return xmlDoc
        End Function
        Public Function GetStaticDataXmlDocForStateAndCompany(ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany) As XmlDocument 'added 11/21/2022
            Dim xmlDoc As XmlDocument = Nothing

            Dim docName As String = appendText("QuickQuote_StaticDataXmlDoc", StateAbbreviationForQuickQuoteState(qqState), splitter:="_")

            Dim compId As Integer = DiamondCompanyIdForQuickQuoteCompany(qqCompany, defaultToIndianaFarmersMutual:=False)
            If compId > 0 Then
                docName &= "_Company" & compId.ToString
            End If

            If MemoryCache.Default.Item(docName) IsNot Nothing Then
                xmlDoc = CType(MemoryCache.Default.Item(docName), XmlDocument)
            End If
            If xmlDoc Is Nothing Then
                Dim filePath As String = GetStaticDataXmlFilePathForStateAndCompany(qqState, qqCompany)
                If String.IsNullOrEmpty(filePath) = False Then
                    xmlDoc = New XmlDocument
                    xmlDoc.Load(filePath)
                    StoreStaticDataObjectInMemoryForStateAndCompany(docName, xmlDoc, qqState, qqCompany, filePath:=filePath)
                End If
            End If

            Return xmlDoc
        End Function
        Public Sub StoreStaticDataObjectInMemory(ByVal name As String, ByVal obj As Object, Optional ByVal filePath As String = "")
            If String.IsNullOrEmpty(filePath) = True Then
                filePath = GetStaticDataXmlFilePath()
            End If
            If String.IsNullOrEmpty(filePath) = False Then
                Dim policy As New CacheItemPolicy()
                policy.AbsoluteExpiration = DateTimeOffset.Now.AddHours(10.0)
                Dim filePaths As New List(Of String)
                filePaths.Add(filePath)
                policy.ChangeMonitors.Add(New HostFileChangeMonitor(filePaths))

                MemoryCache.Default.Set(name, obj, policy)
                'MemoryCache.Default.Add(name, obj, policy)
            End If
            '6/1/2018 (from original multi-state branch) note: should update to call StoreStaticDataObjectInMemoryForState w/ Nothing for qqState
            'StoreStaticDataObjectInMemoryForState(name, obj, Nothing, filePath:=filePath)
        End Sub
        Public Sub StoreStaticDataObjectInMemoryForState(ByVal name As String, ByVal obj As Object, ByVal qqState As QuickQuoteState, Optional ByVal filePath As String = "") 'added 6/1/2018 (from original multi-state branch)
            If String.IsNullOrEmpty(filePath) = True Then
                filePath = GetStaticDataXmlFilePathForState(qqState)
            End If
            If String.IsNullOrEmpty(filePath) = False Then
                Dim policy As New CacheItemPolicy()
                policy.AbsoluteExpiration = DateTimeOffset.Now.AddHours(10.0)
                Dim filePaths As New List(Of String)
                filePaths.Add(filePath)
                policy.ChangeMonitors.Add(New HostFileChangeMonitor(filePaths))

                MemoryCache.Default.Set(name, obj, policy)
            End If
        End Sub
        Public Sub StoreStaticDataObjectInMemoryForStateAndCompany(ByVal name As String, ByVal obj As Object, ByVal qqState As QuickQuoteState, ByVal qqCompany As QuickQuoteCompany, Optional ByVal filePath As String = "") 'added 11/21/2022
            If String.IsNullOrEmpty(filePath) = True Then
                filePath = GetStaticDataXmlFilePathForStateAndCompany(qqState, qqCompany)
            End If
            If String.IsNullOrEmpty(filePath) = False Then
                Dim policy As New CacheItemPolicy()
                policy.AbsoluteExpiration = DateTimeOffset.Now.AddHours(10.0)
                Dim filePaths As New List(Of String)
                filePaths.Add(filePath)
                policy.ChangeMonitors.Add(New HostFileChangeMonitor(filePaths))

                MemoryCache.Default.Set(name, obj, policy)
            End If
        End Sub
        Public Function LoopThruWebCache() As String
            Dim strCache As String = String.Empty

            'For Each i As String In HttpContext.Current?.Cache
            '    If String.IsNullOrEmpty(strCache) = False Then
            '        strCache &= "<br />"
            '    End If
            '    strCache &= i.ToString
            'Next
            For Each i As DictionaryEntry In HttpContext.Current?.Cache
                If String.IsNullOrEmpty(strCache) = False Then
                    strCache &= "<br />"
                End If
                strCache &= i.Key
            Next

            Return strCache
        End Function
        Public Function LoopThruRuntimeCache() As String
            Dim strCache As String = String.Empty

            'For Each i As String In HttpRuntime.Cache
            '    If String.IsNullOrEmpty(strCache) = False Then
            '        strCache &= "<br />"
            '    End If
            '    strCache &= i.ToString
            'Next
            For Each i As DictionaryEntry In HttpRuntime.Cache
                If String.IsNullOrEmpty(strCache) = False Then
                    strCache &= "<br />"
                End If
                strCache &= i.Key
            Next

            Return strCache
        End Function
        Public Function LoopThruObjectCache() As String
            Dim strCache As String = String.Empty

            Dim cache As ObjectCache = MemoryCache.Default
            For i As Integer = 0 To cache.Count - 1
                If String.IsNullOrEmpty(strCache) = False Then
                    strCache &= "<br />"
                End If
                strCache &= cache.ElementAt(i).Key
            Next

            Return strCache
        End Function
        'added 12/23/2013
        'Public Function TextForEnumSelection(ByVal enumType As Type, ByVal enumValue As Object) As String'only works if GetType(enumType) is passed in
        '    Dim enumText As String = String.Empty

        '    'enumText = System.Enum.GetName(GetType(enumType), enumValue)
        '    enumText = System.Enum.GetName(enumType, enumValue)

        '    Return enumText
        'End Function
        'Public Function TextForEnumSelection(ByVal enumType As Integer, ByVal enumValue As Object) As String 'not going to work
        '    Dim enumText As String = String.Empty

        '    enumText = System.Enum.GetName(enumType.GetType, enumValue)

        '    Return enumText
        'End Function
        'Public Function TextForEnumSelection(ByVal enumType As [Enum], ByVal enumValue As Object) As String 'not going to work
        '    Dim enumText As String = String.Empty

        '    'enumText = System.Enum.GetName(GetType(enumType), enumValue)
        '    'enumText = System.Enum.GetName(enumType, enumValue)

        '    Return enumText
        'End Function
        'Public Function TextForEnumSelection(ByVal enumType As GenericEnumConverter, ByVal enumValue As Object) As String 'would have to pass in New GenericEnumConverter(GetType(EnumType))
        '    Dim enumText As String = String.Empty

        '    enumType.ConvertToString(enumValue)

        '    'enumText = System.Enum.GetName(GetType(enumType), enumValue)
        '    'enumText = System.Enum.GetName(enumType, enumValue)

        '    Return enumText
        'End Function
        Public Sub LoadCommonStaticDataLists()
            If HttpContext.Current?.Application("QuickQuote_StaticDataIsLoading") IsNot Nothing AndAlso HttpContext.Current?.Application("QuickQuote_StaticDataIsLoading").ToString <> "" AndAlso UCase(HttpContext.Current?.Application("QuickQuote_StaticDataIsLoading").ToString) = "YES" Then
                'already being loaded
            Else
                Dim needsToLoad As Boolean = False
                HttpContext.Current?.Application.Lock()
                If HttpContext.Current?.Application("QuickQuote_StaticDataIsLoading") IsNot Nothing AndAlso HttpContext.Current?.Application("QuickQuote_StaticDataIsLoading").ToString <> "" AndAlso UCase(HttpContext.Current?.Application("QuickQuote_StaticDataIsLoading").ToString) = "YES" Then
                    'has since started loading
                Else
                    needsToLoad = True
                    HttpContext.Current?.Application.Set("QuickQuote_StaticDataIsLoading", "YES")
                End If
                HttpContext.Current?.Application.UnLock()
                If needsToLoad = True Then
                    'start loading
                    Dim sdl As QuickQuoteStaticDataList
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobType)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.StateId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillToId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.CurrentPayplanId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.PolicyTermId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.TransactionTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillMethodId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.PolicyOriginTypeId)

                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.NameAddressSourceId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.TypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.TaxTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.EntityTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.OtherLegalEntityDescription) 'Added 2/15/2022 for bug 63511 MLW - used with EntityTypeId = 5 (Other)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.MaritalStatusId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteName, QuickQuotePropertyName.SexId)

                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuotePhone, QuickQuotePropertyName.TypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteEmail, QuickQuotePropertyName.TypeId)

                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteApplicant, QuickQuotePropertyName.OccupationTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteApplicant, QuickQuotePropertyName.RelationshipTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteApplicant, QuickQuotePropertyName.USCitizenTypeId)

                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteDriver, QuickQuotePropertyName.LicenseStatusId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteDriver, QuickQuotePropertyName.DriverExcludeTypeId)

                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.CollisionDeductibleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.ComprehensiveDeductibleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.Liability_UM_UIM_LimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.MedicalPaymentsLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.OperatorTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.OperatorUseTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.AntiLockTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.AntiTheftTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.BodyTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.BodilyInjuryLiabilityLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.PerformanceTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.PropertyDamageLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.RestraintTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.SizeTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.TapesAndRecordsLimitId) 'may not be needed
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.TowingAndLaborDeductibleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.TransportationExpenseLimitId) 'may not be needed
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.TripInterruptionLimitId) 'may not be needed
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.UninsuredCombinedSingleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.UninsuredMotoristLiabilityLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.UninsuredMotoristPropertyDamageDeductibleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.UninsuredMotoristPropertyDamageLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.VehicleRatingTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.VehicleTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.VehicleUseTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.VehicleUsageTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.VehicleValueId)

                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.ProtectionClassId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.CauseOfLossTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.DeductibleId) 'might not need here
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.CoinsuranceTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.ValuationMethodTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.ConstructionTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.DeductibleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.WindHailDeductibleLimitId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FamilyUnitsId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FireDepartmentDistanceId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FireHydrantDistanceId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FormTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.FoundationTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.NumberOfFamiliesId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.OccupancyCodeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.ProgramTypeId) 'could also be called under QuickQuoteObject
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.StructureTypeId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.NumberOfUnitsId)
                    sdl = GetStaticDataList(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.UsageTypeId)

                    'done loading
                    HttpContext.Current?.Application.Lock()
                    HttpContext.Current?.Application.Set("QuickQuote_StaticDataIsLoading", "NO")
                    HttpContext.Current?.Application.UnLock()
                End If
            End If
        End Sub

        'added 2/5/2014 for use w/ service calls; 10/30/2016 note: may want to update logic to use new PolicyResultForLookupInfo function since it uses PolicyResultsForLookupInfo, which has latest Policy-to-PolicyImage join
        Public Shared Sub SetPolicyIdAndImageNumberForPolicyNumber(ByVal policyNumber As String, ByRef policyId As String, ByRef policyImageNumber As String)
            policyId = ""
            policyImageNumber = ""
            If policyNumber <> "" Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "select P.policy_id as policyId, PI.policyimage_num as policyImageNum from Policy as P with (nolock) inner join PolicyImage as PI with (nolock) on PI.policy_id = P.policy_id and PI.policyimage_num = CASE when P.activeimage_num > 0 then P.activeimage_num when P.cancelled = 1 then P.cancelimage_num else P.lastimage_num END where P.current_policy = '" & policyNumber & "' order by P.policy_id desc"
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        policyId = dr.Item("policyId").ToString.Trim
                        policyImageNumber = dr.Item("policyImageNum").ToString.Trim
                    ElseIf sql.hasError = True Then
                        'db error
                    End If
                End Using
                'added 3/24/2016 to avoid confusion that comes w/ Diamond Copied Quotes... since there can be multiple images w/ different quoteNums... we'll always use imageNum 1 for quotes
                If Left(UCase(policyNumber), 1) = "Q" AndAlso String.IsNullOrWhiteSpace(policyImageNumber) = False Then
                    policyImageNumber = "1"
                End If
            End If
        End Sub
        'added 7/1/2014 for use w/ promote service... in case the returned image doesn't have the policy #
        Public Shared Sub SetPolicyNumberForPolicyId(ByVal policyId As String, ByRef policyNumber As String)
            policyNumber = ""
            If policyId <> "" AndAlso IsNumeric(policyId) = True Then
                'Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                '    sql.queryOrStoredProc = "select P.current_policy as polNum from Policy as P with (nolock) where P.policy_id = " & CInt(policyId) & " order by P.policy_id desc"
                '    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                '    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                '        dr.Read()
                '        policyNumber = dr.Item("polNum").ToString.Trim
                '    ElseIf sql.hasError = True Then
                '        'db error
                '    End If
                'End Using
                SetPolicyNumberForPolicyId(CInt(policyId), policyNumber)
            End If
        End Sub
        Public Shared Sub SetPolicyNumberForPolicyId(ByVal policyId As Integer, ByRef policyNumber As String)
            policyNumber = ""
            If policyId > 0 Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "select P.current_policy as polNum from Policy as P with (nolock) where P.policy_id = " & policyId & " order by P.policy_id desc"
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        policyNumber = dr.Item("polNum").ToString.Trim
                    ElseIf sql.hasError = True Then
                        'db error
                    End If
                End Using
            End If
        End Sub

        Public Shared Function GetPolicyImage(policyID As Integer, policyImageNumber As Integer) As Diamond.Common.Objects.Policy.Image
            'added 3/26/2014
            CheckDiamondServicesToken()

            Return IFM.DiamondServices.Services.Policy.LoadImage(policyID, policyImageNumber) '3/25/2014 note: service code is assuming response.responseData is always there if response IsNot Nothing... may need to verify both
            '4/16/2014 note: may update to use e, dv optional params

            'updated for testing 5/1/2014
            'Dim e As Exception = Nothing
            'Dim dv As Diamond.Common.Objects.DiamondValidation = Nothing
            'Dim img As Diamond.Common.Objects.Policy.Image = Nothing
            'img = IFM.DiamondServices.Services.Policy.LoadImage(policyID, policyImageNumber, e, dv)
            'If e IsNot Nothing Then

            'End If
            'If dv IsNot Nothing Then

            'End If
            'Return img
        End Function
        'added Acquire calls 4/8/2014... needed for Diamond services
        Public Shared Function AcquirePolicyImage(policyID As Integer, policyImageNumber As Integer, userId As Integer) As Diamond.Common.Objects.Policy.Image
            'added 3/26/2014
            CheckDiamondServicesToken()

            Return IFM.DiamondServices.Services.Policy.AcquirePendingImage(policyID, policyImageNumber, userId) '3/25/2014 note: service code is assuming response.responseData is always there if response IsNot Nothing... may need to verify both

            'updated for testing 6/17/2014
            'Dim e As Exception = Nothing
            'Dim dv As Diamond.Common.Objects.DiamondValidation = Nothing
            'Dim img As Diamond.Common.Objects.Policy.Image = Nothing
            'img = IFM.DiamondServices.Services.Policy.AcquirePendingImage(policyID, policyImageNumber, userId, e, dv)
            'If e IsNot Nothing Then

            'End If
            'If dv IsNot Nothing Then

            'End If
            'Return img
        End Function
        Public Shared Function AcquirePolicyImage(policyID As String, policyImageNumber As String, userId As String) As Diamond.Common.Objects.Policy.Image
            Dim pId As Integer = Nothing
            Dim pImageNum As Integer = Nothing
            Dim uId As Integer = Nothing

            If Integer.TryParse(policyID, pId) AndAlso Integer.TryParse(policyImageNumber, pImageNum) AndAlso Integer.TryParse(userId, uId) Then
                Return AcquirePolicyImage(pId, pImageNum, uId)
            End If
            Return Nothing

        End Function
        'added 4/8/2014
        Public Shared Sub SetDiamondUserId(ByRef diaUserId As String)
            'If System.Web.HttpContext.Current?.Session("DiamondUserId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUserId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString) = True Then
            '    diaUserId = System.Web.HttpContext.Current?.Session("DiamondUserId").ToString
            'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '    diaUserId = ConfigurationManager.AppSettings("QuickQuoteTestUserId").ToString
            'End If
            'updated 8/13/2014 to use new shared function
            diaUserId = DiamondUserId()
        End Sub

        Public Shared Function GetPolicyImage(ByVal policyId As String, ByVal policyImageNumber As String) As Diamond.Common.Objects.Policy.Image
            'Dim policyImage As Diamond.Common.Objects.Policy.Image = Nothing 'initialized 3/4/2014
            'Dim e As System.Exception = Nothing
            'Dim dv As Diamond.Common.Objects.DiamondValidation = Nothing
            Dim pID, imgID As Integer
            pID = Nothing
            imgID = Nothing

            If Integer.TryParse(policyId, pID) AndAlso Integer.TryParse(policyImageNumber, imgID) Then
                Return GetPolicyImage(pID, imgID)
            End If
            Return Nothing 'added 3/27/2014

            'If policyId <> "" AndAlso policyImageNumber <> "" AndAlso IsNumeric(policyId) = True AndAlso IsNumeric(policyImageNumber) = True Then
            '    Dim imgReq As New Diamond.Common.Services.Messages.PolicyService.LoadImage.Request
            '    Dim imgResp As New Diamond.Common.Services.Messages.PolicyService.LoadImage.Response
            '    With imgReq
            '        'got security token error when testing locally; okay from server
            '        'added 1/16/2014 for local testing; previously just had code in ElseIf (was commented and just had DiamondPrinting LoginDiamond call to set security token and not BaseControls login call)
            '        If Diamond.Web.BaseControls.SignedOnUserID > 0 Then
            '            'okay
            '        ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '            Dim loginName As String = ""
            '            Dim loginPassword As String = ""
            '            If System.Web.HttpContext.Current?.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUsername").ToString <> "" Then
            '                loginName = System.Web.HttpContext.Current?.Session("DiamondUsername").ToString
            '            ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '                loginName = ConfigurationManager.AppSettings("QuickQuoteTestUsername").ToString
            '            End If
            '            If System.Web.HttpContext.Current?.Session("DiamondPassword") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondPassword").ToString <> "" Then
            '                loginPassword = System.Web.HttpContext.Current?.Session("DiamondPassword").ToString
            '            ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '                loginPassword = ConfigurationManager.AppSettings("QuickQuoteTestPassword").ToString
            '            End If
            '            If loginName <> "" AndAlso loginPassword <> "" Then
            '                'Using dia As New DiamondWebClass.DiamondPrinting
            '                '    .DiamondSecurityToken = dia.loginDiamond(loginName, loginPassword)
            '                'End Using
            '                Dim messageText As String = String.Empty
            '                Diamond.Web.BaseControls.LoginDiamondUser(loginName, loginPassword, messageText)
            '                If Diamond.Web.BaseControls.SignedOnUserID <= 0 Then
            '                    If String.IsNullOrEmpty(messageText) = False Then

            '                    End If
            '                End If
            '            End If
            '        End If
            '        With .RequestData
            '            .PolicyId = CInt(policyId)
            '            .ImageNumber = CInt(policyImageNumber)
            '        End With
            '    End With

            '    Using imgProxy As New Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy
            '        imgResp = imgProxy.LoadImage(imgReq)
            '    End Using

            '    If imgResp IsNot Nothing AndAlso imgResp.ResponseData IsNot Nothing AndAlso imgResp.ResponseData.Image IsNot Nothing Then
            '        policyImage = imgResp.ResponseData.Image
            '    End If
            'End If

            'Return policyImage
        End Function
        Public Shared Function GetPolicyImage(ByVal policyNumber As String) As Diamond.Common.Objects.Policy.Image
            Dim policyId As String = ""
            Dim policyImageNumber As String = ""
            SetPolicyIdAndImageNumberForPolicyNumber(policyNumber, policyId, policyImageNumber)
            Return GetPolicyImage(policyId, policyImageNumber)
        End Function
        'added 2/27/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Phone(ByVal qqPhone As QuickQuotePhone, ByVal diaPhone As Diamond.Common.Objects.Phone) As Boolean
            Dim isMatch As Boolean = False

            'PRIMARY KEY constraint on link table for person id (client, etc.), nameaddresssource_id, and type_id
            If qqPhone IsNot Nothing AndAlso diaPhone IsNot Nothing Then
                'If IsNumeric(qqPhone.TypeId) AndAlso diaPhone.TypeId <> Nothing Then
                'updated 4/28/2014 for enum/integer... 0 equates to Nothing
                If IsNumeric(qqPhone.TypeId) Then
                    If CInt(qqPhone.TypeId) = CInt(diaPhone.TypeId) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Email(ByVal qqEmail As QuickQuoteEmail, ByVal diaEmail As Diamond.Common.Objects.Email) As Boolean
            Dim isMatch As Boolean = False

            'PRIMARY KEY constraint on link table for person id (client, etc.), nameaddresssource_id, and type_id
            If qqEmail IsNot Nothing AndAlso diaEmail IsNot Nothing Then
                'If IsNumeric(qqEmail.TypeId) AndAlso diaEmail.TypeId <> Nothing Then
                'updated 4/28/2014 for enum/integer... 0 equates to Nothing
                If IsNumeric(qqEmail.TypeId) Then
                    If CInt(qqEmail.TypeId) = CInt(diaEmail.TypeId) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Modifier(ByVal qqModifier As QuickQuoteModifier, ByVal diaModifier As Diamond.Common.Objects.Policy.Modifier) As Boolean
            Dim isMatch As Boolean = False

            'PRIMARY KEY constraint on policy_id, policyimage_num, and modifier_num... we don't store any of that on our modifier
            If qqModifier IsNot Nothing AndAlso diaModifier IsNot Nothing Then
                'If IsNumeric(qqModifier.ModifierTypeId) AndAlso diaModifier.ModifierTypeId <> Nothing Then
                'updated 4/28/2014 for integer... 0 equates to Nothing
                If IsNumeric(qqModifier.ModifierTypeId) Then
                    If CInt(qqModifier.ModifierTypeId) = diaModifier.ModifierTypeId Then
                        'isMatch = True
                        'updated 12/11/2014 to also look at parentModifierTypeId
                        If IsNumeric(qqModifier.ParentModifierTypeId) Then
                            If CInt(qqModifier.ParentModifierTypeId) = diaModifier.ParentModifierTypeId Then
                                isMatch = True
                            End If
                        Else
                            If diaModifier.ParentModifierTypeId = 0 Then
                                isMatch = True
                            End If
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function

        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ScheduledRating(ByVal qqScheduledRating As QuickQuoteScheduledRating, ByRef diaScheduledRating As Diamond.Common.Objects.Policy.ScheduledRating) As Boolean
            Dim isMatch As Boolean = False

            If qqScheduledRating IsNot Nothing AndAlso diaScheduledRating IsNot Nothing Then
                If IsNumeric(qqScheduledRating.ScheduleRatingTypeId) _
                    AndAlso IsNumeric(qqScheduledRating.RiskCharacteristicTypeId) Then
                    If CInt(qqScheduledRating.ScheduleRatingTypeId) = diaScheduledRating.ScheduledRatingTypeId _
                        AndAlso CInt(qqScheduledRating.RiskCharacteristicTypeId) = diaScheduledRating.RiskCharacteristicTypeId Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function

        'added 2/28/2014 for reconciliation process; not being used yet; started using 3/26/2014... may remove
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Coverage(ByVal qqCoverage As QuickQuoteCoverage, ByVal diaCoverage As Diamond.Common.Objects.Coverage) As Boolean
            Dim isMatch As Boolean = False

            If qqCoverage IsNot Nothing AndAlso diaCoverage IsNot Nothing Then
                'If IsNumeric(qqCoverage.CoverageCodeId) AndAlso diaCoverage.CoverageCodeId <> Nothing Then
                'updated 4/28/2014 for integer... 0 equates to Nothing
                If IsNumeric(qqCoverage.CoverageCodeId) Then
                    If CInt(qqCoverage.CoverageCodeId) = diaCoverage.CoverageCodeId Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 10/27/2014; added specifically for section coverage child coverages; will make sure they're in the same order
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Coverages(ByVal qqCoverages As List(Of QuickQuoteCoverage), ByVal diaCoverages As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage)) As Boolean
            Dim isMatch As Boolean = False

            If qqCoverages IsNot Nothing AndAlso diaCoverages IsNot Nothing AndAlso qqCoverages.Count = diaCoverages.Count Then
                Dim qC_counter As Integer = 0
                For Each qC As QuickQuoteCoverage In qqCoverages
                    qC_counter += 1
                    Dim dC As Diamond.Common.Objects.Coverage = diaCoverages.Item(qC_counter - 1)
                    isMatch = IsQuickQuoteToDiamondObjectMatch_Coverage(qC, dC)
                    If isMatch = False Then
                        Exit For
                    End If
                Next
            End If

            Return isMatch
        End Function
        'added 1/30/2015
        Public Shared Function QuickQuoteCoveragesAreInDiamondCoveragesList(ByVal qqCoverages As List(Of QuickQuoteCoverage), ByVal diaCoverages As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage), Optional ByRef exactMatch As Boolean = False, Optional ByRef sameOrder As Boolean = False, Optional ByVal onlyOkayIfCoveragesInFirstList As Boolean = True) As Boolean
            Dim okay As Boolean = False
            exactMatch = False
            sameOrder = False

            Dim covsCount As Integer = 0
            If qqCoverages IsNot Nothing Then
                covsCount = qqCoverages.Count
            End If
            Dim diaCovsCount As Integer = 0
            If diaCoverages IsNot Nothing Then
                diaCovsCount = diaCoverages.Count
            End If

            If covsCount > 0 Then
                If diaCovsCount >= covsCount Then
                    okay = True
                    sameOrder = True
                    Dim diaCovMatches As New List(Of Integer)
                    For Each c As QuickQuoteCoverage In qqCoverages
                        Dim hasMatch As Boolean = False

                        Dim diaCount As Integer = 0
                        For Each diaC As Diamond.Common.Objects.Coverage In diaCoverages
                            diaCount += 1
                            If diaCovMatches.Contains(diaCount) = False Then
                                hasMatch = IsQuickQuoteToDiamondObjectMatch_Coverage(c, diaC)
                                If hasMatch = True Then
                                    diaCovMatches.Add(diaCount)
                                    Exit For
                                Else
                                    sameOrder = False
                                End If
                            End If
                        Next
                        If hasMatch = False Then
                            okay = False
                            exactMatch = False
                            sameOrder = False
                            Exit For
                        End If
                    Next
                    If okay = True AndAlso covsCount = diaCovsCount Then
                        exactMatch = True
                    End If
                End If
            Else
                '0 covs in 1st list
                If onlyOkayIfCoveragesInFirstList = False Then
                    okay = True
                    If diaCovsCount = 0 Then
                        exactMatch = True
                    End If
                End If
            End If

            Return okay
        End Function
        'added 4/7/2014 for reconciliation process; not being used yet; started using 4/9/2014... may remove
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Vehicle(ByVal qqVehicle As QuickQuoteVehicle, ByVal diaVehicle As Diamond.Common.Objects.Policy.Vehicle, Optional ByVal useVehicleNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean 'added optional useVehicleNum param 4/21/2014; added optional checkForChange 4/22/2014
            Dim isMatch As Boolean = False

            If qqVehicle IsNot Nothing AndAlso diaVehicle IsNot Nothing Then
                If useVehicleNum = True Then 'added IF 4/21/2014; previous logic is in ELSE; if using this: will need to find another way to determine if vehicle changed... may not be necessary
                    'If qqVehicle.HasValidVehicleNum = True AndAlso diaVehicle.VehicleNum IsNot Nothing AndAlso diaVehicle.VehicleNum.Id <> Nothing AndAlso diaVehicle.VehicleNum.Id > 0 AndAlso CInt(qqVehicle.VehicleNum) = diaVehicle.VehicleNum.Id Then
                    'updated 4/21/2014 to use new IsValidDiamondNum function
                    If qqVehicle.HasValidVehicleNum = True AndAlso IsValidDiamondNum(diaVehicle.VehicleNum) = True AndAlso CInt(qqVehicle.VehicleNum) = diaVehicle.VehicleNum.Id Then
                        isMatch = True
                        If checkForChange = True Then 'added IF 4/22/2014; won't want to overwrite the original flag if checking for change after the reconciliation is complete and both are the same
                            If IsQuickQuoteToDiamondObjectMatch_Vehicle(qqVehicle, diaVehicle, False) = True Then 'using same method w/ optional useVehicleNum param set to False
                                qqVehicle.HasVehicleMakeModelYearChanged = False
                            Else
                                qqVehicle.HasVehicleMakeModelYearChanged = True
                            End If
                        End If
                    End If
                Else
                    If IsNumeric(qqVehicle.Year) AndAlso diaVehicle.Year <> Nothing Then '10/14/2014 note: don't need to verify that dia year <> Nothing; may also need to allow for empty string qq year and dia year < 1
                        If CInt(qqVehicle.Year) = diaVehicle.Year AndAlso UCase(qqVehicle.Make) = UCase(diaVehicle.Make) AndAlso UCase(qqVehicle.Model) = UCase(diaVehicle.Model) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        '10/18/2018 - added new method for multi-state
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Vehicle_UsePackagePartType(ByVal qqVehicle As QuickQuoteVehicle, ByVal diaVehicle As Diamond.Common.Objects.Policy.Vehicle, ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal useVehicleNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean 'added optional useVehicleNum param 4/21/2014; added optional checkForChange 4/22/2014
            Dim isMatch As Boolean = False

            If qqVehicle IsNot Nothing AndAlso diaVehicle IsNot Nothing Then
                If useVehicleNum = True Then 'added IF 4/21/2014; previous logic is in ELSE; if using this: will need to find another way to determine if vehicle changed... may not be necessary
                    If qqVehicle.HasValidVehicleNum(packagePartType) = True AndAlso IsValidDiamondNum(diaVehicle.VehicleNum) = True AndAlso CInt(qqVehicle.VehicleNumForPackagePartType(packagePartType)) = diaVehicle.VehicleNum.Id Then
                        isMatch = True
                        If checkForChange = True Then 'added IF 4/22/2014; won't want to overwrite the original flag if checking for change after the reconciliation is complete and both are the same
                            If IsQuickQuoteToDiamondObjectMatch_Vehicle(qqVehicle, diaVehicle, False) = True Then 'using same method w/ optional useVehicleNum param set to False
                                qqVehicle.HasVehicleMakeModelYearChanged = False
                            Else
                                qqVehicle.HasVehicleMakeModelYearChanged = True
                            End If
                        End If
                    End If
                Else
                    If IsNumeric(qqVehicle.Year) AndAlso diaVehicle.Year <> Nothing Then '10/14/2014 note: don't need to verify that dia year <> Nothing; may also need to allow for empty string qq year and dia year < 1
                        If CInt(qqVehicle.Year) = diaVehicle.Year AndAlso UCase(qqVehicle.Make) = UCase(diaVehicle.Make) AndAlso UCase(qqVehicle.Model) = UCase(diaVehicle.Model) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 4/7/2014 for reconciliation process; not being used yet; started using 4/9/2014 for Driver match... may remove
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Name(ByVal qqName As QuickQuoteName, ByVal diaName As Diamond.Common.Objects.Name) As Boolean
            Dim isMatch As Boolean = False

            If qqName IsNot Nothing AndAlso diaName IsNot Nothing Then
                'If IsNumeric(qqName.TypeId) AndAlso diaName.TypeId <> Nothing Then 'may not need to use TypeId
                'updated 4/28/2014 for integer... 0 equates to Nothing
                If IsNumeric(qqName.TypeId) Then 'may not need to use TypeId
                    If CInt(qqName.TypeId) = diaName.TypeId AndAlso UCase(qqName.FirstName) = UCase(diaName.FirstName) AndAlso UCase(qqName.LastName) = UCase(diaName.LastName) AndAlso UCase(qqName.MiddleName) = UCase(diaName.MiddleName) AndAlso UCase(qqName.CommercialName1) = UCase(diaName.CommercialName1) AndAlso UCase(qqName.CommercialName2) = UCase(diaName.CommercialName2) AndAlso UCase(qqName.DoingBusinessAsName) = UCase(diaName.DoingBusinessAs) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 4/7/2014 for reconciliation process; not being used yet; started using 4/9/2014... may remove
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Driver(ByVal qqDriver As QuickQuoteDriver, ByVal diaDriver As Diamond.Common.Objects.Policy.Driver, Optional ByVal useDriverNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean 'added optional useDriverNum param 4/21/2014; added optional checkForChange 4/22/2014
            Dim isMatch As Boolean = False

            If qqDriver IsNot Nothing AndAlso diaDriver IsNot Nothing Then
                If useDriverNum = True Then 'added IF 4/21/2014; previous logic is in ELSE; if using this: will need to find another way to determine if name changed... so reports can be re-ordered if necessary
                    'If qqDriver.HasValidDriverNum = True AndAlso diaDriver.DriverNum IsNot Nothing AndAlso diaDriver.DriverNum.Id <> Nothing AndAlso diaDriver.DriverNum.Id > 0 AndAlso CInt(qqDriver.DriverNum) = diaDriver.DriverNum.Id Then
                    'updated 4/21/2014 to use new IsValidDiamondNum function
                    If qqDriver.HasValidDriverNum = True AndAlso IsValidDiamondNum(diaDriver.DriverNum) = True AndAlso CInt(qqDriver.DriverNum) = diaDriver.DriverNum.Id Then
                        isMatch = True
                        If checkForChange = True Then 'added IF 4/22/2014; won't want to overwrite the original flag if checking for change after the reconciliation is complete and both are the same
                            If IsQuickQuoteToDiamondObjectMatch_Name(qqDriver.Name, diaDriver.Name) = True Then
                                qqDriver.HasDriverNameChanged = False
                            Else
                                qqDriver.HasDriverNameChanged = True
                            End If
                            'updated 5/12/2014
                            qqDriver.HasLastNameChanged = False
                            qqDriver.HasBirthDateChanged = False
                            If qqDriver.Name IsNot Nothing AndAlso diaDriver.Name IsNot Nothing Then
                                'If qqDriver.Name.LastName <> diaDriver.Name.LastName Then
                                'updated 10/22/2016 to compare UCase
                                If UCase(qqDriver.Name.LastName) <> UCase(diaDriver.Name.LastName) Then
                                    qqDriver.HasLastNameChanged = True
                                End If
                                If (IsDate(qqDriver.Name.BirthDate) = True AndAlso IsQuickQuoteToDiamondObjectMatch_Date(qqDriver.Name.BirthDate, diaDriver.Name.BirthDate) = False) OrElse (IsDate(qqDriver.Name.BirthDate) = False AndAlso diaDriver.Name.BirthDate <> Nothing AndAlso IsDate(diaDriver.Name.BirthDate.ToString) = True AndAlso CDate(diaDriver.Name.BirthDate.ToString) > CDate("1/1/1801")) Then
                                    qqDriver.HasBirthDateChanged = True
                                End If
                            End If
                        End If
                    End If
                Else
                    isMatch = IsQuickQuoteToDiamondObjectMatch_Name(qqDriver.Name, diaDriver.Name)
                End If
            End If

            Return isMatch
        End Function
        'added 4/23/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Exclusion(ByVal qqExclusion As QuickQuoteExclusion, ByVal diaExclusion As Diamond.Common.Objects.Policy.Exclusion, Optional ByVal useExclusionNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqExclusion IsNot Nothing AndAlso diaExclusion IsNot Nothing Then
                If useExclusionNum = True Then
                    If qqExclusion.HasValidExclusionNum = True AndAlso IsValidDiamondNum(diaExclusion.ExclusionNum) = True AndAlso CInt(qqExclusion.ExclusionNum) = diaExclusion.ExclusionNum.Id Then
                        isMatch = True
                    End If
                Else
                    'If IsNumeric(qqExclusion.ExclusionTypeId) AndAlso diaExclusion.ExclusionTypeId <> Nothing Then
                    'updated 4/28/2014 for integer... 0 equates to Nothing
                    If IsNumeric(qqExclusion.ExclusionTypeId) Then
                        If CInt(qqExclusion.ExclusionTypeId) = diaExclusion.ExclusionTypeId AndAlso UCase(qqExclusion.Description) = UCase(diaExclusion.Description) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_AccidentViolation(ByVal qqAccidentViolation As QuickQuoteAccidentViolation, ByVal diaAccidentViolation As Diamond.Common.Objects.Policy.AccidentViolation, Optional ByVal useViolationNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqAccidentViolation IsNot Nothing AndAlso diaAccidentViolation IsNot Nothing Then
                If useViolationNum = True Then
                    If qqAccidentViolation.HasValidViolationNum = True AndAlso IsValidDiamondNum(diaAccidentViolation.ViolationNum) = True AndAlso CInt(qqAccidentViolation.ViolationNum) = diaAccidentViolation.ViolationNum.Id Then
                        isMatch = True
                    End If
                Else
                    'If IsNumeric(qqAccidentViolation.AccidentsViolationsTypeId) AndAlso diaAccidentViolation.AccidentsViolationsTypeId <> Nothing AndAlso qqAccidentViolation.AvDate <> "" AndAlso diaAccidentViolation.AvDate <> Nothing AndAlso IsDate(qqAccidentViolation.AvDate) = True AndAlso IsDate(diaAccidentViolation.AvDate.ToString) = True Then 'might also use ViolationSourceId
                    'updated 4/28/2014 for integer... 0 equates to Nothing; also IsMatch_Date
                    If IsNumeric(qqAccidentViolation.AccidentsViolationsTypeId) Then 'might also use ViolationSourceId
                        'If CInt(qqAccidentViolation.AccidentsViolationsTypeId) = diaAccidentViolation.AccidentsViolationsTypeId AndAlso CDate(qqAccidentViolation.AvDate) = CDate(diaAccidentViolation.AvDate.ToString) AndAlso UCase(qqAccidentViolation.Description) = UCase(diaAccidentViolation.Description) Then
                        'updated 4/28/2014 for IsMatch_Date
                        If CInt(qqAccidentViolation.AccidentsViolationsTypeId) = diaAccidentViolation.AccidentsViolationsTypeId AndAlso IsQuickQuoteToDiamondObjectMatch_Date(qqAccidentViolation.AvDate, diaAccidentViolation.AvDate) = True AndAlso UCase(qqAccidentViolation.Description) = UCase(diaAccidentViolation.Description) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_LossHistory(ByVal qqLossHistory As QuickQuoteLossHistoryRecord, ByVal diaLossHistory As Diamond.Common.Objects.Policy.LossHistory, Optional ByVal useLossHistoryNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqLossHistory IsNot Nothing AndAlso diaLossHistory IsNot Nothing Then
                If useLossHistoryNum = True Then
                    If qqLossHistory.HasValidLossHistoryNum = True AndAlso IsValidDiamondNum(diaLossHistory.LossHistoryNum) = True AndAlso CInt(qqLossHistory.LossHistoryNum) = diaLossHistory.LossHistoryNum.Id Then
                        isMatch = True
                    End If
                Else
                    'If IsNumeric(qqLossHistory.TypeOfLossId) AndAlso diaLossHistory.TypeOfLossId <> Nothing AndAlso qqLossHistory.LossDate <> "" AndAlso diaLossHistory.LossDate <> Nothing AndAlso IsDate(qqLossHistory.LossDate) = True AndAlso IsDate(diaLossHistory.LossDate.ToString) = True Then 'might also use LossHistorySourceId
                    'updated 4/28/2014 for integer... 0 equates to Nothing; also IsMatch_Date
                    If IsNumeric(qqLossHistory.TypeOfLossId) Then 'might also use LossHistorySourceId
                        'If CInt(qqLossHistory.TypeOfLossId) = diaLossHistory.TypeOfLossId AndAlso CDate(qqLossHistory.LossDate) = CDate(diaLossHistory.LossDate.ToString) AndAlso UCase(qqLossHistory.LossDescription) = UCase(diaLossHistory.LossDescription) Then
                        'updated 4/28/2014 for IsMatch_Date
                        If CInt(qqLossHistory.TypeOfLossId) = diaLossHistory.TypeOfLossId AndAlso IsQuickQuoteToDiamondObjectMatch_Date(qqLossHistory.LossDate, diaLossHistory.LossDate) = True AndAlso UCase(qqLossHistory.LossDescription) = UCase(diaLossHistory.LossDescription) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 7/3/2014 for VR PPA... these are only set by CLUE but are being dropped off when re-rated by VR
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_LossHistoryDetail(ByVal qqLossHistoryDetail As QuickQuoteLossHistoryDetailRecord, ByVal diaLossHistoryDetail As Diamond.Common.Objects.Policy.LossHistoryDetail, Optional ByVal useLossHistoryDetailNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqLossHistoryDetail IsNot Nothing AndAlso diaLossHistoryDetail IsNot Nothing Then
                If useLossHistoryDetailNum = True Then
                    '7/3/2014 note: will use once LossHistoryDetailNum property and logic is added to LossHistoryDetail object
                    If qqLossHistoryDetail.HasValidLossHistoryDetailNum = True AndAlso IsValidDiamondNum(diaLossHistoryDetail.LossHistoryDetailNum) = True AndAlso CInt(qqLossHistoryDetail.LossHistoryDetailNum) = diaLossHistoryDetail.LossHistoryDetailNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqLossHistoryDetail.TypeOfLossId) Then
                        If CInt(qqLossHistoryDetail.TypeOfLossId) = diaLossHistoryDetail.TypeOfLossId AndAlso IsQuickQuoteToDiamondObjectMatch_Date(qqLossHistoryDetail.LossDate, diaLossHistoryDetail.LossDate) = True AndAlso UCase(qqLossHistoryDetail.LossDescription) = UCase(diaLossHistoryDetail.LossDescription) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'currently only using for Location match
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Address(ByVal qqAddress As QuickQuoteAddress, ByVal diaAddress As Diamond.Common.Objects.Address) As Boolean
            Dim isMatch As Boolean = False

            If qqAddress IsNot Nothing AndAlso diaAddress IsNot Nothing Then
                If UCase(qqAddress.HouseNum) = UCase(diaAddress.HouseNumber) AndAlso UCase(qqAddress.StreetName) = UCase(diaAddress.StreetName) AndAlso UCase(qqAddress.POBox) = UCase(diaAddress.POBox) AndAlso UCase(qqAddress.ApartmentNumber) = UCase(diaAddress.ApartmentNumber) AndAlso UCase(qqAddress.City) = UCase(diaAddress.City) AndAlso UCase(qqAddress.Zip) = UCase(diaAddress.Zip) AndAlso UCase(qqAddress.Other) = UCase(diaAddress.Other) Then
                    isMatch = True
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Location(ByVal qqLocation As QuickQuoteLocation, ByVal diaLocation As Diamond.Common.Objects.Policy.Location, Optional ByVal useLocationNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean
            'Dim isMatch As Boolean = False

            'If qqLocation IsNot Nothing AndAlso diaLocation IsNot Nothing Then
            '    If useLocationNum = True Then
            '        If qqLocation.HasValidLocationNum = True AndAlso IsValidDiamondNum(diaLocation.LocationNum) = True AndAlso CInt(qqLocation.LocationNum) = diaLocation.LocationNum.Id Then
            '            isMatch = True
            '            If checkForChange = True Then
            '                If IsQuickQuoteToDiamondObjectMatch_Address(qqLocation.Address, diaLocation.Address) = True Then
            '                    qqLocation.HasLocationAddressChanged = False
            '                Else
            '                    qqLocation.HasLocationAddressChanged = True
            '                End If
            '            End If
            '        End If
            '    Else
            '        isMatch = IsQuickQuoteToDiamondObjectMatch_Address(qqLocation.Address, diaLocation.Address)
            '        'could also update to use description
            '        'If UCase(qqLocation.Description) = UCase(diaLocation.DescriptionBusiness) Then
            '        '    isMatch = True
            '        'End If
            '    End If
            'End If

            'Return isMatch
            'updated 10/17/2018 to use new method
            Return IsQuickQuoteToDiamondObjectMatch_Location_UsePackagePartType(qqLocation, diaLocation, QuickQuoteXML.QuickQuotePackagePartType.None, useLocationNum:=useLocationNum, checkForChange:=checkForChange)
        End Function
        '10/17/2018 - added new method for multi-state
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Location_UsePackagePartType(ByVal qqLocation As QuickQuoteLocation, ByVal diaLocation As Diamond.Common.Objects.Policy.Location, ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal useLocationNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean
            Dim isMatch As Boolean = False

            If qqLocation IsNot Nothing AndAlso diaLocation IsNot Nothing Then
                If useLocationNum = True Then
                    If qqLocation.HasValidLocationNum(packagePartType) = True AndAlso IsValidDiamondNum(diaLocation.LocationNum) = True AndAlso CInt(qqLocation.LocationNumForPackagePartType(packagePartType)) = diaLocation.LocationNum.Id Then
                        isMatch = True
                        If checkForChange = True Then
                            If IsQuickQuoteToDiamondObjectMatch_Address(qqLocation.Address, diaLocation.Address) = True Then
                                qqLocation.HasLocationAddressChanged = False
                            Else
                                qqLocation.HasLocationAddressChanged = True
                            End If
                        End If
                    End If
                Else
                    isMatch = IsQuickQuoteToDiamondObjectMatch_Address(qqLocation.Address, diaLocation.Address)
                    'could also update to use description
                    'If UCase(qqLocation.Description) = UCase(diaLocation.DescriptionBusiness) Then
                    '    isMatch = True
                    'End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Building(ByVal qqBuilding As QuickQuoteBuilding, ByVal diaBuilding As Diamond.Common.Objects.Policy.BarnBuilding, Optional ByVal useFarmBarnBuildingNum As Boolean = False) As Boolean
            'Dim isMatch As Boolean = False

            'If qqBuilding IsNot Nothing AndAlso diaBuilding IsNot Nothing Then
            '    If useFarmBarnBuildingNum = True Then
            '        If qqBuilding.HasValidFarmBarnBuildingNum = True AndAlso IsValidDiamondNum(diaBuilding.FarmBarnBuildingNum) = True AndAlso CInt(qqBuilding.FarmBarnBuildingNum) = diaBuilding.FarmBarnBuildingNum.Id Then
            '            isMatch = True
            '        End If
            '    Else
            '        If UCase(qqBuilding.Description) = UCase(diaBuilding.Description) Then 'nothing better to match on right now
            '            isMatch = True
            '        End If
            '    End If
            'End If

            'Return isMatch
            'updated 10/18/2018 to use new method
            Return IsQuickQuoteToDiamondObjectMatch_Building_UsePackagePartType(qqBuilding, diaBuilding, QuickQuoteXML.QuickQuotePackagePartType.None, useFarmBarnBuildingNum:=useFarmBarnBuildingNum)
        End Function
        '10/18/2018 - added new method for multi-state
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Building_UsePackagePartType(ByVal qqBuilding As QuickQuoteBuilding, ByVal diaBuilding As Diamond.Common.Objects.Policy.BarnBuilding, ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal useFarmBarnBuildingNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqBuilding IsNot Nothing AndAlso diaBuilding IsNot Nothing Then
                If useFarmBarnBuildingNum = True Then
                    If qqBuilding.HasValidFarmBarnBuildingNum(packagePartType) = True AndAlso IsValidDiamondNum(diaBuilding.FarmBarnBuildingNum) = True AndAlso CInt(qqBuilding.FarmBarnBuildingNumForPackagePartType(packagePartType)) = diaBuilding.FarmBarnBuildingNum.Id Then
                        isMatch = True
                    End If
                Else
                    If UCase(qqBuilding.Description) = UCase(diaBuilding.Description) Then 'nothing better to match on right now
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 4/24/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Applicant(ByVal qqApplicant As QuickQuoteApplicant, ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant, Optional ByVal useApplicantNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean
            Dim isMatch As Boolean = False

            If qqApplicant IsNot Nothing AndAlso diaApplicant IsNot Nothing Then
                If useApplicantNum = True Then
                    If qqApplicant.HasValidApplicantNum = True AndAlso IsValidDiamondNum(diaApplicant.ApplicantNum) = True AndAlso CInt(qqApplicant.ApplicantNum) = diaApplicant.ApplicantNum.Id Then
                        isMatch = True
                        If checkForChange = True Then 'won't want to overwrite the original flag if checking for change after the reconciliation is complete and both are the same
                            If IsQuickQuoteToDiamondObjectMatch_Name(qqApplicant.Name, diaApplicant.Name) = True Then
                                qqApplicant.HasApplicantNameChanged = False
                            Else
                                qqApplicant.HasApplicantNameChanged = True
                            End If
                            'updated 7/28/2014 to match driver update from 5/12/2014
                            qqApplicant.HasLastNameChanged = False
                            qqApplicant.HasBirthDateChanged = False
                            If qqApplicant.Name IsNot Nothing AndAlso diaApplicant.Name IsNot Nothing Then
                                'If qqApplicant.Name.LastName <> diaApplicant.Name.LastName Then
                                'updated 10/22/2016 to compare UCase
                                If UCase(qqApplicant.Name.LastName) <> UCase(diaApplicant.Name.LastName) Then
                                    qqApplicant.HasLastNameChanged = True
                                End If
                                If (IsDate(qqApplicant.Name.BirthDate) = True AndAlso IsQuickQuoteToDiamondObjectMatch_Date(qqApplicant.Name.BirthDate, diaApplicant.Name.BirthDate) = False) OrElse (IsDate(qqApplicant.Name.BirthDate) = False AndAlso diaApplicant.Name.BirthDate <> Nothing AndAlso IsDate(diaApplicant.Name.BirthDate.ToString) = True AndAlso CDate(diaApplicant.Name.BirthDate.ToString) > CDate("1/1/1801")) Then
                                    qqApplicant.HasBirthDateChanged = True
                                End If
                            End If
                        End If
                    End If
                Else
                    isMatch = IsQuickQuoteToDiamondObjectMatch_Name(qqApplicant.Name, diaApplicant.Name)
                End If
            End If

            Return isMatch
        End Function
        'added 4/24/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_VehicleSymbol(ByVal qqVehicleSymbol As QuickQuoteVehicleSymbol, ByVal diaVehicleSymbol As Diamond.Common.Objects.Policy.VehicleSymbol, Optional ByVal useVehicleSymbolNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqVehicleSymbol IsNot Nothing AndAlso diaVehicleSymbol IsNot Nothing Then
                If useVehicleSymbolNum = True Then
                    If qqVehicleSymbol.HasValidVehicleSymbolNum = True AndAlso IsValidDiamondNum(diaVehicleSymbol.VehicleSymbolNum) = True AndAlso CInt(qqVehicleSymbol.VehicleSymbolNum) = diaVehicleSymbol.VehicleSymbolNum.Id Then
                        isMatch = True
                    End If
                Else
                    'If IsNumeric(qqVehicleSymbol.VehicleSymbolCoverageTypeId) AndAlso diaVehicleSymbol.VehicleSymbolCoverageTypeId <> Nothing Then 'may need to use more than just this
                    'updated 4/28/2014 for integer... 0 equates to Nothing
                    If IsNumeric(qqVehicleSymbol.VehicleSymbolCoverageTypeId) Then 'may need to use more than just this
                        If CInt(qqVehicleSymbol.VehicleSymbolCoverageTypeId) = diaVehicleSymbol.VehicleSymbolCoverageTypeId Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 4/25/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Date(ByVal qqDate As String, ByVal diaDate As Diamond.Common.Objects.InsDateTime) As Boolean
            Dim isMatch As Boolean = False

            If qqDate <> "" AndAlso diaDate <> Nothing AndAlso IsDate(qqDate) = True AndAlso IsDate(diaDate.ToString) = True AndAlso CDate(qqDate) = CDate(diaDate.ToString) Then
                isMatch = True
            End If

            Return isMatch
        End Function
        'added 4/29/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_AdditionalInterest(ByVal qqAdditionalInterest As QuickQuoteAdditionalInterest, ByVal diaAdditionalInterest As Diamond.Common.Objects.Policy.AdditionalInterest, Optional ByVal useAdditionalInterestNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean
            Dim isMatch As Boolean = False

            If qqAdditionalInterest IsNot Nothing AndAlso diaAdditionalInterest IsNot Nothing Then
                If useAdditionalInterestNum = True Then
                    If qqAdditionalInterest.HasValidAdditionalInterestNum = True AndAlso IsValidDiamondNum(diaAdditionalInterest.AdditionalInterestNum) = True AndAlso CInt(qqAdditionalInterest.Num) = diaAdditionalInterest.AdditionalInterestNum.Id Then
                        'updated 4/29/2014 to include AdditionalInterestListId... appears to be required when using existing AdditionalInterest; changed back 5/6/2014
                        'If qqAdditionalInterest.HasValidAdditionalInterestNum = True AndAlso IsValidDiamondNum(diaAdditionalInterest.AdditionalInterestNum) = True AndAlso CInt(qqAdditionalInterest.Num) = diaAdditionalInterest.AdditionalInterestNum.Id AndAlso qqAdditionalInterest.HasValidAdditionalInterestListId = True AndAlso IsValidDiamondNum(diaAdditionalInterest.AdditionalInterestListId) = True AndAlso CInt(qqAdditionalInterest.ListId) = diaAdditionalInterest.AdditionalInterestListId.Id Then
                        isMatch = True
                        If checkForChange = True Then
                            If diaAdditionalInterest.AdditionalInterestList IsNot Nothing AndAlso IsQuickQuoteToDiamondObjectMatch_Name(qqAdditionalInterest.Name, diaAdditionalInterest.AdditionalInterestList.Name) = True Then
                                qqAdditionalInterest.HasAdditionalInterestListNameChanged = False
                            Else
                                qqAdditionalInterest.HasAdditionalInterestListNameChanged = True
                            End If
                            'added 5/6/2014; may not need to check for ListId and Name change but will leave for now
                            If qqAdditionalInterest.HasValidAdditionalInterestListId = True AndAlso IsValidDiamondNum(diaAdditionalInterest.AdditionalInterestListId) = True AndAlso CInt(qqAdditionalInterest.ListId) = diaAdditionalInterest.AdditionalInterestListId.Id Then
                                qqAdditionalInterest.HasAdditionalInterestListIdChanged = False
                            Else
                                qqAdditionalInterest.HasAdditionalInterestListIdChanged = True
                            End If
                        End If
                    End If
                Else
                    'If IsNumeric(qqAdditionalInterest.TypeId) = True AndAlso CInt(qqAdditionalInterest.TypeId) = diaAdditionalInterest.AdditionalInterestTypeId AndAlso diaAdditionalInterest.AdditionalInterestList IsNot Nothing Then
                    '    isMatch = IsQuickQuoteToDiamondObjectMatch_Name(qqAdditionalInterest.Name, diaAdditionalInterest.AdditionalInterestList.Name)
                    'End If
                    'updated 4/29/2014 to include AdditionalInterestListId... appears to be required when using existing AdditionalInterest; will now use HasAdditionalInterestListNameChanged property any time there's a match
                    If IsNumeric(qqAdditionalInterest.TypeId) = True AndAlso CInt(qqAdditionalInterest.TypeId) = diaAdditionalInterest.AdditionalInterestTypeId AndAlso qqAdditionalInterest.HasValidAdditionalInterestListId = True AndAlso IsValidDiamondNum(diaAdditionalInterest.AdditionalInterestListId) = True AndAlso CInt(qqAdditionalInterest.ListId) = diaAdditionalInterest.AdditionalInterestListId.Id Then
                        isMatch = True
                        If checkForChange = True Then
                            If diaAdditionalInterest.AdditionalInterestList IsNot Nothing AndAlso IsQuickQuoteToDiamondObjectMatch_Name(qqAdditionalInterest.Name, diaAdditionalInterest.AdditionalInterestList.Name) = True Then
                                qqAdditionalInterest.HasAdditionalInterestListNameChanged = False
                            Else
                                qqAdditionalInterest.HasAdditionalInterestListNameChanged = True
                            End If
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 5/14/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ScheduledItem(ByVal qqScheduledItem As QuickQuoteScheduledItem, ByVal diaScheduledItem As Diamond.Common.Objects.Policy.ScheduledItem, Optional ByVal useScheduledItemsNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqScheduledItem IsNot Nothing AndAlso diaScheduledItem IsNot Nothing Then
                If useScheduledItemsNum = True Then
                    If qqScheduledItem.HasValidScheduledItemsNum = True AndAlso IsValidDiamondNum(diaScheduledItem.ScheduledItemsNum) = True AndAlso CInt(qqScheduledItem.ScheduledItemsNum) = diaScheduledItem.ScheduledItemsNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqScheduledItem.ScheduledItemsCategoryId) Then
                        If CInt(qqScheduledItem.ScheduledItemsCategoryId) = diaScheduledItem.ScheduledItemsCategoryId AndAlso UCase(qqScheduledItem.Description) = UCase(diaScheduledItem.Description) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 10/14/2014 for reconciliation process
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_InlandMarine(ByVal qqInlandMarine As QuickQuoteInlandMarine, ByVal diaInlandMarine As Diamond.Common.Objects.Policy.InlandMarine, Optional ByVal useInlandMarineNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqInlandMarine IsNot Nothing AndAlso diaInlandMarine IsNot Nothing Then
                If useInlandMarineNum = True Then
                    If qqInlandMarine.HasValidInlandMarineNum = True AndAlso IsValidDiamondNum(diaInlandMarine.InlandMarineNum) = True AndAlso CInt(qqInlandMarine.InlandMarineNum) = diaInlandMarine.InlandMarineNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqInlandMarine.CoverageCodeId) Then
                        '10/14/2014 note: diaInlandMarine also has readOnly property for CoverageCodeId... probably returns diaInlandMarine.Coverage.CoverageCodeId if available
                        If diaInlandMarine.Coverage IsNot Nothing AndAlso CInt(qqInlandMarine.CoverageCodeId) = diaInlandMarine.Coverage.CoverageCodeId AndAlso UCase(qqInlandMarine.Description) = UCase(diaInlandMarine.Description) Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_RvWatercraft(ByVal qqRvWatercraft As QuickQuoteRvWatercraft, ByVal diaRvWatercraft As Diamond.Common.Objects.Policy.RvWatercraft, Optional ByVal useRvWatercraftNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqRvWatercraft IsNot Nothing AndAlso diaRvWatercraft IsNot Nothing Then
                If useRvWatercraftNum = True Then
                    If qqRvWatercraft.HasValidRvWatercraftNum = True AndAlso IsValidDiamondNum(diaRvWatercraft.RvWatercraftNum) = True AndAlso CInt(qqRvWatercraft.RvWatercraftNum) = diaRvWatercraft.RvWatercraftNum.Id Then
                        isMatch = True
                    End If
                Else
                    'updated 10/15/2014 to use RvWatercraftTypeId
                    If IsNumeric(qqRvWatercraft.RvWatercraftTypeId) Then
                        If CInt(qqRvWatercraft.RvWatercraftTypeId) = diaRvWatercraft.RvWatercraftTypeId AndAlso UCase(qqRvWatercraft.Description) = UCase(diaRvWatercraft.Description) Then
                            isMatch = True
                        End If
                    End If
                    'could also use below logic or combination
                    'If UCase(qqRvWatercraft.Manufacturer) = UCase(diaRvWatercraft.Manufacturer) AndAlso UCase(qqRvWatercraft.Model) = UCase(diaRvWatercraft.Model) AndAlso UCase(qqRvWatercraft.Year) = UCase(diaRvWatercraft.Year) Then 'dia year is string property here
                    '    isMatch = True
                    'End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_RvWatercraftMotor(ByVal qqRvWatercraftMotor As QuickQuoteRvWatercraftMotor, ByVal diaRvWatercraftMotor As Diamond.Common.Objects.Policy.RvWatercraftMotor, Optional ByVal useRvWatercraftMotorNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqRvWatercraftMotor IsNot Nothing AndAlso diaRvWatercraftMotor IsNot Nothing Then
                If useRvWatercraftMotorNum = True Then
                    If qqRvWatercraftMotor.HasValidRvWatercraftMotorNum = True AndAlso IsValidDiamondNum(diaRvWatercraftMotor.RVWatercraftMotorNum) = True AndAlso CInt(qqRvWatercraftMotor.RvWatercraftMotorNum) = diaRvWatercraftMotor.RVWatercraftMotorNum.Id Then
                        isMatch = True
                    End If
                Else
                    'updated 10/15/2014 to use MotorTypeId
                    If IsNumeric(qqRvWatercraftMotor.MotorTypeId) Then
                        If CInt(qqRvWatercraftMotor.MotorTypeId) = diaRvWatercraftMotor.MotorTypeId Then
                            isMatch = True
                        End If
                    End If
                    'could also use below logic or combination
                    'If UCase(qqRvWatercraftMotor.Manufacturer) = UCase(diaRvWatercraftMotor.Manufacturer) AndAlso UCase(qqRvWatercraftMotor.Model) = UCase(diaRvWatercraftMotor.Model) AndAlso IsNumeric(qqRvWatercraftMotor.Year) = True AndAlso CInt(qqRvWatercraftMotor.Year) = diaRvWatercraftMotor.Year Then 'dia year is int property here; may also need to allow for empty string qq year and dia year < 1
                    '    isMatch = True
                    'End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_SectionCoverage(ByVal qqSectionCoverage As QuickQuoteSectionCoverage, ByVal diaSectionCoverage As Diamond.Common.Objects.Policy.SectionCoverage, Optional ByVal useSectionCoverageNum As Boolean = False) As Boolean '2/2/2015 note: w/ new coverage matching logic, rated object should always be sent as compare object
            'Dim isMatch As Boolean = False

            'If qqSectionCoverage IsNot Nothing AndAlso diaSectionCoverage IsNot Nothing Then
            '    If useSectionCoverageNum = True Then
            '        If qqSectionCoverage.HasValidSectionCoverageNum = True AndAlso IsValidDiamondNum(diaSectionCoverage.SectionCoverageNum) = True AndAlso CInt(qqSectionCoverage.SectionCoverageNum) = diaSectionCoverage.SectionCoverageNum.Id Then
            '            isMatch = True
            '        End If
            '    Else
            '        'updated 10/15/2014 w/ logic for CoverageExposureId... determines if it's sectionI, sectionII, or sectionIandII
            '        If IsNumeric(qqSectionCoverage.CoverageExposureId) Then
            '            'If CInt(qqSectionCoverage.CoverageExposureId) = diaSectionCoverage.CoverageExposureId AndAlso UCase(qqSectionCoverage.Description) = UCase(diaSectionCoverage.Description) Then
            '            'updated 10/27/2014 to look at child coverages instead of description; could also use description
            '            'If CInt(qqSectionCoverage.CoverageExposureId) = diaSectionCoverage.CoverageExposureId AndAlso IsQuickQuoteToDiamondObjectMatch_Coverages(qqSectionCoverage.Coverages, diaSectionCoverage.Coverages) = True Then
            '            'updated 2/2/2015 to use new method for coverage matching; note: rated object should always be sent as compare object (since it may have more coverages that Diamond has automatically added)
            '            If CInt(qqSectionCoverage.CoverageExposureId) = diaSectionCoverage.CoverageExposureId AndAlso QuickQuoteCoveragesAreInDiamondCoveragesList(qqSectionCoverage.Coverages, diaSectionCoverage.Coverages) = True Then
            '                isMatch = True
            '            End If
            '        End If
            '    End If
            'End If

            'Return isMatch
            'updated 10/29/2018
            Return IsQuickQuoteToDiamondObjectMatch_SectionCoverage_UsePackagePartType(qqSectionCoverage, diaSectionCoverage, QuickQuoteXML.QuickQuotePackagePartType.None, useSectionCoverageNum:=useSectionCoverageNum)
        End Function
        'added 10/29/2018 for multi-state
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_SectionCoverage_UsePackagePartType(ByVal qqSectionCoverage As QuickQuoteSectionCoverage, ByVal diaSectionCoverage As Diamond.Common.Objects.Policy.SectionCoverage, ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal useSectionCoverageNum As Boolean = False) As Boolean '2/2/2015 note: w/ new coverage matching logic, rated object should always be sent as compare object
            Dim isMatch As Boolean = False

            If qqSectionCoverage IsNot Nothing AndAlso diaSectionCoverage IsNot Nothing Then
                If useSectionCoverageNum = True Then
                    If qqSectionCoverage.SectionCoverageNumGroup.HasValidDiamondNum(packagePartType:=packagePartType) = True AndAlso IsValidDiamondNum(diaSectionCoverage.SectionCoverageNum) = True AndAlso CInt(qqSectionCoverage.SectionCoverageNumGroup.DiamondNumForPackagePartType(packagePartType)) = diaSectionCoverage.SectionCoverageNum.Id Then
                        isMatch = True
                    End If
                Else
                    'updated 10/15/2014 w/ logic for CoverageExposureId... determines if it's sectionI, sectionII, or sectionIandII
                    If IsNumeric(qqSectionCoverage.CoverageExposureId) Then
                        'If CInt(qqSectionCoverage.CoverageExposureId) = diaSectionCoverage.CoverageExposureId AndAlso UCase(qqSectionCoverage.Description) = UCase(diaSectionCoverage.Description) Then
                        'updated 10/27/2014 to look at child coverages instead of description; could also use description
                        'If CInt(qqSectionCoverage.CoverageExposureId) = diaSectionCoverage.CoverageExposureId AndAlso IsQuickQuoteToDiamondObjectMatch_Coverages(qqSectionCoverage.Coverages, diaSectionCoverage.Coverages) = True Then
                        'updated 2/2/2015 to use new method for coverage matching; note: rated object should always be sent as compare object (since it may have more coverages that Diamond has automatically added)
                        If CInt(qqSectionCoverage.CoverageExposureId) = diaSectionCoverage.CoverageExposureId AndAlso QuickQuoteCoveragesAreInDiamondCoveragesList(qqSectionCoverage.Coverages, diaSectionCoverage.Coverages) = True Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_PolicyUnderwriting(ByVal qqPolicyUnderwriting As QuickQuotePolicyUnderwriting, ByVal diaPolicyUnderwriting As Diamond.Common.Objects.Policy.PolicyUnderwriting, Optional ByVal usePolicyUnderwritingNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqPolicyUnderwriting IsNot Nothing AndAlso diaPolicyUnderwriting IsNot Nothing Then
                If usePolicyUnderwritingNum = True Then
                    If qqPolicyUnderwriting.HasValidPolicyUnderwritingNum = True AndAlso IsValidDiamondNum(diaPolicyUnderwriting.PolicyUnderwritingNum) = True AndAlso CInt(qqPolicyUnderwriting.PolicyUnderwritingNum) = diaPolicyUnderwriting.PolicyUnderwritingNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqPolicyUnderwriting.PolicyUnderwritingCodeId) Then
                        If CInt(qqPolicyUnderwriting.PolicyUnderwritingCodeId) = diaPolicyUnderwriting.PolicyUnderwritingCodeId Then
                            'isMatch = True
                            'updated 12/18/2014 to also look at PolicyUnderwritingLevelId
                            If IsNumeric(qqPolicyUnderwriting.PolicyUnderwritingLevelId) Then
                                If CInt(qqPolicyUnderwriting.PolicyUnderwritingLevelId) = diaPolicyUnderwriting.PolicyUnderwritingLevelId Then
                                    isMatch = True
                                End If
                            Else
                                If diaPolicyUnderwriting.PolicyUnderwritingLevelId = 0 Then
                                    isMatch = True
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 3/26/2015 for CRM... only lob so far that appears to use list... even though you only enter 1 from the UI
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ClassificationCode(ByVal qqClassificationCode As QuickQuoteClassificationCode, ByVal diaClassificationCode As Diamond.Common.Objects.Policy.ClassificationCode, Optional ByVal useClassificationCodeNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqClassificationCode IsNot Nothing AndAlso diaClassificationCode IsNot Nothing Then
                If useClassificationCodeNum = True Then
                    If qqClassificationCode.HasValidClassificationCodeNum = True AndAlso IsValidDiamondNum(diaClassificationCode.ClassificationCodeNum) = True AndAlso CInt(qqClassificationCode.ClassificationCodeNum) = diaClassificationCode.ClassificationCodeNum.Id Then
                        isMatch = True
                    End If
                Else
                    If UCase(qqClassificationCode.ClassCode) = UCase(diaClassificationCode.ClassCode) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Classification(ByVal qqClassification As QuickQuoteClassification, ByVal diaClassification As Diamond.Common.Objects.Policy.Classification, Optional ByVal useClassificationNum As Boolean = False) As Boolean 'added 2/20/2017 for reconcilation
            Dim isMatch As Boolean = False

            If qqClassification IsNot Nothing AndAlso diaClassification IsNot Nothing Then
                If useClassificationNum = True Then
                    If qqClassification.HasValidClassificationNum = True AndAlso IsValidDiamondNum(diaClassification.ClassificationNum) = True AndAlso CInt(qqClassification.ClassificationNum) = diaClassification.ClassificationNum.Id Then
                        isMatch = True
                    End If
                Else
                    Dim qqHelper As New QuickQuoteHelperClass
                    If qqHelper.IntegerForString(qqClassification.ClassificationTypeId) = diaClassification.ClassificationTypeId Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function

        'added 4/22/2020 for PUP/FUP
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_UnderlyingPolicy(ByVal qqUnderlyingPolicy As QuickQuoteUnderlyingPolicy, ByVal diaUnderlyingPolicy As Diamond.Common.Objects.Policy.UnderlyingPolicy, Optional ByVal useUnderlyingPolicyNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqUnderlyingPolicy IsNot Nothing AndAlso diaUnderlyingPolicy IsNot Nothing Then
                If useUnderlyingPolicyNum = True Then
                    If qqUnderlyingPolicy.HasValidUnderlyingPolicyNum = True AndAlso IsValidDiamondNum(diaUnderlyingPolicy.UnderlyingPolicyNum) = True AndAlso CInt(qqUnderlyingPolicy.UnderlyingPolicyNum) = diaUnderlyingPolicy.UnderlyingPolicyNum.Id Then
                        isMatch = True
                    End If
                Else
                    Dim qqHelper As New QuickQuoteHelperClass
                    If qqHelper.IntegerForString(qqUnderlyingPolicy.LobId) = diaUnderlyingPolicy.LobId AndAlso UCase(qqUnderlyingPolicy.PrimaryPolicyNumber) = UCase(diaUnderlyingPolicy.PrimaryPolicyNumber) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_PolicyInfo(ByVal qqPolicyInfo As PolicyInfo, ByVal diaPolicyInfo As Diamond.Common.Objects.Policy.PolicyInfo, Optional ByVal usePolicyInfoNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqPolicyInfo IsNot Nothing AndAlso diaPolicyInfo IsNot Nothing Then
                If usePolicyInfoNum = True Then
                    'If qqPolicyInfo.HasValidPolicyInfoNum = True AndAlso IsValidDiamondNum(diaPolicyInfo.PolicyInfoNum) = True AndAlso CInt(qqPolicyInfo.PolicyInfoNum) = diaPolicyInfo.PolicyInfoNum.Id Then
                    '    isMatch = True
                    'End If
                Else
                    Dim qqHelper As New QuickQuoteHelperClass
                    If qqHelper.IntegerForString(qqPolicyInfo.PolicyTypeId) = diaPolicyInfo.PolicyTypeId AndAlso UCase(qqPolicyInfo.PrimaryPolicyNumber) = UCase(diaPolicyInfo.PrimaryPolicyNumber) AndAlso UCase(qqPolicyInfo.LinkNumber) = UCase(diaPolicyInfo.LinkNumber) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_PersonalLiability(ByVal qqPersonalLiability As PersonalLiability, ByVal diaPersonalLiability As Diamond.Common.Objects.Policy.PersonalLiability, Optional ByVal usePersonalLiabilityNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqPersonalLiability IsNot Nothing AndAlso diaPersonalLiability IsNot Nothing Then
                If usePersonalLiabilityNum = True Then
                    'If qqPersonalLiability.HasValidPersonalLiabilityNum = True AndAlso IsValidDiamondNum(diaPersonalLiability.PersonalLiabilityNum) = True AndAlso CInt(qqPersonalLiability.PersonalLiabilityNum) = diaPersonalLiability.PersonalLiabilityNum.Id Then
                    '    isMatch = True
                    'End If
                Else
                    Dim qqHelper As New QuickQuoteHelperClass
                    'If qqHelper.IntegerForString(qqPersonalLiability.PersonalLiabilityTypeId) = diaPersonalLiability.PersonalLiabilityTypeId AndAlso UCase(qqPersonalLiability.LinkNumber) = UCase(diaPersonalLiability.LinkNumber) Then
                    '    isMatch = True
                    'End If
                End If
            End If

            Return isMatch
        End Function

        'added 10/28/2014; added specifically for section coverages matching in QuickQuoteXML.CopyRatedQuoteInformationToQuoteObject method
        Public Shared Function IsQuickQuoteObjectMatch_SectionCoverage(ByVal qqSectionCoverage As QuickQuoteSectionCoverage, ByVal qqCompareSectionCoverage As QuickQuoteSectionCoverage, Optional ByVal useSectionCoverageNum As Boolean = False) As Boolean '2/2/2015 note: w/ new coverage matching logic, rated object should always be sent as compare object
            Dim isMatch As Boolean = False

            If qqSectionCoverage IsNot Nothing AndAlso qqCompareSectionCoverage IsNot Nothing Then
                If useSectionCoverageNum = True Then
                    If qqSectionCoverage.HasValidSectionCoverageNum = True AndAlso qqCompareSectionCoverage.HasValidSectionCoverageNum = True AndAlso CInt(qqSectionCoverage.SectionCoverageNum) = CInt(qqCompareSectionCoverage.SectionCoverageNum) Then
                        isMatch = True
                    End If
                Else
                    'updated 10/15/2014 w/ logic for CoverageExposureId... determines if it's sectionI, sectionII, or sectionIandII
                    If IsNumeric(qqSectionCoverage.CoverageExposureId) AndAlso IsNumeric(qqCompareSectionCoverage.CoverageExposureId) Then
                        'If CInt(qqSectionCoverage.CoverageExposureId) = CInt(qqCompareSectionCoverage.CoverageExposureId) AndAlso UCase(qqSectionCoverage.Description) = UCase(qqCompareSectionCoverage.Description) Then
                        'updated 10/27/2014 to look at child coverages instead of description; could also use description
                        'If CInt(qqSectionCoverage.CoverageExposureId) = CInt(qqCompareSectionCoverage.CoverageExposureId) AndAlso IsQuickQuoteObjectMatch_Coverages(qqSectionCoverage.Coverages, qqCompareSectionCoverage.Coverages) = True Then
                        'updated 2/2/2015 to use new method for coverage matching; note: rated object should always be sent as compare object (since it may have more coverages that Diamond has automatically added)
                        If CInt(qqSectionCoverage.CoverageExposureId) = CInt(qqCompareSectionCoverage.CoverageExposureId) AndAlso QuickQuoteCoveragesFromFirstListAreInSecondList(qqSectionCoverage.Coverages, qqCompareSectionCoverage.Coverages) = True Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteObjectMatch_SectionICoverage(ByVal qqSectionICoverage As QuickQuoteSectionICoverage, ByVal qqCompareSectionICoverage As QuickQuoteSectionICoverage, Optional ByVal useSectionCoverageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqSectionICoverage IsNot Nothing AndAlso qqCompareSectionICoverage IsNot Nothing Then
                If useSectionCoverageNum = True Then
                    If qqSectionICoverage.HasValidSectionCoverageNum = True AndAlso qqCompareSectionICoverage.HasValidSectionCoverageNum = True AndAlso CInt(qqSectionICoverage.SectionCoverageNum) = CInt(qqCompareSectionICoverage.SectionCoverageNum) Then
                        isMatch = True
                    End If
                Else
                    'If UCase(qqSectionICoverage.Description) = UCase(qqCompareSectionICoverage.Description) Then
                    'updated 10/27/2014 to look at child coverages instead of description; could also use description
                    If qqSectionICoverage.CoverageType = qqCompareSectionICoverage.CoverageType Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteObjectMatch_SectionIICoverage(ByVal qqSectionIICoverage As QuickQuoteSectionIICoverage, ByVal qqCompareSectionIICoverage As QuickQuoteSectionIICoverage, Optional ByVal useSectionCoverageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqSectionIICoverage IsNot Nothing AndAlso qqCompareSectionIICoverage IsNot Nothing Then
                If useSectionCoverageNum = True Then
                    If qqSectionIICoverage.HasValidSectionCoverageNum = True AndAlso qqCompareSectionIICoverage.HasValidSectionCoverageNum = True AndAlso CInt(qqSectionIICoverage.SectionCoverageNum) = CInt(qqCompareSectionIICoverage.SectionCoverageNum) Then
                        isMatch = True
                    End If
                Else
                    'If UCase(qqSectionIICoverage.Description) = UCase(qqCompareSectionIICoverage.Description) Then
                    'updated 10/27/2014 to look at child coverages instead of description; could also use description
                    If qqSectionIICoverage.CoverageType = qqCompareSectionIICoverage.CoverageType Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteObjectMatch_SectionIandIICoverage(ByVal qqSectionIandIICoverage As QuickQuoteSectionIAndIICoverage, ByVal qqCompareSectionIandIICoverage As QuickQuoteSectionIAndIICoverage, Optional ByVal useSectionCoverageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqSectionIandIICoverage IsNot Nothing AndAlso qqCompareSectionIandIICoverage IsNot Nothing Then
                If useSectionCoverageNum = True Then
                    If qqSectionIandIICoverage.HasValidSectionCoverageNum = True AndAlso qqCompareSectionIandIICoverage.HasValidSectionCoverageNum = True AndAlso CInt(qqSectionIandIICoverage.SectionCoverageNum) = CInt(qqCompareSectionIandIICoverage.SectionCoverageNum) Then
                        isMatch = True
                    End If
                Else
                    'If UCase(qqSectionIandIICoverage.Description) = UCase(qqCompareSectionIandIICoverage.Description) Then
                    'updated 10/27/2014 to look at child coverages instead of description; could also use description
                    If qqSectionIandIICoverage.MainCoverageType = qqCompareSectionIandIICoverage.MainCoverageType Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteObjectMatch_Coverage(ByVal qqCoverage As QuickQuoteCoverage, ByVal qqCompareCoverage As QuickQuoteCoverage) As Boolean
            Dim isMatch As Boolean = False

            If qqCoverage IsNot Nothing AndAlso qqCompareCoverage IsNot Nothing Then
                If IsNumeric(qqCoverage.CoverageCodeId) AndAlso IsNumeric(qqCompareCoverage.CoverageCodeId) Then
                    If CInt(qqCoverage.CoverageCodeId) = CInt(qqCompareCoverage.CoverageCodeId) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteObjectMatch_Coverages(ByVal qqCoverages As List(Of QuickQuoteCoverage), ByVal qqCompareCoverages As List(Of QuickQuoteCoverage)) As Boolean
            Dim isMatch As Boolean = False

            If qqCoverages IsNot Nothing AndAlso qqCompareCoverages IsNot Nothing AndAlso qqCoverages.Count = qqCompareCoverages.Count Then
                Dim qC_counter As Integer = 0
                For Each qC As QuickQuoteCoverage In qqCoverages
                    qC_counter += 1
                    Dim qC_compare As QuickQuoteCoverage = qqCompareCoverages.Item(qC_counter - 1)
                    isMatch = IsQuickQuoteObjectMatch_Coverage(qC, qC_compare)
                    If isMatch = False Then
                        Exit For
                    End If
                Next
            End If

            Return isMatch
        End Function
        'added 1/29/2015
        Public Shared Function QuickQuoteCoveragesFromFirstListAreInSecondList(ByVal qqCoverages As List(Of QuickQuoteCoverage), ByVal qqCompareCoverages As List(Of QuickQuoteCoverage), Optional ByRef exactMatch As Boolean = False, Optional ByRef sameOrder As Boolean = False, Optional ByVal onlyOkayIfCoveragesInFirstList As Boolean = True) As Boolean 'updated 1/30/2015 w/ optional ByRef param for sameOrder
            Dim okay As Boolean = False
            exactMatch = False
            sameOrder = False 'added 1/30/2015

            Dim covsCount As Integer = 0
            If qqCoverages IsNot Nothing Then
                covsCount = qqCoverages.Count
            End If
            Dim compareCovsCount As Integer = 0
            If qqCompareCoverages IsNot Nothing Then
                compareCovsCount = qqCompareCoverages.Count
            End If

            If covsCount > 0 Then
                If compareCovsCount >= covsCount Then
                    okay = True
                    sameOrder = True 'added 1/30/2015
                    Dim compareCovMatches As New List(Of Integer)
                    For Each c As QuickQuoteCoverage In qqCoverages
                        Dim hasMatch As Boolean = False

                        Dim compareCount As Integer = 0
                        For Each compareC As QuickQuoteCoverage In qqCompareCoverages
                            compareCount += 1
                            If compareCovMatches.Contains(compareCount) = False Then
                                hasMatch = IsQuickQuoteObjectMatch_Coverage(c, compareC)
                                If hasMatch = True Then
                                    compareCovMatches.Add(compareCount)
                                    Exit For
                                Else 'added 1/30/2015
                                    sameOrder = False
                                End If
                            End If
                        Next
                        If hasMatch = False Then
                            okay = False
                            exactMatch = False
                            sameOrder = False 'added 1/30/2015
                            Exit For
                        End If
                    Next
                    If okay = True AndAlso covsCount = compareCovsCount Then
                        exactMatch = True
                    End If
                End If
            Else
                '0 covs in 1st list
                If onlyOkayIfCoveragesInFirstList = False Then
                    okay = True
                    If compareCovsCount = 0 Then
                        exactMatch = True
                    End If
                End If
            End If

            Return okay
        End Function
        'added 10/29/2014 for reconciliation
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Operator(ByVal qqOperator As QuickQuoteOperator, ByVal diaOperator As Diamond.Common.Objects.Policy.Operator, Optional ByVal useOperatorNum As Boolean = False, Optional ByVal checkForChange As Boolean = True) As Boolean
            Dim isMatch As Boolean = False

            If qqOperator IsNot Nothing AndAlso diaOperator IsNot Nothing Then
                If useOperatorNum = True Then
                    If qqOperator.HasValidOperatorNum = True AndAlso IsValidDiamondNum(diaOperator.OperatorNum) = True AndAlso CInt(qqOperator.OperatorNum) = diaOperator.OperatorNum.Id Then
                        isMatch = True
                        '10/29/2014 note: doesn't currently have HasOperatorNameChanged, HasLastNameChanged, or HasBirthDateChanged properties
                        'If checkForChange = True Then 'won't want to overwrite the original flag if checking for change after the reconciliation is complete and both are the same
                        '    If IsQuickQuoteToDiamondObjectMatch_Name(qqOperator.Name, diaOperator.Name) = True Then
                        '        qqOperator.HasOperatorNameChanged = False
                        '    Else
                        '        qqOperator.HasOperatorNameChanged = True
                        '    End If
                        '    'updated 7/28/2014 to match driver update from 5/12/2014
                        '    qqOperator.HasLastNameChanged = False
                        '    qqOperator.HasBirthDateChanged = False
                        '    If qqOperator.Name IsNot Nothing AndAlso diaOperator.Name IsNot Nothing Then
                        '        'If qqOperator.Name.LastName <> diaOperator.Name.LastName Then
                        '        'updated 10/22/2016 to compare UCase
                        '        If UCase(qqOperator.Name.LastName) <> UCase(diaOperator.Name.LastName) Then
                        '            qqOperator.HasLastNameChanged = True
                        '        End If
                        '        If (IsDate(qqOperator.Name.BirthDate) = True AndAlso IsQuickQuoteToDiamondObjectMatch_Date(qqOperator.Name.BirthDate, diaOperator.Name.BirthDate) = False) OrElse (IsDate(qqOperator.Name.BirthDate) = False AndAlso diaOperator.Name.BirthDate <> Nothing AndAlso IsDate(diaOperator.Name.BirthDate.ToString) = True AndAlso CDate(diaOperator.Name.BirthDate.ToString) > CDate("1/1/1801")) Then
                        '            qqOperator.HasBirthDateChanged = True
                        '        End If
                        '    End If
                        'End If
                    End If
                Else
                    isMatch = IsQuickQuoteToDiamondObjectMatch_Name(qqOperator.Name, diaOperator.Name)
                End If
            End If

            Return isMatch
        End Function
        'added 10/30/2014 (specific to matching RvWatercraft operators to policy-level operators)
        Public Shared Function IsQuickQuoteObjectMatch_Name(ByVal qqName As QuickQuoteName, ByVal qqCompareName As QuickQuoteName) As Boolean
            Dim isMatch As Boolean = False

            If qqName IsNot Nothing AndAlso qqCompareName IsNot Nothing Then
                If IsNumeric(qqName.TypeId) AndAlso IsNumeric(qqCompareName.TypeId) Then 'may not need to use TypeId
                    If CInt(qqName.TypeId) = CInt(qqCompareName.TypeId) AndAlso UCase(qqName.FirstName) = UCase(qqCompareName.FirstName) AndAlso UCase(qqName.LastName) = UCase(qqCompareName.LastName) AndAlso UCase(qqName.MiddleName) = UCase(qqCompareName.MiddleName) AndAlso UCase(qqName.CommercialName1) = UCase(qqCompareName.CommercialName1) AndAlso UCase(qqName.CommercialName2) = UCase(qqCompareName.CommercialName2) AndAlso UCase(qqName.DoingBusinessAsName) = UCase(qqCompareName.DoingBusinessAsName) Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 1/22/2015 for use w/ CopyRatedQuoteInformationToQuoteObject and reconciliation methods
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ScheduledCoverage(ByVal qqScheduledCoverage As QuickQuoteScheduledCoverage, ByVal diaScheduledCoverage As Diamond.Common.Objects.Policy.ScheduledCoverage, Optional ByVal useScheduledCoverageNum As Boolean = False) As Boolean '2/2/2015 note: w/ new coverage matching logic, rated object should always be sent as compare object
            Dim isMatch As Boolean = False

            If qqScheduledCoverage IsNot Nothing AndAlso diaScheduledCoverage IsNot Nothing Then
                If useScheduledCoverageNum = True Then
                    If qqScheduledCoverage.HasValidScheduledCoverageNum = True AndAlso IsValidDiamondNum(diaScheduledCoverage.ScheduledCoverageNum) = True AndAlso CInt(qqScheduledCoverage.ScheduledCoverageNum) = diaScheduledCoverage.ScheduledCoverageNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqScheduledCoverage.UICoverageScheduledCoverageParentTypeId) Then
                        'If CInt(qqScheduledCoverage.UICoverageScheduledCoverageParentTypeId) = diaScheduledCoverage.UICoverageScheduledCoverageParentTypeId AndAlso IsQuickQuoteToDiamondObjectMatch_Coverages(qqScheduledCoverage.Coverages, diaScheduledCoverage.Coverages) = True Then
                        'updated 2/2/2015 to use new method for coverage matching; note: rated object should always be sent as compare object (since it may have more coverages that Diamond has automatically added)
                        If CInt(qqScheduledCoverage.UICoverageScheduledCoverageParentTypeId) = diaScheduledCoverage.UICoverageScheduledCoverageParentTypeId AndAlso QuickQuoteCoveragesAreInDiamondCoveragesList(qqScheduledCoverage.Coverages, diaScheduledCoverage.Coverages) = True Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteObjectMatch_ScheduledCoverage(ByVal qqScheduledCoverage As QuickQuoteScheduledCoverage, ByVal qqCompareScheduledCoverage As QuickQuoteScheduledCoverage, Optional ByVal useScheduledCoverageNum As Boolean = False) As Boolean '2/2/2015 note: w/ new coverage matching logic, rated object should always be sent as compare object
            Dim isMatch As Boolean = False

            If qqScheduledCoverage IsNot Nothing AndAlso qqCompareScheduledCoverage IsNot Nothing Then
                If useScheduledCoverageNum = True Then
                    If qqScheduledCoverage.HasValidScheduledCoverageNum = True AndAlso qqCompareScheduledCoverage.HasValidScheduledCoverageNum = True AndAlso CInt(qqScheduledCoverage.ScheduledCoverageNum) = CInt(qqCompareScheduledCoverage.ScheduledCoverageNum) Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqScheduledCoverage.UICoverageScheduledCoverageParentTypeId) AndAlso IsNumeric(qqCompareScheduledCoverage.UICoverageScheduledCoverageParentTypeId) Then
                        'If CInt(qqScheduledCoverage.UICoverageScheduledCoverageParentTypeId) = CInt(qqCompareScheduledCoverage.UICoverageScheduledCoverageParentTypeId) AndAlso IsQuickQuoteObjectMatch_Coverages(qqScheduledCoverage.Coverages, qqCompareScheduledCoverage.Coverages) = True Then
                        'updated 2/2/2015 to use new method for coverage matching; note: rated object should always be sent as compare object (since it may have more coverages that Diamond has automatically added)
                        If CInt(qqScheduledCoverage.UICoverageScheduledCoverageParentTypeId) = CInt(qqCompareScheduledCoverage.UICoverageScheduledCoverageParentTypeId) AndAlso QuickQuoteCoveragesFromFirstListAreInSecondList(qqScheduledCoverage.Coverages, qqCompareScheduledCoverage.Coverages) = True Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 2/20/2015
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ScheduledPersonalPropertyCoverage(ByVal qqScheduledPersonalPropertyCoverage As QuickQuoteScheduledPersonalPropertyCoverage, ByVal diaScheduledPersonalPropertyCoverage As Diamond.Common.Objects.Policy.ScheduledPersonalPropertyCoverage, Optional ByVal useScheduledFarmPersonalPropertyCoverageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqScheduledPersonalPropertyCoverage IsNot Nothing AndAlso diaScheduledPersonalPropertyCoverage IsNot Nothing Then
                If useScheduledFarmPersonalPropertyCoverageNum = True Then
                    If qqScheduledPersonalPropertyCoverage.HasValidScheduledFarmPersonalPropertyNum = True AndAlso IsValidDiamondNum(diaScheduledPersonalPropertyCoverage.ScheduledFarmPersonalPropertyNum) = True AndAlso CInt(qqScheduledPersonalPropertyCoverage.ScheduledFarmPersonalPropertyNum) = diaScheduledPersonalPropertyCoverage.ScheduledFarmPersonalPropertyNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsQuickQuoteToDiamondObjectMatch_Coverage(qqScheduledPersonalPropertyCoverage.Coverage, diaScheduledPersonalPropertyCoverage.Coverage) = True AndAlso IsQuickQuoteToDiamondObjectMatch_Coverage(qqScheduledPersonalPropertyCoverage.EarthquakeCoverage, diaScheduledPersonalPropertyCoverage.EarthquakeCoverage) = True Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_UnscheduledPersonalPropertyCoverage(ByVal qqUnscheduledPersonalPropertyCoverage As QuickQuoteUnscheduledPersonalPropertyCoverage, ByVal diaUnscheduledPersonalPropertyCoverage As Diamond.Common.Objects.Policy.UnscheduledPersonalPropertyCoverage, Optional ByVal useUnscheduledFarmPersonalPropertyCoverageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqUnscheduledPersonalPropertyCoverage IsNot Nothing AndAlso diaUnscheduledPersonalPropertyCoverage IsNot Nothing Then
                If useUnscheduledFarmPersonalPropertyCoverageNum = True Then
                    If qqUnscheduledPersonalPropertyCoverage.HasValidUnscheduledFarmPersonalPropertyNum = True AndAlso IsValidDiamondNum(diaUnscheduledPersonalPropertyCoverage.UnscheduledFarmPersonalPropertyNum) = True AndAlso CInt(qqUnscheduledPersonalPropertyCoverage.UnscheduledFarmPersonalPropertyNum) = diaUnscheduledPersonalPropertyCoverage.UnscheduledFarmPersonalPropertyNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsQuickQuoteToDiamondObjectMatch_Coverage(qqUnscheduledPersonalPropertyCoverage.Coverage, diaUnscheduledPersonalPropertyCoverage.Coverage) = True AndAlso IsQuickQuoteToDiamondObjectMatch_Coverage(qqUnscheduledPersonalPropertyCoverage.EarthquakeCoverage, diaUnscheduledPersonalPropertyCoverage.EarthquakeCoverage) = True Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 2/25/2015 for Farm; updated 5/12/2015 to un-comment OptionalCoveragesNum logic and use
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_OptionalCoverage(ByVal qqOptionalCoverage As QuickQuoteOptionalCoverage, ByVal diaOptionalCoverage As Diamond.Common.Objects.Policy.OptionalCoverage, Optional ByVal useOptionalCoveragesNum As Boolean = False) As Boolean 'note: not currently using hasNum (haven't seen OptionalCoverageNum node in xml yet)
            'Public Shared Function IsQuickQuoteToDiamondObjectMatch_OptionalCoverage(ByVal qqOptionalCoverage As QuickQuoteOptionalCoverage, ByVal diaOptionalCoverage As Diamond.Common.Objects.Policy.OptionalCoverage) As Boolean
            Dim isMatch As Boolean = False

            If qqOptionalCoverage IsNot Nothing AndAlso diaOptionalCoverage IsNot Nothing Then
                If useOptionalCoveragesNum = True Then
                    If qqOptionalCoverage.HasValidOptionalCoveragesNum = True AndAlso IsValidDiamondNum(diaOptionalCoverage.OptionalCoveragesNum) = True AndAlso CInt(qqOptionalCoverage.OptionalCoveragesNum) = diaOptionalCoverage.OptionalCoveragesNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsQuickQuoteToDiamondObjectMatch_Coverage(qqOptionalCoverage.Coverage, diaOptionalCoverage.Coverage) = True Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_Acreage(ByVal qqAcreage As QuickQuoteAcreage, ByVal diaAcreage As Diamond.Common.Objects.Policy.Acreage, Optional ByVal useAcreageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqAcreage IsNot Nothing AndAlso diaAcreage IsNot Nothing Then
                If useAcreageNum = True Then
                    If qqAcreage.HasValidAcreageNum = True AndAlso IsValidDiamondNum(diaAcreage.AcreageNum) = True AndAlso CInt(qqAcreage.AcreageNum) = diaAcreage.AcreageNum.Id Then
                        isMatch = True
                    End If
                Else
                    If UCase(qqAcreage.Description) = UCase(diaAcreage.Description) Then 'just using this for now; may update to use County, LocationAcreageTypeId, Range, Section, StateId, TownshipCodeTypeId, and/or Twp
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_IncomeLoss(ByVal qqIncomeLoss As QuickQuoteIncomeLoss, ByVal diaIncomeLoss As Diamond.Common.Objects.Policy.IncomeLoss, Optional ByVal useLossOfIncomeNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqIncomeLoss IsNot Nothing AndAlso diaIncomeLoss IsNot Nothing Then
                If useLossOfIncomeNum = True Then
                    If qqIncomeLoss.HasValidLossOfIncomeNum = True AndAlso IsValidDiamondNum(diaIncomeLoss.LossOfIncomeNum) = True AndAlso CInt(qqIncomeLoss.LossOfIncomeNum) = diaIncomeLoss.LossOfIncomeNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsQuickQuoteToDiamondObjectMatch_Coverage(qqIncomeLoss.Coverage, diaIncomeLoss.Coverage) = True Then
                        '12/11/2015 note: this may not be the best way to reconcile since all IncomeLosses have the same coverageCodeId; may need to use Coverage.description
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 2/26/2015 for Farm
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ResidentName(ByVal qqResidentName As QuickQuoteResidentName, ByVal diaResidentName As Diamond.Common.Objects.Policy.ResidentName, Optional ByVal useResidentNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqResidentName IsNot Nothing AndAlso diaResidentName IsNot Nothing Then
                If useResidentNum = True Then
                    If qqResidentName.HasValidResidentNum = True AndAlso IsValidDiamondNum(diaResidentName.ResidentNum) = True AndAlso CInt(qqResidentName.ResidentNum) = diaResidentName.ResidentNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsQuickQuoteToDiamondObjectMatch_Name(qqResidentName.Name, diaResidentName.Name) = True Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 3/30/2015 for CRM
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ScheduledText(ByVal qqScheduledText As QuickQuoteScheduledText, ByVal diaScheduledText As Diamond.Common.Objects.Policy.ScheduledText, Optional ByVal useScheduledTextNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqScheduledText IsNot Nothing AndAlso diaScheduledText IsNot Nothing Then
                If useScheduledTextNum = True Then
                    If qqScheduledText.HasValidScheduledTextNum = True AndAlso IsValidDiamondNum(diaScheduledText.ScheduledTextNum) = True AndAlso CInt(qqScheduledText.ScheduledTextNum) = diaScheduledText.ScheduledTextNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsNumeric(qqScheduledText.UICoverageScheduledCoverageParentTypeId) Then 'using this for now, but could also use CoverageCodeId and/or Description
                        If CInt(qqScheduledText.UICoverageScheduledCoverageParentTypeId) = diaScheduledText.UICoverageScheduledCoverageParentTypeId Then
                            isMatch = True
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 6/24/2015 for Farm
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_OptionalCoverageE(ByVal qqOptionalCoverageE As QuickQuoteOptionalCoverageE, ByVal diaOptionalCoverageE As Diamond.Common.Objects.Policy.OptionalCoverageE, Optional ByVal useFarmBarnBuildingOptionalCoverageNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqOptionalCoverageE IsNot Nothing AndAlso diaOptionalCoverageE IsNot Nothing Then
                If useFarmBarnBuildingOptionalCoverageNum = True Then
                    If qqOptionalCoverageE.HasValidFarmBarnBuildingOptionalCoverageNum = True AndAlso IsValidDiamondNum(diaOptionalCoverageE.FarmBarnBuildingOptionalCoverageNum) = True AndAlso CInt(qqOptionalCoverageE.FarmBarnBuildingOptionalCoverageNum) = diaOptionalCoverageE.FarmBarnBuildingOptionalCoverageNum.Id Then
                        isMatch = True
                    End If
                Else
                    If IsQuickQuoteToDiamondObjectMatch_Coverage(qqOptionalCoverageE.Coverage, diaOptionalCoverageE.Coverage) = True Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function

        'added 5/23/2017
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_AdditionalInterestListLink(ByVal qqAdditionalInterestListLink As QuickQuoteAdditionalInterestListLink, ByVal diaAdditionalInterestListLink As Diamond.Common.Objects.Policy.PolicyLevelAdditionalInterestListLink, Optional ByVal useOrderNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqAdditionalInterestListLink IsNot Nothing AndAlso diaAdditionalInterestListLink IsNot Nothing Then
                If useOrderNum = True Then
                    'If qqAdditionalInterestListLink.HasValidOrderNum = True AndAlso IsValidDiamondNum(diaAdditionalInterestListLink.OrderNum) = True AndAlso CInt(qqAdditionalInterestListLink.OrderNum) = diaAdditionalInterestListLink.OrderNum.Id Then
                    'updated 7/24/2019 w/ 534; OrderNum prop no longer available, so we'll use this PolicyLevelAdditionalInterestListNum
                    If qqAdditionalInterestListLink.HasValidOrderNum = True AndAlso IsValidDiamondNum(diaAdditionalInterestListLink.PolicyLevelAdditionalInterestListNum) = True AndAlso CInt(qqAdditionalInterestListLink.OrderNum) = diaAdditionalInterestListLink.PolicyLevelAdditionalInterestListNum.Id Then
                        isMatch = True
                    End If
                Else
                    Dim qqHelper As New QuickQuoteHelperClass
                    If qqHelper.IntegerForString(qqAdditionalInterestListLink.AdditionalInterestListId) = diaAdditionalInterestListLink.AdditionalInterestListId Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        'added 9/22/2017
        Public Shared Function IsQuickQuoteToDiamondObjectMatch_ExperienceModification(ByVal qqExpMod As QuickQuoteExperienceModification, ByVal diaExpMod As Diamond.Common.Objects.Policy.ExperienceModification, Optional ByVal useExperienceModificationNum As Boolean = False) As Boolean
            Dim isMatch As Boolean = False

            If qqExpMod IsNot Nothing AndAlso diaExpMod IsNot Nothing Then
                If useExperienceModificationNum = True Then
                    If qqExpMod.HasValidExperienceModificationNum = True AndAlso IsValidDiamondNum(diaExpMod.ExperienceModificationNum) = True AndAlso CInt(qqExpMod.ExperienceModificationNum) = diaExpMod.ExperienceModificationNum.Id Then
                        isMatch = True
                    End If
                Else
                    If UCase(qqExpMod.RiskIdentifier) = UCase(diaExpMod.RiskIdentifier) Then 'just using this for now; may update to use Date or something
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function

        'added 9/26/2017
        Public Shared Function HasQuickQuoteToDiamondObjectChange_ExperienceModification(ByVal qqExpMod As QuickQuoteExperienceModification, ByVal diaExpMod As Diamond.Common.Objects.Policy.ExperienceModification, Optional ByVal checkDetailStatusCode As Boolean = False) As Boolean
            Dim hasChange As Boolean = False

            If qqExpMod IsNot Nothing AndAlso diaExpMod IsNot Nothing Then
                If QuickQuoteHelperClass.isTextMatch(qqExpMod.BureauTypeId, diaExpMod.BureauTypeId.ToString, matchType:=QuickQuoteHelperClass.TextMatchType.IntegerOrText_IgnoreCasing) = False OrElse (checkDetailStatusCode = True AndAlso QuickQuoteHelperClass.isTextMatch(qqExpMod.DetailStatusCode, diaExpMod.DetailStatusCode.ToString, matchType:=QuickQuoteHelperClass.TextMatchType.IntegerOrText_IgnoreCasing) = False) OrElse QuickQuoteHelperClass.isTextMatch(qqExpMod.ExperienceRatingPeriodStatusTypeId, diaExpMod.ExperienceRatingPeriodStatusTypeId.ToString, matchType:=QuickQuoteHelperClass.TextMatchType.IntegerOrText_IgnoreCasing) = False OrElse QuickQuoteHelperClass.isTextMatch(qqExpMod.Factor, diaExpMod.Factor, matchType:=QuickQuoteHelperClass.TextMatchType.DecimalOrText_IgnoreCasing) = False OrElse QuickQuoteHelperClass.isTextMatch(qqExpMod.ModificationProductionDate, If(diaExpMod.ModificationProductionDate <> Nothing, diaExpMod.ModificationProductionDate.ToString, ""), matchType:=QuickQuoteHelperClass.TextMatchType.DateOrText_IgnoreCasing) = False OrElse QuickQuoteHelperClass.isTextMatch(qqExpMod.RatingEffectiveDate, If(diaExpMod.RatingEffectiveDate <> Nothing, diaExpMod.RatingEffectiveDate.ToString, ""), matchType:=QuickQuoteHelperClass.TextMatchType.DateOrText_IgnoreCasing) = False OrElse QuickQuoteHelperClass.isTextMatch(qqExpMod.RiskIdentifier, diaExpMod.RiskIdentifier, matchType:=QuickQuoteHelperClass.TextMatchType.TextOnly_IgnoreCasing) = False Then
                    hasChange = True
                End If
            ElseIf qqExpMod IsNot Nothing Then
                hasChange = True
            ElseIf diaExpMod IsNot Nothing Then
                hasChange = True
            Else
                'both nothing; same
            End If

            Return hasChange
        End Function

        'added 10/30/2014 (moved here from QuickQuoteXml)
        'this will be called for policy level operators; only used when writing xml (for comparative rater)
        Public Sub SetPolicyLevelAssignmentNumForOperators(ByRef qqOperators As List(Of QuickQuoteOperator))
            If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                Dim oCounter As Integer = 0
                For Each o As QuickQuoteOperator In qqOperators
                    oCounter += 1
                    o.PolicyLevelAssignmentNum = oCounter
                Next
            End If
        End Sub
        Public Function OperatorIdValueForNum(ByVal diaOperators As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Operator), ByVal num As Integer, Optional ByVal polNum As String = "", Optional ByVal policyId As String = "", Optional ByVal policyImageNum As String = "", Optional ByVal validateNum As Boolean = True) As Diamond.Common.Objects.IdValue 'updated 10/31/2014 for polNum optional param; updated 12/4/2014 for validateNum optional param
            Dim numIdValue As Diamond.Common.Objects.IdValue = Nothing

            If num > 0 Then
                If diaOperators IsNot Nothing AndAlso diaOperators.Count > 0 Then
                    Dim activeDriverNum As Integer = 0
                    Dim invalidDiamondNumCount As Integer = 0 'added 10/31/2014
                    For Each dOpp As Diamond.Common.Objects.Policy.Operator In diaOperators
                        If dOpp.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                            activeDriverNum += 1
                            Dim isValidNum As Boolean = True 'added 10/31/2014
                            If IsValidDiamondNum(dOpp.OperatorNum) = False Then 'added 10/31/2014
                                isValidNum = False
                                invalidDiamondNumCount += 1
                            End If
                            If activeDriverNum = num Then
                                numIdValue = dOpp.OperatorNum
                                If validateNum = True AndAlso isValidNum = False Then 'added 10/31/2014 for testing to see if Diamond will let us set the num to what it should get created as; updated 12/4/2014 for validateNum optional param
                                    Dim maxOperatorNum As Integer = MaxOperatorNumForPolicy(polNum, policyId, policyImageNum)
                                    If maxOperatorNum >= 0 Then '-1 is returned for empty string or error; 11/17/2014 update: now just returning -1 for error... so it will work for new policies... since they'll have zeros for policyId and policyImageNum
                                        Dim newNum As Integer = maxOperatorNum + invalidDiamondNumCount
                                        numIdValue = New Diamond.Common.Objects.IdValue(newNum)
                                    End If
                                End If
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return numIdValue
        End Function
        Public Function DiamondOperatorForNum(ByVal diaOperators As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Operator), ByVal num As Integer) As Diamond.Common.Objects.Policy.Operator
            Dim diaO As Diamond.Common.Objects.Policy.Operator = Nothing

            If num > 0 Then
                If diaOperators IsNot Nothing AndAlso diaOperators.Count > 0 Then
                    Dim activeDriverNum As Integer = 0
                    For Each dOpp As Diamond.Common.Objects.Policy.Operator In diaOperators
                        If dOpp.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                            activeDriverNum += 1
                            If activeDriverNum = num Then
                                diaO = dOpp
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return diaO
        End Function
        'added 10/31/2014
        Public Function MaxOperatorNumForPolicy(ByVal policyId As Integer, ByVal policyImageNum As Integer) As Integer
            'Dim maxNum As Integer = -1
            Dim maxNum As Integer = 0 'updated 11/17/2014 so it will work for new policies... since they'll have zeros for policyId and policyImageNum

            If policyId > 0 AndAlso policyImageNum > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sso.queryOrStoredProc = "select max(O.operator_num) as maxOperatorNum from Operator as O with (nolock) where O.policy_id = " & policyId & " and O.policyimage_num = " & policyImageNum
                    Dim dr As SqlClient.SqlDataReader = sso.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        If dr.Item("maxOperatorNum").ToString <> "" AndAlso IsNumeric(dr.Item("maxOperatorNum").ToString) = True Then 'added 11/20/2014 to handle for NULL; could also update query to use COALESCE(max(O.operator_num), 0)
                            maxNum = CInt(dr.Item("maxOperatorNum").ToString) '11/20/2014 - updated from just dr.Item("maxOperatorNum")
                        Else
                            maxNum = 0 'must be NULL
                        End If
                    ElseIf sso.hasError = True Then
                        maxNum = -1
                    Else
                        maxNum = 0
                    End If
                End Using
            End If

            Return maxNum
        End Function
        Public Function MaxOperatorNumForPolicy(ByVal polNum As String) As Integer
            Dim policyId As String = ""
            Dim policyImageNum As String = ""
            SetPolicyIdAndImageNumberForPolicyNumber(polNum, policyId, policyImageNum)
            Return MaxOperatorNumForPolicy(IntegerForString(policyId), IntegerForString(policyImageNum))
        End Function
        Private Function MaxOperatorNumForPolicy(ByVal polNum As String, ByVal policyId As String, ByVal policyImageNum As String) As Integer
            If IsValidQuickQuoteIdOrNum(policyId) = True AndAlso IsValidQuickQuoteIdOrNum(policyImageNum) = True Then
                'okay to use these
            Else
                SetPolicyIdAndImageNumberForPolicyNumber(polNum, policyId, policyImageNum)
            End If
            Return MaxOperatorNumForPolicy(IntegerForString(policyId), IntegerForString(policyImageNum))
        End Function
        Public Function HasOperatorForPolicyLevelAssignment(ByVal qqOperators As List(Of QuickQuoteOperator)) As Boolean
            Dim hasO As Boolean = False

            If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                For Each o As QuickQuoteOperator In qqOperators
                    If o.IsForPolicyLevelAssignment = True Then
                        hasO = True
                        Exit For
                    End If
                Next
            End If

            Return hasO
        End Function
        'added 3/26/2014... Bob originally added to QuickQuoteXML and implemented in constructor, but that didn't work w/ the way we declare it as New at the top of the code-behind page (attempting to use things that aren't available at that point in the page life cycle)
        Public Shared Sub CheckDiamondServicesToken()
            If Diamond.Web.BaseControls.SignedOnUserID > 0 Then '3/25/2014 note: this bombs out when QuickQuoteXML is instantiated at top of code-behind page (like we normally do)... must try to access session or something that's not available at that point in the page life cycle
                'okay
                'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                '8/13/2014 - updated to ELSE since it only needs to check for the test keys if it can't find the prod ones
            Else
                Dim loginName As String = ""
                Dim loginPassword As String = ""
                'If System.Web.HttpContext.Current?.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUsername").ToString <> "" Then
                '    loginName = System.Web.HttpContext.Current?.Session("DiamondUsername").ToString
                'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                '    loginName = ConfigurationManager.AppSettings("QuickQuoteTestUsername").ToString
                'End If
                'If System.Web.HttpContext.Current?.Session("DiamondPassword") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondPassword").ToString <> "" Then
                '    loginPassword = System.Web.HttpContext.Current?.Session("DiamondPassword").ToString
                'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                '    loginPassword = ConfigurationManager.AppSettings("QuickQuoteTestPassword").ToString
                'End If
                'updated 8/13/2014 to use new shared functions
                loginName = DiamondUsername()
                loginPassword = DiamondPassword()
                If loginName <> "" AndAlso loginPassword <> "" Then
                    SetDiamondServicesToken(loginName, loginPassword)
                End If
            End If
        End Sub
        Public Shared ReadOnly Property DiamondSecurityToken As Diamond.Common.Services.DiamondSecurityToken
            Get
                Return IFM.DiamondServices.Services.Common.Token
            End Get
        End Property
        Public Shared Sub SetDiamondServicesToken(UserName As String, Password As String)
            IFM.DiamondServices.Services.Common.SetDiamondToken(
                IFM.DiamondServices.Services.Login.GetDiamTokenForUsernamePassword(UserName, Password))
        End Sub
        'added 4/7/2014
        Public Shared Sub SetWorkflowQueueIdForAgencyCode(ByVal agencyCode As String, ByRef workflowQueueId As String)
            If agencyCode <> "" Then
                'Try
                '    Dim WfqReq As New Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.Request
                '    Dim WfqResp As New Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.Response
                '    With WfqReq
                '        With .RequestData
                '            .AgencyCode = agencyCode
                '            '.WorkflowQueueType is required
                '            '.WorkflowQueueType = Diamond.Common.Enums.Workflow.WorkflowQueueType.ComparativeRating 'this is what would have been used w/ the comparative rater service
                '            '.WorkflowQueueType = Diamond.Common.Enums.Workflow.WorkflowQueueType.General
                '            '.WorkflowQueueType = Diamond.Common.Enums.Workflow.WorkflowQueueType.Help
                '        End With
                '    End With
                '    Using WfqProxy As New Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy
                '        WfqResp = WfqProxy.GetAgencyWorkflowInfoByCode(WfqReq)
                '    End Using
                '    If WfqResp IsNot Nothing AndAlso WfqResp.ResponseData IsNot Nothing AndAlso WfqResp.ResponseData.WorkflowQueueId <> Nothing Then
                '        workflowQueueId = WfqResp.ResponseData.WorkflowQueueId.ToString
                '    End If
                'Catch ex As Exception
                '    'without .WorkflowQueueType: There was an error while trying to serialize parameter http://tempuri.org/:RequestData. The InnerException message was 'Enum value '0' is invalid for type 'Diamond.Common.Enums.Workflow.WorkflowQueueType' and cannot be serialized. Ensure that the necessary enum values are present and are marked with EnumMemberAttribute attribute if the type has DataContractAttribute attribute.
                'End Try
                'may not be needed w/ Diamond services... maybe just comparative rater service
                'Dim wfqId As Integer = IFM.DiamondServices.Services.AgencyAdministration.GetAgencyWorkflowInfoByCode(agencyCode, Diamond.Common.Enums.Workflow.WorkflowQueueType.General) 'could also be Finalize
                Dim wfqId As Integer = IFM.DiamondServices.Services.AgencyAdministration.GetAgencyWorkflowInfoByCode(agencyCode) 'also optional param for workFlowQueueType As DCE.Workflow.WorkflowQueueType... defaults to General
                '4/28/2014 note for integer... 0 equates to Nothing
                If wfqId <> Nothing Then 'makes it ignore 0... not sure that we want that but should be okay since that will be the default value anyway
                    workflowQueueId = wfqId
                End If
            End If
        End Sub
        'added 4/21/2014
        'Public Shared Function IsValidDiamondNum(ByVal diaNum As Diamond.Common.Objects.IdValue) As Boolean
        'updated 2/5/2015 w/ optional param to consider 0 valid
        Public Shared Function IsValidDiamondNum(ByVal diaNum As Diamond.Common.Objects.IdValue, Optional ByVal zeroIsOkay As Boolean = False) As Boolean
            'If diaNum IsNot Nothing AndAlso diaNum.Id <> Nothing AndAlso diaNum.Id > 0 Then
            'updated 4/28/2014 for integer... 0 equates to Nothing
            'If diaNum IsNot Nothing AndAlso diaNum.Id > 0 Then
            'updated 2/5/2015 for optional param
            If diaNum IsNot Nothing AndAlso (diaNum.Id > 0 OrElse (zeroIsOkay = True AndAlso diaNum.Id = 0)) Then
                Return True
            Else
                Return False
            End If
        End Function
        'added 4/23/2014
        Public Shared Function IsDiamondDetailStatusCodeDeleted(ByVal diaDetailStatusCode As String) As Boolean
            Dim isDeleted As Boolean = False

            If diaDetailStatusCode <> "" AndAlso IsNumeric(diaDetailStatusCode) = True Then
                isDeleted = IsDiamondDetailStatusCodeDeleted(CInt(diaDetailStatusCode))
            End If

            Return isDeleted
        End Function
        Public Shared Function IsDiamondDetailStatusCodeDeleted(ByVal diaDetailStatusCode As Integer) As Boolean
            Dim isDeleted As Boolean = False

            If diaDetailStatusCode <> Nothing AndAlso diaDetailStatusCode = Diamond.Common.Enums.StatusCode.Deleted Then '2
                isDeleted = True
            End If

            Return isDeleted
        End Function
        'added 4/25/2014
        Public Sub CopyQuickQuoteName(ByVal fromName As QuickQuoteName, ByRef toName As QuickQuoteName, Optional ByVal toNameAddressSourceId As String = "")
            If fromName IsNot Nothing Then
                toName = CloneObject(fromName)
                If toNameAddressSourceId <> "" AndAlso IsNumeric(toNameAddressSourceId) = True Then
                    toName.NameAddressSourceId = toNameAddressSourceId
                End If
            Else
                'maybe wipe out toName if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuoteAddress(ByVal fromAddress As QuickQuoteAddress, ByRef toAddress As QuickQuoteAddress)
            If fromAddress IsNot Nothing Then
                toAddress = CloneObject(fromAddress)
            Else
                'maybe wipe out toAddress if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuoteEmails(ByVal fromEmails As List(Of QuickQuoteEmail), ByRef toEmails As List(Of QuickQuoteEmail))
            If fromEmails IsNot Nothing AndAlso fromEmails.Count > 0 Then
                toEmails = CloneObject(fromEmails)
            Else
                'maybe wipe out toEmails if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePhones(ByVal fromPhones As List(Of QuickQuotePhone), ByRef toPhones As List(Of QuickQuotePhone))
            If fromPhones IsNot Nothing AndAlso fromPhones.Count > 0 Then
                toPhones = CloneObject(fromPhones)
            Else
                'maybe wipe out toPhones if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuoteClientNameAddressEmailsAndPhonesToPolicyholder1(ByVal fromClient As QuickQuoteClient, ByRef toPolicyholder1 As QuickQuotePolicyholder)
            If fromClient IsNot Nothing Then
                If toPolicyholder1 Is Nothing Then
                    toPolicyholder1 = New QuickQuotePolicyholder
                    toPolicyholder1.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 1") '3
                End If
                CopyQuickQuoteName(fromClient.Name, toPolicyholder1.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 1")) 'currently nameAddressSourceId 3
                CopyQuickQuoteAddress(fromClient.Address, toPolicyholder1.Address)
                CopyQuickQuoteEmails(fromClient.Emails, toPolicyholder1.Emails)
                CopyQuickQuotePhones(fromClient.Phones, toPolicyholder1.Phones)
                'PrimaryEmail and PrimaryPhone properties will recalculate whenever Get occurs
            Else
                'maybe wipe out toPolicyholder1 if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToClient(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toClient As QuickQuoteClient, Optional ByVal resetClientInfoIfNecessary As Boolean = False, Optional ByVal maintainClientId As Boolean = True, Optional ByVal maintainClientName2 As Boolean = True) '12/24/2014 - added optional params to reset if necessary and also maintain clientId and clientName2
            If fromPolicyholder1 IsNot Nothing Then
                If toClient Is Nothing Then
                    toClient = New QuickQuoteClient
                    toClient.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 1") '1
                    'added 12/24/2014 for consistency since it's set whenever the QuickQuoteObject is instantiated
                    toClient.Name2.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 2") '2
                End If
                CopyQuickQuoteName(fromPolicyholder1.Name, toClient.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 1")) 'currently nameAddressSourceId 1
                CopyQuickQuoteAddress(fromPolicyholder1.Address, toClient.Address)
                CopyQuickQuoteEmails(fromPolicyholder1.Emails, toClient.Emails)
                CopyQuickQuotePhones(fromPolicyholder1.Phones, toClient.Phones)
                'PrimaryEmail and PrimaryPhone properties will recalculate whenever Get occurs
            Else
                'maybe wipe out toClient if there's something there
                'updated 12/24/2014 to use new optional param
                If resetClientInfoIfNecessary = True Then
                    If toClient IsNot Nothing Then
                        'could dispose but will just reset for consistency since it's automatically instantiated
                        Dim holdClientId As String = toClient.ClientId
                        Dim holdName2 As QuickQuoteName = Nothing
                        If maintainClientName2 = True AndAlso toClient.Name2 IsNot Nothing Then
                            holdName2 = CloneObject(toClient.Name2)
                        End If
                        toClient = New QuickQuoteClient
                        toClient.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 1") '1
                        toClient.Name2.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 2") '2
                        If maintainClientId = True Then
                            If holdClientId <> "" AndAlso IsNumeric(holdClientId) = True Then
                                toClient.ClientId = holdClientId
                            End If
                        End If
                        If maintainClientName2 = True Then
                            If holdName2 IsNot Nothing Then
                                toClient.Name2 = holdName2
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        'added 7/15/2014 for HOM
        Public Sub CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(ByVal fromPolicyholder As QuickQuotePolicyholder, ByRef toApplicant As QuickQuoteApplicant, Optional ByVal toRelationshipTypeId As String = "")
            If fromPolicyholder IsNot Nothing Then
                If toApplicant Is Nothing Then
                    toApplicant = New QuickQuoteApplicant
                    toApplicant.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Applicant") '28
                End If
                CopyQuickQuoteName(fromPolicyholder.Name, toApplicant.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Applicant")) 'currently nameAddressSourceId 28
                CopyQuickQuoteAddress(fromPolicyholder.Address, toApplicant.Address)
                CopyQuickQuoteEmails(fromPolicyholder.Emails, toApplicant.Emails)
                CopyQuickQuotePhones(fromPolicyholder.Phones, toApplicant.Phones)
                If toRelationshipTypeId <> "" AndAlso IsNumeric(toRelationshipTypeId) = True Then
                    toApplicant.RelationshipTypeId = toRelationshipTypeId
                End If
            Else
                'maybe wipe out toApplicant if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToApplicant(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toApplicant As QuickQuoteApplicant)
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(fromPolicyholder1, toApplicant, "8") 'Policyholder
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(fromPolicyholder1, toApplicant, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policyholder")) '8
            'updated 7/30/2014 to use the correct className and propertyName for static data lookup
            CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(fromPolicyholder1, toApplicant, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteApplicant, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, "Policyholder")) '8
        End Sub
        Public Sub CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToApplicant(ByVal fromPolicyholder2 As QuickQuotePolicyholder, ByRef toApplicant As QuickQuoteApplicant)
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(fromPolicyholder2, toApplicant, "5") 'Policyholder #2
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(fromPolicyholder2, toApplicant, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policyholder #2")) '5
            'updated 7/30/2014 to use the correct className and propertyName for static data lookup
            CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToApplicant(fromPolicyholder2, toApplicant, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteApplicant, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, "Policyholder #2")) '5
        End Sub
        'added 7/15/2014 for PPA... in case they're needed (not currently being used)
        Public Sub CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(ByVal fromPolicyholder As QuickQuotePolicyholder, ByRef toDriver As QuickQuoteDriver, Optional ByVal toRelationshipTypeId As String = "")
            If fromPolicyholder IsNot Nothing Then
                If toDriver Is Nothing Then
                    toDriver = New QuickQuoteDriver
                    toDriver.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Driver") '6
                End If
                CopyQuickQuoteName(fromPolicyholder.Name, toDriver.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Driver")) 'currently nameAddressSourceId 6
                CopyQuickQuoteAddress(fromPolicyholder.Address, toDriver.Address)
                CopyQuickQuoteEmails(fromPolicyholder.Emails, toDriver.Emails)
                CopyQuickQuotePhones(fromPolicyholder.Phones, toDriver.Phones)
                If toRelationshipTypeId <> "" AndAlso IsNumeric(toRelationshipTypeId) = True Then
                    toDriver.RelationshipTypeId = toRelationshipTypeId
                End If
            Else
                'maybe wipe out toDriver if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToDriver(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toDriver As QuickQuoteDriver)
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(fromPolicyholder1, toDriver, "8") 'Policyholder
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(fromPolicyholder1, toDriver, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policyholder")) '8
            'updated 7/30/2014 to use the correct className and propertyName for static data lookup
            CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(fromPolicyholder1, toDriver, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteDriver, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, "Policyholder")) '8
        End Sub
        Public Sub CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToDriver(ByVal fromPolicyholder2 As QuickQuotePolicyholder, ByRef toDriver As QuickQuoteDriver)
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(fromPolicyholder2, toDriver, "5") 'Policyholder #2
            'CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(fromPolicyholder2, toDriver, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policyholder #2")) '5
            'updated 7/30/2014 to use the correct className and propertyName for static data lookup
            CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToDriver(fromPolicyholder2, toDriver, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteDriver, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, "Policyholder #2")) '5
        End Sub
        Public Sub CopyQuickQuoteClientName2ToPolicyholder2(ByVal fromClientForName2 As QuickQuoteClient, ByRef toPolicyholder2 As QuickQuotePolicyholder)
            If fromClientForName2 IsNot Nothing Then
                If toPolicyholder2 Is Nothing Then
                    toPolicyholder2 = New QuickQuotePolicyholder
                    toPolicyholder2.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 2") '4
                End If
                CopyQuickQuoteName(fromClientForName2.Name2, toPolicyholder2.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 2")) 'currently nameAddressSourceId 4
            Else
                'maybe wipe out toPolicyholder2 or just toPolicyholder2.Name if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder2NameToClientName2(ByVal fromPolicyholder2 As QuickQuotePolicyholder, ByRef toClientForName2 As QuickQuoteClient, Optional ByVal resetClientName2IfNecessary As Boolean = False) '12/24/2014 - added optional param to reset if necessary
            If fromPolicyholder2 IsNot Nothing Then
                If toClientForName2 Is Nothing Then
                    toClientForName2 = New QuickQuoteClient
                    toClientForName2.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 1") '1
                    toClientForName2.Name2.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 2") '2
                End If
                CopyQuickQuoteName(fromPolicyholder2.Name, toClientForName2.Name2, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 2")) 'currently nameAddressSourceId 2
            Else
                'maybe wipe out toClientForName2.Name2 if there's something there
                'updated 12/24/2014 to use new optional param
                If resetClientName2IfNecessary = True Then
                    If toClientForName2 IsNot Nothing AndAlso toClientForName2.Name2 IsNot Nothing Then
                        'could dispose but will just reset for consistency since it's automatically instantiated
                        toClientForName2.Name2 = New QuickQuoteName
                        toClientForName2.Name2.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 2") '2
                    End If
                End If
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder1AddressToPolicyholder2(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toPolicyholder2 As QuickQuotePolicyholder)
            If fromPolicyholder1 IsNot Nothing Then
                If toPolicyholder2 Is Nothing Then
                    toPolicyholder2 = New QuickQuotePolicyholder
                    toPolicyholder2.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 2") '4
                End If
                CopyQuickQuoteAddress(fromPolicyholder1.Address, toPolicyholder2.Address)
            Else
                'maybe wipe out toPolicyholder2 or just toPolicyholder2.Address if there's something there
            End If
        End Sub
        'added 5/21/2014; removed 6/20/2014... replaced by new methods that just copy Name and Address
        'Public Sub CopyQuickQuoteClientNameAddressEmailsAndPhonesToBillingAddressee(ByVal fromClient As QuickQuoteClient, ByRef toBillingAddressee As QuickQuoteBillingAddressee)
        '    If fromClient IsNot Nothing Then
        '        If toBillingAddressee Is Nothing Then
        '            toBillingAddressee = New QuickQuoteBillingAddressee
        '            toBillingAddressee.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee") '5
        '        End If
        '        CopyQuickQuoteName(fromClient.Name, toBillingAddressee.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee")) 'currently nameAddressSourceId 5
        '        CopyQuickQuoteAddress(fromClient.Address, toBillingAddressee.Address)
        '        CopyQuickQuoteEmails(fromClient.Emails, toBillingAddressee.Emails)
        '        CopyQuickQuotePhones(fromClient.Phones, toBillingAddressee.Phones)
        '    Else
        '        'maybe wipe out toBillingAddressee if there's something there
        '    End If
        'End Sub
        'Public Sub CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToBillingAddressee(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toBillingAddressee As QuickQuoteBillingAddressee)
        '    If fromPolicyholder1 IsNot Nothing Then
        '        If toBillingAddressee Is Nothing Then
        '            toBillingAddressee = New QuickQuoteBillingAddressee
        '            toBillingAddressee.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee") '5
        '        End If
        '        CopyQuickQuoteName(fromPolicyholder1.Name, toBillingAddressee.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee")) 'currently nameAddressSourceId 5
        '        CopyQuickQuoteAddress(fromPolicyholder1.Address, toBillingAddressee.Address)
        '        CopyQuickQuoteEmails(fromPolicyholder1.Emails, toBillingAddressee.Emails)
        '        CopyQuickQuotePhones(fromPolicyholder1.Phones, toBillingAddressee.Phones)
        '    Else
        '        'maybe wipe out toBillingAddressee if there's something there
        '    End If
        'End Sub
        'added 6/20/2014 since Diamond doesn't use emails or phones for BillingAddressee
        Public Sub CopyQuickQuoteClientNameAndAddressToBillingAddressee(ByVal fromClient As QuickQuoteClient, ByRef toBillingAddressee As QuickQuoteBillingAddressee)
            CopyQuickQuoteClientNameAndAddressToBillingAddressee(fromClient, toBillingAddressee, Nothing)
        End Sub

        Public Sub CopyQuickQuoteClientNameAndAddressToBillingAddressee(ByVal fromClient As QuickQuoteClient, ByRef toBillingAddressee As QuickQuoteBillingAddressee, qqObj As QuickQuoteObject)
            If fromClient IsNot Nothing Then
                If toBillingAddressee Is Nothing Then
                    toBillingAddressee = New QuickQuoteBillingAddressee
                    toBillingAddressee.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee") '5
                End If
                CopyQuickQuoteName(fromClient.Name, toBillingAddressee.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee")) 'currently nameAddressSourceId 5
                CopyQuickQuoteAddress(fromClient.Address, toBillingAddressee.Address)
                If qqObj Is Nothing Then
                    qqObj = toBillingAddressee.GetTopLevelParentQuoteObject()
                    If qqObj Is Nothing Then
                        qqObj = fromClient.GetTopLevelParentQuoteObject()
                    End If
                End If
                If qqObj IsNot Nothing AndAlso qqObj.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote Then
                    toBillingAddressee.Address.IsChanged = True
                End If
            Else
                'maybe wipe out toBillingAddressee if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toBillingAddressee As QuickQuoteBillingAddressee)
            CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(fromPolicyholder1, toBillingAddressee, Nothing)
        End Sub

        Public Sub CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toBillingAddressee As QuickQuoteBillingAddressee, qqObj As QuickQuoteObject)
            If fromPolicyholder1 IsNot Nothing Then
                If toBillingAddressee Is Nothing Then
                    toBillingAddressee = New QuickQuoteBillingAddressee
                    toBillingAddressee.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee") '5
                End If
                CopyQuickQuoteName(fromPolicyholder1.Name, toBillingAddressee.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Billing Addressee")) 'currently nameAddressSourceId 5
                CopyQuickQuoteAddress(fromPolicyholder1.Address, toBillingAddressee.Address)
                If qqObj Is Nothing Then
                    qqObj = toBillingAddressee.GetTopLevelParentQuoteObject()
                    If qqObj Is Nothing Then
                        qqObj = fromPolicyholder1.GetTopLevelParentQuoteObject()
                    End If
                End If
                If qqObj IsNot Nothing AndAlso qqObj.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote Then
                    toBillingAddressee.Address.IsChanged = True
                End If
            Else
                'maybe wipe out toBillingAddressee if there's something there
            End If
        End Sub

        'added 10/29/2014 for HOM and RvWatercraft
        Public Sub CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToOperator(ByVal fromPolicyholder As QuickQuotePolicyholder, ByRef toOperator As QuickQuoteOperator, Optional ByVal toRelationshipTypeId As String = "")
            If fromPolicyholder IsNot Nothing Then
                If toOperator Is Nothing Then
                    toOperator = New QuickQuoteOperator
                    toOperator.Name.NameAddressSourceId = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Operator") '60
                End If
                CopyQuickQuoteName(fromPolicyholder.Name, toOperator.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Operator")) 'currently nameAddressSourceId 60
                CopyQuickQuoteAddress(fromPolicyholder.Address, toOperator.Address)
                CopyQuickQuoteEmails(fromPolicyholder.Emails, toOperator.Emails)
                CopyQuickQuotePhones(fromPolicyholder.Phones, toOperator.Phones)
                If toRelationshipTypeId <> "" AndAlso IsNumeric(toRelationshipTypeId) = True Then
                    toOperator.RelationshipTypeId = toRelationshipTypeId
                End If
            Else
                'maybe wipe out toOperator if there's something there
            End If
        End Sub
        Public Sub CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToOperator(ByVal fromPolicyholder1 As QuickQuotePolicyholder, ByRef toOperator As QuickQuoteOperator)
            CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToOperator(fromPolicyholder1, toOperator, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteOperator, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, "Policyholder")) '8
        End Sub
        Public Sub CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToOperator(ByVal fromPolicyholder2 As QuickQuotePolicyholder, ByRef toOperator As QuickQuoteOperator)
            CopyQuickQuotePolicyholderNameAddressEmailsAndPhonesToOperator(fromPolicyholder2, toOperator, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteOperator, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, "Policyholder #2")) '5
        End Sub
        'added 6/5/2017
        Public Sub CopyQuickQuoteAdditionalInterestNameAddressEmailsAndPhones(ByVal fromAI As QuickQuoteAdditionalInterest, ByRef toAI As QuickQuoteAdditionalInterest)
            If fromAI IsNot Nothing Then
                Dim aiNameAddSrcId As String = GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Additional Interest") '12
                If toAI Is Nothing Then
                    toAI = New QuickQuoteAdditionalInterest
                    If toAI.Name IsNot Nothing AndAlso IsPositiveIntegerString(toAI.Name.NameAddressSourceId) = False AndAlso IsPositiveIntegerString(aiNameAddSrcId) = True Then
                        toAI.Name.NameAddressSourceId = aiNameAddSrcId
                    End If
                End If
                CopyQuickQuoteName(fromAI.Name, toAI.Name, GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Additional Interest")) 'currently nameAddressSourceId 12
                CopyQuickQuoteAddress(fromAI.Address, toAI.Address)
                CopyQuickQuoteEmails(fromAI.Emails, toAI.Emails)
                CopyQuickQuotePhones(fromAI.Phones, toAI.Phones)
            Else
                'maybe wipe out toAI if there's something there
            End If
        End Sub
        'added 4/27/2014
        Public Function IsValidQuickQuoteIdOrNum(ByVal qqIdOrNum As String) As Boolean
            'If qqIdOrNum <> "" AndAlso IsNumeric(qqIdOrNum) = True AndAlso CInt(qqIdOrNum) > 0 Then
            '    Return True
            'Else
            '    Return False
            'End If
            'updated 5/1/2019
            Return IsPositiveIntegerString(qqIdOrNum)
        End Function
        'added 6/3/2014 because of 'binary data would be truncated database error'; char(10)
        Public Function ValidatedZipCode(strZip As String) As String
            Dim newZip As String = ""

            If strZip IsNot Nothing AndAlso strZip <> "" Then
                newZip = strZip

                Dim isOkay As Boolean = False
                Dim loopCounter As Integer = 0
                Do Until isOkay = True
                    loopCounter += 1
                    If Len(newZip) > 10 Then
                        If newZip.Contains("--") = True Then
                            newZip = newZip.Replace("--", "-")
                        Else
                            'will remove invalid chars in this case only; could use this initially if needed
                            Dim doneCheckingChars As Boolean = False
                            Do Until doneCheckingChars = True
                                If Len(newZip) > 0 Then
                                    Dim hasBadChar As Boolean = False
                                    Dim charPosition As Integer = 0
                                    For Each c As Char In newZip
                                        charPosition += 1
                                        If IsNumeric(c) = False AndAlso c <> "-" Then
                                            hasBadChar = True
                                            Dim zipLeft As String = ""
                                            Dim zipRight As String = ""
                                            If charPosition > 1 Then
                                                zipLeft = Left(newZip, charPosition - 1)
                                            End If
                                            If charPosition < Len(newZip) Then
                                                zipRight = Right(newZip, Len(newZip) - charPosition)
                                            End If
                                            Dim fullZip As String = zipLeft & zipRight
                                            If fullZip <> "" AndAlso Len(fullZip) = Len(newZip) - 1 Then
                                                newZip = fullZip
                                            End If
                                            Exit For 'so it will loop back thru w/ updated newZip
                                        End If
                                    Next
                                    If hasBadChar = False Then
                                        doneCheckingChars = True
                                        Exit Do
                                    End If
                                Else
                                    doneCheckingChars = True
                                    Exit Do
                                End If
                            Loop
                        End If
                    Else
                        isOkay = True
                        Exit Do
                    End If
                    If loopCounter > 10 AndAlso Len(newZip) > 10 Then 'just in case
                        newZip = Left(newZip, 10)
                        isOkay = True
                        Exit Do
                    End If
                Loop
            End If

            Return newZip
        End Function
        'added 8/6/2014... specific to e2Value at the time
        Public Shared Function UrlEncodedValue(ByVal originalValue As String) As String
            Dim newValue As String = ""

            If originalValue <> "" Then
                newValue = HttpUtility.UrlEncode(originalValue)
            End If

            Return newValue
        End Function
        Public Shared Function UrlDecodedValue(ByVal originalValue As String) As String
            Dim newValue As String = ""

            If originalValue <> "" Then
                newValue = HttpUtility.UrlDecode(originalValue)
            End If

            Return newValue
        End Function
        'added 8/13/2014... for use w/ e2Value
        Public Shared Function Environment() As String
            Dim env As String = ""

            If IsTestEnvironment() = True Then
                'updated 8/26/2014 to check config key; previous logic in in ELSE... always setting to Test
                Dim envFromConfig As String = configAppSettingValueAsString("EnvironmentName")
                If envFromConfig <> "" Then
                    env = envFromConfig
                Else
                    env = "Test"
                End If
            Else
                env = "Prod"
            End If

            Return env
        End Function
        Public Shared Function IsTestEnvironment() As Boolean
            Dim isTest As Boolean = False

            If ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" Then
                isTest = True
            End If

            Return isTest
        End Function
        Public Shared Function IsOkayToUseQuickQuoteTestVariables() As Boolean
            'If IsTestEnvironment() = True AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            'updated 10/28/2016 to account for times where test variables may be needed in Prod (i.e. ConsumerQuoting interface)
            If (IsTestEnvironment() = True OrElse OkayToUseQuickQuoteTestVariablesInProd() = True) AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                Return True
            Else
                Return False
            End If
        End Function
        'added 10/28/2016 to allow test user login info when in Prod (should only be used in Prod for ConsumerQuoting currently since site user isn't authenticated in Diamond; would still rely on QuickQuote_UseTestVariables being set to YES in order to be used)
        Public Shared Function OkayToUseQuickQuoteTestVariablesInProd() As Boolean
            Dim isOkay As Boolean = False

            Dim strIsOkay As String = configAppSettingValueAsString("QuickQuote_OkayToUseTestVariablesInProd")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then
                    isOkay = True
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function DiamondUsername(Optional ByRef isTestVariable As Boolean = False) As String
            Dim diaUsername As String = ""

            If System.Web.HttpContext.Current?.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUsername").ToString <> "" Then
                diaUsername = System.Web.HttpContext.Current?.Session("DiamondUsername").ToString
            ElseIf IsOkayToUseQuickQuoteTestVariables() = True Then '8/13/2014 note: could also check QuickQuoteTestUsername key to make sure it's something
                diaUsername = ConfigurationManager.AppSettings("QuickQuoteTestUsername").ToString
                isTestVariable = True
            End If

            Return diaUsername
        End Function
        Public Shared Function DiamondPassword(Optional ByRef isTestVariable As Boolean = False) As String
            Dim diaPassword As String = ""

            If System.Web.HttpContext.Current?.Session("DiamondPassword") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondPassword").ToString <> "" Then
                diaPassword = System.Web.HttpContext.Current?.Session("DiamondPassword").ToString
            ElseIf IsOkayToUseQuickQuoteTestVariables() = True Then '8/13/2014 note: could also check QuickQuoteTestPassword key to make sure it's something
                diaPassword = ConfigurationManager.AppSettings("QuickQuoteTestPassword").ToString
                isTestVariable = True
            End If

            Return diaPassword
        End Function
        Public Shared Function DiamondUserId(Optional ByRef isTestVariable As Boolean = False) As String
            Dim diaUserId As String = ""

            If System.Web.HttpContext.Current?.Session("DiamondUserId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUserId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString) = True Then
                diaUserId = System.Web.HttpContext.Current?.Session("DiamondUserId").ToString
            ElseIf IsOkayToUseQuickQuoteTestVariables() = True Then '8/13/2014 note: could also check QuickQuoteTestUserId key to make sure it's something
                diaUserId = ConfigurationManager.AppSettings("QuickQuoteTestUserId").ToString
                isTestVariable = True
            End If

            Return diaUserId
        End Function
        Public Shared Function DiamondAgencyCode(Optional ByRef isTestVariable As Boolean = False) As String
            Dim diaAgencyCode As String = ""

            If System.Web.HttpContext.Current?.Session("DiamondAgencyCode") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString <> "" Then
                diaAgencyCode = System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString
            ElseIf IsOkayToUseQuickQuoteTestVariables() = True Then '8/13/2014 note: could also check QuickQuoteTestAgencyCode key to make sure it's something
                diaAgencyCode = ConfigurationManager.AppSettings("QuickQuoteTestAgencyCode").ToString
                isTestVariable = True
            End If

            Return diaAgencyCode
        End Function
        Public Shared Function DiamondAgencyId(Optional ByRef isTestVariable As Boolean = False) As String
            Dim diaAgencyId As String = ""

            If System.Web.HttpContext.Current?.Session("DiamondAgencyId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString) = True Then
                diaAgencyId = System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString
            ElseIf IsOkayToUseQuickQuoteTestVariables() = True Then '8/13/2014 note: could also check QuickQuoteTestAgencyId key to make sure it's something
                diaAgencyId = ConfigurationManager.AppSettings("QuickQuoteTestAgencyId").ToString
                isTestVariable = True
            End If

            Return diaAgencyId
        End Function
        '11/4/2016 - added new methods for AgencyCodes and AgencyIds
        Public Shared Function DiamondAgencyCodes(Optional ByRef usedTestVariable As Boolean = False, Optional ByVal isFirstTimeThrough As Boolean = True) As List(Of String) '11/6/2016 - added optional byval for isFirstTimeThrough
            Dim diaAgCodes As List(Of String) = Nothing
            usedTestVariable = False

            If System.Web.HttpContext.Current?.Session("DiamondAgencyCodes") IsNot Nothing AndAlso String.IsNullOrWhiteSpace(System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString) = False Then
                Dim strDiaAgCodes As String = System.Web.HttpContext.Current?.Session("DiamondAgencyCodes").ToString
                If strDiaAgCodes.Contains(",") = True Then
                    Dim arDiaAgCodes As String() = strDiaAgCodes.Split(",") '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                    For Each diaAgCode As String In arDiaAgCodes
                        diaAgCode = Trim(diaAgCode)
                        If String.IsNullOrWhiteSpace(diaAgCode) = False Then
                            If diaAgCodes Is Nothing Then
                                diaAgCodes = New List(Of String)
                            End If
                            diaAgCodes.Add(diaAgCode)
                        End If
                    Next
                Else
                    If String.IsNullOrWhiteSpace(strDiaAgCodes) = False Then
                        If diaAgCodes Is Nothing Then
                            diaAgCodes = New List(Of String)
                        End If
                        diaAgCodes.Add(strDiaAgCodes)
                    End If
                End If
            Else 'added 11/6/2016
                If isFirstTimeThrough = True Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    qqHelper.SetUserAgencyVariables()
                    Return DiamondAgencyCodes(usedTestVariable:=usedTestVariable, isFirstTimeThrough:=False)
                    Exit Function
                End If
            End If
            If diaAgCodes Is Nothing OrElse diaAgCodes.Count = 0 Then
                Dim diaAgCode As String = DiamondAgencyCode(isTestVariable:=usedTestVariable)
                If String.IsNullOrWhiteSpace(diaAgCode) = False Then
                    If diaAgCodes Is Nothing Then
                        diaAgCodes = New List(Of String)
                    End If
                    diaAgCodes.Add(diaAgCode)
                End If
            End If
            'note: could also use GetUserAgencies method

            Return diaAgCodes
        End Function
        Public Shared Function DiamondAgencyIds(Optional ByRef usedTestVariable As Boolean = False, Optional ByVal isFirstTimeThrough As Boolean = True) As List(Of Integer) '11/6/2016 - added optional byval for isFirstTimeThrough
            Dim diaAgIds As List(Of Integer) = Nothing
            usedTestVariable = False

            Dim qqHelper As New QuickQuoteHelperClass
            If System.Web.HttpContext.Current?.Session("DiamondAgencyIds") IsNot Nothing AndAlso String.IsNullOrWhiteSpace(System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString) = False Then
                Dim strDiaAgIds As String = System.Web.HttpContext.Current?.Session("DiamondAgencyIds").ToString
                If strDiaAgIds.Contains(",") = True Then
                    Dim arDiaAgIds As String() = strDiaAgIds.Split(",") '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                    For Each diaAgId As String In arDiaAgIds
                        diaAgId = Trim(diaAgId)
                        If qqHelper.IsPositiveIntegerString(diaAgId) = True Then
                            If diaAgIds Is Nothing Then
                                diaAgIds = New List(Of Integer)
                            End If
                            diaAgIds.Add(CInt(diaAgId))
                        End If
                    Next
                Else
                    If qqHelper.IsPositiveIntegerString(strDiaAgIds) = True Then
                        If diaAgIds Is Nothing Then
                            diaAgIds = New List(Of Integer)
                        End If
                        diaAgIds.Add(CInt(strDiaAgIds))
                    End If
                End If
            Else 'added 11/6/2016
                If isFirstTimeThrough = True Then
                    qqHelper.SetUserAgencyVariables()
                    Return DiamondAgencyIds(usedTestVariable:=usedTestVariable, isFirstTimeThrough:=False)
                    Exit Function
                End If
            End If
            If diaAgIds Is Nothing OrElse diaAgIds.Count = 0 Then
                Dim diaAgId As String = DiamondAgencyId(isTestVariable:=usedTestVariable)
                If qqHelper.IsPositiveIntegerString(diaAgId) = True Then
                    If diaAgIds Is Nothing Then
                        diaAgIds = New List(Of Integer)
                    End If
                    diaAgIds.Add(CInt(diaAgId))
                End If
            End If
            'note: could also use GetUserAgencies method

            Return diaAgIds
        End Function
        Public Shared Function LoggedInUsername(Optional ByRef isLegacy As Boolean = False) As String
            Dim uName As String = ""

            uName = DiamondUsername()
            If uName = "" AndAlso System.Web.HttpContext.Current?.Session("username") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("username").ToString <> "" Then
                uName = System.Web.HttpContext.Current?.Session("username").ToString
                isLegacy = True
            End If

            Return uName
        End Function
        Public Shared Function LoggedInPassword(Optional ByRef isLegacy As Boolean = False) As String
            Dim pWord As String = ""

            pWord = DiamondPassword()
            If pWord = "" AndAlso System.Web.HttpContext.Current?.Session("password") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("password").ToString <> "" Then
                pWord = System.Web.HttpContext.Current?.Session("password").ToString
                isLegacy = True
            End If

            Return pWord
        End Function
        Public Shared Function LoggedInUserId(Optional ByRef isLegacy As Boolean = False) As String
            Dim uId As String = ""

            uId = DiamondUserId()
            If uId = "" AndAlso System.Web.HttpContext.Current?.Session("userID") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("userID").ToString <> "" Then
                uId = System.Web.HttpContext.Current?.Session("userID").ToString
                isLegacy = True
            End If

            Return uId
        End Function
        Public Shared Function LoggedInAgencyCode(Optional ByRef isLegacy As Boolean = False) As String
            Dim aCode As String = ""

            aCode = DiamondAgencyCode()
            If aCode = "" AndAlso System.Web.HttpContext.Current?.Session("agencyCode") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("agencyCode").ToString <> "" Then
                aCode = System.Web.HttpContext.Current?.Session("agencyCode").ToString
                isLegacy = True
            End If

            Return aCode
        End Function
        Public Shared Function LoggedInAgencyId(Optional ByRef isLegacy As Boolean = False) As String
            Dim aId As String = ""

            aId = DiamondAgencyId()
            If aId = "" AndAlso System.Web.HttpContext.Current?.Session("agencyID") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("agencyID").ToString <> "" Then
                aId = System.Web.HttpContext.Current?.Session("agencyID").ToString
                isLegacy = True
            End If

            Return aId
        End Function
        Public Shared Function configAppSettingValueAsString(ByVal key As String, Optional ByVal checkForNumeric As Boolean = False) As String
            Dim val As String = ""

            If key <> "" AndAlso ConfigurationManager.AppSettings(key) IsNot Nothing AndAlso ConfigurationManager.AppSettings(key).ToString <> "" AndAlso (checkForNumeric = False OrElse IsNumeric(ConfigurationManager.AppSettings(key).ToString) = True) Then
                val = ConfigurationManager.AppSettings(key).ToString
            End If

            Return val
        End Function
        Public Shared Function sessionVariableValueAsString(ByVal key As String, Optional ByVal checkForNumeric As Boolean = False) As String
            Dim val As String = ""

            If key <> "" AndAlso System.Web.HttpContext.Current?.Session(key) IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session(key).ToString <> "" AndAlso (checkForNumeric = False OrElse IsNumeric(System.Web.HttpContext.Current?.Session(key).ToString) = True) Then
                val = System.Web.HttpContext.Current?.Session(key).ToString
            End If

            Return val
        End Function
        '3/13/2020 - new methods
        Public Shared Function ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation(ByVal keyName As String, Optional ByVal checkForNumeric As Boolean = False, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As String
            Dim val As String = ""

            If String.IsNullOrWhiteSpace(keyName) = False Then
                Dim keyNameToUse As String = keyName
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
                    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                        keyNameToUse &= "_" & lobAbbrev
                    End If
                End If
                val = configAppSettingValueAsString(keyNameToUse, checkForNumeric:=checkForNumeric)
                If String.IsNullOrWhiteSpace(val) = True AndAlso keyNameToUse <> keyName Then
                    val = configAppSettingValueAsString(keyName, checkForNumeric:=checkForNumeric)
                End If
            End If

            Return val
        End Function
        Public Shared Function SessionVariableValueAsString_WithOptionalThreeLetterLobAppreviation(ByVal keyName As String, Optional ByVal checkForNumeric As Boolean = False, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As String
            Dim val As String = ""

            If String.IsNullOrWhiteSpace(keyName) = False Then
                Dim keyNameToUse As String = keyName
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
                    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                        keyNameToUse &= "_" & lobAbbrev
                    End If
                End If
                val = sessionVariableValueAsString(keyNameToUse, checkForNumeric:=checkForNumeric)
                If String.IsNullOrWhiteSpace(val) = True AndAlso keyNameToUse <> keyName Then
                    val = sessionVariableValueAsString(keyName, checkForNumeric:=checkForNumeric)
                End If
            End If

            Return val
        End Function
        ''added 8/6/2014 for e2Value; 8/7/2014 - moved to QuickQuotePropertyValuationHelperClass
        'Public Function PropertyValuationRequestForQuote(ByVal qq As QuickQuoteObject, Optional ByVal locationNum As Integer = 1) As QuickQuotePropertyValuationRequest
        '    Dim r As New QuickQuotePropertyValuationRequest

        '    If locationNum < 1 Then
        '        locationNum = 1
        '    End If
        '    If qq IsNot Nothing Then
        '        Dim hasLocAddress As Boolean = False
        '        Dim hasPhAddress As Boolean = False
        '        Dim hasClAddress As Boolean = False
        '        Dim hasPhName As Boolean = False
        '        Dim hasClName As Boolean = False
        '        Dim hasLocName As Boolean = False
        '        If qq.Locations IsNot Nothing AndAlso qq.Locations.Count >= locationNum Then
        '            If qq.Locations(locationNum - 1) IsNot Nothing Then
        '                With qq.Locations(locationNum - 1)
        '                    If .Name IsNot Nothing AndAlso .Name.HasData = True Then
        '                        hasLocName = True
        '                    End If
        '                    If .Address IsNot Nothing AndAlso .Address.HasData = True Then
        '                        hasLocAddress = True
        '                        ConvertQuickQuoteAddressToPropertyValuationStreetAddress(.Address, r.ClientAddress1, r.ClientAddress2, r.ClientCity, r.ClientState, r.ClientZip)
        '                    End If
        '                End With
        '            End If
        '        End If
        '        If qq.Policyholder IsNot Nothing AndAlso qq.Policyholder.HasData = True Then
        '            With qq.Policyholder
        '                If .Name IsNot Nothing AndAlso .Name.HasData = True Then
        '                    hasPhName = True
        '                    ConvertQuickQuoteNameToPropertyValuationName(.Name, r.ClientIsBusiness, r.ClientFirstName, r.ClientMiddleInitial, r.ClientLastName)
        '                End If
        '                If .Address IsNot Nothing AndAlso .Address.HasData = True Then
        '                    hasPhAddress = True
        '                    If hasLocAddress = False Then
        '                        ConvertQuickQuoteAddressToPropertyValuationStreetAddress(.Address, r.ClientAddress1, r.ClientAddress2, r.ClientCity, r.ClientState, r.ClientZip)
        '                    End If
        '                End If
        '            End With
        '        End If
        '        If qq.Client IsNot Nothing AndAlso qq.Client.HasPrimaryData = True Then
        '            With qq.Client
        '                If .Name IsNot Nothing AndAlso .Name.HasData = True Then
        '                    hasClName = True
        '                    If hasPhName = False Then
        '                        ConvertQuickQuoteNameToPropertyValuationName(.Name, r.ClientIsBusiness, r.ClientFirstName, r.ClientMiddleInitial, r.ClientLastName)
        '                    End If
        '                End If
        '                If .Address IsNot Nothing AndAlso .Address.HasData = True Then
        '                    hasClAddress = True
        '                    If hasLocAddress = False AndAlso hasPhAddress = False Then
        '                        ConvertQuickQuoteAddressToPropertyValuationStreetAddress(.Address, r.ClientAddress1, r.ClientAddress2, r.ClientCity, r.ClientState, r.ClientZip)
        '                    End If
        '                End If
        '            End With
        '        End If
        '        If hasPhName = False AndAlso hasClName = False AndAlso hasLocName = True Then
        '            With qq.Locations(locationNum - 1)
        '                ConvertQuickQuoteNameToPropertyValuationName(.Name, r.ClientIsBusiness, r.ClientFirstName, r.ClientMiddleInitial, r.ClientLastName)
        '            End With
        '        End If

        '    End If

        '    Return r
        'End Function
        'Public Sub ConvertQuickQuoteAddressToPropertyValuationStreetAddress(ByVal qqAdd As QuickQuoteAddress, ByRef stLn1 As String, ByRef stLn2 As String, ByRef city As String, ByRef state As String, ByRef zip As String)
        '    stLn1 = ""
        '    stLn2 = ""
        '    city = ""
        '    state = ""
        '    zip = ""
        '    If qqAdd IsNot Nothing Then
        '        stLn1 = appendText(qqAdd.HouseNum, qqAdd.StreetName, " ")
        '        stLn1 = appendText(stLn1, qqAdd.ApartmentNumber, " ") 'may need to use text '# ' or something
        '        stLn1 = Left(stLn1, 150)
        '        'stLn2 = Left(stLn2, 150)'could possibly use if len(stLn1) > 150... find last space in address line and move anything after to 2nd line if that works... else keep moving back to the next space
        '        city = Left(qqAdd.City, 100)
        '        state = Left(qqAdd.State, 2)
        '        If state = "" Then
        '            state = "IN"
        '        End If
        '        zip = Left(qqAdd.Zip, 5)
        '    End If
        'End Sub
        'Public Sub ConvertQuickQuoteNameToPropertyValuationName(ByVal qqName As QuickQuoteName, ByRef isBusinessName As Boolean, ByRef firstName As String, ByRef middleInitial As String, ByRef lastName As String)
        '    isBusinessName = False
        '    firstName = ""
        '    middleInitial = ""
        '    lastName = ""
        '    If qqName IsNot Nothing Then
        '        If qqName.TypeId <> "" AndAlso IsNumeric(qqName.TypeId) = True AndAlso (CInt(qqName.TypeId) = 1 OrElse CInt(qqName.TypeId) = 2) Then
        '            If CInt(qqName.TypeId) = 2 Then
        '                'Bus
        '                isBusinessName = True
        '            Else
        '                'Pers
        '                isBusinessName = False
        '            End If
        '        Else
        '            If qqName.FirstName <> "" AndAlso qqName.LastName <> "" Then
        '                'Pers
        '                isBusinessName = False
        '            ElseIf qqName.CommercialDBAname <> "" OrElse qqName.CommercialIRSname <> "" OrElse qqName.DoingBusinessAsName <> "" Then
        '                'Comm
        '                isBusinessName = True
        '            Else
        '                'default to Pers
        '                isBusinessName = False
        '            End If
        '        End If
        '        If isBusinessName = True Then
        '            'Bus
        '            lastName = qqName.CommercialDBAname
        '            If lastName = "" Then
        '                lastName = qqName.DoingBusinessAsName
        '                If lastName = "" Then
        '                    lastName = qqName.CommercialIRSname
        '                End If
        '            End If
        '            lastName = Left(lastName, 100)
        '        Else
        '            'Pers
        '            firstName = Left(qqName.FirstName, 100)
        '            middleInitial = Left(qqName.MiddleName, 1)
        '            lastName = Left(qqName.LastName, 100)
        '        End If
        '    End If
        'End Sub

        'added 9/23/2014 for EPLI from DiamondQuickQuote; was originally in QuickQuoteObject class
        Public Shared Function TryToGetDouble(ByVal inputText As String) As Double
            'Try
            Dim result As Double = 0.00

            inputText = inputText.Replace("$", "")
            inputText = inputText.Replace(",", "")

            Double.TryParse(inputText, result) 'assigns zero if the conversion fails, but allows us to explicitly handle errors without an exception if desired. https://stackoverflow.com/questions/586436/double-tryparse-or-convert-todouble-which-is-faster-and-safer
            'Return CDbl(inputText)

            'Catch ex As Exception
            'End Try
            'Return 0.00
            Return result
        End Function

        'Private Sub TestExtensions() '10/9/2014 - added for testing QuickQuoteExtensions module
        '    Dim qq As New QuickQuoteObject
        '    Dim lst As New List(Of String)
        '    lst = QuickQuoteExtensions.GetAllGLClassificationCodes(qq)
        '    lst = qq.GetAllGLClassificationCodes
        'End Sub

        'added 10/10/2014 for CopyQuoteToAgency functionality... will be used in other places too; not using shared method in order to use appendText, which isn't shared
        'Public Shared Sub ValidateAgencyCodeAndId(ByVal agencyCodeToValidate As String, ByVal agencyIdToValidate As String, ByRef correctedAgencyCode As String, ByRef correctedAgencyId As String, ByRef validationMessage As String, ByRef hasValidationError As Boolean)
        Public Sub ValidateAgencyCodeAndId(ByVal agencyCodeToValidate As String, ByVal agencyIdToValidate As String, ByRef correctedAgencyCode As String, ByRef correctedAgencyId As String, ByRef validationMessage As String, ByRef hasValidationError As Boolean)
            correctedAgencyCode = ""
            correctedAgencyId = ""
            validationMessage = ""
            hasValidationError = False

            If agencyCodeToValidate = "" AndAlso (agencyIdToValidate = "" OrElse IsNumeric(agencyIdToValidate) = False) Then
                'both missing or invalid
                hasValidationError = True
                validationMessage = appendText(validationMessage, "agencyCode and agencyId are both missing or in an invalid format", "; ")
            ElseIf agencyCodeToValidate = "" Then
                'use agencyId to set agencyCode
                Dim diaCode As String = ""
                SetAgencyCodeForAgencyId(agencyIdToValidate, diaCode)
                If diaCode <> "" Then
                    correctedAgencyCode = diaCode
                    validationMessage = appendText(validationMessage, "agency code set to " & correctedAgencyCode, "; ")
                Else
                    hasValidationError = True
                    validationMessage = appendText(validationMessage, "unable to retrieve agency code for agency id", "; ")
                End If
            ElseIf agencyIdToValidate = "" OrElse IsNumeric(agencyIdToValidate) = False Then
                'use agencyCode to set agencyId
                Dim useCorrectedAgencyCode As Boolean = False
                If Len(agencyCodeToValidate) = 4 Then
                    Dim diaCode As String = ""
                    SetFullAgencyCodeFor4DigitAgencyCode(agencyCodeToValidate, diaCode)
                    If diaCode <> "" Then
                        If agencyCodeToValidate <> diaCode Then
                            correctedAgencyCode = diaCode
                            validationMessage = appendText(validationMessage, "agency code corrected from " & agencyCodeToValidate & " to " & correctedAgencyCode, "; ")
                            useCorrectedAgencyCode = True
                        End If
                    Else
                        validationMessage = appendText(validationMessage, "unable to retrieve full agency code for 4-digit agency code", "; ")
                    End If
                End If

                Dim diaId As String = ""
                If useCorrectedAgencyCode = True Then
                    SetAgencyIdForAgencyCode(correctedAgencyCode, diaId)
                Else
                    SetAgencyIdForAgencyCode(agencyCodeToValidate, diaId)
                End If
                If diaId <> "" Then
                    correctedAgencyId = diaId
                    If agencyIdToValidate = "" Then
                        validationMessage = appendText(validationMessage, "agency id set to " & correctedAgencyId, "; ")
                    Else
                        validationMessage = appendText(validationMessage, "agency id corrected from " & agencyIdToValidate & " to " & correctedAgencyId, "; ")
                    End If
                Else
                    hasValidationError = True
                    validationMessage = appendText(validationMessage, "unable to retrieve agency id for agency code", "; ")
                End If
            Else
                'both are present; validate that agencyCode matches agencyId
                Dim diaCode As String = ""
                SetAgencyCodeForAgencyId(agencyIdToValidate, diaCode)
                If diaCode <> "" Then
                    If agencyCodeToValidate <> diaCode Then
                        correctedAgencyCode = diaCode
                        validationMessage = appendText(validationMessage, "agency code corrected from " & agencyCodeToValidate & " to " & correctedAgencyCode, "; ")
                    End If
                Else
                    validationMessage = appendText(validationMessage, "unable to retrieve agency code for agency id", "; ")
                End If
            End If
        End Sub
        Public Shared Sub SetAgencyCodeForAgencyId(ByVal agencyId As String, ByRef agencyCode As String)
            agencyCode = ""
            If agencyId <> "" AndAlso IsNumeric(agencyId) = True Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "Select A.code from Agency as A with (nolock) where A.agency_id = " & CInt(agencyId)
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        agencyCode = dr.Item("code").ToString.Trim
                    End If
                End Using
            End If
        End Sub
        Public Shared Sub SetAgencyIdForAgencyCode(ByVal agencyCode As String, ByRef agencyId As String)
            agencyId = ""
            If agencyCode <> "" Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "Select A.agency_id from Agency as A with (nolock) where A.code = '" & agencyCode & "'"
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        agencyId = dr.Item("agency_id").ToString.Trim
                    End If
                End Using
            End If
        End Sub
        Public Shared Sub SetFullAgencyCodeFor4DigitAgencyCode(ByVal agencyCode4Digit As String, ByRef agencyCodeFull As String)
            agencyCodeFull = ""
            If agencyCode4Digit <> "" AndAlso Len(agencyCode4Digit) = 4 Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "Select A.code from Agency as A with (nolock) where right(A.code, 4) = '" & agencyCode4Digit & "'"
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        agencyCodeFull = dr.Item("code").ToString.Trim
                    End If
                End Using
            End If
        End Sub
        '5/12/2016 - added extra method for VelociRaterServices
        Public Shared Sub SetFullAgencyCodeAndIdFor4DigitAgencyCode(ByVal agencyCode4Digit As String, ByRef agencyCodeFull As String, ByRef agencyId As String) 'added 5/12/2016
            agencyCodeFull = ""
            agencyId = ""
            If agencyCode4Digit <> "" AndAlso Len(agencyCode4Digit) = 4 Then
                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "Select A.code, A.agency_id from Agency as A with (nolock) where right(A.code, 4) = '" & agencyCode4Digit & "'"
                    Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        agencyCodeFull = dr.Item("code").ToString.Trim
                        agencyId = dr.Item("agency_id").ToString.Trim
                    End If
                End Using
            End If
        End Sub

        '12/11/2014 - moved logic to QuickQuoteThirdPartyReportHelperClass
        ''added 12/5/2014 for CLUE specs (bug #s 3160/3638)
        'Public Sub InsertThirdPartyReportLogRecord(ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord, ByRef errorMsg As String, Optional ByRef sqlErrorMsg As String = "")
        '    errorMsg = ""
        '    sqlErrorMsg = ""

        '    If thirdPartyReportLogRecord IsNot Nothing Then
        '        If thirdPartyReportLogRecord.thirdPartyReportTypeId > 0 AndAlso thirdPartyReportLogRecord.policyId > 0 AndAlso thirdPartyReportLogRecord.policyImageNum > 0 Then
        '            Using sqlEO As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ"))
        '                sqlEO.queryOrStoredProc = "usp_Insert_ThirdPartyReportLog"
        '                'finished code 12/8/2014
        '                '@thirdPartyReportTypeId int,
        '                '@policyId int,
        '                '@policyImageNum int,
        '                '@unitNum int = NULL,
        '                '@name1First varchar(50) = NULL,
        '                '@name1Middle varchar(50) = NULL,
        '                '@name1Last varchar(50) = NULL,
        '                '@name1DOB date = NULL,
        '                '@name1SSN varchar(20) = NULL,
        '                '@name2First varchar(50) = NULL,
        '                '@name2Middle varchar(50) = NULL,
        '                '@name2Last varchar(50) = NULL,
        '                '@name2DOB date = NULL,
        '                '@name2SSN varchar(20) = NULL,
        '                '@addressStreetNum varchar(20) = NULL,
        '                '@addressStreetName varchar(100) = NULL,
        '                '@addressApartmentNum varchar(20) = NULL,
        '                '@addressCity varchar(100) = NULL,
        '                '@addressState varchar(20) = NULL,
        '                '@addressZip varchar(10) = NULL,
        '                '@thirdPartyReportLogId int output

        '                sqlEO.inputParameters = New ArrayList
        '                sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@thirdPartyReportTypeId", thirdPartyReportLogRecord.thirdPartyReportTypeId))
        '                sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@policyId", thirdPartyReportLogRecord.policyId))
        '                sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@policyImageNum", thirdPartyReportLogRecord.policyImageNum))
        '                sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@unitNum", thirdPartyReportLogRecord.unitNum))
        '                If thirdPartyReportLogRecord.name1First <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name1First", thirdPartyReportLogRecord.name1First))
        '                End If
        '                If thirdPartyReportLogRecord.name1Middle <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name1Middle", thirdPartyReportLogRecord.name1Middle))
        '                End If
        '                If thirdPartyReportLogRecord.name1Last <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name1Last", thirdPartyReportLogRecord.name1Last))
        '                End If
        '                If thirdPartyReportLogRecord.name1DOB <> "" AndAlso IsDate(thirdPartyReportLogRecord.name1DOB) = True Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name1DOB", CDate(thirdPartyReportLogRecord.name1DOB)))
        '                End If
        '                If thirdPartyReportLogRecord.name1SSN <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name1SSN", thirdPartyReportLogRecord.name1SSN))
        '                End If
        '                If thirdPartyReportLogRecord.name2First <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name2First", thirdPartyReportLogRecord.name2First))
        '                End If
        '                If thirdPartyReportLogRecord.name2Middle <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name2Middle", thirdPartyReportLogRecord.name2Middle))
        '                End If
        '                If thirdPartyReportLogRecord.name2Last <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name2Last", thirdPartyReportLogRecord.name2Last))
        '                End If
        '                If thirdPartyReportLogRecord.name2DOB <> "" AndAlso IsDate(thirdPartyReportLogRecord.name2DOB) = True Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name2DOB", CDate(thirdPartyReportLogRecord.name2DOB)))
        '                End If
        '                If thirdPartyReportLogRecord.name2SSN <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@name2SSN", thirdPartyReportLogRecord.name2SSN))
        '                End If
        '                If thirdPartyReportLogRecord.addressStreetNum <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@addressStreetNum", thirdPartyReportLogRecord.addressStreetNum))
        '                End If
        '                If thirdPartyReportLogRecord.addressStreetName <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@addressStreetName", thirdPartyReportLogRecord.addressStreetName))
        '                End If
        '                If thirdPartyReportLogRecord.addressApartmentNum <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@addressApartmentNum", thirdPartyReportLogRecord.addressApartmentNum))
        '                End If
        '                If thirdPartyReportLogRecord.addressCity <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@addressCity", thirdPartyReportLogRecord.addressCity))
        '                End If
        '                If thirdPartyReportLogRecord.addressState <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@addressState", thirdPartyReportLogRecord.addressState))
        '                End If
        '                If thirdPartyReportLogRecord.addressZip <> "" Then
        '                    sqlEO.inputParameters.Add(New SqlClient.SqlParameter("@addressZip", thirdPartyReportLogRecord.addressZip))
        '                End If

        '                sqlEO.outputParameter = New SqlClient.SqlParameter("@thirdPartyReportLogId", Data.SqlDbType.Int)

        '                sqlEO.ExecuteStatement()

        '                'If sqlEO.rowsAffected = 0 OrElse sqlEO.hasError = True Then
        '                If sqlEO.hasError = True Then
        '                    'error
        '                    errorMsg = "error inserting third party report log record into database"
        '                    sqlErrorMsg = sqlEO.errorMsg
        '                Else
        '                    thirdPartyReportLogRecord.thirdPartyReportLogId = sqlEO.outputParameter.Value
        '                    thirdPartyReportLogRecord.inserted = Date.Now.ToString
        '                End If
        '            End Using
        '        Else
        '            errorMsg = "please provide a valid thirdPartyReportTypeId, policyId, and policyImageNum"
        '        End If
        '    Else
        '        errorMsg = "please provide thirdPartyReportLogRecord"
        '    End If
        'End Sub
        'Public Function GetThirdPartyReportLogRecord(ByVal thirdPartyReportTypeId As Integer, ByVal policyId As Integer, ByVal policyImageNum As Integer, ByVal unitNum As Integer, ByRef errorMsg As String, Optional ByRef sqlErrorMsg As String = "", Optional ByVal useUnitNum As Boolean = True) As QuickQuoteThirdPartyReportLogRecord
        '    Dim tprlr As QuickQuoteThirdPartyReportLogRecord = Nothing
        '    errorMsg = ""
        '    sqlErrorMsg = ""

        '    If thirdPartyReportTypeId > 0 AndAlso policyId > 0 Then '12/9/2014 - no longer validating policyImageNum
        '        Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
        '            sqlSO.queryOrStoredProc = "usp_Get_ThirdPartyReportLog"
        '            'finished code 12/8/2014
        '            '@thirdPartyReportTypeId int = NULL,
        '            '@policyId int,
        '            '@policyImageNum int,
        '            '@unitNum int = NULL,
        '            '@justTop1 bit = 1

        '            sqlSO.parameters = New ArrayList
        '            sqlSO.parameters.Add(New SqlClient.SqlParameter("@thirdPartyReportTypeId", thirdPartyReportTypeId))
        '            sqlSO.parameters.Add(New SqlClient.SqlParameter("@policyId", policyId))
        '            If policyImageNum > 0 Then '12/9/2014 - now optional
        '                sqlSO.parameters.Add(New SqlClient.SqlParameter("@policyImageNum", policyImageNum))
        '            End If
        '            If useUnitNum = True Then
        '                sqlSO.parameters.Add(New SqlClient.SqlParameter("@unitNum", unitNum))
        '            End If

        '            Dim dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
        '            If dr IsNot Nothing AndAlso dr.HasRows = True Then
        '                dr.Read()
        '                tprlr = New QuickQuoteThirdPartyReportLogRecord
        '                With tprlr
        '                    .thirdPartyReportLogId = dr.Item("thirdPartyReportLogId")
        '                    .thirdPartyReportTypeId = dr.Item("thirdPartyReportTypeId")
        '                    '.thirdPartyReportTypeDesc = dr.Item("thirdPartyReportTypeDesc").ToString.Trim
        '                    .policyId = dr.Item("policyId")
        '                    .policyImageNum = dr.Item("policyImageNum")
        '                    .unitNum = dr.Item("unitNum")
        '                    .name1First = dr.Item("name1First").ToString.Trim
        '                    .name1Middle = dr.Item("name1Middle").ToString.Trim
        '                    .name1Last = dr.Item("name1Last").ToString.Trim
        '                    If dr.Item("name1DOB").ToString.Trim <> "" AndAlso IsDate(dr.Item("name1DOB").ToString.Trim) = True Then
        '                        .name1DOB = dr.Item("name1DOB").ToString.Trim
        '                    End If
        '                    .name1SSN = dr.Item("name1SSN").ToString.Trim
        '                    .name2First = dr.Item("name2First").ToString.Trim
        '                    .name2Middle = dr.Item("name2Middle").ToString.Trim
        '                    .name2Last = dr.Item("name2Last").ToString.Trim
        '                    If dr.Item("name2DOB").ToString.Trim <> "" AndAlso IsDate(dr.Item("name2DOB").ToString.Trim) = True Then
        '                        .name2DOB = dr.Item("name2DOB").ToString.Trim
        '                    End If
        '                    .name2SSN = dr.Item("name2SSN").ToString.Trim
        '                    .addressStreetNum = dr.Item("addressStreetNum").ToString.Trim
        '                    .addressStreetName = dr.Item("addressStreetName").ToString.Trim
        '                    .addressApartmentNum = dr.Item("addressApartmentNum").ToString.Trim
        '                    .addressCity = dr.Item("addressCity").ToString.Trim
        '                    .addressState = dr.Item("addressState").ToString.Trim
        '                    .addressZip = dr.Item("addressZip").ToString.Trim
        '                    .inserted = dr.Item("inserted").ToString.Trim
        '                End With

        '            ElseIf sqlSO.hasError = True Then
        '                errorMsg = "error getting third party report log record from database"
        '                sqlErrorMsg = sqlSO.errorMsg
        '            Else
        '                errorMsg = "no third party report log record found"
        '            End If
        '        End Using
        '    Else
        '        errorMsg = "please provide a valid thirdPartyReportTypeId, policyId, and policyImageNum"
        '    End If

        '    Return tprlr
        'End Function
        ''added 12/8/2014
        'Enum ThirdPartyReportType 'see ThirdPartyReportType table on QuickQuote database
        '    None = 0
        '    AutoPrefill = 1 'Auto Prefill in db
        '    CreditAuto = 2 'Credit Auto in db
        '    CreditProperty = 3 'Credit Property in db
        '    MVR = 4
        '    CLUEAuto = 5 'CLUE Auto in db
        '    CLUEProperty = 6 'CLUE Property in db
        'End Enum
        ''Public Function LoadThirdPartyReportLogRecordFromQuickQuoteObject(ByVal reportType As ThirdPartyReportType, ByVal qq As QuickQuoteObject, ByRef errorMsg As String, Optional ByVal qqDriver As QuickQuoteDriver = Nothing, Optional ByVal qqApplicant As QuickQuoteApplicant = Nothing, Optional ByVal activeNum As Integer = 0) As QuickQuoteThirdPartyReportLogRecord
        ''updated for optional byref params
        'Public Function LoadThirdPartyReportLogRecordFromQuickQuoteObject(ByVal reportType As ThirdPartyReportType, ByVal qq As QuickQuoteObject, ByRef errorMsg As String, Optional ByVal qqDriver As QuickQuoteDriver = Nothing, Optional ByVal qqApplicant As QuickQuoteApplicant = Nothing, Optional ByVal activeNum As Integer = 0, Optional ByRef policyId As Integer = 0, Optional ByRef policyImageNum As Integer = 0, Optional ByRef unitNum As Integer = 0) As QuickQuoteThirdPartyReportLogRecord
        '    Dim tprlr As QuickQuoteThirdPartyReportLogRecord = Nothing
        '    errorMsg = ""

        '    If reportType <> Nothing AndAlso reportType <> ThirdPartyReportType.None Then
        '        If qq IsNot Nothing Then
        '            ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord_QuickQuoteObject(qq, policyId, policyImageNum) 'added 12/9/2014
        '            tprlr = New QuickQuoteThirdPartyReportLogRecord
        '            tprlr.policyId = policyId 'added 12/9/2014
        '            tprlr.policyImageNum = policyImageNum 'added 12/9/2014
        '            tprlr.thirdPartyReportTypeId = CInt(reportType) 'added 12/9/2014
        '            Select Case reportType
        '                Case ThirdPartyReportType.AutoPrefill 'policy
        '                    'use client name/address
        '                    If qq.Client IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(qq.Client.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(qq.Client.Address, tprlr)
        '                    ElseIf qq.Policyholder IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(qq.Policyholder.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(qq.Policyholder.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CreditAuto 'person; ph relationshipTypeId (8 or 5)
        '                    'use ph drivers
        '                    'Dim ph1Driver As QuickQuoteDriver = Nothing
        '                    'Dim ph2Driver As QuickQuoteDriver = Nothing
        '                    'Dim loadErrorMsg As String = ""
        '                    'LoadPolicyholderDriversFromQuickQuoteObject(qq, ph1Driver, ph2Driver, loadErrorMsg)
        '                    'If ph1Driver IsNot Nothing Then
        '                    '    LoadThirdPartyReportLogRecordFromQuickQuoteName1(ph1Driver.Name, tprlr)
        '                    'End If
        '                    'If ph2Driver IsNot Nothing Then
        '                    '    LoadThirdPartyReportLogRecordFromQuickQuoteName2(ph2Driver.Name, tprlr)
        '                    'End If

        '                    If qqDriver IsNot Nothing Then

        '                    ElseIf activeNum > 0 Then
        '                        qqDriver = QuickQuoteDriverForActiveNum(qq, activeNum)
        '                    ElseIf unitNum > 0 Then 'added 12/9/2014
        '                        qqDriver = QuickQuoteDriverForIdValueNum(qq, unitNum)
        '                    End If
        '                    If qqDriver IsNot Nothing Then 'added 12/9/2014
        '                        If qqDriver.HasValidDriverNum = True Then
        '                            tprlr.unitNum = CInt(qqDriver.DriverNum)
        '                        ElseIf unitNum > 0 Then
        '                            tprlr.unitNum = unitNum
        '                        End If

        '                        'added 12/10/2014
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(qqDriver.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(qqDriver.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CreditProperty 'person; ph relationshipTypeId (8 or 5)
        '                    'use ph applicants
        '                    'Dim ph1Applicant As QuickQuoteApplicant = Nothing
        '                    'Dim ph2Applicant As QuickQuoteApplicant = Nothing
        '                    'Dim loadErrorMsg As String = ""
        '                    'LoadPolicyholderApplicantsFromQuickQuoteObject(qq, ph1Applicant, ph2Applicant, loadErrorMsg)
        '                    'If ph1Applicant IsNot Nothing Then
        '                    '    LoadThirdPartyReportLogRecordFromQuickQuoteName1(ph1Applicant.Name, tprlr)
        '                    'End If
        '                    'If ph2Applicant IsNot Nothing Then
        '                    '    LoadThirdPartyReportLogRecordFromQuickQuoteName2(ph2Applicant.Name, tprlr)
        '                    'End If

        '                    If qqApplicant IsNot Nothing Then

        '                    ElseIf activeNum > 0 Then
        '                        qqApplicant = QuickQuoteApplicantForActiveNum(qq, activeNum)
        '                    ElseIf unitNum > 0 Then 'added 12/9/2014
        '                        qqApplicant = QuickQuoteApplicantForIdValueNum(qq, unitNum)
        '                    End If
        '                    If qqApplicant IsNot Nothing Then 'added 12/9/2014
        '                        If qqApplicant.HasValidApplicantNum = True Then
        '                            tprlr.unitNum = CInt(qqApplicant.ApplicantNum)
        '                        ElseIf unitNum > 0 Then
        '                            tprlr.unitNum = unitNum
        '                        End If

        '                        'added 12/10/2014
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(qqApplicant.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(qqApplicant.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.MVR 'person; rated driverExcludeTypeId (1)
        '                    'use drivers
        '                    If qqDriver IsNot Nothing Then

        '                    ElseIf activeNum > 0 Then
        '                        qqDriver = QuickQuoteDriverForActiveNum(qq, activeNum)
        '                    ElseIf unitNum > 0 Then 'added 12/9/2014
        '                        qqDriver = QuickQuoteDriverForIdValueNum(qq, unitNum)
        '                    End If
        '                    If qqDriver IsNot Nothing Then 'added 12/9/2014
        '                        If qqDriver.HasValidDriverNum = True Then
        '                            tprlr.unitNum = CInt(qqDriver.DriverNum)
        '                        ElseIf unitNum > 0 Then
        '                            tprlr.unitNum = unitNum
        '                        End If

        '                        'added 12/10/2014
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(qqDriver.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(qqDriver.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CLUEAuto 'policy
        '                    'use ph drivers; may need to use actual ph address instead of address on ph driver
        '                    Dim ph1Driver As QuickQuoteDriver = Nothing
        '                    Dim ph2Driver As QuickQuoteDriver = Nothing
        '                    Dim loadErrorMsg As String = ""
        '                    LoadPolicyholderDriversFromQuickQuoteObject(qq, ph1Driver, ph2Driver, loadErrorMsg)
        '                    If ph1Driver IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(ph1Driver.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(ph1Driver.Address, tprlr)
        '                    End If
        '                    If ph2Driver IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName2(ph2Driver.Name, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CLUEProperty 'policy
        '                    'use ph applicants and loc address
        '                    Dim ph1Applicant As QuickQuoteApplicant = Nothing
        '                    Dim ph2Applicant As QuickQuoteApplicant = Nothing
        '                    Dim loadErrorMsg As String = ""
        '                    LoadPolicyholderApplicantsFromQuickQuoteObject(qq, ph1Applicant, ph2Applicant, loadErrorMsg)
        '                    If ph1Applicant IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName1(ph1Applicant.Name, tprlr)
        '                    End If
        '                    If ph2Applicant IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteName2(ph2Applicant.Name, tprlr)
        '                    End If
        '                    If qq.Locations IsNot Nothing AndAlso qq.Locations.Count > 0 Then
        '                        LoadThirdPartyReportLogRecordFromQuickQuoteAddress(qq.Locations(0).Address, tprlr)
        '                    End If
        '            End Select
        '        Else
        '            errorMsg = "please provide a valid QuickQuoteObject"
        '        End If
        '    Else
        '        errorMsg = "please provide a valid ThirdPartyReportType"
        '    End If

        '    Return tprlr
        'End Function
        ''Public Function LoadThirdPartyReportLogRecordFromDiamondImage(ByVal reportType As ThirdPartyReportType, ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef errorMsg As String, Optional ByVal diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing, Optional ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing, Optional ByVal activeNum As Integer = 0) As QuickQuoteThirdPartyReportLogRecord
        ''updated for optional byref params
        'Public Function LoadThirdPartyReportLogRecordFromDiamondImage(ByVal reportType As ThirdPartyReportType, ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef errorMsg As String, Optional ByVal diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing, Optional ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing, Optional ByVal activeNum As Integer = 0, Optional ByRef policyId As Integer = 0, Optional ByRef policyImageNum As Integer = 0, Optional ByRef unitNum As Integer = 0) As QuickQuoteThirdPartyReportLogRecord
        '    Dim tprlr As QuickQuoteThirdPartyReportLogRecord = Nothing
        '    errorMsg = ""

        '    If reportType <> Nothing AndAlso reportType <> ThirdPartyReportType.None Then
        '        If diaImage IsNot Nothing Then
        '            ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord_DiamondImage(diaImage, policyId, policyImageNum) 'added 12/9/2014
        '            tprlr = New QuickQuoteThirdPartyReportLogRecord
        '            tprlr.policyId = policyId 'added 12/9/2014
        '            tprlr.policyImageNum = policyImageNum 'added 12/9/2014
        '            tprlr.thirdPartyReportTypeId = CInt(reportType) 'added 12/9/2014
        '            Select Case reportType
        '                Case ThirdPartyReportType.AutoPrefill 'policy
        '                    'use client name/address
        '                    If diaImage.Policy IsNot Nothing AndAlso diaImage.Policy.Client IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(diaImage.Policy.Client.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromDiamondImageAddress(diaImage.Policy.Client.Address, tprlr)
        '                    ElseIf diaImage.PolicyHolder IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(diaImage.PolicyHolder.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromDiamondImageAddress(diaImage.PolicyHolder.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CreditAuto 'person; ph relationshipTypeId (8 or 5)
        '                    'use ph drivers
        '                    If diaDriver IsNot Nothing Then

        '                    ElseIf activeNum > 0 Then
        '                        diaDriver = DiamondDriverForActiveNum(diaImage, activeNum)
        '                    ElseIf unitNum > 0 Then 'added 12/9/2014
        '                        diaDriver = DiamondDriverForIdValueNum(diaImage, unitNum)
        '                    End If
        '                    If diaDriver IsNot Nothing Then 'added 12/9/2014
        '                        If IsValidDiamondNum(diaDriver.DriverNum) = True Then
        '                            tprlr.unitNum = diaDriver.DriverNum.Id
        '                        ElseIf unitNum > 0 Then
        '                            tprlr.unitNum = unitNum
        '                        End If

        '                        'added 12/10/2014
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(diaDriver.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromDiamondImageAddress(diaDriver.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CreditProperty 'person; ph relationshipTypeId (8 or 5)
        '                    'use ph applicants
        '                    If diaApplicant IsNot Nothing Then

        '                    ElseIf activeNum > 0 Then
        '                        diaApplicant = DiamondApplicantForActiveNum(diaImage, activeNum)
        '                    ElseIf unitNum > 0 Then 'added 12/9/2014
        '                        diaApplicant = DiamondApplicantForIdValueNum(diaImage, unitNum)
        '                    End If
        '                    If diaApplicant IsNot Nothing Then 'added 12/9/2014
        '                        If IsValidDiamondNum(diaApplicant.ApplicantNum) = True Then
        '                            tprlr.unitNum = diaApplicant.ApplicantNum.Id
        '                        ElseIf unitNum > 0 Then
        '                            tprlr.unitNum = unitNum
        '                        End If

        '                        'added 12/10/2014
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(diaApplicant.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromDiamondImageAddress(diaApplicant.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.MVR 'person; rated driverExcludeTypeId (1)
        '                    'use drivers
        '                    If diaDriver IsNot Nothing Then

        '                    ElseIf activeNum > 0 Then
        '                        diaDriver = DiamondDriverForActiveNum(diaImage, activeNum)
        '                    ElseIf unitNum > 0 Then 'added 12/9/2014
        '                        diaDriver = DiamondDriverForIdValueNum(diaImage, unitNum)
        '                    End If
        '                    If diaDriver IsNot Nothing Then 'added 12/9/2014
        '                        If IsValidDiamondNum(diaDriver.DriverNum) = True Then
        '                            tprlr.unitNum = diaDriver.DriverNum.Id
        '                        ElseIf unitNum > 0 Then
        '                            tprlr.unitNum = unitNum
        '                        End If

        '                        'added 12/10/2014
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(diaDriver.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromDiamondImageAddress(diaDriver.Address, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CLUEAuto 'policy
        '                    'use ph drivers; may need to use actual ph address instead of address on ph driver
        '                    Dim ph1Driver As Diamond.Common.Objects.Policy.Driver = Nothing
        '                    Dim ph2Driver As Diamond.Common.Objects.Policy.Driver = Nothing
        '                    Dim loadErrorMsg As String = ""
        '                    LoadPolicyholderDriversFromDiamondImage(diaImage, ph1Driver, ph2Driver, loadErrorMsg)
        '                    If ph1Driver IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(ph1Driver.Name, tprlr)
        '                        LoadThirdPartyReportLogRecordFromDiamondImageAddress(ph1Driver.Address, tprlr)
        '                    End If
        '                    If ph2Driver IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName2(ph2Driver.Name, tprlr)
        '                    End If
        '                Case ThirdPartyReportType.CLUEProperty 'policy
        '                    'use ph applicants and loc address
        '                    Dim ph1Applicant As Diamond.Common.Objects.Policy.Applicant = Nothing
        '                    Dim ph2Applicant As Diamond.Common.Objects.Policy.Applicant = Nothing
        '                    Dim loadErrorMsg As String = ""
        '                    LoadPolicyholderApplicantsFromDiamondImage(diaImage, ph1Applicant, ph2Applicant, loadErrorMsg)
        '                    If ph1Applicant IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName1(ph1Applicant.Name, tprlr)
        '                    End If
        '                    If ph2Applicant IsNot Nothing Then
        '                        LoadThirdPartyReportLogRecordFromDiamondImageName2(ph2Applicant.Name, tprlr)
        '                    End If
        '                    Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)
        '                    If rl IsNot Nothing Then
        '                        If rl.Locations IsNot Nothing AndAlso rl.Locations.Count > 0 Then
        '                            LoadThirdPartyReportLogRecordFromDiamondImageAddress(rl.Locations(0).Address, tprlr)
        '                        End If
        '                    End If
        '            End Select
        '        Else
        '            errorMsg = "please provide a valid Diamond image"
        '        End If
        '    Else
        '        errorMsg = "please provide a valid ThirdPartyReportType"
        '    End If

        '    Return tprlr
        'End Function
        Public Sub LoadPolicyholderDriversFromQuickQuoteObject(ByVal qq As QuickQuoteObject, ByRef ph1Driver As QuickQuoteDriver, ByRef ph2Driver As QuickQuoteDriver, ByRef errorMsg As String)
            'ph1Driver = Nothing
            'ph2Driver = Nothing

            'If qq IsNot Nothing Then
            '    If qq.Drivers IsNot Nothing AndAlso qq.Drivers.Count > 0 Then
            '        For Each d As QuickQuoteDriver In qq.Drivers
            '            If ph1Driver Is Nothing OrElse ph2Driver Is Nothing Then
            '                Dim isPolicyholder1 As Boolean = False
            '                Dim isPolicyholder2 As Boolean = False
            '                CheckRelationshipTypeId(d.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
            '                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
            '                    If isPolicyholder1 = True AndAlso ph1Driver Is Nothing Then
            '                        ph1Driver = d
            '                    End If
            '                    If isPolicyholder2 = True AndAlso ph2Driver Is Nothing Then
            '                        ph2Driver = d
            '                    End If
            '                    If ph1Driver IsNot Nothing AndAlso ph2Driver IsNot Nothing Then
            '                        Exit For
            '                    End If
            '                End If
            '            End If
            '        Next
            '    Else
            '        errorMsg = "QuickQuote Drivers list is empty"
            '    End If
            'Else
            '    errorMsg = "please provide a valid QuickQuoteObject"
            'End If

            'updated 9/14/2018 to call new method
            LoadPolicyholderDriversFromQuickQuoteObject_OptionallySendSubQuotes(qq, ph1Driver, ph2Driver, errorMsg)
        End Sub
        Public Sub LoadPolicyholderApplicantsFromQuickQuoteObject(ByVal qq As QuickQuoteObject, ByRef ph1Applicant As QuickQuoteApplicant, ByRef ph2Applicant As QuickQuoteApplicant, ByRef errorMsg As String)
            'ph1Applicant = Nothing
            'ph2Applicant = Nothing

            'If qq IsNot Nothing Then
            '    If qq.Applicants IsNot Nothing AndAlso qq.Applicants.Count > 0 Then
            '        For Each a As QuickQuoteApplicant In qq.Applicants
            '            If ph1Applicant Is Nothing OrElse ph2Applicant Is Nothing Then
            '                Dim isPolicyholder1 As Boolean = False
            '                Dim isPolicyholder2 As Boolean = False
            '                CheckRelationshipTypeId(a.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
            '                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
            '                    If isPolicyholder1 = True AndAlso ph1Applicant Is Nothing Then
            '                        ph1Applicant = a
            '                    End If
            '                    If isPolicyholder2 = True AndAlso ph2Applicant Is Nothing Then
            '                        ph2Applicant = a
            '                    End If
            '                    If ph1Applicant IsNot Nothing AndAlso ph2Applicant IsNot Nothing Then
            '                        Exit For
            '                    End If
            '                End If
            '            End If
            '        Next
            '    Else
            '        errorMsg = "QuickQuote Applicants list is empty"
            '    End If
            'Else
            '    errorMsg = "please provide a valid QuickQuoteObject"
            'End If

            'updated 9/14/2018 to call new method
            LoadPolicyholderApplicantsFromQuickQuoteObject_OptionallySendSubQuotes(qq, ph1Applicant, ph2Applicant, errorMsg)
        End Sub
        'added 12/24/2014
        Public Sub LoadPolicyholderOperatorsFromQuickQuoteObject(ByVal qq As QuickQuoteObject, ByRef ph1Operator As QuickQuoteOperator, ByRef ph2Operator As QuickQuoteOperator, ByRef errorMsg As String)
            'ph1Operator = Nothing
            'ph2Operator = Nothing

            'If qq IsNot Nothing Then
            '    If qq.Operators IsNot Nothing AndAlso qq.Operators.Count > 0 Then
            '        For Each a As QuickQuoteOperator In qq.Operators
            '            If ph1Operator Is Nothing OrElse ph2Operator Is Nothing Then
            '                Dim isPolicyholder1 As Boolean = False
            '                Dim isPolicyholder2 As Boolean = False
            '                CheckRelationshipTypeId(a.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
            '                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
            '                    If isPolicyholder1 = True AndAlso ph1Operator Is Nothing Then
            '                        ph1Operator = a
            '                    End If
            '                    If isPolicyholder2 = True AndAlso ph2Operator Is Nothing Then
            '                        ph2Operator = a
            '                    End If
            '                    If ph1Operator IsNot Nothing AndAlso ph2Operator IsNot Nothing Then
            '                        Exit For
            '                    End If
            '                End If
            '            End If
            '        Next
            '    Else
            '        errorMsg = "QuickQuote Operators list is empty"
            '    End If
            'Else
            '    errorMsg = "please provide a valid QuickQuoteObject"
            'End If

            'updated 9/14/2018 to call new method
            LoadPolicyholderOperatorsFromQuickQuoteObject_OptionallySendSubQuotes(qq, ph1Operator, ph2Operator, errorMsg)
        End Sub
        Public Sub LoadPolicyholderDriversFromDiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef ph1Driver As Diamond.Common.Objects.Policy.Driver, ByRef ph2Driver As Diamond.Common.Objects.Policy.Driver, ByRef errorMsg As String)
            ph1Driver = Nothing
            ph2Driver = Nothing

            If diaImage IsNot Nothing Then
                'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage) 'removed 9/14/2018
                'If rl IsNot Nothing Then 'removed IF 9/14/2018
                Dim diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver) = AllDiamondDrivers(diaImage, level:=MultiStateLevel.GoverningStateLevel) 'added 9/14/2018
                'If rl.Drivers IsNot Nothing AndAlso rl.Drivers.Count > 0 Then
                'updated 9/14/2018
                If diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                    'For Each d As Diamond.Common.Objects.Policy.Driver In rl.Drivers
                    'updated 9/14/2018
                    For Each d As Diamond.Common.Objects.Policy.Driver In diaDrivers
                        If ph1Driver Is Nothing OrElse ph2Driver Is Nothing Then
                            Dim isPolicyholder1 As Boolean = False
                            Dim isPolicyholder2 As Boolean = False
                            CheckRelationshipTypeId(d.RelationshipTypeId.ToString, isPolicyholder1, isPolicyholder2)
                            If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                                If isPolicyholder1 = True AndAlso ph1Driver Is Nothing Then
                                    ph1Driver = d
                                End If
                                If isPolicyholder2 = True AndAlso ph2Driver Is Nothing Then
                                    ph2Driver = d
                                End If
                                If ph1Driver IsNot Nothing AndAlso ph2Driver IsNot Nothing Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                Else
                    errorMsg = "DiamondImage Drivers list is empty"
                End If
                'Else
                '    errorMsg = "DiamondImage RiskLevel is empty"
                'End If
            Else
                errorMsg = "please provide a valid Diamond image"
            End If
        End Sub
        Public Sub LoadPolicyholderApplicantsFromDiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef ph1Applicant As Diamond.Common.Objects.Policy.Applicant, ByRef ph2Applicant As Diamond.Common.Objects.Policy.Applicant, ByRef errorMsg As String)
            ph1Applicant = Nothing
            ph2Applicant = Nothing

            If diaImage IsNot Nothing Then
                'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage) 'removed 9/14/2018
                'If rl IsNot Nothing Then 'removed IF 9/14/2018
                Dim diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant) = AllDiamondApplicants(diaImage, level:=MultiStateLevel.GoverningStateLevel) 'added 9/14/2018
                'If rl.Applicants IsNot Nothing AndAlso rl.Applicants.Count > 0 Then
                'updated 9/14/2018
                If diaApplicants IsNot Nothing AndAlso diaApplicants.Count > 0 Then
                    'For Each a As Diamond.Common.Objects.Policy.Applicant In rl.Applicants
                    'updated 9/14/2018
                    For Each a As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                        If ph1Applicant Is Nothing OrElse ph2Applicant Is Nothing Then
                            Dim isPolicyholder1 As Boolean = False
                            Dim isPolicyholder2 As Boolean = False
                            CheckRelationshipTypeId(a.RelationshipTypeId.ToString, isPolicyholder1, isPolicyholder2)
                            If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                                If isPolicyholder1 = True AndAlso ph1Applicant Is Nothing Then
                                    ph1Applicant = a
                                End If
                                If isPolicyholder2 = True AndAlso ph2Applicant Is Nothing Then
                                    ph2Applicant = a
                                End If
                                If ph1Applicant IsNot Nothing AndAlso ph2Applicant IsNot Nothing Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                Else
                    errorMsg = "DiamondImage Applicants list is empty"
                End If
                'Else
                '    errorMsg = "DiamondImage RiskLevel is empty"
                'End If
            Else
                errorMsg = "please provide a valid Diamond image"
            End If
        End Sub
        'added 12/24/2014
        Public Sub LoadPolicyholderOperatorsFromDiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef ph1Operator As Diamond.Common.Objects.Policy.Operator, ByRef ph2Operator As Diamond.Common.Objects.Policy.Operator, ByRef errorMsg As String)
            ph1Operator = Nothing
            ph2Operator = Nothing

            If diaImage IsNot Nothing Then
                Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage) 'removed 9/14/2018
                'If rl IsNot Nothing Then 'removed IF 9/14/2018
                Dim diaOperators As List(Of Diamond.Common.Objects.Policy.Operator) = AllDiamondOperators(diaImage, level:=MultiStateLevel.GoverningStateLevel) 'added 9/14/2018
                'If rl.Operators IsNot Nothing AndAlso rl.Operators.Count > 0 Then
                'updated 9/14/2018
                If diaOperators IsNot Nothing AndAlso diaOperators.Count > 0 Then
                    'For Each a As Diamond.Common.Objects.Policy.Operator In rl.Operators
                    'updated 9/14/2018
                    For Each o As Diamond.Common.Objects.Policy.Operator In diaOperators
                        If ph1Operator Is Nothing OrElse ph2Operator Is Nothing Then
                            Dim isPolicyholder1 As Boolean = False
                            Dim isPolicyholder2 As Boolean = False
                            CheckRelationshipTypeId(o.RelationshipTypeId.ToString, isPolicyholder1, isPolicyholder2)
                            If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                                If isPolicyholder1 = True AndAlso ph1Operator Is Nothing Then
                                    ph1Operator = o
                                End If
                                If isPolicyholder2 = True AndAlso ph2Operator Is Nothing Then
                                    ph2Operator = o
                                End If
                                If ph1Operator IsNot Nothing AndAlso ph2Operator IsNot Nothing Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                Else
                    errorMsg = "DiamondImage Operators list is empty"
                End If
                'Else
                '    errorMsg = "DiamondImage RiskLevel is empty"
                'End If
            Else
                errorMsg = "please provide a valid Diamond image"
            End If
        End Sub
        'added 9/10/2018
        Public Sub LoadPolicyholderDriversFromQuickQuoteObject_OptionallySendSubQuotes(ByVal qq As QuickQuoteObject, ByRef ph1Driver As QuickQuoteDriver, ByRef ph2Driver As QuickQuoteDriver, ByRef errorMsg As String, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing)
            ph1Driver = Nothing
            ph2Driver = Nothing

            If qq IsNot Nothing Then
                Dim qqDrivers As List(Of QuickQuoteDriver) = AllQuickQuoteDrivers(qq, subQuotes:=subQuotes, level:=MultiStateLevel.GoverningStateLevel) 'added 9/14/2018
                'If qq.Drivers IsNot Nothing AndAlso qq.Drivers.Count > 0 Then
                'updated 9/14/2018
                If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                    'For Each d As QuickQuoteDriver In qq.Drivers
                    'updated 9/14/2018
                    For Each d As QuickQuoteDriver In qqDrivers
                        If ph1Driver Is Nothing OrElse ph2Driver Is Nothing Then
                            Dim isPolicyholder1 As Boolean = False
                            Dim isPolicyholder2 As Boolean = False
                            CheckRelationshipTypeId(d.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
                            If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                                If isPolicyholder1 = True AndAlso ph1Driver Is Nothing Then
                                    ph1Driver = d
                                End If
                                If isPolicyholder2 = True AndAlso ph2Driver Is Nothing Then
                                    ph2Driver = d
                                End If
                                If ph1Driver IsNot Nothing AndAlso ph2Driver IsNot Nothing Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                Else
                    errorMsg = "QuickQuote Drivers list is empty"
                End If
            Else
                errorMsg = "please provide a valid QuickQuoteObject"
            End If
        End Sub
        Public Sub LoadPolicyholderApplicantsFromQuickQuoteObject_OptionallySendSubQuotes(ByVal qq As QuickQuoteObject, ByRef ph1Applicant As QuickQuoteApplicant, ByRef ph2Applicant As QuickQuoteApplicant, ByRef errorMsg As String, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing)
            ph1Applicant = Nothing
            ph2Applicant = Nothing

            If qq IsNot Nothing Then
                Dim qqApplicants As List(Of QuickQuoteApplicant) = AllQuickQuoteApplicants(qq, subQuotes:=subQuotes, level:=MultiStateLevel.GoverningStateLevel) 'added 9/14/2018
                'If qq.Applicants IsNot Nothing AndAlso qq.Applicants.Count > 0 Then
                'updated 9/14/2018
                If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                    'For Each a As QuickQuoteApplicant In qq.Applicants
                    'updated 9/14/2018
                    For Each a As QuickQuoteApplicant In qqApplicants
                        If ph1Applicant Is Nothing OrElse ph2Applicant Is Nothing Then
                            Dim isPolicyholder1 As Boolean = False
                            Dim isPolicyholder2 As Boolean = False
                            CheckRelationshipTypeId(a.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
                            If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                                If isPolicyholder1 = True AndAlso ph1Applicant Is Nothing Then
                                    ph1Applicant = a
                                End If
                                If isPolicyholder2 = True AndAlso ph2Applicant Is Nothing Then
                                    ph2Applicant = a
                                End If
                                If ph1Applicant IsNot Nothing AndAlso ph2Applicant IsNot Nothing Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                Else
                    errorMsg = "QuickQuote Applicants list is empty"
                End If
            Else
                errorMsg = "please provide a valid QuickQuoteObject"
            End If
        End Sub
        Public Sub LoadPolicyholderOperatorsFromQuickQuoteObject_OptionallySendSubQuotes(ByVal qq As QuickQuoteObject, ByRef ph1Operator As QuickQuoteOperator, ByRef ph2Operator As QuickQuoteOperator, ByRef errorMsg As String, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing)
            ph1Operator = Nothing
            ph2Operator = Nothing

            If qq IsNot Nothing Then
                Dim qqOperators As List(Of QuickQuoteOperator) = AllQuickQuoteOperators(qq, subQuotes:=subQuotes, level:=MultiStateLevel.GoverningStateLevel) 'added 9/14/2018
                'If qq.Operators IsNot Nothing AndAlso qq.Operators.Count > 0 Then
                'updated 9/14/2018
                If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                    'For Each a As QuickQuoteOperator In qq.Operators
                    'updated 9/14/2018
                    For Each o As QuickQuoteOperator In qqOperators
                        If ph1Operator Is Nothing OrElse ph2Operator Is Nothing Then
                            Dim isPolicyholder1 As Boolean = False
                            Dim isPolicyholder2 As Boolean = False
                            CheckRelationshipTypeId(o.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
                            If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                                If isPolicyholder1 = True AndAlso ph1Operator Is Nothing Then
                                    ph1Operator = o
                                End If
                                If isPolicyholder2 = True AndAlso ph2Operator Is Nothing Then
                                    ph2Operator = o
                                End If
                                If ph1Operator IsNot Nothing AndAlso ph2Operator IsNot Nothing Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                Else
                    errorMsg = "QuickQuote Operators list is empty"
                End If
            Else
                errorMsg = "please provide a valid QuickQuoteObject"
            End If
        End Sub
        Public Sub CheckRelationshipTypeId(ByVal relationshipTypeId As String, ByRef isPolicyholder1 As Boolean, ByRef isPolicyholder2 As Boolean)
            isPolicyholder1 = False
            isPolicyholder2 = False

            If relationshipTypeId <> "" AndAlso IsNumeric(relationshipTypeId) = True Then
                'Dim relationshipType As String = GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteDriver, QuickQuoteHelperClass.QuickQuotePropertyName.RelationshipTypeId, relationshipTypeId)
                'If relationshipType <> "" AndAlso Len(relationshipType) >= 12 AndAlso Left(UCase(relationshipType), 12) = "POLICYHOLDER" Then
                '    'could also write like this if not wanting to use Diamond ids
                'End If
                Select Case CInt(relationshipTypeId)
                    Case 8 'Policyholder
                        isPolicyholder1 = True
                    Case 5 'Policyholder #2
                        isPolicyholder2 = True

                        '0	None
                        '1	Brother/Sister of Policyholder
                        '2	Child of Policyholder
                        '3	Employee of Policyholder
                        '4	Parent/Guardian of Policyholder
                        '5	Policyholder #2
                        '6	No Vehicle Operator Involved
                        '7	Other Relation to Policyholder
                        '8	Policyholder
                        '9	Spouse of Policyholder
                        '10	Relationship Not Known
                        '11	Not Related to Policyholder
                        '12	Employee
                End Select
            End If
        End Sub
        Public Function IsQuickQuoteDriverPolicyholder1(ByVal qqDriver As QuickQuoteDriver) As Boolean 'added 12/11/2014
            Dim isPolicyholder1 As Boolean = False

            'If qqDriver IsNot Nothing Then
            '    CheckRelationshipTypeId(qqDriver.RelationshipTypeId, isPolicyholder1, False)
            'End If
            Dim isPolicyholder As Boolean = IsQuickQuoteDriverPolicyholder(qqDriver, isPolicyholder1, False)

            Return isPolicyholder1
        End Function
        Public Function IsQuickQuoteDriverPolicyholder2(ByVal qqDriver As QuickQuoteDriver) As Boolean 'added 12/11/2014
            Dim isPolicyholder2 As Boolean = False

            'If qqDriver IsNot Nothing Then
            '    CheckRelationshipTypeId(qqDriver.RelationshipTypeId, False, isPolicyholder2)
            'End If
            Dim isPolicyholder As Boolean = IsQuickQuoteDriverPolicyholder(qqDriver, False, isPolicyholder2)

            Return isPolicyholder2
        End Function
        Public Function IsQuickQuoteDriverPolicyholder(ByVal qqDriver As QuickQuoteDriver, Optional ByRef isPolicyholder1 As Boolean = False, Optional ByRef isPolicyholder2 As Boolean = False) As Boolean 'added 12/11/2014
            Dim isPolicyholder As Boolean = False
            isPolicyholder1 = False
            isPolicyholder2 = False

            If qqDriver IsNot Nothing Then
                CheckRelationshipTypeId(qqDriver.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        Public Function IsQuickQuoteApplicantPolicyholder1(ByVal qqApplicant As QuickQuoteApplicant) As Boolean 'added 12/11/2014
            Dim isPolicyholder1 As Boolean = False

            'If qqApplicant IsNot Nothing Then
            '    CheckRelationshipTypeId(qqApplicant.RelationshipTypeId, isPolicyholder1, False)
            'End If
            Dim isPolicyholder As Boolean = IsQuickQuoteApplicantPolicyholder(qqApplicant, isPolicyholder1, False)

            Return isPolicyholder1
        End Function
        Public Function IsQuickQuoteApplicantPolicyholder2(ByVal qqApplicant As QuickQuoteApplicant) As Boolean 'added 12/11/2014
            Dim isPolicyholder2 As Boolean = False

            'If qqApplicant IsNot Nothing Then
            '    CheckRelationshipTypeId(qqApplicant.RelationshipTypeId, False, isPolicyholder2)
            'End If
            Dim isPolicyholder As Boolean = IsQuickQuoteApplicantPolicyholder(qqApplicant, False, isPolicyholder2)

            Return isPolicyholder2
        End Function
        Public Function IsQuickQuoteApplicantPolicyholder(ByVal qqApplicant As QuickQuoteApplicant, Optional ByRef isPolicyholder1 As Boolean = False, Optional ByRef isPolicyholder2 As Boolean = False) As Boolean 'added 12/11/2014
            Dim isPolicyholder As Boolean = False
            isPolicyholder1 = False
            isPolicyholder2 = False

            If qqApplicant IsNot Nothing Then
                CheckRelationshipTypeId(qqApplicant.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        'added 12/24/2014
        Public Function IsQuickQuoteOperatorPolicyholder1(ByVal qqOperator As QuickQuoteOperator) As Boolean
            Dim isPolicyholder1 As Boolean = False

            Dim isPolicyholder As Boolean = IsQuickQuoteOperatorPolicyholder(qqOperator, isPolicyholder1, False)

            Return isPolicyholder1
        End Function
        Public Function IsQuickQuoteOperatorPolicyholder2(ByVal qqOperator As QuickQuoteOperator) As Boolean
            Dim isPolicyholder2 As Boolean = False

            Dim isPolicyholder As Boolean = IsQuickQuoteOperatorPolicyholder(qqOperator, False, isPolicyholder2)

            Return isPolicyholder2
        End Function
        Public Function IsQuickQuoteOperatorPolicyholder(ByVal qqOperator As QuickQuoteOperator, Optional ByRef isPolicyholder1 As Boolean = False, Optional ByRef isPolicyholder2 As Boolean = False) As Boolean
            Dim isPolicyholder As Boolean = False
            isPolicyholder1 = False
            isPolicyholder2 = False

            If qqOperator IsNot Nothing Then
                CheckRelationshipTypeId(qqOperator.RelationshipTypeId, isPolicyholder1, isPolicyholder2)
                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        Public Function IsDiamondDriverPolicyholder1(ByVal diaDriver As Diamond.Common.Objects.Policy.Driver) As Boolean 'added 12/11/2014
            Dim isPolicyholder1 As Boolean = False

            'If diaDriver IsNot Nothing Then
            '    CheckRelationshipTypeId(diaDriver.RelationshipTypeId.ToString, isPolicyholder1, False)
            'End If
            Dim isPolicyholder As Boolean = IsDiamondDriverPolicyholder(diaDriver, isPolicyholder1, False)

            Return isPolicyholder1
        End Function
        Public Function IsDiamondDriverPolicyholder2(ByVal diaDriver As Diamond.Common.Objects.Policy.Driver) As Boolean 'added 12/11/2014
            Dim isPolicyholder2 As Boolean = False

            'If diaDriver IsNot Nothing Then
            '    CheckRelationshipTypeId(diaDriver.RelationshipTypeId.ToString, False, isPolicyholder2)
            'End If
            Dim isPolicyholder As Boolean = IsDiamondDriverPolicyholder(diaDriver, False, isPolicyholder2)

            Return isPolicyholder2
        End Function
        Public Function IsDiamondDriverPolicyholder(ByVal diaDriver As Diamond.Common.Objects.Policy.Driver, Optional ByRef isPolicyholder1 As Boolean = False, Optional ByRef isPolicyholder2 As Boolean = False) As Boolean 'added 12/11/2014
            Dim isPolicyholder As Boolean = False
            isPolicyholder1 = False
            isPolicyholder2 = False

            If diaDriver IsNot Nothing Then
                CheckRelationshipTypeId(diaDriver.RelationshipTypeId.ToString, isPolicyholder1, isPolicyholder2)
                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        Public Function IsDiamondApplicantPolicyholder1(ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant) As Boolean 'added 12/11/2014
            Dim isPolicyholder1 As Boolean = False

            'If diaApplicant IsNot Nothing Then
            '    CheckRelationshipTypeId(diaApplicant.RelationshipTypeId.ToString, isPolicyholder1, False)
            'End If
            Dim isPolicyholder As Boolean = IsDiamondApplicantPolicyholder(diaApplicant, isPolicyholder1, False)

            Return isPolicyholder1
        End Function
        Public Function IsDiamondApplicantPolicyholder2(ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant) As Boolean 'added 12/11/2014
            Dim isPolicyholder2 As Boolean = False

            'If diaApplicant IsNot Nothing Then
            '    CheckRelationshipTypeId(diaApplicant.RelationshipTypeId.ToString, False, isPolicyholder2)
            'End If
            Dim isPolicyholder As Boolean = IsDiamondApplicantPolicyholder(diaApplicant, False, isPolicyholder2)

            Return isPolicyholder2
        End Function
        Public Function IsDiamondApplicantPolicyholder(ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant, Optional ByRef isPolicyholder1 As Boolean = False, Optional ByRef isPolicyholder2 As Boolean = False) As Boolean 'added 12/11/2014
            Dim isPolicyholder As Boolean = False
            isPolicyholder1 = False
            isPolicyholder2 = False

            If diaApplicant IsNot Nothing Then
                CheckRelationshipTypeId(diaApplicant.RelationshipTypeId.ToString, isPolicyholder1, isPolicyholder2)
                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        'added 12/24/2014
        Public Function IsDiamondOperatorPolicyholder1(ByVal diaOperator As Diamond.Common.Objects.Policy.Operator) As Boolean 'added 12/11/2014
            Dim isPolicyholder1 As Boolean = False

            Dim isPolicyholder As Boolean = IsDiamondOperatorPolicyholder(diaOperator, isPolicyholder1, False)

            Return isPolicyholder1
        End Function
        Public Function IsDiamondOperatorPolicyholder2(ByVal diaOperator As Diamond.Common.Objects.Policy.Operator) As Boolean 'added 12/11/2014
            Dim isPolicyholder2 As Boolean = False

            Dim isPolicyholder As Boolean = IsDiamondOperatorPolicyholder(diaOperator, False, isPolicyholder2)

            Return isPolicyholder2
        End Function
        Public Function IsDiamondOperatorPolicyholder(ByVal diaOperator As Diamond.Common.Objects.Policy.Operator, Optional ByRef isPolicyholder1 As Boolean = False, Optional ByRef isPolicyholder2 As Boolean = False) As Boolean 'added 12/11/2014
            Dim isPolicyholder As Boolean = False
            isPolicyholder1 = False
            isPolicyholder2 = False

            If diaOperator IsNot Nothing Then
                CheckRelationshipTypeId(diaOperator.RelationshipTypeId.ToString, isPolicyholder1, isPolicyholder2)
                If isPolicyholder1 = True OrElse isPolicyholder2 = True Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        Public Sub CheckDriverExcludeTypeId(ByVal driverExcludeTypeId As String, ByRef isRated As Boolean)
            isRated = False

            If driverExcludeTypeId <> "" AndAlso IsNumeric(driverExcludeTypeId) = True Then
                'Dim driverExcludeType As String = GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteDriver, QuickQuoteHelperClass.QuickQuotePropertyName.DriverExcludeTypeId, driverExcludeTypeId)
                'If UCase(driverExcludeType) = "RATED" Then
                '    'could also write like this if not wanting to use Diamond ids
                'End If
                Select Case CInt(driverExcludeTypeId)
                    Case 0 'NA

                    Case 1 'Rated
                        isRated = True
                    Case 2 'NonRated

                    Case 3 'Excluded

                    Case 4 'Included

                    Case 5 'Watch
                End Select
            End If
        End Sub
        '12/11/2014 - code moved to QuickQuoteThirdPartyReportHelperClass
        'Public Sub LoadThirdPartyReportLogRecordFromQuickQuoteName1(ByVal qqName As QuickQuoteName, ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord)
        '    If qqName IsNot Nothing Then
        '        If thirdPartyReportLogRecord Is Nothing Then
        '            thirdPartyReportLogRecord = New QuickQuoteThirdPartyReportLogRecord
        '        End If
        '        With thirdPartyReportLogRecord
        '            SetNameFieldsForQuickQuoteThirdPartyReportLogRecord(qqName, .name1First, .name1Middle, .name1Last, .name1DOB, .name1SSN)
        '        End With
        '    End If
        'End Sub
        'Public Sub LoadThirdPartyReportLogRecordFromQuickQuoteName2(ByVal qqName As QuickQuoteName, ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord)
        '    If qqName IsNot Nothing Then
        '        If thirdPartyReportLogRecord Is Nothing Then
        '            thirdPartyReportLogRecord = New QuickQuoteThirdPartyReportLogRecord
        '        End If
        '        With thirdPartyReportLogRecord
        '            SetNameFieldsForQuickQuoteThirdPartyReportLogRecord(qqName, .name2First, .name2Middle, .name2Last, .name2DOB, .name2SSN)
        '        End With
        '    End If
        'End Sub
        'Public Sub LoadThirdPartyReportLogRecordFromQuickQuoteAddress(ByVal qqAddress As QuickQuoteAddress, ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord)
        '    If qqAddress IsNot Nothing Then
        '        If thirdPartyReportLogRecord Is Nothing Then
        '            thirdPartyReportLogRecord = New QuickQuoteThirdPartyReportLogRecord
        '        End If
        '        With thirdPartyReportLogRecord
        '            '.addressStreetNum = qqAddress.HouseNum
        '            '.addressStreetName = qqAddress.StreetName
        '            '.addressApartmentNum = qqAddress.ApartmentNumber
        '            '.addressCity = qqAddress.City
        '            '.addressState = qqAddress.State
        '            '.addressZip = qqAddress.Zip
        '            SetAddressFieldsForQuickQuoteThirdPartyReportLogRecord(qqAddress, .addressStreetNum, .addressStreetName, .addressApartmentNum, .addressCity, .addressState, .addressZip)
        '        End With
        '    End If
        'End Sub
        'Public Sub LoadThirdPartyReportLogRecordFromDiamondImageName1(ByVal diaName As Diamond.Common.Objects.Name, ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord)
        '    If diaName IsNot Nothing Then
        '        If thirdPartyReportLogRecord Is Nothing Then
        '            thirdPartyReportLogRecord = New QuickQuoteThirdPartyReportLogRecord
        '        End If
        '        With thirdPartyReportLogRecord
        '            SetNameFieldsForDiamondImageThirdPartyReportLogRecord(diaName, .name1First, .name1Middle, .name1Last, .name1DOB, .name1SSN)
        '        End With
        '    End If
        'End Sub
        'Public Sub LoadThirdPartyReportLogRecordFromDiamondImageName2(ByVal diaName As Diamond.Common.Objects.Name, ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord)
        '    If diaName IsNot Nothing Then
        '        If thirdPartyReportLogRecord Is Nothing Then
        '            thirdPartyReportLogRecord = New QuickQuoteThirdPartyReportLogRecord
        '        End If
        '        With thirdPartyReportLogRecord
        '            SetNameFieldsForDiamondImageThirdPartyReportLogRecord(diaName, .name2First, .name2Middle, .name2Last, .name2DOB, .name2SSN)
        '        End With
        '    End If
        'End Sub
        'Public Sub LoadThirdPartyReportLogRecordFromDiamondImageAddress(ByVal diaAddress As Diamond.Common.Objects.Address, ByRef thirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord)
        '    If diaAddress IsNot Nothing Then
        '        If thirdPartyReportLogRecord Is Nothing Then
        '            thirdPartyReportLogRecord = New QuickQuoteThirdPartyReportLogRecord
        '        End If
        '        With thirdPartyReportLogRecord
        '            SetAddressFieldsForDiamondImageThirdPartyReportLogRecord(diaAddress, .addressStreetNum, .addressStreetName, .addressApartmentNum, .addressCity, .addressState, .addressZip)
        '        End With
        '    End If
        'End Sub
        'Public Sub SetNameFieldsForQuickQuoteThirdPartyReportLogRecord(ByVal qqName As QuickQuoteName, ByRef first As String, ByRef middle As String, ByRef last As String, ByRef dob As String, ByRef ssn As String)
        '    first = ""
        '    middle = ""
        '    last = ""
        '    dob = ""
        '    ssn = ""

        '    If qqName IsNot Nothing Then
        '        With qqName
        '            first = .FirstName
        '            middle = .MiddleName
        '            last = .LastName
        '            dob = .BirthDate
        '            ssn = .TaxNumber
        '        End With
        '    End If
        'End Sub
        'Public Sub SetAddressFieldsForQuickQuoteThirdPartyReportLogRecord(ByVal qqAddress As QuickQuoteAddress, ByRef streetNum As String, ByRef streetName As String, ByRef aptNum As String, ByRef city As String, ByRef state As String, ByRef zip As String)
        '    streetNum = ""
        '    streetName = ""
        '    aptNum = ""
        '    city = ""
        '    state = ""
        '    zip = ""

        '    If qqAddress IsNot Nothing Then
        '        With qqAddress
        '            streetNum = .HouseNum
        '            streetName = .StreetName
        '            aptNum = .ApartmentNumber
        '            city = .City
        '            state = .State
        '            zip = .Zip
        '        End With
        '    End If
        'End Sub
        'Public Sub SetNameFieldsForDiamondImageThirdPartyReportLogRecord(ByVal diaName As Diamond.Common.Objects.Name, ByRef first As String, ByRef middle As String, ByRef last As String, ByRef dob As String, ByRef ssn As String)
        '    first = ""
        '    middle = ""
        '    last = ""
        '    dob = ""
        '    ssn = ""

        '    If diaName IsNot Nothing Then
        '        With diaName
        '            first = .FirstName
        '            middle = .MiddleName
        '            last = .LastName
        '            If .BirthDate <> Nothing AndAlso IsDate(.BirthDate.ToString) Then
        '                dob = .BirthDate.ToString
        '            End If
        '            ssn = .TaxNumber
        '        End With
        '    End If
        'End Sub
        'Public Sub SetAddressFieldsForDiamondImageThirdPartyReportLogRecord(ByVal diaAddress As Diamond.Common.Objects.Address, ByRef streetNum As String, ByRef streetName As String, ByRef aptNum As String, ByRef city As String, ByRef state As String, ByRef zip As String)
        '    streetNum = ""
        '    streetName = ""
        '    aptNum = ""
        '    city = ""
        '    state = ""
        '    zip = ""

        '    If diaAddress IsNot Nothing Then
        '        With diaAddress
        '            streetNum = .HouseNumber
        '            streetName = .StreetName
        '            aptNum = .ApartmentNumber
        '            city = .City
        '            'state = GetStaticDataTextForValue(QuickQuote.CommonMethods.QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteAddress, QuickQuotePropertyName.StateId, .StateId.ToString)
        '            state = .StateName 'haven't used this before, but is ReadOnly so I'd assume it's looking it up based on the StateId
        '            zip = .Zip
        '        End With
        '    End If
        'End Sub
        Public Function QuickQuoteDriverForActiveNum(ByVal qqDrivers As List(Of QuickQuoteDriver), ByVal activeNum As Integer) As QuickQuoteDriver
            Dim qqDriver As QuickQuoteDriver = Nothing

            If activeNum > 0 AndAlso qqDrivers IsNot Nothing AndAlso qqDrivers.Count >= activeNum Then
                qqDriver = qqDrivers.Item(activeNum - 1)
            End If

            Return qqDriver
        End Function
        Public Function QuickQuoteApplicantForActiveNum(ByVal qqApplicants As List(Of QuickQuoteApplicant), ByVal activeNum As Integer) As QuickQuoteApplicant
            Dim qqApplicant As QuickQuoteApplicant = Nothing

            If activeNum > 0 AndAlso qqApplicants IsNot Nothing AndAlso qqApplicants.Count >= activeNum Then
                qqApplicant = qqApplicants.Item(activeNum - 1)
            End If

            Return qqApplicant
        End Function
        Public Function QuickQuoteDriverForActiveNum(ByVal qq As QuickQuoteObject, ByVal activeNum As Integer) As QuickQuoteDriver
            Dim qqDriver As QuickQuoteDriver = Nothing

            If qq IsNot Nothing Then
                'qqDriver = QuickQuoteDriverForActiveNum(qq.Drivers, activeNum)
                'updated 9/14/2018
                qqDriver = QuickQuoteDriverForActiveNum(AllQuickQuoteDrivers(qq, level:=MultiStateLevel.GoverningStateLevel), activeNum)
            End If

            Return qqDriver
        End Function
        Public Function QuickQuoteApplicantForActiveNum(ByVal qq As QuickQuoteObject, ByVal activeNum As Integer) As QuickQuoteApplicant
            Dim qqApplicant As QuickQuoteApplicant = Nothing

            If qq IsNot Nothing Then
                'qqApplicant = QuickQuoteApplicantForActiveNum(qq.Applicants, activeNum)
                'updated 9/14/2018
                qqApplicant = QuickQuoteApplicantForActiveNum(AllQuickQuoteApplicants(qq, level:=MultiStateLevel.GoverningStateLevel), activeNum)
            End If

            Return qqApplicant
        End Function
        'added 8/27/2015
        Public Function QuickQuoteLocationForActiveNum(ByVal qqLocations As List(Of QuickQuoteLocation), ByVal activeNum As Integer) As QuickQuoteLocation
            Dim qqLocation As QuickQuoteLocation = Nothing

            If activeNum > 0 AndAlso qqLocations IsNot Nothing AndAlso qqLocations.Count >= activeNum Then
                qqLocation = qqLocations.Item(activeNum - 1)
            End If

            Return qqLocation
        End Function
        Public Function QuickQuoteLocationForActiveNum(ByVal qq As QuickQuoteObject, ByVal activeNum As Integer) As QuickQuoteLocation
            Dim qqLocation As QuickQuoteLocation = Nothing

            If qq IsNot Nothing Then
                'qqLocation = QuickQuoteLocationForActiveNum(qq.Locations, activeNum)
                'updated 9/14/2018
                qqLocation = QuickQuoteLocationForActiveNum(AllQuickQuoteLocations(qq, level:=MultiStateLevel.AllStates), activeNum)
            End If

            Return qqLocation
        End Function
        Public Function QuickQuoteBuildingForActiveNum(ByVal qqBuildings As List(Of QuickQuoteBuilding), ByVal activeNum As Integer) As QuickQuoteBuilding
            Dim qqBuilding As QuickQuoteBuilding = Nothing

            If activeNum > 0 AndAlso qqBuildings IsNot Nothing AndAlso qqBuildings.Count >= activeNum Then
                qqBuilding = qqBuildings.Item(activeNum - 1)
            End If

            Return qqBuilding
        End Function
        Public Function QuickQuoteBuildingForActiveNum(ByVal qqLocation As QuickQuoteLocation, ByVal activeNum As Integer) As QuickQuoteBuilding
            Dim qqBuilding As QuickQuoteBuilding = Nothing

            If qqLocation IsNot Nothing Then
                qqBuilding = QuickQuoteBuildingForActiveNum(qqLocation.Buildings, activeNum)
            End If

            Return qqBuilding
        End Function
        Public Function QuickQuoteBuildingForActiveNum(ByVal qq As QuickQuoteObject, ByVal locNum As Integer, ByVal activeNum As Integer) As QuickQuoteBuilding
            Dim qqBuilding As QuickQuoteBuilding = Nothing

            If qq IsNot Nothing Then
                Dim qqLocation As QuickQuoteLocation = Nothing
                'qqLocation = QuickQuoteLocationForActiveNum(qq.Locations, locNum)
                'updated 9/14/2018
                qqLocation = QuickQuoteLocationForActiveNum(AllQuickQuoteLocations(qq, level:=MultiStateLevel.AllStates), locNum)
                If qqLocation IsNot Nothing Then
                    qqBuilding = QuickQuoteBuildingForActiveNum(qqLocation.Buildings, activeNum)
                End If
            End If

            Return qqBuilding
        End Function
        'Public Function DiamondDriverForActiveNum(ByVal diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Driver
        '    Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

        '    If activeNum > 0 AndAlso diaDrivers IsNot Nothing AndAlso diaDrivers.Count >= activeNum Then
        '        diaDriver = diaDrivers.Item(activeNum - 1)
        '    End If

        '    Return diaDriver
        'End Function
        'Public Function DiamondApplicantForActiveNum(ByVal diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Applicant
        '    Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

        '    If activeNum > 0 AndAlso diaApplicants IsNot Nothing AndAlso diaApplicants.Count >= activeNum Then
        '        diaApplicant = diaApplicants.Item(activeNum - 1)
        '    End If

        '    Return diaApplicant
        'End Function
        Public Function DiamondDriverForActiveNum(ByVal diaDrivers As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Driver), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Driver
            Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

            If activeNum > 0 AndAlso diaDrivers IsNot Nothing AndAlso diaDrivers.Count >= activeNum Then
                Dim activeCount As Integer = 0
                For Each d As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    If d.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                        activeCount += 1
                        If activeNum = activeCount Then
                            diaDriver = d
                            Exit For 'added 12/9/2014
                        End If
                    End If
                Next
            End If

            Return diaDriver
        End Function
        Public Function DiamondDriverForActiveNum_GenericList(ByVal diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Driver 'added 9/14/2018
            Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

            If activeNum > 0 AndAlso diaDrivers IsNot Nothing AndAlso diaDrivers.Count >= activeNum Then
                Dim activeCount As Integer = 0
                For Each d As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    If d.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                        activeCount += 1
                        If activeNum = activeCount Then
                            diaDriver = d
                            Exit For
                        End If
                    End If
                Next
            End If

            Return diaDriver
        End Function
        Public Function DiamondApplicantForActiveNum(ByVal diaApplicants As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Applicant), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Applicant
            Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

            If activeNum > 0 AndAlso diaApplicants IsNot Nothing AndAlso diaApplicants.Count >= activeNum Then
                Dim activeCount As Integer = 0
                For Each a As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    If a.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                        activeCount += 1
                        If activeNum = activeCount Then
                            diaApplicant = a
                            Exit For 'added 12/9/2014
                        End If
                    End If
                Next
            End If

            Return diaApplicant
        End Function
        Public Function DiamondApplicantForActiveNum_GenericList(ByVal diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Applicant 'added 9/14/2018
            Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

            If activeNum > 0 AndAlso diaApplicants IsNot Nothing AndAlso diaApplicants.Count >= activeNum Then
                Dim activeCount As Integer = 0
                For Each a As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    If a.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                        activeCount += 1
                        If activeNum = activeCount Then
                            diaApplicant = a
                            Exit For
                        End If
                    End If
                Next
            End If

            Return diaApplicant
        End Function
        Public Function DiamondDriverForActiveNum(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Driver
            Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

            'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)
            'If rl IsNot Nothing Then
            '    diaDriver = DiamondDriverForActiveNum(rl.Drivers, activeNum)
            'End If
            'updated 9/14/2018
            diaDriver = DiamondDriverForActiveNum_GenericList(AllDiamondDrivers(diaImage, level:=MultiStateLevel.GoverningStateLevel), activeNum)

            Return diaDriver
        End Function
        Public Function DiamondApplicantForActiveNum(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Applicant
            Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

            'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)
            'If rl IsNot Nothing Then
            '    diaApplicant = DiamondApplicantForActiveNum(rl.Applicants, activeNum)
            'End If
            'updated 9/14/2018
            diaApplicant = DiamondApplicantForActiveNum_GenericList(AllDiamondApplicants(diaImage, level:=MultiStateLevel.GoverningStateLevel), activeNum)

            Return diaApplicant
        End Function
        Public Function DiamondRiskLevelForImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Diamond.Common.Objects.Policy.RiskLevel
            Dim rl As Diamond.Common.Objects.Policy.RiskLevel = Nothing

            'If diaImage IsNot Nothing AndAlso diaImage.LOB IsNot Nothing AndAlso diaImage.LOB.RiskLevel IsNot Nothing Then
            '    rl = diaImage.LOB.RiskLevel
            'End If
            'updated 12/29/2014 to use new methods
            Dim lob As Diamond.Common.Objects.Policy.LOB = DiamondLOBForImage(diaImage)
            rl = DiamondRiskLevelForLOB(lob)

            Return rl
        End Function
        'added 12/29/2014
        Public Function DiamondPolicyLevelForImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Diamond.Common.Objects.Policy.PolicyLevel
            Dim pl As Diamond.Common.Objects.Policy.PolicyLevel = Nothing

            'If diaImage IsNot Nothing AndAlso diaImage.LOB IsNot Nothing AndAlso diaImage.LOB.PolicyLevel IsNot Nothing Then
            '    pl = diaImage.LOB.PolicyLevel
            'End If
            'updated 12/29/2014 to use new methods
            Dim lob As Diamond.Common.Objects.Policy.LOB = DiamondLOBForImage(diaImage)
            pl = DiamondPolicyLevelForLOB(lob)

            Return pl
        End Function
        Public Function DiamondLOBForImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Diamond.Common.Objects.Policy.LOB
            Dim lob As Diamond.Common.Objects.Policy.LOB = Nothing

            If diaImage IsNot Nothing AndAlso diaImage.LOB IsNot Nothing Then
                lob = diaImage.LOB
            End If

            Return lob
        End Function
        Public Function DiamondRiskLevelForLOB(ByVal diaLOB As Diamond.Common.Objects.Policy.LOB) As Diamond.Common.Objects.Policy.RiskLevel
            Dim rl As Diamond.Common.Objects.Policy.RiskLevel = Nothing

            If diaLOB IsNot Nothing AndAlso diaLOB.RiskLevel IsNot Nothing Then
                rl = diaLOB.RiskLevel
            End If

            Return rl
        End Function
        Public Function DiamondPolicyLevelForLOB(ByVal diaLOB As Diamond.Common.Objects.Policy.LOB) As Diamond.Common.Objects.Policy.PolicyLevel
            Dim pl As Diamond.Common.Objects.Policy.PolicyLevel = Nothing

            If diaLOB IsNot Nothing AndAlso diaLOB.PolicyLevel IsNot Nothing Then
                pl = diaLOB.PolicyLevel
            End If

            Return pl
        End Function
        '12/11/2014 - code moved to QuickQuoteThirdPartyReportHelperClass
        'Enum ThirdPartyValidationType
        '    None = 0
        '    Name1First = 1
        '    Name1Middle = 2
        '    Name1Last = 3
        '    Name1DOB = 4
        '    Name1SSN = 5
        '    Name2First = 6
        '    Name2Middle = 7
        '    Name2Last = 8
        '    Name2DOB = 9
        '    Name2SSN = 10
        '    AddressStreetNum = 11
        '    AddressStreetName = 12
        '    AddressApartmentNum = 13
        '    AddressCity = 14
        '    AddressState = 15
        '    AddressZip = 16
        'End Enum
        'Enum ThirdPartyComparisonType
        '    Neither = 0
        '    Main = 1
        '    Compare = 2
        '    Both = 3
        'End Enum
        'Public Function HasThirdPartyDataChange(ByVal tprlr As QuickQuoteThirdPartyReportLogRecord, ByVal tprlrCompare As QuickQuoteThirdPartyReportLogRecord, ByVal validationType As ThirdPartyValidationType, Optional ByRef invalidObjectComparisonType As ThirdPartyComparisonType = ThirdPartyComparisonType.Neither) As Boolean
        '    Dim hasChange As Boolean = False

        '    If tprlr IsNot Nothing AndAlso tprlrCompare IsNot Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Neither
        '    ElseIf tprlr Is Nothing AndAlso tprlrCompare Is Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Both
        '    ElseIf tprlr Is Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Main
        '    ElseIf tprlrCompare Is Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Compare
        '    End If

        '    If validationType <> Nothing AndAlso validationType <> ThirdPartyValidationType.None Then
        '        If invalidObjectComparisonType = ThirdPartyComparisonType.Neither Then
        '            Select Case validationType
        '                Case ThirdPartyValidationType.Name1First
        '                    If UCase(tprlr.name1First) <> UCase(tprlrCompare.name1First) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name1Middle
        '                    If UCase(tprlr.name1Middle) <> UCase(tprlrCompare.name1Middle) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name1Last
        '                    If UCase(tprlr.name1Last) <> UCase(tprlrCompare.name1Last) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name1DOB
        '                    Dim validDate1 As Boolean = False
        '                    Dim validDate2 As Boolean = False
        '                    If tprlr.name1DOB <> "" AndAlso IsDate(tprlr.name1DOB) = True Then
        '                        validDate1 = True
        '                    End If
        '                    If tprlrCompare.name1DOB <> "" AndAlso IsDate(tprlrCompare.name1DOB) = True Then
        '                        validDate2 = True
        '                    End If
        '                    If validDate1 = True AndAlso validDate2 = True Then
        '                        If CDate(tprlr.name1DOB) <> CDate(tprlrCompare.name1DOB) Then
        '                            hasChange = True
        '                        End If
        '                    ElseIf validDate1 = True OrElse validDate2 = True Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name1SSN
        '                    If UCase(Replace(tprlr.name1SSN, "-", "")) <> UCase(Replace(tprlrCompare.name1SSN, "-", "")) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name2First
        '                    If UCase(tprlr.name2First) <> UCase(tprlrCompare.name2First) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name2Middle
        '                    If UCase(tprlr.name2Middle) <> UCase(tprlrCompare.name2Middle) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name2Last
        '                    If UCase(tprlr.name2Last) <> UCase(tprlrCompare.name2Last) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name2DOB
        '                    Dim validDate1 As Boolean = False
        '                    Dim validDate2 As Boolean = False
        '                    If tprlr.name2DOB <> "" AndAlso IsDate(tprlr.name2DOB) = True Then
        '                        validDate1 = True
        '                    End If
        '                    If tprlrCompare.name2DOB <> "" AndAlso IsDate(tprlrCompare.name2DOB) = True Then
        '                        validDate2 = True
        '                    End If
        '                    If validDate1 = True AndAlso validDate2 = True Then
        '                        If CDate(tprlr.name2DOB) <> CDate(tprlrCompare.name2DOB) Then
        '                            hasChange = True
        '                        End If
        '                    ElseIf validDate1 = True OrElse validDate2 = True Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.Name2SSN
        '                    If UCase(Replace(tprlr.name2SSN, "-", "")) <> UCase(Replace(tprlrCompare.name2SSN, "-", "")) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.AddressStreetNum
        '                    If UCase(tprlr.addressStreetNum) <> UCase(tprlrCompare.addressStreetNum) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.AddressStreetName
        '                    If UCase(tprlr.addressStreetName) <> UCase(tprlrCompare.addressStreetName) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.AddressApartmentNum
        '                    If UCase(tprlr.addressApartmentNum) <> UCase(tprlrCompare.addressApartmentNum) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.AddressCity
        '                    If UCase(tprlr.addressCity) <> UCase(tprlrCompare.addressCity) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.AddressState
        '                    If UCase(tprlr.addressState) <> UCase(tprlrCompare.addressState) Then
        '                        hasChange = True
        '                    End If
        '                Case ThirdPartyValidationType.AddressZip
        '                    If UCase(Replace(tprlr.addressZip, "-", "")) <> UCase(Replace(tprlrCompare.addressZip, "-", "")) Then
        '                        hasChange = True
        '                    End If
        '            End Select
        '        ElseIf invalidObjectComparisonType = ThirdPartyComparisonType.Main OrElse invalidObjectComparisonType = ThirdPartyComparisonType.Compare Then 'may not use
        '            hasChange = True
        '        End If
        '    End If

        '    Return hasChange
        'End Function
        'Public Function HasThirdPartyDataChange(ByVal tprlr As QuickQuoteThirdPartyReportLogRecord, ByVal tprlrCompare As QuickQuoteThirdPartyReportLogRecord, ByVal validationTypes As List(Of ThirdPartyValidationType), Optional ByRef invalidObjectComparisonType As ThirdPartyComparisonType = ThirdPartyComparisonType.Neither) As Boolean
        '    Dim hasChange As Boolean = False

        '    If tprlr IsNot Nothing AndAlso tprlrCompare IsNot Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Neither
        '    ElseIf tprlr Is Nothing AndAlso tprlrCompare Is Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Both
        '    ElseIf tprlr Is Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Main
        '    ElseIf tprlrCompare Is Nothing Then
        '        invalidObjectComparisonType = ThirdPartyComparisonType.Compare
        '    End If

        '    If validationTypes IsNot Nothing AndAlso validationTypes.Count > 0 Then
        '        If invalidObjectComparisonType = ThirdPartyComparisonType.Neither Then
        '            For Each vt As ThirdPartyValidationType In validationTypes
        '                hasChange = HasThirdPartyDataChange(tprlr, tprlrCompare, vt)
        '                If hasChange = True Then
        '                    Exit For
        '                End If
        '            Next
        '        ElseIf invalidObjectComparisonType = ThirdPartyComparisonType.Main OrElse invalidObjectComparisonType = ThirdPartyComparisonType.Compare Then 'may not use
        '            hasChange = True
        '        End If
        '    End If

        '    Return hasChange
        'End Function
        'Public Function ThirdPartyValidationTypes_Prefill() As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    Return validationTypes
        'End Function
        'Public Function ThirdPartyValidationTypes_CreditAuto() As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    '12/10/2014 note: method used while rating already sees if last name and dob is different between existing image and what's currently on the QQ object
        '    'validationTypes = New List(Of ThirdPartyValidationType)
        '    'validationTypes.Add(ThirdPartyValidationType.Name1Last)
        '    'validationTypes.Add(ThirdPartyValidationType.Name1DOB)

        '    Return validationTypes
        'End Function
        'Public Function ThirdPartyValidationTypes_CreditProperty() As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    '12/10/2014 note: method used while rating already sees if last name and dob is different between existing image and what's currently on the QQ object
        '    'validationTypes = New List(Of ThirdPartyValidationType)
        '    'validationTypes.Add(ThirdPartyValidationType.Name1Last)
        '    'validationTypes.Add(ThirdPartyValidationType.Name1DOB)

        '    Return validationTypes
        'End Function
        'Public Function ThirdPartyValidationTypes_MVR() As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    Return validationTypes
        'End Function
        'Public Function ThirdPartyValidationTypes_CLUEAuto() As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    Return validationTypes
        'End Function
        'Public Function ThirdPartyValidationTypes_CLUEProperty() As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    validationTypes = New List(Of ThirdPartyValidationType)
        '    validationTypes.Add(ThirdPartyValidationType.Name1Last)
        '    validationTypes.Add(ThirdPartyValidationType.Name1DOB)
        '    validationTypes.Add(ThirdPartyValidationType.Name1SSN)
        '    validationTypes.Add(ThirdPartyValidationType.Name2Last)
        '    validationTypes.Add(ThirdPartyValidationType.Name2DOB)
        '    validationTypes.Add(ThirdPartyValidationType.Name2SSN)
        '    validationTypes.Add(ThirdPartyValidationType.AddressStreetNum)
        '    validationTypes.Add(ThirdPartyValidationType.AddressStreetName)
        '    validationTypes.Add(ThirdPartyValidationType.AddressCity)
        '    validationTypes.Add(ThirdPartyValidationType.AddressZip)

        '    Return validationTypes
        'End Function
        ''added 12/9/2014
        'Public Function ThirdPartyValidationTypes(ByVal reportType As ThirdPartyReportType) As List(Of ThirdPartyValidationType)
        '    Dim validationTypes As List(Of ThirdPartyValidationType) = Nothing

        '    Select Case reportType
        '        Case ThirdPartyReportType.AutoPrefill
        '            validationTypes = ThirdPartyValidationTypes_Prefill()
        '        Case ThirdPartyReportType.CreditAuto
        '            validationTypes = ThirdPartyValidationTypes_CreditAuto()
        '        Case ThirdPartyReportType.CreditProperty
        '            validationTypes = ThirdPartyValidationTypes_CreditProperty()
        '        Case ThirdPartyReportType.MVR
        '            validationTypes = ThirdPartyValidationTypes_MVR()
        '        Case ThirdPartyReportType.CLUEAuto
        '            validationTypes = ThirdPartyValidationTypes_CLUEAuto()
        '        Case ThirdPartyReportType.CLUEProperty
        '            validationTypes = ThirdPartyValidationTypes_CLUEProperty()
        '    End Select

        '    Return validationTypes
        'End Function
        ''Public Function NeedsToReorderReportBasedOnValidation_QuickQuoteObject(ByVal reportType As ThirdPartyReportType, ByVal qq As QuickQuoteObject, ByRef currentThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord, ByRef errorMsg As String, Optional ByVal qqDriver As QuickQuoteDriver = Nothing, Optional ByVal qqApplicant As QuickQuoteApplicant = Nothing, Optional ByVal activeNum As Integer = 0) As Boolean
        ''updated for optional byref params; 12/10/2014 - changed byref params to byval... to make sure nothing is changed from the calling side
        'Public Function NeedsToReorderReportBasedOnValidation_QuickQuoteObject(ByVal reportType As ThirdPartyReportType, ByVal qq As QuickQuoteObject, ByRef currentThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord, ByRef errorMsg As String, Optional ByVal qqDriver As QuickQuoteDriver = Nothing, Optional ByVal qqApplicant As QuickQuoteApplicant = Nothing, Optional ByVal activeNum As Integer = 0, Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNum As Integer = 0) As Boolean
        '    Dim needsToReorder As Boolean = False
        '    currentThirdPartyReportLogRecord = Nothing

        '    If reportType <> Nothing AndAlso reportType <> ThirdPartyReportType.None Then
        '        Dim validationTypes As List(Of ThirdPartyValidationType) = ThirdPartyValidationTypes(reportType)
        '        If validationTypes IsNot Nothing AndAlso validationTypes.Count > 0 Then
        '            If qq IsNot Nothing Then
        '                ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord_QuickQuoteObject(qq, policyId, policyImageNum)
        '                'If qq.PolicyId <> "" AndAlso IsNumeric(qq.PolicyId) = True AndAlso CInt(qq.PolicyId) > 0 Then
        '                If policyId > 0 Then
        '                    'Dim polId As Integer = 0
        '                    'Dim polImageNum As Integer = 0
        '                    'Dim unitNum As Integer = 0
        '                    Dim useUnitNum As Boolean = True

        '                    'polId = CInt(qq.PolicyId)
        '                    'If qq.PolicyImageNum <> "" AndAlso IsNumeric(qq.PolicyImageNum) = True AndAlso CInt(qq.PolicyImageNum) > 0 Then
        '                    '    polImageNum = CInt(qq.PolicyImageNum) 'may not use
        '                    'End If
        '                    Select Case reportType
        '                        Case ThirdPartyReportType.AutoPrefill, ThirdPartyReportType.CLUEAuto, ThirdPartyReportType.CLUEProperty
        '                            useUnitNum = False
        '                    End Select

        '                    currentThirdPartyReportLogRecord = LoadThirdPartyReportLogRecordFromQuickQuoteObject(reportType, qq, errorMsg, qqDriver, qqApplicant, activeNum, policyId, policyImageNum, unitNum)
        '                    If currentThirdPartyReportLogRecord IsNot Nothing Then
        '                        If currentThirdPartyReportLogRecord.unitNum > 0 Then
        '                            unitNum = currentThirdPartyReportLogRecord.unitNum
        '                        End If
        '                        Dim existingThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord = Nothing
        '                        Dim sqlErrorMsg As String = ""

        '                        'existingThirdPartyReportLogRecord = GetThirdPartyReportLogRecord(CInt(reportType), polId, polImageNum, unitNum, errorMsg, sqlErrorMsg, useUnitNum)
        '                        '12/9/2014 note: may need to send 0 for policyImageNum here if we want it to just search on policyId... so it doesn't use results from ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord
        '                        existingThirdPartyReportLogRecord = GetThirdPartyReportLogRecord(CInt(reportType), policyId, policyImageNum, unitNum, errorMsg, sqlErrorMsg, useUnitNum)
        '                        If existingThirdPartyReportLogRecord IsNot Nothing Then
        '                            'compare current w/ existing
        '                            Dim invalidObjectComparisonType As ThirdPartyComparisonType = ThirdPartyComparisonType.Neither
        '                            needsToReorder = HasThirdPartyDataChange(currentThirdPartyReportLogRecord, existingThirdPartyReportLogRecord, validationTypes, invalidObjectComparisonType)
        '                        Else
        '                            If sqlErrorMsg <> "" Then
        '                                'error getting existing record from db
        '                            Else
        '                                'no existing record in db
        '                            End If
        '                        End If
        '                    Else
        '                        If errorMsg = "" Then
        '                            errorMsg = "unable to load current third party report log record."
        '                        End If
        '                    End If
        '                Else
        '                    'errorMsg = "invalid policyId on QuickQuote object"
        '                    errorMsg = "invalid policyId"
        '                End If
        '            Else
        '                errorMsg = "invalid QuickQuote Object"
        '            End If
        '        Else
        '            'no validation types
        '        End If
        '    Else
        '        errorMsg = "invalid report type"
        '    End If

        '    Return needsToReorder
        'End Function
        ''Public Function NeedsToReorderReportBasedOnValidation_DiamondImage(ByVal reportType As ThirdPartyReportType, ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef currentThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord, ByRef errorMsg As String, Optional ByVal diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing, Optional ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing, Optional ByVal activeNum As Integer = 0) As Boolean
        ''updated for optional byref params; 12/10/2014 - changed byref params to byval... to make sure nothing is changed from the calling side
        'Public Function NeedsToReorderReportBasedOnValidation_DiamondImage(ByVal reportType As ThirdPartyReportType, ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef currentThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord, ByRef errorMsg As String, Optional ByVal diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing, Optional ByVal diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing, Optional ByVal activeNum As Integer = 0, Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNum As Integer = 0) As Boolean
        '    Dim needsToReorder As Boolean = False
        '    currentThirdPartyReportLogRecord = Nothing

        '    If reportType <> Nothing AndAlso reportType <> ThirdPartyReportType.None Then
        '        Dim validationTypes As List(Of ThirdPartyValidationType) = ThirdPartyValidationTypes(reportType)
        '        If validationTypes IsNot Nothing AndAlso validationTypes.Count > 0 Then
        '            If diaImage IsNot Nothing Then
        '                ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord_DiamondImage(diaImage, policyId, policyImageNum)
        '                'If diaImage.PolicyId > 0 Then
        '                If policyId > 0 Then
        '                    'Dim polId As Integer = 0
        '                    'Dim polImageNum As Integer = 0
        '                    'Dim unitNum As Integer = 0
        '                    Dim useUnitNum As Boolean = True

        '                    'polId = diaImage.PolicyId
        '                    'If diaImage.PolicyImageNum > 0 Then
        '                    '    polImageNum = diaImage.PolicyImageNum 'may not use
        '                    'End If
        '                    Select Case reportType
        '                        Case ThirdPartyReportType.AutoPrefill, ThirdPartyReportType.CLUEAuto, ThirdPartyReportType.CLUEProperty
        '                            useUnitNum = False
        '                    End Select

        '                    currentThirdPartyReportLogRecord = LoadThirdPartyReportLogRecordFromDiamondImage(reportType, diaImage, errorMsg, diaDriver, diaApplicant, activeNum, policyId, policyImageNum, unitNum)
        '                    If currentThirdPartyReportLogRecord IsNot Nothing Then
        '                        If currentThirdPartyReportLogRecord.unitNum > 0 Then
        '                            unitNum = currentThirdPartyReportLogRecord.unitNum
        '                        End If
        '                        Dim existingThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord = Nothing
        '                        Dim sqlErrorMsg As String = ""

        '                        'existingThirdPartyReportLogRecord = GetThirdPartyReportLogRecord(CInt(reportType), polId, polImageNum, unitNum, errorMsg, sqlErrorMsg, useUnitNum)
        '                        '12/9/2014 note: may need to send 0 for policyImageNum here if we want it to just search on policyId... so it doesn't use results from ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord
        '                        existingThirdPartyReportLogRecord = GetThirdPartyReportLogRecord(CInt(reportType), policyId, policyImageNum, unitNum, errorMsg, sqlErrorMsg, useUnitNum)
        '                        If existingThirdPartyReportLogRecord IsNot Nothing Then
        '                            'compare current w/ existing
        '                            Dim invalidObjectComparisonType As ThirdPartyComparisonType = ThirdPartyComparisonType.Neither
        '                            needsToReorder = HasThirdPartyDataChange(currentThirdPartyReportLogRecord, existingThirdPartyReportLogRecord, validationTypes, invalidObjectComparisonType)
        '                        Else
        '                            If sqlErrorMsg <> "" Then
        '                                'error getting existing record from db
        '                            Else
        '                                'no existing record in db
        '                            End If
        '                        End If
        '                    Else
        '                        If errorMsg = "" Then
        '                            errorMsg = "unable to load current third party report log record."
        '                        End If
        '                    End If
        '                Else
        '                    'errorMsg = "invalid policyId on Diamond image"
        '                    errorMsg = "invalid policyId"
        '                End If
        '            Else
        '                errorMsg = "invalid Diamond image"
        '            End If
        '        Else
        '            'no validation types
        '        End If
        '    Else
        '        errorMsg = "invalid report type"
        '    End If

        '    Return needsToReorder
        'End Function
        'Public Sub SetPolicyIdAndImageNumberForThirdPartyReportLogRecord_QuickQuoteObject(ByVal qq As QuickQuoteObject, ByRef policyId As Integer, ByRef policyImageNum As Integer)
        '    policyId = 0
        '    policyImageNum = 0

        '    If qq IsNot Nothing Then
        '        If qq.PolicyId <> "" AndAlso IsNumeric(qq.PolicyId) = True AndAlso CInt(qq.PolicyId) > 0 Then
        '            policyId = CInt(qq.PolicyId)
        '            If qq.PolicyImageNum <> "" AndAlso IsNumeric(qq.PolicyImageNum) = True AndAlso CInt(qq.PolicyImageNum) > 0 Then
        '                policyImageNum = CInt(qq.PolicyImageNum) 'may not use
        '            End If
        '        End If
        '    End If
        'End Sub
        'Public Sub SetPolicyIdAndImageNumberForThirdPartyReportLogRecord_DiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef policyId As Integer, ByRef policyImageNum As Integer)
        '    policyId = 0
        '    policyImageNum = 0

        '    If diaImage IsNot Nothing Then
        '        If diaImage.PolicyId > 0 Then
        '            policyId = diaImage.PolicyId
        '            If diaImage.PolicyImageNum > 0 Then
        '                policyImageNum = diaImage.PolicyImageNum 'may not use
        '            End If
        '        End If
        '    End If
        'End Sub
        'Public Sub ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord_QuickQuoteObject(ByVal qq As QuickQuoteObject, ByRef policyId As Integer, ByRef policyImageNum As Integer)
        '    If policyId > 0 Then
        '        'can validate; can also set policyImageNum to 0 from here if needed

        '    Else
        '        SetPolicyIdAndImageNumberForThirdPartyReportLogRecord_QuickQuoteObject(qq, policyId, policyImageNum)
        '    End If
        'End Sub
        'Public Sub ValidatePolicyIdAndImageNumberForThirdPartyReportLogRecord_DiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByRef policyId As Integer, ByRef policyImageNum As Integer)
        '    If policyId > 0 Then
        '        'can validate; can also set policyImageNum to 0 from here if needed

        '    Else
        '        SetPolicyIdAndImageNumberForThirdPartyReportLogRecord_DiamondImage(diaImage, policyId, policyImageNum)
        '    End If
        'End Sub
        'added 12/9/2014
        Public Function QuickQuoteDriverForIdValueNum(ByVal qqDrivers As List(Of QuickQuoteDriver), ByVal idValueNum As Integer) As QuickQuoteDriver
            Dim qqDriver As QuickQuoteDriver = Nothing

            If idValueNum > 0 AndAlso qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                For Each d As QuickQuoteDriver In qqDrivers
                    If d.HasValidDriverNum = True AndAlso CInt(d.DriverNum) = idValueNum Then
                        qqDriver = d
                        Exit For
                    End If
                Next
            End If

            Return qqDriver
        End Function
        Public Function QuickQuoteApplicantForIdValueNum(ByVal qqApplicants As List(Of QuickQuoteApplicant), ByVal idValueNum As Integer) As QuickQuoteApplicant
            Dim qqApplicant As QuickQuoteApplicant = Nothing

            If idValueNum > 0 AndAlso qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                For Each a As QuickQuoteApplicant In qqApplicants
                    If a.HasValidApplicantNum = True AndAlso CInt(a.ApplicantNum) = idValueNum Then
                        qqApplicant = a
                        Exit For
                    End If
                Next
            End If

            Return qqApplicant
        End Function
        Public Function QuickQuoteDriverForIdValueNum(ByVal qq As QuickQuoteObject, ByVal idValueNum As Integer) As QuickQuoteDriver
            Dim qqDriver As QuickQuoteDriver = Nothing

            If qq IsNot Nothing Then
                'qqDriver = QuickQuoteDriverForIdValueNum(qq.Drivers, idValueNum)
                'updated 9/14/2018
                qqDriver = QuickQuoteDriverForIdValueNum(AllQuickQuoteDrivers(qq, level:=MultiStateLevel.GoverningStateLevel), idValueNum)
            End If

            Return qqDriver
        End Function
        Public Function QuickQuoteApplicantForIdValueNum(ByVal qq As QuickQuoteObject, ByVal idValueNum As Integer) As QuickQuoteApplicant
            Dim qqApplicant As QuickQuoteApplicant = Nothing

            If qq IsNot Nothing Then
                'qqApplicant = QuickQuoteApplicantForIdValueNum(qq.Applicants, idValueNum)
                'updated 9/14/2018
                qqApplicant = QuickQuoteApplicantForIdValueNum(AllQuickQuoteApplicants(qq, level:=MultiStateLevel.GoverningStateLevel), idValueNum)
            End If

            Return qqApplicant
        End Function
        Public Function DiamondDriverForIdValueNum(ByVal diaDrivers As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Driver), ByVal idValueNum As Integer) As Diamond.Common.Objects.Policy.Driver
            Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

            If idValueNum > 0 AndAlso diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                For Each d As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    'If d.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then 'shouldn't need here
                    If IsValidDiamondNum(d.DriverNum) = True AndAlso d.DriverNum.Id = idValueNum Then
                        diaDriver = d
                        Exit For
                    End If
                    'End If
                Next
            End If

            Return diaDriver
        End Function
        Public Function DiamondDriverForIdValueNum_GenericList(ByVal diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver), ByVal idValueNum As Integer) As Diamond.Common.Objects.Policy.Driver 'added 9/14/2018
            Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

            If idValueNum > 0 AndAlso diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                For Each d As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    If IsValidDiamondNum(d.DriverNum) = True AndAlso d.DriverNum.Id = idValueNum Then
                        diaDriver = d
                        Exit For
                    End If
                Next
            End If

            Return diaDriver
        End Function
        Public Function DiamondApplicantForIdValueNum(ByVal diaApplicants As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Applicant), ByVal idValueNum As Integer) As Diamond.Common.Objects.Policy.Applicant
            Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

            If idValueNum > 0 AndAlso diaApplicants IsNot Nothing AndAlso diaApplicants.Count > 0 Then
                For Each a As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    'If a.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then 'shouldn't need here
                    If IsValidDiamondNum(a.ApplicantNum) = True AndAlso a.ApplicantNum.Id = idValueNum Then
                        diaApplicant = a
                        Exit For
                    End If
                    'End If
                Next
            End If

            Return diaApplicant
        End Function
        Public Function DiamondApplicantForIdValueNum_GenericList(ByVal diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant), ByVal idValueNum As Integer) As Diamond.Common.Objects.Policy.Applicant 'added 9/14/2018
            Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

            If idValueNum > 0 AndAlso diaApplicants IsNot Nothing AndAlso diaApplicants.Count > 0 Then
                For Each a As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    If IsValidDiamondNum(a.ApplicantNum) = True AndAlso a.ApplicantNum.Id = idValueNum Then
                        diaApplicant = a
                        Exit For
                    End If
                Next
            End If

            Return diaApplicant
        End Function
        Public Function DiamondDriverForIdValueNum(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByVal idValueNum As Integer) As Diamond.Common.Objects.Policy.Driver
            Dim diaDriver As Diamond.Common.Objects.Policy.Driver = Nothing

            'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)
            'If rl IsNot Nothing Then
            '    diaDriver = DiamondDriverForIdValueNum(rl.Drivers, idValueNum)
            'End If
            'updated 9/14/2018
            diaDriver = DiamondDriverForIdValueNum_GenericList(AllDiamondDrivers(diaImage, level:=MultiStateLevel.GoverningStateLevel), idValueNum)

            Return diaDriver
        End Function
        Public Function DiamondApplicantForIdValueNum(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByVal idValueNum As Integer) As Diamond.Common.Objects.Policy.Applicant
            Dim diaApplicant As Diamond.Common.Objects.Policy.Applicant = Nothing

            'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)
            'If rl IsNot Nothing Then
            '    diaApplicant = DiamondApplicantForIdValueNum(rl.Applicants, idValueNum)
            'End If
            'updated 9/14/2018
            diaApplicant = DiamondApplicantForIdValueNum_GenericList(AllDiamondApplicants(diaImage, level:=MultiStateLevel.GoverningStateLevel), idValueNum)

            Return diaApplicant
        End Function
        '12/11/2014 - code moved to QuickQuoteThirdPartyReportHelperClass
        ''added 12/10/2014
        'Public Function QuickQuoteThirdPartyReportLogRecordForUnitNum(ByVal qqThirdPartyReportLogRecords As List(Of QuickQuoteThirdPartyReportLogRecord), ByVal unitNum As Integer) As QuickQuoteThirdPartyReportLogRecord
        '    Dim qqThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord = Nothing

        '    'If unitNum > 0 AndAlso qqThirdPartyReportLogRecords IsNot Nothing AndAlso qqThirdPartyReportLogRecords.Count > 0 Then
        '    'not going to validate unitNum since it could be 0
        '    If qqThirdPartyReportLogRecords IsNot Nothing AndAlso qqThirdPartyReportLogRecords.Count > 0 Then
        '        For Each tprlr As QuickQuoteThirdPartyReportLogRecord In qqThirdPartyReportLogRecords
        '            If tprlr.unitNum = unitNum Then
        '                qqThirdPartyReportLogRecord = tprlr
        '                Exit For
        '            End If
        '        Next
        '    End If

        '    Return qqThirdPartyReportLogRecord
        'End Function
        'Public Function HasQuickQuoteThirdPartyReportLogRecordForUnitNum(ByVal qqThirdPartyReportLogRecords As List(Of QuickQuoteThirdPartyReportLogRecord), ByVal unitNum As Integer) As Boolean
        '    Dim hasRecord As Boolean = False

        '    Dim qqThirdPartyReportLogRecord As QuickQuoteThirdPartyReportLogRecord = QuickQuoteThirdPartyReportLogRecordForUnitNum(qqThirdPartyReportLogRecords, unitNum)
        '    If qqThirdPartyReportLogRecord IsNot Nothing Then
        '        hasRecord = True
        '    End If

        '    Return hasRecord
        'End Function

        'added 12/24/2014
        Public Sub RemoveQuickQuotePolicyholder1Drivers(ByRef qqDrivers As List(Of QuickQuoteDriver), Optional ByVal justFirstOne As Boolean = False)
            If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                Dim driverIndexList As New List(Of Integer)
                Dim dCounter As Integer = 0
                For Each d As QuickQuoteDriver In qqDrivers
                    dCounter += 1
                    If IsQuickQuoteDriverPolicyholder1(d) = True Then
                        driverIndexList.Add(CInt(dCounter - 1))
                        If justFirstOne = True Then
                            Exit For
                        End If
                    End If
                Next

                RemoveQuickQuoteDriversByIndex(qqDrivers, driverIndexList)
            End If
        End Sub
        Public Sub RemoveQuickQuotePolicyholder2Drivers(ByRef qqDrivers As List(Of QuickQuoteDriver), Optional ByVal justFirstOne As Boolean = False)
            If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                Dim driverIndexList As New List(Of Integer)
                Dim dCounter As Integer = 0
                For Each d As QuickQuoteDriver In qqDrivers
                    dCounter += 1
                    If IsQuickQuoteDriverPolicyholder2(d) = True Then
                        driverIndexList.Add(CInt(dCounter - 1))
                        If justFirstOne = True Then
                            Exit For
                        End If
                    End If
                Next

                RemoveQuickQuoteDriversByIndex(qqDrivers, driverIndexList)
            End If
        End Sub
        Public Sub RemoveQuickQuoteDriversByIndex(ByRef qqDrivers As List(Of QuickQuoteDriver), ByVal driverIndexList As List(Of Integer))
            If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 AndAlso driverIndexList IsNot Nothing AndAlso driverIndexList.Count > 0 Then
                driverIndexList.Sort() 'put them in order 1st
                driverIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each di As Integer In driverIndexList
                    If qqDrivers.Count >= CInt(di + 1) Then
                        qqDrivers.RemoveAt(di)
                    End If
                Next
            End If
            '11/9/2016 note: could update to use new RemoveQuickQuoteDriverByIndex method and also return removedCount as optional byref param
        End Sub
        'added 11/9/2016 to just remove 1 at a time
        Public Sub RemoveQuickQuoteDriverByIndex(ByRef qqDrivers As List(Of QuickQuoteDriver), ByVal driverIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqDrivers IsNot Nothing AndAlso driverIndex >= 0 AndAlso qqDrivers.Count >= CInt(driverIndex + 1) Then
                qqDrivers.RemoveAt(driverIndex)
                removed = True
            End If
        End Sub
        'added 11/9/2016
        Public Sub RemoveQuickQuoteVehicleDriverAssignmentsForDriverNumber(ByRef qqVehicles As List(Of QuickQuoteVehicle), ByVal driverNum As Integer, Optional ByRef resetPrincipalDriverNum As Boolean = False, Optional ByRef resetOccasionalDriver1Num As Boolean = False, Optional ByRef resetOccasionalDriver2Num As Boolean = False, Optional ByRef resetOccasionalDriver3Num As Boolean = False)
            resetPrincipalDriverNum = False
            resetOccasionalDriver1Num = False
            resetOccasionalDriver2Num = False
            resetOccasionalDriver3Num = False

            If qqVehicles IsNot Nothing AndAlso driverNum > 0 AndAlso qqVehicles.Count > 0 Then
                Dim anythingReset As Boolean = False
                For Each v As QuickQuoteVehicle In qqVehicles
                    With v
                        If IsPositiveIntegerString(.OccasionalDriver3Num) AndAlso CInt(.OccasionalDriver3Num) = driverNum Then
                            .OccasionalDriver3Num = ""
                            resetOccasionalDriver3Num = True
                            anythingReset = True
                        End If
                        If IsPositiveIntegerString(.OccasionalDriver2Num) AndAlso CInt(.OccasionalDriver2Num) = driverNum Then
                            .OccasionalDriver2Num = ""
                            resetOccasionalDriver2Num = True
                            anythingReset = True
                        End If
                        If IsPositiveIntegerString(.OccasionalDriver1Num) AndAlso CInt(.OccasionalDriver1Num) = driverNum Then
                            .OccasionalDriver1Num = ""
                            resetOccasionalDriver1Num = True
                            anythingReset = True
                        End If
                        If IsPositiveIntegerString(.PrincipalDriverNum) AndAlso CInt(.PrincipalDriverNum) = driverNum Then
                            .PrincipalDriverNum = ""
                            resetPrincipalDriverNum = True
                            anythingReset = True
                        End If
                    End With
                Next
            End If
        End Sub
        Public Sub MoveUpVehicleDrivers(ByRef qqVehicle As QuickQuoteVehicle, Optional ByVal replacePrincipleDriverWithOccasionalIfNeeded As Boolean = False)
            If qqVehicle IsNot Nothing Then
                With qqVehicle
                    If IsPositiveIntegerString(.OccasionalDriver2Num) = False AndAlso IsPositiveIntegerString(.OccasionalDriver3Num) = True Then
                        .OccasionalDriver2Num = .OccasionalDriver3Num
                        .OccasionalDriver3Num = ""
                    End If
                    If IsPositiveIntegerString(.OccasionalDriver1Num) = False AndAlso IsPositiveIntegerString(.OccasionalDriver2Num) = True Then
                        .OccasionalDriver1Num = .OccasionalDriver2Num
                        .OccasionalDriver2Num = ""
                    End If
                    'this is optional (to replace principal w/ occasional)
                    If replacePrincipleDriverWithOccasionalIfNeeded = True Then
                        If IsPositiveIntegerString(.PrincipalDriverNum) = False AndAlso IsPositiveIntegerString(.OccasionalDriver1Num) = True Then
                            .PrincipalDriverNum = .OccasionalDriver1Num
                            .OccasionalDriver1Num = ""
                            If IsPositiveIntegerString(.OccasionalDriver2Num) = True Then
                                .OccasionalDriver1Num = .OccasionalDriver2Num
                                .OccasionalDriver2Num = ""
                                If IsPositiveIntegerString(.OccasionalDriver3Num) = True Then
                                    .OccasionalDriver2Num = .OccasionalDriver3Num
                                    .OccasionalDriver3Num = ""
                                End If
                            End If
                        End If
                    End If
                End With
            End If
        End Sub
        Public Sub RemoveQuickQuotePolicyholder1Applicants(ByRef qqApplicants As List(Of QuickQuoteApplicant), Optional ByVal justFirstOne As Boolean = False)
            If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                Dim applicantIndexList As New List(Of Integer)
                Dim aCounter As Integer = 0
                For Each a As QuickQuoteApplicant In qqApplicants
                    aCounter += 1
                    If IsQuickQuoteApplicantPolicyholder1(a) = True Then
                        applicantIndexList.Add(CInt(aCounter - 1))
                        If justFirstOne = True Then
                            Exit For
                        End If
                    End If
                Next

                RemoveQuickQuoteApplicantsByIndex(qqApplicants, applicantIndexList)
            End If
        End Sub
        Public Sub RemoveQuickQuotePolicyholder2Applicants(ByRef qqApplicants As List(Of QuickQuoteApplicant), Optional ByVal justFirstOne As Boolean = False)
            If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                Dim applicantIndexList As New List(Of Integer)
                Dim aCounter As Integer = 0
                For Each a As QuickQuoteApplicant In qqApplicants
                    aCounter += 1
                    If IsQuickQuoteApplicantPolicyholder2(a) = True Then
                        applicantIndexList.Add(CInt(aCounter - 1))
                        If justFirstOne = True Then
                            Exit For
                        End If
                    End If
                Next

                RemoveQuickQuoteApplicantsByIndex(qqApplicants, applicantIndexList)
            End If
        End Sub
        Public Sub RemoveQuickQuoteApplicantsByIndex(ByRef qqApplicants As List(Of QuickQuoteApplicant), ByVal applicantIndexList As List(Of Integer))
            If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 AndAlso applicantIndexList IsNot Nothing AndAlso applicantIndexList.Count > 0 Then
                applicantIndexList.Sort() 'put them in order 1st
                applicantIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each ai As Integer In applicantIndexList
                    If qqApplicants.Count >= CInt(ai + 1) Then
                        qqApplicants.RemoveAt(ai)
                    End If
                Next
            End If
        End Sub
        Public Sub RemoveQuickQuotePolicyholder1Operators(ByRef qqOperators As List(Of QuickQuoteOperator), Optional ByVal justFirstOne As Boolean = False)
            If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                Dim operatorIndexList As New List(Of Integer)
                Dim oCounter As Integer = 0
                For Each o As QuickQuoteOperator In qqOperators
                    oCounter += 1
                    If IsQuickQuoteOperatorPolicyholder1(o) = True Then
                        operatorIndexList.Add(CInt(oCounter - 1))
                        If justFirstOne = True Then
                            Exit For
                        End If
                    End If
                Next

                RemoveQuickQuoteOperatorsByIndex(qqOperators, operatorIndexList)
            End If
        End Sub
        Public Sub RemoveQuickQuotePolicyholder2Operators(ByRef qqOperators As List(Of QuickQuoteOperator), Optional ByVal justFirstOne As Boolean = False)
            If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                Dim operatorIndexList As New List(Of Integer)
                Dim oCounter As Integer = 0
                For Each o As QuickQuoteOperator In qqOperators
                    oCounter += 1
                    If IsQuickQuoteOperatorPolicyholder2(o) = True Then
                        operatorIndexList.Add(CInt(oCounter - 1))
                        If justFirstOne = True Then
                            Exit For
                        End If
                    End If
                Next

                RemoveQuickQuoteOperatorsByIndex(qqOperators, operatorIndexList)
            End If
        End Sub
        Public Sub RemoveQuickQuoteOperatorsByIndex(ByRef qqOperators As List(Of QuickQuoteOperator), ByVal operatorIndexList As List(Of Integer))
            If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 AndAlso operatorIndexList IsNot Nothing AndAlso operatorIndexList.Count > 0 Then
                operatorIndexList.Sort() 'put them in order 1st
                operatorIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each oi As Integer In operatorIndexList
                    If qqOperators.Count >= CInt(oi + 1) Then
                        qqOperators.RemoveAt(oi)
                    End If
                Next
            End If
        End Sub
        Public Sub UpdateQuickQuotePolicyholder1Drivers(ByVal qqPolicyholder1 As QuickQuotePolicyholder, ByRef qqDrivers As List(Of QuickQuoteDriver), Optional ByVal addIfNecessary As Boolean = True, Optional ByVal justFirstOne As Boolean = False)
            If qqPolicyholder1 IsNot Nothing Then
                Dim hasPolicyholder1Driver As Boolean = False
                If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                    For Each d As QuickQuoteDriver In qqDrivers
                        If IsQuickQuoteDriverPolicyholder1(d) = True Then
                            hasPolicyholder1Driver = True
                            CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToDriver(qqPolicyholder1, d)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        End If
                    Next
                End If
                If hasPolicyholder1Driver = False AndAlso addIfNecessary = True Then
                    Dim newD As QuickQuoteDriver = Nothing
                    CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToDriver(qqPolicyholder1, newD)
                    If newD IsNot Nothing Then
                        If qqDrivers Is Nothing Then
                            qqDrivers = New List(Of QuickQuoteDriver)
                        End If
                        qqDrivers.Add(newD)
                    End If
                End If
            End If
        End Sub
        Public Sub UpdateQuickQuotePolicyholder2Drivers(ByVal qqPolicyholder2 As QuickQuotePolicyholder, ByRef qqDrivers As List(Of QuickQuoteDriver), Optional ByVal addIfNecessary As Boolean = True, Optional ByVal justFirstOne As Boolean = False)
            If qqPolicyholder2 IsNot Nothing Then
                Dim hasPolicyholder2Driver As Boolean = False
                If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                    For Each d As QuickQuoteDriver In qqDrivers
                        If IsQuickQuoteDriverPolicyholder2(d) = True Then
                            hasPolicyholder2Driver = True
                            CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToDriver(qqPolicyholder2, d)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        End If
                    Next
                End If
                If hasPolicyholder2Driver = False AndAlso addIfNecessary = True Then
                    Dim newD As QuickQuoteDriver = Nothing
                    CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToDriver(qqPolicyholder2, newD)
                    If newD IsNot Nothing Then
                        If qqDrivers Is Nothing Then
                            qqDrivers = New List(Of QuickQuoteDriver)
                        End If
                        qqDrivers.Add(newD)
                    End If
                End If
            End If
        End Sub
        Public Sub UpdateQuickQuotePolicyholder1Applicants(ByVal qqPolicyholder1 As QuickQuotePolicyholder, ByRef qqApplicants As List(Of QuickQuoteApplicant), Optional ByVal addIfNecessary As Boolean = True, Optional ByVal justFirstOne As Boolean = False)
            If qqPolicyholder1 IsNot Nothing Then
                Dim hasPolicyholder1Applicant As Boolean = False
                If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                    For Each a As QuickQuoteApplicant In qqApplicants
                        'Updated 7/13/2022 for task 68736 MLW
                        Dim isPH1 As Boolean = False
                        Dim isPH2 As Boolean = False
                        Dim isPH As Boolean = IsQuickQuoteApplicantPolicyholder(a, isPolicyholder1:=isPH1, isPolicyholder2:=isPH2)
                        If isPH1 = True Then
                            hasPolicyholder1Applicant = True
                            CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToApplicant(qqPolicyholder1, a)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        ElseIf isPH2 = False AndAlso IsQuickQuoteApplicantNameMatchToPolicyholder(qqPolicyholder1, a) = True Then
                            'Added 7/13/2022 for task 68736 MLW
                            hasPolicyholder1Applicant = True
                            CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToApplicant(qqPolicyholder1, a)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        End If
                    Next
                End If
                If hasPolicyholder1Applicant = False AndAlso addIfNecessary = True Then
                    Dim newA As QuickQuoteApplicant = Nothing
                    CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToApplicant(qqPolicyholder1, newA)
                    If newA IsNot Nothing Then
                        If qqApplicants Is Nothing Then
                            qqApplicants = New List(Of QuickQuoteApplicant)
                        End If
                        qqApplicants.Add(newA)
                    End If
                End If
            End If
        End Sub
        Public Sub UpdateQuickQuotePolicyholder2Applicants(ByVal qqPolicyholder2 As QuickQuotePolicyholder, ByRef qqApplicants As List(Of QuickQuoteApplicant), Optional ByVal addIfNecessary As Boolean = True, Optional ByVal justFirstOne As Boolean = False)
            If qqPolicyholder2 IsNot Nothing Then
                Dim hasPolicyholder2Applicant As Boolean = False
                If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                    For Each a As QuickQuoteApplicant In qqApplicants
                        'Updated 7/13/2022 for task 68736 MLW
                        Dim isPH1 As Boolean = False
                        Dim isPH2 As Boolean = False
                        Dim isPH As Boolean = IsQuickQuoteApplicantPolicyholder(a, isPolicyholder1:=isPH1, isPolicyholder2:=isPH2)
                        If isPH2 = True Then
                            hasPolicyholder2Applicant = True
                            CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToApplicant(qqPolicyholder2, a)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        ElseIf isPH1 = False AndAlso IsQuickQuoteApplicantNameMatchToPolicyholder(qqPolicyholder2, a) = True Then
                            'Added 7/13/2022 for task 68736 MLW
                            hasPolicyholder2Applicant = True
                            CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToApplicant(qqPolicyholder2, a)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        End If
                    Next
                End If
                If hasPolicyholder2Applicant = False AndAlso addIfNecessary = True Then
                    Dim newA As QuickQuoteApplicant = Nothing
                    CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToApplicant(qqPolicyholder2, newA)
                    If newA IsNot Nothing Then
                        If qqApplicants Is Nothing Then
                            qqApplicants = New List(Of QuickQuoteApplicant)
                        End If
                        qqApplicants.Add(newA)
                    End If
                End If
            End If
        End Sub
        'Added 7/13/2022 for task 68736 MLW
        Public Function IsQuickQuoteApplicantNameMatchToPolicyholder(ByVal policyholder As QuickQuotePolicyholder, ByVal qqApplicant As QuickQuoteApplicant) As Boolean
            Dim isPolicyholder As Boolean = False
            If qqApplicant IsNot Nothing AndAlso qqApplicant.Name IsNot Nothing AndAlso policyholder IsNot Nothing AndAlso policyholder.Name IsNot Nothing Then
                If (String.IsNullOrWhiteSpace(policyholder.Name.DisplayName) = False AndAlso String.IsNullOrWhiteSpace(qqApplicant.Name.DisplayName) = False AndAlso UCase(policyholder.Name.DisplayName) = UCase(qqApplicant.Name.DisplayName)) OrElse (isTextMatch(qqApplicant.Name.FirstName, policyholder.Name.FirstName) AndAlso isTextMatch(qqApplicant.Name.MiddleName, policyholder.Name.MiddleName) AndAlso isTextMatch(qqApplicant.Name.LastName, policyholder.Name.LastName) AndAlso isTextMatch(qqApplicant.Name.SuffixName, policyholder.Name.SuffixName)) Then
                    isPolicyholder = True
                End If
            End If

            Return isPolicyholder
        End Function
        Public Sub UpdateQuickQuotePolicyholder1Operators(ByVal qqPolicyholder1 As QuickQuotePolicyholder, ByRef qqOperators As List(Of QuickQuoteOperator), Optional ByVal addIfNecessary As Boolean = True, Optional ByVal justFirstOne As Boolean = False)
            If qqPolicyholder1 IsNot Nothing Then
                Dim hasPolicyholder1Operator As Boolean = False
                If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                    For Each o As QuickQuoteOperator In qqOperators
                        If IsQuickQuoteOperatorPolicyholder1(o) = True Then
                            hasPolicyholder1Operator = True
                            CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToOperator(qqPolicyholder1, o)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        End If
                    Next
                End If
                If hasPolicyholder1Operator = False AndAlso addIfNecessary = True Then
                    Dim newO As QuickQuoteOperator = Nothing
                    CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToOperator(qqPolicyholder1, newO)
                    If newO IsNot Nothing Then
                        If qqOperators Is Nothing Then
                            qqOperators = New List(Of QuickQuoteOperator)
                        End If
                        qqOperators.Add(newO)
                    End If
                End If
            End If
        End Sub
        Public Sub UpdateQuickQuotePolicyholder2Operators(ByVal qqPolicyholder2 As QuickQuotePolicyholder, ByRef qqOperators As List(Of QuickQuoteOperator), Optional ByVal addIfNecessary As Boolean = True, Optional ByVal justFirstOne As Boolean = False)
            If qqPolicyholder2 IsNot Nothing Then
                Dim hasPolicyholder2Operator As Boolean = False
                If qqOperators IsNot Nothing AndAlso qqOperators.Count > 0 Then
                    For Each o As QuickQuoteOperator In qqOperators
                        If IsQuickQuoteOperatorPolicyholder2(o) = True Then
                            hasPolicyholder2Operator = True
                            CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToOperator(qqPolicyholder2, o)
                            If justFirstOne = True Then
                                Exit For
                            End If
                        End If
                    Next
                End If
                If hasPolicyholder2Operator = False AndAlso addIfNecessary = True Then
                    Dim newO As QuickQuoteOperator = Nothing
                    CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToOperator(qqPolicyholder2, newO)
                    If newO IsNot Nothing Then
                        If qqOperators Is Nothing Then
                            qqOperators = New List(Of QuickQuoteOperator)
                        End If
                        qqOperators.Add(newO)
                    End If
                End If
            End If
        End Sub
        'added 1/27/2015 for re-usability in object.Dispose methods
        Public Sub DisposeString(ByRef str As String)
            If str IsNot Nothing Then
                str = Nothing
            End If
        End Sub
        Public Sub DisposeStrings(ByRef strs As List(Of String)) 'added 3/31/2015
            If strs IsNot Nothing Then
                If strs.Count > 0 Then
                    For Each str As String In strs
                        DisposeString(str)
                    Next
                    strs.Clear()
                End If
                strs = Nothing
            End If
        End Sub
        Public Sub DisposeIntegers(ByRef ints As List(Of Integer)) 'added 9/23/2017
            If ints IsNot Nothing Then
                If ints.Count > 0 Then
                    For Each i As Integer In ints
                        i = Nothing
                    Next
                    ints.Clear()
                End If
                ints = Nothing
            End If
        End Sub
        'added 1/27/2015 for re-usability in xml writing or object property setting
        Public Function IsNumericString(ByVal str As String) As Boolean
            Dim isNum As Boolean = False

            If str IsNot Nothing AndAlso String.IsNullOrEmpty(str) = False AndAlso IsNumeric(str) = True Then 'could use '<> ""' instead of IsNullOrEmpty
                isNum = True
            End If

            Return isNum
        End Function
        'added 3/3/2015
        Public Function IsDateString(ByVal str As String) As Boolean
            Dim isDt As Boolean = False

            If str IsNot Nothing AndAlso String.IsNullOrEmpty(str) = False AndAlso IsDate(str) = True Then 'could use '<> ""' instead of IsNullOrEmpty
                isDt = True
            End If

            Return isDt
        End Function
        'added 1/6/2016 - ported over from IVR Common class (all were shared functions before, but won't be here for now since they all call a non-shared function)
        Public Function IsZeroAmount(ByVal amt As String) As Boolean
            If IsNumericString(amt) = False OrElse CDec(amt) = CDec(0) Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Function IsPositiveIntegerString(ByVal str As String) As Boolean
            Dim isPosInt As Boolean = False

            If IsNumericString(str) = True AndAlso CInt(str) > 0 Then
                isPosInt = True
            End If

            Return isPosInt
        End Function
        Public Function IsPositiveDecimalString(ByVal str As String) As Boolean
            Dim isPosDec As Boolean = False

            If IsNumericString(str) = True AndAlso CDec(str) > CDec(0) Then
                isPosDec = True
            End If

            Return isPosDec
        End Function
        'added 2/20/2015
        Public Sub DisposeCoverages(ByRef covs As List(Of QuickQuoteCoverage))
            If covs IsNot Nothing Then
                If covs.Count > 0 Then
                    For Each c As QuickQuoteCoverage In covs
                        'c.Dispose()
                        'c = Nothing
                        'updated 2/25/2015 to use new method
                        DisposeCoverage(c)
                    Next
                    covs.Clear()
                End If
                covs = Nothing
            End If
        End Sub
        Public Sub DisposeAdditionalInterests(ByRef ais As List(Of QuickQuoteAdditionalInterest))
            If ais IsNot Nothing Then
                If ais.Count > 0 Then
                    For Each ai As QuickQuoteAdditionalInterest In ais
                        ai.Dispose()
                        ai = Nothing
                    Next
                    ais.Clear()
                End If
                ais = Nothing
            End If
        End Sub
        'added 2/25/2015
        Public Sub DisposeCoverage(ByRef cov As QuickQuoteCoverage)
            If cov IsNot Nothing Then
                cov.Dispose()
                cov = Nothing
            End If
        End Sub
        'added 3/18/2015
        Public Sub DisposeScheduledVehicles(ByRef svs As List(Of QuickQuoteScheduledVehicle))
            If svs IsNot Nothing Then
                If svs.Count > 0 Then
                    For Each sv As QuickQuoteScheduledVehicle In svs
                        sv.Dispose()
                        sv = Nothing
                    Next
                    svs.Clear()
                End If
                svs = Nothing
            End If
        End Sub
        'added 4/13/2015
        Public Sub DisposeScheduledCoverages(ByRef schCovs As List(Of QuickQuoteScheduledCoverage))
            If schCovs IsNot Nothing Then
                If schCovs.Count > 0 Then
                    For Each schCov As QuickQuoteScheduledCoverage In schCovs
                        DisposeScheduledCoverage(schCov)
                    Next
                    schCovs.Clear()
                End If
                schCovs = Nothing
            End If
        End Sub
        Public Sub DisposeScheduledCoverage(ByRef schCov As QuickQuoteScheduledCoverage)
            If schCov IsNot Nothing Then
                schCov.Dispose()
                schCov = Nothing
            End If
        End Sub
        'added 4/9/2015 pm
        'Public Sub ApplyCoveragesFromOneLocationToAnother(ByVal fromLocation As QuickQuoteLocation, ByRef toLocation As QuickQuoteLocation, Optional ByVal packagePartType As QuickQuoteObject.QuickQuotePackagePartType = QuickQuoteObject.QuickQuotePackagePartType.None)
        Public Sub ApplyCoveragesFromOneLocationToAnother(ByVal fromLocation As QuickQuoteLocation, ByRef toLocation As QuickQuoteLocation, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) '4/13/2015 - changed packagePartType param to use Enum from QuickQuoteXML
            If fromLocation IsNot Nothing AndAlso toLocation IsNot Nothing AndAlso CoverageCount(fromLocation.LocationCoverages) > 0 Then
                toLocation.ParseThruCoverages(fromLocation.LocationCoverages, packagePartType)
            End If
        End Sub
        'Public Sub ApplyCoveragesFromOneBuildingToAnother(ByVal fromBuilding As QuickQuoteBuilding, ByRef toBuilding As QuickQuoteBuilding, Optional ByVal packagePartType As QuickQuoteObject.QuickQuotePackagePartType = QuickQuoteObject.QuickQuotePackagePartType.None)
        Public Sub ApplyCoveragesFromOneBuildingToAnother(ByVal fromBuilding As QuickQuoteBuilding, ByRef toBuilding As QuickQuoteBuilding, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) '4/13/2015 - changed packagePartType param to use Enum from QuickQuoteXML
            If fromBuilding IsNot Nothing AndAlso toBuilding IsNot Nothing AndAlso CoverageCount(fromBuilding.BuildingCoverages) > 0 Then
                toBuilding.ParseThruCoverages(fromBuilding.BuildingCoverages, packagePartType)
            End If
        End Sub
        Public Function LocationCountMatches(ByVal locs As List(Of QuickQuoteLocation), ByVal compareLocs As List(Of QuickQuoteLocation), Optional ByRef buildingCountMatches As Boolean = False) As Boolean
            Dim locCountMatches As Boolean = False
            buildingCountMatches = False

            If LocationCount(locs) = LocationCount(compareLocs) Then
                locCountMatches = True
                Dim locCount As Integer = 0
                For Each loc As QuickQuoteLocation In locs
                    locCount += 1
                    Dim compareLoc As QuickQuoteLocation = compareLocs(locCount - 1)
                    If BuildingCount(loc.Buildings) = BuildingCount(compareLoc.Buildings) Then
                        buildingCountMatches = True
                    Else
                        buildingCountMatches = False
                        Exit For
                    End If
                Next
            End If

            Return locCountMatches
        End Function
        Public Function LocationAndChildBuildingCountsMatch(ByVal locs As List(Of QuickQuoteLocation), ByVal compareLocs As List(Of QuickQuoteLocation)) As Boolean
            Dim locCountMatches As Boolean = False
            Dim buildingCountMatches As Boolean = False
            locCountMatches = LocationCountMatches(locs, compareLocs, buildingCountMatches)
            If locCountMatches = True AndAlso buildingCountMatches = True Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Function CoverageCount(ByVal covs As List(Of QuickQuoteCoverage)) As Integer
            If covs IsNot Nothing Then
                Return covs.Count
            Else
                Return 0
            End If
        End Function
        Public Function LocationCount(ByVal locs As List(Of QuickQuoteLocation)) As Integer
            If locs IsNot Nothing Then
                Return locs.Count
            Else
                Return 0
            End If
        End Function
        Public Function BuildingCount(ByVal builds As List(Of QuickQuoteBuilding)) As Integer
            If builds IsNot Nothing Then
                Return builds.Count
            Else
                Return 0
            End If
        End Function
        'added 4/13/2015
        Public Sub ApplyScheduledCoveragesFromOneLocationToAnother(ByVal fromLocation As QuickQuoteLocation, ByRef toLocation As QuickQuoteLocation, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If fromLocation IsNot Nothing AndAlso toLocation IsNot Nothing AndAlso ScheduledCoverageCount(fromLocation.ScheduledCoverages) > 0 Then
                toLocation.ParseThruScheduledCoverages(fromLocation.ScheduledCoverages, packagePartType)
            End If
        End Sub
        Public Sub ApplyScheduledCoveragesFromOneBuildingToAnother(ByVal fromBuilding As QuickQuoteBuilding, ByRef toBuilding As QuickQuoteBuilding, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If fromBuilding IsNot Nothing AndAlso toBuilding IsNot Nothing AndAlso ScheduledCoverageCount(fromBuilding.ScheduledCoverages) > 0 Then
                toBuilding.ParseThruScheduledCoverages(fromBuilding.ScheduledCoverages, packagePartType)
            End If
        End Sub
        Public Function ScheduledCoverageCount(ByVal schCovs As List(Of QuickQuoteScheduledCoverage)) As Integer
            If schCovs IsNot Nothing Then
                Return schCovs.Count
            Else
                Return 0
            End If
        End Function
        Public Sub ApplyPropertiesFromOneLocationToAnother(ByVal fromLocation As QuickQuoteLocation, ByRef toLocation As QuickQuoteLocation, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If fromLocation IsNot Nothing AndAlso toLocation IsNot Nothing Then
                ApplyCoveragesFromOneLocationToAnother(fromLocation, toLocation, packagePartType)
                ApplyScheduledCoveragesFromOneLocationToAnother(fromLocation, toLocation, packagePartType)
                ApplyBuildingsFromOneListToAnother(fromLocation.Buildings, toLocation.Buildings, packagePartType)

                If packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability AndAlso fromLocation.GLClassifications IsNot Nothing AndAlso fromLocation.GLClassifications.Count > 0 Then
                    toLocation.GLClassifications = CloneObject(fromLocation.GLClassifications)
                End If

                'add any other location properties here

                'added 5/11/2017 for GAR
                If packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then
                    toLocation.ClassIIEmployees25AndOlder = fromLocation.ClassIIEmployees25AndOlder
                    toLocation.ClassIIEmployeesUnderAge25 = fromLocation.ClassIIEmployeesUnderAge25
                    toLocation.ClassIOtherEmployees = fromLocation.ClassIOtherEmployees
                    toLocation.ClassIRegularEmployees = fromLocation.ClassIRegularEmployees
                    toLocation.NumberOfEmployees = fromLocation.NumberOfEmployees
                    toLocation.Payroll = fromLocation.Payroll
                    'toLocation.UninsuredUnderinsuredMotoristBIandPDNumberOfPlates = fromLocation.UninsuredUnderinsuredMotoristBIandPDNumberOfPlates 'covCodeId 10113; covDetail; commented 5/15/2017 since it is set whenever covs are parsed above
                End If

            End If
        End Sub
        Public Sub ApplyPropertiesFromOneBuildingToAnother(ByVal fromBuilding As QuickQuoteBuilding, ByRef toBuilding As QuickQuoteBuilding, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If fromBuilding IsNot Nothing AndAlso toBuilding IsNot Nothing Then
                ApplyCoveragesFromOneBuildingToAnother(fromBuilding, toBuilding, packagePartType)
                ApplyScheduledCoveragesFromOneBuildingToAnother(fromBuilding, toBuilding, packagePartType)
                'add any other building properties here

            End If
        End Sub
        Public Sub ApplyLocationsFromOneListToAnother(ByVal fromLocations As List(Of QuickQuoteLocation), ByRef toLocations As List(Of QuickQuoteLocation), Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If LocationCountMatches(fromLocations, toLocations) = True Then
                Dim locCounter As Integer = 0
                For Each fromLoc As QuickQuoteLocation In fromLocations
                    locCounter += 1
                    Dim toLoc As QuickQuoteLocation = toLocations(locCounter - 1)
                    ApplyPropertiesFromOneLocationToAnother(fromLoc, toLoc, packagePartType)
                Next
            End If
        End Sub
        Public Sub ApplyBuildingsFromOneListToAnother(ByVal fromBuildings As List(Of QuickQuoteBuilding), ByRef toBuildings As List(Of QuickQuoteBuilding), Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If BuildingCountMatches(fromBuildings, toBuildings) = True Then
                Dim buildCounter As Integer = 0
                For Each fromBuild As QuickQuoteBuilding In fromBuildings
                    buildCounter += 1
                    Dim toBuild As QuickQuoteBuilding = toBuildings(buildCounter - 1)
                    ApplyPropertiesFromOneBuildingToAnother(fromBuild, toBuild, packagePartType)
                Next
            End If
        End Sub
        Public Function BuildingCountMatches(ByVal builds As List(Of QuickQuoteBuilding), ByVal compareBuilds As List(Of QuickQuoteBuilding)) As Boolean
            Dim buildCountMatches As Boolean = False

            If BuildingCount(builds) = BuildingCount(compareBuilds) Then
                buildCountMatches = True
            End If

            Return buildCountMatches
        End Function
        Public Function ClonedLocationsListForCPP(ByVal locs As List(Of QuickQuoteLocation)) As List(Of QuickQuoteLocation)
            Dim clonedLocs As List(Of QuickQuoteLocation) = Nothing

            If locs IsNot Nothing Then
                clonedLocs = CloneObject(locs)
                If clonedLocs IsNot Nothing AndAlso clonedLocs.Count > 0 Then
                    For Each l As QuickQuoteLocation In clonedLocs
                        DisposeCoverages(l.LocationCoverages)
                        DisposeScheduledCoverages(l.ScheduledCoverages)

                        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                            For Each b As QuickQuoteBuilding In l.Buildings
                                DisposeCoverages(b.BuildingCoverages)
                                DisposeScheduledCoverages(b.ScheduledCoverages)

                            Next
                        End If
                    Next
                End If
            End If

            Return clonedLocs
        End Function

        'added 7/20/2015 (originally added to remove hay storage identifier text from building description)
        Public Function RemoveAllInstancesOfStringFromString(ByVal fullString As String, ByVal removeString As String) As String
            Dim str As String = fullString

            Dim keepGoing As Boolean = True
            Do While keepGoing = True
                If String.IsNullOrEmpty(str) = False AndAlso String.IsNullOrEmpty(removeString) = False Then
                    If UCase(str).Contains(UCase(removeString)) = True Then
                        str = RemoveFirstInstanceOfStringFromString(str, removeString)
                    Else
                        keepGoing = False
                        Exit Do
                    End If
                Else
                    keepGoing = False
                    Exit Do
                End If
            Loop

            Return str
        End Function
        Public Function RemoveFirstInstanceOfStringFromString(ByVal fullString As String, ByVal removeString As String) As String 'added 7/20/2015
            Dim str As String = fullString

            If String.IsNullOrEmpty(fullString) = False AndAlso String.IsNullOrEmpty(removeString) = False Then
                If UCase(fullString).Contains(UCase(removeString)) = True Then
                    Dim startIndex As Integer = UCase(fullString).IndexOf(UCase(removeString))
                    If startIndex = 0 Then
                        'at beginning
                        If Len(fullString) > Len(removeString) Then
                            str = Right(fullString, Len(fullString) - Len(removeString))
                        Else
                            'nothing left over
                            str = ""
                        End If
                    Else 'may need to make ElseIf startIndex > 0 as fail safe
                        'after beginning
                        Dim charsAtBeginning As Integer = Len(removeString) + startIndex - 1
                        str = Left(fullString, startIndex - 1)
                        If Len(fullString) > charsAtBeginning Then
                            str &= Right(fullString, Len(fullString) - charsAtBeginning)
                        Else
                            'nothing left over
                        End If
                    End If
                End If
            End If

            Return str
        End Function
        'added 7/22/2015; updated 7/23/2015 for PositionInsertType
        Enum PositionInsertType 'added 7/23/2015
            None = 0
            AtBeginning = 1
            AtEnd = 2
            ByIndex = 3
        End Enum
        Public Sub AddValidationItemToList(ByVal vi As Diamond.Common.Objects.ValidationItem, ByRef validationItems As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem), Optional ByVal insertType As PositionInsertType = PositionInsertType.AtEnd, Optional ByVal index As Integer = -1, Optional ignoreDuplicates As Boolean = True)
            If vi IsNot Nothing Then
                If insertType = PositionInsertType.None OrElse (insertType = PositionInsertType.ByIndex AndAlso index < 0) Then
                    insertType = PositionInsertType.AtEnd
                End If
                If validationItems Is Nothing Then
                    validationItems = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem)
                End If
                If ignoreDuplicates = False OrElse IsValidationItemInList(vi, validationItems) = False Then
                    If insertType = PositionInsertType.AtBeginning Then
                        validationItems.Insert(0, vi)
                    ElseIf insertType = PositionInsertType.ByIndex AndAlso index >= 0 Then
                        validationItems.Insert(index, vi)
                    Else
                        validationItems.Add(vi)
                    End If
                End If
            End If
        End Sub
        Public Sub CopyValidationItemsFromListToList(ByVal fromValidationItems As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem), ByRef toValidationItems As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem), Optional ByVal insertType As PositionInsertType = PositionInsertType.AtEnd, Optional ByVal index As Integer = -1, Optional ignoreDuplicates As Boolean = True)
            If fromValidationItems IsNot Nothing AndAlso fromValidationItems.Count > 0 Then
                If insertType = PositionInsertType.None OrElse (insertType = PositionInsertType.ByIndex AndAlso index < 0) Then
                    insertType = PositionInsertType.AtEnd
                ElseIf insertType = PositionInsertType.AtBeginning Then
                    insertType = PositionInsertType.ByIndex
                    index = 0
                End If
                Dim viCounter As Integer = 0
                Dim indexToUse As Integer = 0
                Dim skippedCounter As Integer = 0
                For Each vi As Diamond.Common.Objects.ValidationItem In fromValidationItems
                    viCounter += 1
                    indexToUse = index + viCounter - skippedCounter - 1
                    If ignoreDuplicates = False OrElse IsValidationItemInList(vi, toValidationItems) = False Then
                        If insertType = PositionInsertType.ByIndex Then
                            'AddValidationItemToList(vi, toValidationItems, PositionInsertType.ByIndex, indexToUse, ignoreDuplicates)
                            AddValidationItemToList(vi, toValidationItems, PositionInsertType.ByIndex, indexToUse, False) 'now setting ignoreDuplicates to False since it's being checked here
                        Else
                            'AddValidationItemToList(vi, toValidationItems)
                            'updated to send defaults for optional params so we can pass ignoreDuplicates on the end... could pass same params that were passed in as they should be the same, but this will guarantee they go to the end
                            'AddValidationItemToList(vi, toValidationItems, PositionInsertType.AtEnd, -1, ignoreDuplicates)
                            AddValidationItemToList(vi, toValidationItems, PositionInsertType.AtEnd, -1, False) 'now setting ignoreDuplicates to False since it's being checked here
                        End If
                    Else
                        skippedCounter += 1
                    End If
                Next
            End If
        End Sub
        'added 7/23/2015
        Public Function DiamondValidationCopy(ByVal dv As Diamond.Common.Objects.DiamondValidation) As Diamond.Common.Objects.DiamondValidation
            Dim newDv As Diamond.Common.Objects.DiamondValidation = Nothing

            If dv IsNot Nothing Then
                newDv = dv.MakeCopy(False)
                If newDv Is Nothing Then
                    newDv = New Diamond.Common.Objects.DiamondValidation
                    CopyValidationItemsFromListToList(dv.ValidationItems, newDv.ValidationItems)
                End If
            End If

            Return newDv
        End Function
        Public Function DiamondValidationCopyWithNewValidationItems(ByVal dv As Diamond.Common.Objects.DiamondValidation, ByVal newValidationItems As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem), Optional ByVal insertType As PositionInsertType = PositionInsertType.AtEnd, Optional ByVal index As Integer = -1, Optional ignoreDuplicates As Boolean = True) As Diamond.Common.Objects.DiamondValidation
            Dim newDv As Diamond.Common.Objects.DiamondValidation = Nothing

            newDv = DiamondValidationCopy(dv)
            If newValidationItems IsNot Nothing AndAlso newValidationItems.Count > 0 Then
                If newDv Is Nothing Then
                    newDv = New Diamond.Common.Objects.DiamondValidation
                End If
                CopyValidationItemsFromListToList(newValidationItems, newDv.ValidationItems, insertType, index, ignoreDuplicates)
            End If

            Return newDv
        End Function
        Public Function IsValidationItemInList(ByVal vi As Diamond.Common.Objects.ValidationItem, ByVal vis As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem)) As Boolean
            Dim isInList As Boolean = False

            If vi IsNot Nothing AndAlso vis IsNot Nothing AndAlso vis.Count > 0 Then
                For Each v As Diamond.Common.Objects.ValidationItem In vis
                    If v.ValidationSeverityType = vi.ValidationSeverityType AndAlso UCase(v.Message) = UCase(vi.Message) Then
                        isInList = True
                        Exit For
                    End If
                Next
            End If

            Return isInList
        End Function

        'added 8/13/2015; updated 8/14/2015
        Public Function IRPM_CreditDebitTotal(ByVal qq As QuickQuoteObject, Optional packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None, Optional ByVal ignoreZeros As Boolean = True) As Decimal
            Dim total As Decimal = CDec(0)

            If qq IsNot Nothing Then
                total = IRPM_CreditDebitTotal(IRPM_Factors(qq, packagePartType), ignoreZeros)
            End If

            Return total
        End Function
        Public Function IRPM_CreditDebitFactor(ByVal qq As QuickQuoteObject, Optional packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None, Optional ByVal ignoreZeros As Boolean = True) As Decimal
            Dim factor As Decimal = CDec(0)

            factor = DecimalForString(getDiff("1", IRPM_CreditDebitTotal(qq, packagePartType, ignoreZeros).ToString))

            Return factor
        End Function
        Public Function IRPM_Factors(ByVal qq As QuickQuoteObject, Optional packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) As List(Of String)
            Dim factors As New List(Of String)

            '_IRPM_ManagementCooperation = "1.000" 'BOP, WCP
            '_IRPM_ManagementCooperationDesc = ""
            '_IRPM_Location = "1.000" 'BOP, CPR
            '_IRPM_LocationDesc = ""
            '_IRPM_BuildingFeatures = "1.000" 'BOP, CPR
            '_IRPM_BuildingFeaturesDesc = ""
            '_IRPM_Premises = "1.000" 'BOP, WCP
            '_IRPM_PremisesDesc = ""
            '_IRPM_Employees = "1.000" 'BOP, WCP, CPR
            '_IRPM_EmployeesDesc = ""
            '_IRPM_Protection = "1.000" 'BOP, CPR
            '_IRPM_ProtectionDesc = ""
            '_IRPM_CatostrophicHazards = "1.000" 'BOP
            '_IRPM_CatostrophicHazardsDesc = ""
            '_IRPM_ManagementExperience = "1.000" 'BOP
            '_IRPM_ManagementExperienceDesc = ""
            '_IRPM_Equipment = "1.000" 'WCP
            '_IRPM_EquipmentDesc = ""
            '_IRPM_MedicalFacilities = "1.000" 'WCP
            '_IRPM_MedicalFacilitiesDesc = ""
            '_IRPM_ClassificationPeculiarities = "1.000" 'WCP
            '_IRPM_ClassificationPeculiaritiesDesc = ""
            '_IRPM_GL_ManagementCooperation = "1.000" 'CGL; 2 (Premises and Products)
            '_IRPM_GL_ManagementCooperationDesc = ""
            '_IRPM_GL_Location = "1.000" 'CGL; 2 (Premises and Products)
            '_IRPM_GL_LocationDesc = ""
            '_IRPM_GL_Premises = "1.000" 'CGL; 2 (Premises and Products)
            '_IRPM_GL_PremisesDesc = ""
            '_IRPM_GL_Equipment = "1.000" 'CGL; 2 (Premises and Products)
            '_IRPM_GL_EquipmentDesc = ""
            '_IRPM_GL_Employees = "1.000" 'CGL; 2 (Premises and Products)
            '_IRPM_GL_EmployeesDesc = ""
            '_IRPM_GL_ClassificationPeculiarities = "1.000" 'CGL; 2 (Premises and Products)
            '_IRPM_GL_ClassificationPeculiaritiesDesc = ""
            '_IRPM_CAP_Management = "1.000" 'CAP; 2 (Liability and Physical Damage)
            '_IRPM_CAP_ManagementDesc = ""
            '_IRPM_CAP_Employees = "1.000" 'CAP; 2 (Liability and Physical Damage)
            '_IRPM_CAP_EmployeesDesc = ""
            '_IRPM_CAP_Equipment = "1.000" 'CAP; 2 (Liability and Physical Damage)
            '_IRPM_CAP_EquipmentDesc = ""
            '_IRPM_CAP_SafetyOrganization = "1.000" 'CAP; 2 (Liability and Physical Damage)
            '_IRPM_CAP_SafetyOrganizationDesc = ""
            '_IRPM_CPR_Management = "1.000" 'CPR
            '_IRPM_CPR_ManagementDesc = ""
            '_IRPM_CPR_PremisesAndEquipment = "1.000" 'CPR
            '_IRPM_CPR_PremisesAndEquipmentDesc = ""
            ''added 6/11/2015 for FAR IRPM
            '_IRPM_FAR_CareConditionOfEquipPremises = "1.000" 'FAR
            '_IRPM_FAR_CareConditionOfEquipPremisesDesc = ""
            '_IRPM_FAR_Cooperation = "1.000" 'FAR
            '_IRPM_FAR_CooperationDesc = ""
            '_IRPM_FAR_DamageSusceptibility = "1.000" 'FAR
            '_IRPM_FAR_DamageSusceptibilityDesc = ""
            '_IRPM_FAR_DispersionOrConcentration = "1.000" 'FAR
            '_IRPM_FAR_DispersionOrConcentrationDesc = ""
            '_IRPM_FAR_SuperiorOrInferiorStructureFeatures = "1.000" 'FAR
            '_IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc = ""
            '_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding = "1.000" 'FAR
            '_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc = ""
            '_IRPM_FAR_Location = "1.000" 'FAR
            '_IRPM_FAR_LocationDesc = ""
            '_IRPM_FAR_MiscProtectFeaturesOrHazards = "1.000" 'FAR
            '_IRPM_FAR_MiscProtectFeaturesOrHazardsDesc = ""
            '_IRPM_FAR_RoofCondition = "1.000" 'FAR
            '_IRPM_FAR_RoofConditionDesc = ""
            '_IRPM_FAR_StoragePracticesAndHazardousOperations = "1.000" 'FAR
            '_IRPM_FAR_StoragePracticesAndHazardousOperationsDesc = ""
            '_IRPM_FAR_PastLosses = "1.000" 'FAR
            '_IRPM_FAR_PastLossesDesc = ""
            '_IRPM_FAR_SupportingBusiness = "1.000" 'FAR
            '_IRPM_FAR_SupportingBusinessDesc = ""
            '_IRPM_FAR_RegularOnsiteInspections = "1.000" 'FAR
            '_IRPM_FAR_RegularOnsiteInspectionsDesc = ""

            If qq IsNot Nothing Then
                Dim newLobType As QuickQuoteObject.QuickQuoteLobType = qq.LobType
                If newLobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                    Select Case packagePartType
                        Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                            newLobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                        Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                            newLobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                        Case Else
                            newLobType = QuickQuoteObject.QuickQuoteLobType.None
                    End Select
                End If

                Select Case newLobType
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                        factors.Add(qq.IRPM_ManagementCooperation)
                        factors.Add(qq.IRPM_Location)
                        factors.Add(qq.IRPM_BuildingFeatures)
                        factors.Add(qq.IRPM_Premises)
                        factors.Add(qq.IRPM_Employees)
                        factors.Add(qq.IRPM_Protection)
                        factors.Add(qq.IRPM_CatostrophicHazards)
                        factors.Add(qq.IRPM_ManagementExperience)
                    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                        factors.Add(qq.IRPM_ManagementCooperation)
                        factors.Add(qq.IRPM_Premises)
                        factors.Add(qq.IRPM_Employees)
                        factors.Add(qq.IRPM_Equipment)
                        factors.Add(qq.IRPM_MedicalFacilities)
                        factors.Add(qq.IRPM_ClassificationPeculiarities)
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                        factors.Add(qq.IRPM_CAP_Management)
                        factors.Add(qq.IRPM_CAP_Employees)
                        factors.Add(qq.IRPM_CAP_Equipment)
                        factors.Add(qq.IRPM_CAP_SafetyOrganization)
                        factors.Add(qq.IRPM_CAP_Management_Phys_Damage)
                        factors.Add(qq.IRPM_CAP_Employees_Phys_Damage)
                        factors.Add(qq.IRPM_CAP_Equipment_Phys_Damage)
                        factors.Add(qq.IRPM_CAP_SafetyOrganization_Phys_Damage)
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                        factors.Add(qq.IRPM_Location)
                        factors.Add(qq.IRPM_BuildingFeatures)
                        factors.Add(qq.IRPM_Employees)
                        factors.Add(qq.IRPM_Protection)
                        factors.Add(qq.IRPM_CPR_Management)
                        factors.Add(qq.IRPM_CPR_PremisesAndEquipment)
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                        factors.Add(qq.IRPM_GL_ManagementCooperation)
                        factors.Add(qq.IRPM_GL_Location)
                        factors.Add(qq.IRPM_GL_Premises)
                        factors.Add(qq.IRPM_GL_Equipment)
                        factors.Add(qq.IRPM_GL_Employees)
                        factors.Add(qq.IRPM_GL_ClassificationPeculiarities)
                    Case QuickQuoteObject.QuickQuoteLobType.Farm
                        factors.Add(qq.IRPM_FAR_CareConditionOfEquipPremises)
                        factors.Add(qq.IRPM_FAR_Cooperation)
                        factors.Add(qq.IRPM_FAR_DamageSusceptibility)
                        factors.Add(qq.IRPM_FAR_SuperiorOrInferiorStructureFeatures)
                        factors.Add(qq.IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding)
                        factors.Add(qq.IRPM_FAR_Location)
                        factors.Add(qq.IRPM_FAR_MiscProtectFeaturesOrHazards)
                        factors.Add(qq.IRPM_FAR_RoofCondition)
                        factors.Add(qq.IRPM_FAR_StoragePracticesAndHazardousOperations)
                        factors.Add(qq.IRPM_FAR_PastLosses)
                        factors.Add(qq.IRPM_FAR_SupportingBusiness)
                        factors.Add(qq.IRPM_FAR_RegularOnsiteInspections)
                End Select
            End If

            Return factors
        End Function
        Public Function IRPM_CreditDebitTotal(ByVal factor As String, Optional ByVal ignoreZeros As Boolean = True) As Decimal
            Dim total As Decimal = CDec(0)

            If (IsNumericString(factor) = True AndAlso IsZeroPremium(factor) = False) OrElse ignoreZeros = False Then
                Dim formattedFactor As Decimal = DecimalForString(factor)
                total = DecimalForString(getDiff("1", formattedFactor.ToString))
            End If

            Return total
        End Function
        Public Function IRPM_CreditDebitTotal(ByVal factors As List(Of String), Optional ByVal ignoreZeros As Boolean = True) As Decimal
            Dim total As Decimal = CDec(0)

            If factors IsNot Nothing AndAlso factors.Count > 0 Then
                For Each f As String In factors
                    total = DecimalForString(getSum(total.ToString, IRPM_CreditDebitTotal(f, ignoreZeros)))
                Next
            End If

            Return total
        End Function

        Public Function ShouldCompressQuickQuoteXmls() As Boolean 'moved here from QuickQuoteCompressionHelperClass to avoid circular reference
            Dim shouldCompress As Boolean = False

            If ConfigurationManager.AppSettings("QuickQuote_ShouldCompressQuoteXmls") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuote_ShouldCompressQuoteXmls").ToString <> "" Then
                If UCase(ConfigurationManager.AppSettings("QuickQuote_ShouldCompressQuoteXmls").ToString) = "YES" OrElse BitToBoolean(ConfigurationManager.AppSettings("QuickQuote_ShouldCompressQuoteXmls").ToString) = True Then
                    shouldCompress = True
                End If
            End If

            Return shouldCompress
        End Function

        'added 1/5/2016
        Public Sub DisposePolicyUnderwritings(ByRef pus As List(Of QuickQuotePolicyUnderwriting))
            If pus IsNot Nothing Then
                If pus.Count > 0 Then
                    For Each pu As QuickQuotePolicyUnderwriting In pus
                        DisposePolicyUnderwriting(pu)
                    Next
                    pus.Clear()
                End If
                pus = Nothing
            End If
        End Sub
        Public Sub DisposePolicyUnderwriting(ByRef pu As QuickQuotePolicyUnderwriting)
            If pu IsNot Nothing Then
                pu.Dispose()
                pu = Nothing
            End If
        End Sub

        'added 1/6/2016; ported over from QuickQuoteXml
        'added 1/5/2016 - needed for loading Diamond images into VR; 4/22/2017 note: should be able to select lob_id directly from Version table also
        Public Function GetLobIdForVersionId(ByVal versionId As Integer) As Integer
            Dim lobId As Integer = 0

            If versionId > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "select CL.lob_id from Version as V with (nolock)"
                        .queryOrStoredProc &= " inner join CompanyStateLOB as CSL with (nolock) on CSL.companystatelob_id = V.companystatelob_id"
                        .queryOrStoredProc &= " inner join CompanyLOB as CL with (nolock) on CL.companylob_id = CSL.companylob_id"
                        .queryOrStoredProc &= " where V.version_id = " & versionId.ToString

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    lobId = .Item("lob_id")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return lobId
        End Function
        'added 1/6/2016
        Public Function GetVelociRaterQuoteIdForQuoteNumber(ByVal quoteNumber As String, Optional ByRef caughtDatabaseError As Boolean = False) As Integer
            Dim quoteId As Integer = 0
            caughtDatabaseError = False

            If String.IsNullOrEmpty(quoteNumber) = False Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
                    With sso
                        .queryOrStoredProc = "select Q.quoteId from Quote as Q with (nolock) where Q.quoteNumber = '" & quoteNumber & "'"

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    quoteId = .Item("quoteId")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                caughtDatabaseError = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return quoteId
        End Function

        'added 1/11/2016 in relation to updates needed for loading Diamond info into VR and not losing items (likely due to lists being cleared initially and then VR info saved over)
        Public Enum FirstOrLast
            First = 0
            Last = 1
        End Enum
        'Public Enum FirstLastOrAll 'maybe use this for 'Remove from list' methods so we can have the option if needed
        '    First = 0
        '    Last = 1
        '    All = 2
        'End Enum
        Public Function QuickQuoteSectionICoveragesForType(ByRef sectionICovs As List(Of QuickQuoteSectionICoverage), ByVal covType As QuickQuoteSectionICoverage.SectionICoverageType, Optional ByVal covDescription As String = "") As List(Of QuickQuoteSectionICoverage)
            Dim covs As List(Of QuickQuoteSectionICoverage) = Nothing

            If sectionICovs IsNot Nothing AndAlso sectionICovs.Count > 0 Then
                'For Each sIc As QuickQuoteSectionICoverage In sectionICovs
                '    If sIc.CoverageType = covType Then
                '        If String.IsNullOrEmpty(covDescription) = True OrElse UCase(covDescription) = UCase(sIc.Description) Then
                '            If covs Is Nothing Then
                '                covs = New List(Of QuickQuoteSectionICoverage)
                '            End If
                '            covs.Add(sIc)
                '        End If
                '    End If
                'Next
                Dim indexes As List(Of Integer) = QuickQuoteSectionICoverageIndexesForType(sectionICovs, covType, covDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    For Each i As Integer In indexes
                        If sectionICovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            If covs Is Nothing Then
                                covs = New List(Of QuickQuoteSectionICoverage)
                            End If
                            covs.Add(sectionICovs.Item(i))
                        End If
                    Next
                End If
            End If

            Return covs
        End Function
        Public Function QuickQuoteSectionICoverageForType(ByRef sectionICovs As List(Of QuickQuoteSectionICoverage), ByVal covType As QuickQuoteSectionICoverage.SectionICoverageType, Optional ByVal covDescription As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteSectionICoverage
            Dim cov As QuickQuoteSectionICoverage = Nothing
            Dim covs As List(Of QuickQuoteSectionICoverage) = QuickQuoteSectionICoveragesForType(sectionICovs, covType, covDescription)

            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso covs.Count > 1 Then
                    cov = covs.Item(covs.Count - 1)
                Else
                    cov = covs.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso cov Is Nothing Then
                cov = New QuickQuoteSectionICoverage(Nothing)
                cov.CoverageType = covType
                cov.Description = covDescription
                'added 1/12/2016
                If sectionICovs Is Nothing Then
                    sectionICovs = New List(Of QuickQuoteSectionICoverage)
                End If
                sectionICovs.Add(cov)
            End If

            Return cov
        End Function
        Public Function QuickQuoteSectionICoverageIndexesForType(ByRef sectionICovs As List(Of QuickQuoteSectionICoverage), ByVal covType As QuickQuoteSectionICoverage.SectionICoverageType, Optional ByVal covDescription As String = "") As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If sectionICovs IsNot Nothing AndAlso sectionICovs.Count > 0 Then
                Dim counter As Integer = 0
                For Each sIc As QuickQuoteSectionICoverage In sectionICovs
                    counter += 1
                    If sIc.CoverageType = covType Then
                        If String.IsNullOrEmpty(covDescription) = True OrElse UCase(covDescription) = UCase(sIc.Description) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                        End If
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteSectionICoveragesForType(ByRef sectionICovs As List(Of QuickQuoteSectionICoverage), ByVal covType As QuickQuoteSectionICoverage.SectionICoverageType, Optional ByVal covDescription As String = "")
            If sectionICovs IsNot Nothing AndAlso sectionICovs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteSectionICoverageIndexesForType(sectionICovs, covType, covDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If sectionICovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            sectionICovs.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function QuickQuoteSectionIICoveragesForType(ByRef sectionIICovs As List(Of QuickQuoteSectionIICoverage), ByVal covType As QuickQuoteSectionIICoverage.SectionIICoverageType, Optional ByVal covDescription As String = "") As List(Of QuickQuoteSectionIICoverage)
            Dim covs As List(Of QuickQuoteSectionIICoverage) = Nothing

            If sectionIICovs IsNot Nothing AndAlso sectionIICovs.Count > 0 Then
                'For Each sIIc As QuickQuoteSectionIICoverage In sectionIICovs
                '    If sIIc.CoverageType = covType Then
                '        If String.IsNullOrEmpty(covDescription) = True OrElse UCase(covDescription) = UCase(sIIc.Description) Then
                '            If covs Is Nothing Then
                '                covs = New List(Of QuickQuoteSectionIICoverage)
                '            End If
                '            covs.Add(sIIc)
                '        End If
                '    End If
                'Next
                Dim indexes As List(Of Integer) = QuickQuoteSectionIICoverageIndexesForType(sectionIICovs, covType, covDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    For Each i As Integer In indexes
                        If sectionIICovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            If covs Is Nothing Then
                                covs = New List(Of QuickQuoteSectionIICoverage)
                            End If
                            covs.Add(sectionIICovs.Item(i))
                        End If
                    Next
                End If
            End If

            Return covs
        End Function
        Public Function QuickQuoteSectionIICoverageForType(ByRef sectionIICovs As List(Of QuickQuoteSectionIICoverage), ByVal covType As QuickQuoteSectionIICoverage.SectionIICoverageType, Optional ByVal covDescription As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteSectionIICoverage
            Dim cov As QuickQuoteSectionIICoverage = Nothing
            Dim covs As List(Of QuickQuoteSectionIICoverage) = QuickQuoteSectionIICoveragesForType(sectionIICovs, covType, covDescription)

            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso covs.Count > 1 Then
                    cov = covs.Item(covs.Count - 1)
                Else
                    cov = covs.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso cov Is Nothing Then
                cov = New QuickQuoteSectionIICoverage
                cov.CoverageType = covType
                cov.Description = covDescription
                'added 1/12/2016
                If sectionIICovs Is Nothing Then
                    sectionIICovs = New List(Of QuickQuoteSectionIICoverage)
                End If
                sectionIICovs.Add(cov)
            End If

            Return cov
        End Function
        Public Function QuickQuoteSectionIICoverageIndexesForType(ByRef sectionIICovs As List(Of QuickQuoteSectionIICoverage), ByVal covType As QuickQuoteSectionIICoverage.SectionIICoverageType, Optional ByVal covDescription As String = "") As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If sectionIICovs IsNot Nothing AndAlso sectionIICovs.Count > 0 Then
                Dim counter As Integer = 0
                For Each sIIc As QuickQuoteSectionIICoverage In sectionIICovs
                    counter += 1
                    If sIIc.CoverageType = covType Then
                        If String.IsNullOrEmpty(covDescription) = True OrElse UCase(covDescription) = UCase(sIIc.Description) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                        End If
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteSectionIICoveragesForType(ByRef sectionIICovs As List(Of QuickQuoteSectionIICoverage), ByVal covType As QuickQuoteSectionIICoverage.SectionIICoverageType, Optional ByVal covDescription As String = "")
            If sectionIICovs IsNot Nothing AndAlso sectionIICovs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteSectionIICoverageIndexesForType(sectionIICovs, covType, covDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If sectionIICovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            sectionIICovs.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function QuickQuoteSectionIAndIICoveragesForType(ByRef sectionIAndIICovs As List(Of QuickQuoteSectionIAndIICoverage), ByVal covType As QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType, Optional ByVal covDescription As String = "") As List(Of QuickQuoteSectionIAndIICoverage)
            Dim covs As List(Of QuickQuoteSectionIAndIICoverage) = Nothing

            If sectionIAndIICovs IsNot Nothing AndAlso sectionIAndIICovs.Count > 0 Then
                'For Each sIAndIIc As QuickQuoteSectionIAndIICoverage In sectionIAndIICovs
                '    If sIAndIIc.MainCoverageType = covType Then
                '        If String.IsNullOrEmpty(covDescription) = True OrElse UCase(covDescription) = UCase(sIAndIIc.Description) Then
                '            If covs Is Nothing Then
                '                covs = New List(Of QuickQuoteSectionIAndIICoverage)
                '            End If
                '            covs.Add(sIAndIIc)
                '        End If
                '    End If
                'Next
                Dim indexes As List(Of Integer) = QuickQuoteSectionIAndIICoverageIndexesForType(sectionIAndIICovs, covType, covDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    For Each i As Integer In indexes
                        If sectionIAndIICovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            If covs Is Nothing Then
                                covs = New List(Of QuickQuoteSectionIAndIICoverage)
                            End If
                            covs.Add(sectionIAndIICovs.Item(i))
                        End If
                    Next
                End If
            End If

            Return covs
        End Function
        Public Function QuickQuoteSectionIAndIICoverageForType(ByRef sectionIAndIICovs As List(Of QuickQuoteSectionIAndIICoverage), ByVal covType As QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType, Optional ByVal covDescription As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteSectionIAndIICoverage
            Dim cov As QuickQuoteSectionIAndIICoverage = Nothing
            Dim covs As List(Of QuickQuoteSectionIAndIICoverage) = QuickQuoteSectionIAndIICoveragesForType(sectionIAndIICovs, covType, covDescription)

            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso covs.Count > 1 Then
                    cov = covs.Item(covs.Count - 1)
                Else
                    cov = covs.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso cov Is Nothing Then
                cov = New QuickQuoteSectionIAndIICoverage
                cov.MainCoverageType = covType
                cov.Description = covDescription
                'added 1/12/2016
                If sectionIAndIICovs Is Nothing Then
                    sectionIAndIICovs = New List(Of QuickQuoteSectionIAndIICoverage)
                End If
                sectionIAndIICovs.Add(cov)
            End If

            Return cov
        End Function
        Public Function QuickQuoteSectionIAndIICoverageIndexesForType(ByRef sectionIAndIICovs As List(Of QuickQuoteSectionIAndIICoverage), ByVal covType As QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType, Optional ByVal covDescription As String = "") As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If sectionIAndIICovs IsNot Nothing AndAlso sectionIAndIICovs.Count > 0 Then
                Dim counter As Integer = 0
                For Each sIAndIIc As QuickQuoteSectionIAndIICoverage In sectionIAndIICovs
                    counter += 1
                    If sIAndIIc.MainCoverageType = covType Then
                        If String.IsNullOrEmpty(covDescription) = True OrElse UCase(covDescription) = UCase(sIAndIIc.Description) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                        End If
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteSectionIAndIICoveragesForType(ByRef sectionIAndIICovs As List(Of QuickQuoteSectionIAndIICoverage), ByVal covType As QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType, Optional ByVal covDescription As String = "")
            If sectionIAndIICovs IsNot Nothing AndAlso sectionIAndIICovs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteSectionIAndIICoverageIndexesForType(sectionIAndIICovs, covType, covDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If sectionIAndIICovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            sectionIAndIICovs.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        'Public Sub TestOptionalParamsCall()
        '    TestOptionalParams(opt1:="test")
        '    TestOptionalParams(opt2:=True)
        'End Sub
        'Public Sub TestOptionalParams(Optional ByVal opt1 As String = "", Optional ByVal opt2 As Boolean = False)

        'End Sub
        Public Function QuickQuoteInlandMarinesForType(ByRef inlandMarines As List(Of QuickQuoteInlandMarine), ByVal imType As QuickQuoteInlandMarine.QuickQuoteInlandMarineType, Optional ByVal imDescription As String = "") As List(Of QuickQuoteInlandMarine)
            Dim ims As List(Of QuickQuoteInlandMarine) = Nothing

            If inlandMarines IsNot Nothing AndAlso inlandMarines.Count > 0 Then
                'For Each im As QuickQuoteInlandMarine In inlandMarines
                '    If im.InlandMarineType = imType Then
                '        If String.IsNullOrEmpty(imDescription) = True OrElse UCase(imDescription) = UCase(im.Description) Then
                '            If ims Is Nothing Then
                '                ims = New List(Of QuickQuoteInlandMarine)
                '            End If
                '            ims.Add(im)
                '        End If
                '    End If
                'Next
                Dim indexes As List(Of Integer) = QuickQuoteInlandMarineIndexesForType(inlandMarines, imType, imDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    For Each i As Integer In indexes
                        If inlandMarines.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            If ims Is Nothing Then
                                ims = New List(Of QuickQuoteInlandMarine)
                            End If
                            ims.Add(inlandMarines.Item(i))
                        End If
                    Next
                End If
            End If

            Return ims
        End Function
        Public Function QuickQuoteInlandMarineForType(ByRef inlandMarines As List(Of QuickQuoteInlandMarine), ByVal imType As QuickQuoteInlandMarine.QuickQuoteInlandMarineType, Optional ByVal imDescription As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteInlandMarine
            Dim im As QuickQuoteInlandMarine = Nothing
            Dim ims As List(Of QuickQuoteInlandMarine) = QuickQuoteInlandMarinesForType(inlandMarines, imType, imDescription)

            If ims IsNot Nothing AndAlso ims.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso ims.Count > 1 Then
                    im = ims.Item(ims.Count - 1)
                Else
                    im = ims.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso im Is Nothing Then
                im = New QuickQuoteInlandMarine
                im.InlandMarineType = imType
                im.Description = imDescription
                'added 1/12/2016
                If inlandMarines Is Nothing Then
                    inlandMarines = New List(Of QuickQuoteInlandMarine)
                End If
                inlandMarines.Add(im)
            End If

            Return im
        End Function
        Public Function QuickQuoteInlandMarineIndexesForType(ByRef inlandMarines As List(Of QuickQuoteInlandMarine), ByVal imType As QuickQuoteInlandMarine.QuickQuoteInlandMarineType, Optional ByVal imDescription As String = "") As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If inlandMarines IsNot Nothing AndAlso inlandMarines.Count > 0 Then
                Dim counter As Integer = 0
                For Each im As QuickQuoteInlandMarine In inlandMarines
                    counter += 1
                    If im.InlandMarineType = imType Then
                        If String.IsNullOrEmpty(imDescription) = True OrElse UCase(imDescription) = UCase(im.Description) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                        End If
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteInlandMarinesForType(ByRef inlandMarines As List(Of QuickQuoteInlandMarine), ByVal imType As QuickQuoteInlandMarine.QuickQuoteInlandMarineType, Optional ByVal imDescription As String = "")
            If inlandMarines IsNot Nothing AndAlso inlandMarines.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteInlandMarineIndexesForType(inlandMarines, imType, imDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If inlandMarines.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            inlandMarines.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function QuickQuoteRvWatercraftsForType(ByRef rvWatercrafts As List(Of QuickQuoteRvWatercraft), ByVal rvTypeId As Integer, Optional ByVal rvDescription As String = "") As List(Of QuickQuoteRvWatercraft)
            Dim rvs As List(Of QuickQuoteRvWatercraft) = Nothing

            If rvWatercrafts IsNot Nothing AndAlso rvWatercrafts.Count > 0 Then
                For Each rv As QuickQuoteRvWatercraft In rvWatercrafts
                    'If IsPositiveIntegerString(rv.RvWatercraftTypeId) = True AndAlso CInt(rv.RvWatercraftTypeId) = rvTypeId Then
                    If (IsNumericString(rv.RvWatercraftTypeId) = True AndAlso CInt(rv.RvWatercraftTypeId) = rvTypeId) OrElse (String.IsNullOrEmpty(rv.RvWatercraftTypeId) = True AndAlso rvTypeId = 0) Then 'handle for any typeId including 0 or blank
                        If String.IsNullOrEmpty(rvDescription) = True OrElse UCase(rvDescription) = UCase(rv.Description) Then
                            If rvs Is Nothing Then
                                rvs = New List(Of QuickQuoteRvWatercraft)
                            End If
                            rvs.Add(rv)
                        End If
                    End If
                Next
            End If

            Return rvs
        End Function
        Public Function QuickQuoteRvWatercraftForType(ByRef rvWatercrafts As List(Of QuickQuoteRvWatercraft), ByVal rvTypeId As Integer, Optional ByVal rvDescription As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteRvWatercraft
            Dim rv As QuickQuoteRvWatercraft = Nothing
            Dim rvs As List(Of QuickQuoteRvWatercraft) = QuickQuoteRvWatercraftsForType(rvWatercrafts, rvTypeId, rvDescription)

            If rvs IsNot Nothing AndAlso rvs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso rvs.Count > 1 Then
                    rv = rvs.Item(rvs.Count - 1)
                Else
                    rv = rvs.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso rv Is Nothing Then
                rv = New QuickQuoteRvWatercraft
                rv.RvWatercraftTypeId = rvTypeId.ToString
                rv.Description = rvDescription
                'added 1/12/2016
                If rvWatercrafts Is Nothing Then
                    rvWatercrafts = New List(Of QuickQuoteRvWatercraft)
                End If
                rvWatercrafts.Add(rv)
            End If

            Return rv
        End Function
        Public Function QuickQuoteRvWatercraftIndexesForType(ByRef rvWatercrafts As List(Of QuickQuoteRvWatercraft), ByVal rvTypeId As Integer, Optional ByVal rvDescription As String = "") As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If rvWatercrafts IsNot Nothing AndAlso rvWatercrafts.Count > 0 Then
                Dim counter As Integer = 0
                For Each rv As QuickQuoteRvWatercraft In rvWatercrafts
                    counter += 1
                    If (IsNumericString(rv.RvWatercraftTypeId) = True AndAlso CInt(rv.RvWatercraftTypeId) = rvTypeId) OrElse (String.IsNullOrEmpty(rv.RvWatercraftTypeId) = True AndAlso rvTypeId = 0) Then 'handle for any typeId including 0 or blank
                        If String.IsNullOrEmpty(rvDescription) = True OrElse UCase(rvDescription) = UCase(rv.Description) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                        End If
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteRvWatercraftsForType(ByRef rvWatercrafts As List(Of QuickQuoteRvWatercraft), ByVal rvTypeId As Integer, Optional ByVal rvDescription As String = "")
            If rvWatercrafts IsNot Nothing AndAlso rvWatercrafts.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteRvWatercraftIndexesForType(rvWatercrafts, rvTypeId, rvDescription)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If rvWatercrafts.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            rvWatercrafts.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function QuickQuoteIncomeLossesForDescription(ByRef incomeLosses As List(Of QuickQuoteIncomeLoss), ByVal description As String) As List(Of QuickQuoteIncomeLoss)
            Dim ils As List(Of QuickQuoteIncomeLoss) = Nothing

            If incomeLosses IsNot Nothing AndAlso incomeLosses.Count > 0 Then
                For Each il As QuickQuoteIncomeLoss In incomeLosses
                    If UCase(il.Description) = UCase(description) Then
                        If ils Is Nothing Then
                            ils = New List(Of QuickQuoteIncomeLoss)
                        End If
                        ils.Add(il)
                    End If
                Next
            End If

            Return ils
        End Function
        Public Function QuickQuoteIncomeLossForDescription(ByRef incomeLosses As List(Of QuickQuoteIncomeLoss), ByVal description As String, Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteIncomeLoss
            Dim il As QuickQuoteIncomeLoss = Nothing
            Dim ils As List(Of QuickQuoteIncomeLoss) = QuickQuoteIncomeLossesForDescription(incomeLosses, description)

            If ils IsNot Nothing AndAlso ils.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso ils.Count > 1 Then
                    il = ils.Item(ils.Count - 1)
                Else
                    il = ils.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso il Is Nothing Then
                il = New QuickQuoteIncomeLoss
                il.Description = description
                'added 1/12/2016
                If incomeLosses Is Nothing Then
                    incomeLosses = New List(Of QuickQuoteIncomeLoss)
                End If
                incomeLosses.Add(il)
            End If

            Return il
        End Function
        Public Function QuickQuoteIncomeLossIndexesForDescription(ByRef incomeLosses As List(Of QuickQuoteIncomeLoss), ByVal description As String) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If incomeLosses IsNot Nothing AndAlso incomeLosses.Count > 0 Then
                Dim counter As Integer = 0
                For Each il As QuickQuoteIncomeLoss In incomeLosses
                    counter += 1
                    If UCase(il.Description) = UCase(description) Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteIncomeLossesForDescription(ByRef incomeLosses As List(Of QuickQuoteIncomeLoss), ByVal description As String)
            If incomeLosses IsNot Nothing AndAlso incomeLosses.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteIncomeLossIndexesForDescription(incomeLosses, description)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If incomeLosses.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            incomeLosses.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub

        'added 5/11/2016
        Public Function QuickQuoteOptionalCoveragesForCoverageCodeId(ByRef optionalCovs As List(Of QuickQuoteOptionalCoverage), ByVal covCodeId As String) As List(Of QuickQuoteOptionalCoverage)
            Dim ocs As List(Of QuickQuoteOptionalCoverage) = Nothing

            If optionalCovs IsNot Nothing AndAlso optionalCovs.Count > 0 Then
                For Each oc As QuickQuoteOptionalCoverage In optionalCovs
                    'If IsPositiveIntegerString(covCodeId) AndAlso IsPositiveIntegerString(oc.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(oc.CoverageCodeId) Then
                    'updated 5/12/2016 to check CoverageCodeId prop on OptionalCoverage or sub-coverage if needed
                    If IsPositiveIntegerString(covCodeId) AndAlso
                        ((IsPositiveIntegerString(oc.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(oc.CoverageCodeId)) OrElse
                         (IsPositiveIntegerString(oc.CoverageCodeId) = False AndAlso oc.Coverage IsNot Nothing AndAlso IsPositiveIntegerString(oc.Coverage.CoverageCodeId) AndAlso CInt(oc.Coverage.CoverageCodeId) = CInt(covCodeId))) Then
                        If ocs Is Nothing Then
                            ocs = New List(Of QuickQuoteOptionalCoverage)
                        End If
                        ocs.Add(oc)
                    End If
                Next
            End If

            Return ocs
        End Function
        Public Function QuickQuoteOptionalCoverageForCoverageCodeId(ByRef optionalCovs As List(Of QuickQuoteOptionalCoverage), ByVal covCodeId As String, Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteOptionalCoverage
            Dim oc As QuickQuoteOptionalCoverage = Nothing
            Dim ocs As List(Of QuickQuoteOptionalCoverage) = QuickQuoteOptionalCoveragesForCoverageCodeId(optionalCovs, covCodeId)

            If ocs IsNot Nothing AndAlso ocs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso ocs.Count > 1 Then
                    oc = ocs.Item(ocs.Count - 1)
                Else
                    oc = ocs.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso oc Is Nothing Then
                oc = New QuickQuoteOptionalCoverage
                oc.CoverageCodeId = covCodeId
                If optionalCovs Is Nothing Then
                    optionalCovs = New List(Of QuickQuoteOptionalCoverage)
                End If
                optionalCovs.Add(oc)
            End If

            Return oc
        End Function
        Public Function QuickQuoteOptionalCoverageIndexesForCoverageCodeId(ByRef optionalCovs As List(Of QuickQuoteOptionalCoverage), ByVal covCodeId As String) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If optionalCovs IsNot Nothing AndAlso optionalCovs.Count > 0 Then
                Dim counter As Integer = 0
                For Each oc As QuickQuoteOptionalCoverage In optionalCovs
                    counter += 1
                    'If IsPositiveIntegerString(covCodeId) AndAlso IsPositiveIntegerString(oc.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(oc.CoverageCodeId) Then
                    'updated 5/12/2016 to check CoverageCodeId prop on OptionalCoverage or sub-coverage if needed
                    If IsPositiveIntegerString(covCodeId) AndAlso ((IsPositiveIntegerString(oc.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(oc.CoverageCodeId)) OrElse (IsPositiveIntegerString(oc.CoverageCodeId) = False AndAlso oc.Coverage IsNot Nothing AndAlso IsPositiveIntegerString(oc.Coverage.CoverageCodeId) AndAlso CInt(oc.Coverage.CoverageCodeId) = CInt(covCodeId))) Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteOptionalCoveragesForCoverageCodeId(ByRef optionalCovs As List(Of QuickQuoteOptionalCoverage), ByVal covCodeId As String)
            If optionalCovs IsNot Nothing AndAlso optionalCovs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteOptionalCoverageIndexesForCoverageCodeId(optionalCovs, covCodeId)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If optionalCovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            optionalCovs.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub

        'added 5/12/2016
        Public Shared Function FarmMachinerySpecialCoverageG_EffectiveDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("VR_FarmMachinerySpecialCoverageG_EffectiveDate")
            'If String.IsNullOrWhiteSpace(dt) = False OrElse IsDate(dt) = False Then
            'corrected 10/1/2018
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                dt = CDate("6/1/2016").ToShortDateString
            End If

            Return dt
        End Function
        Public Shared Function IsValidEffectiveDateForFarmMachinerySpecialCoverageG(ByVal effDate As String) As Boolean
            Dim isValid As Boolean = False

            If String.IsNullOrWhiteSpace(effDate) = False AndAlso IsDate(effDate) = True Then
                If CDate(effDate) >= CDate(FarmMachinerySpecialCoverageG_EffectiveDate()) Then
                    isValid = True
                End If
            End If

            Return isValid
        End Function

        'added 5/12/2016 for use w/ VelociRaterServices... may not be able to use it just yet since we're usually building the coverage list each time from scratch
        Public Function QuickQuoteCoveragesForCoverageCodeId(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "") As List(Of QuickQuoteCoverage)
            Dim cs As List(Of QuickQuoteCoverage) = Nothing

            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                For Each c As QuickQuoteCoverage In covs
                    If IsPositiveIntegerString(covCodeId) AndAlso IsPositiveIntegerString(c.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(c.CoverageCodeId) Then
                        If String.IsNullOrEmpty(description) = True OrElse UCase(description) = UCase(c.Description) Then
                            If cs Is Nothing Then
                                cs = New List(Of QuickQuoteCoverage)
                            End If
                            cs.Add(c)
                        End If
                    End If
                Next
            End If

            Return cs
        End Function
        '10/19/2016 - added similar method (to above method) that uses list of covCodeId/Desc objects
        'Public Function QuickQuoteCoveragesForCoverageLookupInfoList(ByRef covs As List(Of QuickQuoteCoverage), ByVal covLookupInfos As List(Of QuickQuoteCoverageLookupInfo), Optional ByVal totalNumberOfCoveragesToGet As Integer = 0, Optional ByVal maximumNumberOfCoveragesToGetForEachCoverageCodeId As Integer = 0, Optional ByVal removeMatchingCoveragesInExcessOfMax As Boolean = False, Optional ByRef numberOfCoveragesRemoved As Integer = 0, Optional ByRef removedCoverageInfos As List(Of QuickQuoteCoverageLookupInfo) = Nothing, Optional ByRef returnedCoverageInfos As List(Of QuickQuoteCoverageLookupInfo) = Nothing, Optional ByVal addCoveragesUpToMaxWhenSet As Boolean = False) As List(Of QuickQuoteCoverage)
        '10/20/2016 - changed optional param name from maximumNumberOfCoveragesToGetForEachCoverageCodeId to maximumNumberOfCoveragesToGetForEachCoverageInfoMatch
        '11/6/2016 note: need to finish up logic before this can be used... need to complete logic for addCoveragesUpToMaxWhenSet and review everything
        '11/6/2016 note: *TO-DO - need to complete logic before this can be used... primarily for Endorsements
        Public Function QuickQuoteCoveragesForCoverageLookupInfoList(ByRef covs As List(Of QuickQuoteCoverage), ByVal covLookupInfos As List(Of QuickQuoteCoverageLookupInfo), Optional ByVal totalNumberOfCoveragesToGet As Integer = 0, Optional ByVal maximumNumberOfCoveragesToGetForEachCoverageInfoMatch As Integer = 0, Optional ByVal removeMatchingCoveragesInExcessOfMax As Boolean = False, Optional ByRef numberOfCoveragesRemoved As Integer = 0, Optional ByRef removedCoverageInfos As List(Of QuickQuoteCoverageLookupInfo) = Nothing, Optional ByRef returnedCoverageInfos As List(Of QuickQuoteCoverageLookupInfo) = Nothing, Optional ByVal addCoveragesUpToMaxWhenSet As Boolean = False) As List(Of QuickQuoteCoverage)
            Dim cs As List(Of QuickQuoteCoverage) = Nothing
            numberOfCoveragesRemoved = 0
            removedCoverageInfos = Nothing
            returnedCoverageInfos = Nothing

            Dim stopSearching As Boolean = False
            If covs IsNot Nothing AndAlso covs.Count > 0 AndAlso covLookupInfos IsNot Nothing AndAlso covLookupInfos.Count > 0 Then
                Dim counter As Integer = 0
                Dim covCodeIds As List(Of Integer) = Nothing 'keep track of coverageCodeIds used for indexes
                'Dim stopSearching As Boolean = False '10/19/2016 - moved outside of IF so it can be used farther below
                Dim covIndexesToRemove As List(Of Integer) = Nothing 'added 10/19/2016
                For Each c As QuickQuoteCoverage In covs
                    counter += 1
                    For Each covLookupInfo As QuickQuoteCoverageLookupInfo In covLookupInfos
                        If covLookupInfo IsNot Nothing Then
                            If IsPositiveIntegerString(covLookupInfo.CoverageCodeId) AndAlso IsPositiveIntegerString(c.CoverageCodeId) AndAlso CInt(covLookupInfo.CoverageCodeId) = CInt(c.CoverageCodeId) Then
                                If String.IsNullOrEmpty(covLookupInfo.Description) = True OrElse UCase(covLookupInfo.Description) = UCase(c.Description) Then
                                    Dim okayToAdd As Boolean = True

                                    'added 10/19/2016
                                    If stopSearching = True Then
                                        'should only get here if removeMatchingCoveragesInExcessOfMax is True
                                        okayToAdd = False
                                    End If

                                    'see if total # of coverages has been reached if applicable
                                    If okayToAdd = True AndAlso totalNumberOfCoveragesToGet > 0 Then
                                        If cs IsNot Nothing AndAlso cs.Count >= totalNumberOfCoveragesToGet Then 'should never be greater since we evaluate before any cov is added
                                            okayToAdd = False
                                            stopSearching = True
                                        End If
                                    End If

                                    'see if max # of covs per covCodeId has been reached if applicable
                                    'If okayToAdd = True AndAlso maximumNumberOfCoveragesToGetForEachCoverageCodeId > 0 Then
                                    'updated 10/19/2016 to also check new property on covLookupInfo
                                    If okayToAdd = True AndAlso (maximumNumberOfCoveragesToGetForEachCoverageInfoMatch > 0 OrElse covLookupInfo.NumberOfOccurrences > 0) Then
                                        'added maxNumToUse variable 10/19/2016
                                        Dim maxNumToUse As Integer = maximumNumberOfCoveragesToGetForEachCoverageInfoMatch
                                        If covLookupInfo.NumberOfOccurrences > maxNumToUse Then
                                            maxNumToUse = covLookupInfo.NumberOfOccurrences
                                        End If

                                        'If covCodeIds IsNot Nothing AndAlso covCodeIds.Count > 0 Then
                                        '    Dim specificCovCodeIdList As List(Of Integer) = covCodeIds.FindAll(Function(ByVal covCodeId As Integer) covCodeId = CInt(c.CoverageCodeId))
                                        '    'If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maximumNumberOfCoveragesToGetForEachCoverageCodeId Then 'should never be greater since we evaluate before any cov/covCodeId is added
                                        '    'updated 10/19/2016 to use new maxNumToUse variable
                                        '    If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maxNumToUse Then 'should never be greater since we evaluate before any cov/covCodeId is added
                                        '        okayToAdd = False
                                        '        If covLookupInfos.Count = 1 Then
                                        '            'only 1 item in list of lookups and max has already been reached for that covCodeId... so no need to continue
                                        '            stopSearching = True
                                        '        End If
                                        '    End If
                                        'End If
                                        'updated 10/20/2016 to use returnedCoverageInfos instead so we can check exact count for full matches instead of just covCodeId
                                        If returnedCoverageInfos IsNot Nothing AndAlso returnedCoverageInfos.Count > 0 Then
                                            Dim strCovCodeIdToMatch As String = CInt(covLookupInfo.CoverageCodeId).ToString
                                            Dim strCovDescToMatch As String = covLookupInfo.Description
                                            Dim matchingCovInfo As QuickQuoteCoverageLookupInfo = returnedCoverageInfos.Find(Function(ByVal covInfo As QuickQuoteCoverageLookupInfo) UCase(covInfo.CoverageCodeId) = UCase(strCovCodeIdToMatch) AndAlso (String.IsNullOrEmpty(strCovDescToMatch) = True OrElse UCase(covInfo.Description) = UCase(strCovDescToMatch)))
                                            If matchingCovInfo IsNot Nothing AndAlso matchingCovInfo.NumberOfOccurrences >= maxNumToUse Then
                                                okayToAdd = False
                                                If covLookupInfos.Count = 1 Then
                                                    'only 1 item in list of lookups and max has already been reached for that covMatch... so no need to continue
                                                    stopSearching = True
                                                End If
                                            End If
                                        End If
                                    End If

                                    If okayToAdd = True Then
                                        If cs Is Nothing Then
                                            cs = New List(Of QuickQuoteCoverage)
                                        End If
                                        cs.Add(c)
                                        If covCodeIds Is Nothing Then
                                            covCodeIds = New List(Of Integer)
                                        End If
                                        covCodeIds.Add(CInt(c.CoverageCodeId))

                                        If returnedCoverageInfos Is Nothing Then
                                            returnedCoverageInfos = New List(Of QuickQuoteCoverageLookupInfo)
                                        End If
                                        Dim returnedCovInfo As QuickQuoteCoverageLookupInfo = Nothing
                                        'Dim strCovCodeId As String = CInt(c.CoverageCodeId).ToString
                                        'updated 10/20/2016 to use covLookupInfo instead so we can also include description
                                        Dim strCovCodeId As String = CInt(covLookupInfo.CoverageCodeId).ToString
                                        Dim strCovDesc As String = covLookupInfo.Description
                                        If returnedCoverageInfos.Count > 0 Then
                                            'returnedCovInfo = returnedCoverageInfos.Find(Function(ByVal covInfo As QuickQuoteCoverageLookupInfo) UCase(covInfo.CoverageCodeId) = UCase(strCovCodeId))
                                            'updated 10/20/2016 to also include description
                                            returnedCovInfo = returnedCoverageInfos.Find(Function(ByVal covInfo As QuickQuoteCoverageLookupInfo) UCase(covInfo.CoverageCodeId) = UCase(strCovCodeId) AndAlso (String.IsNullOrEmpty(strCovDesc) = True OrElse UCase(covInfo.Description) = UCase(strCovDesc)))
                                        End If
                                        If returnedCovInfo Is Nothing Then
                                            returnedCovInfo = New QuickQuoteCoverageLookupInfo
                                            returnedCovInfo.CoverageCodeId = strCovCodeId
                                            returnedCovInfo.Description = strCovDesc 'added 10/20/2016
                                            returnedCoverageInfos.Add(returnedCovInfo)
                                        End If
                                        returnedCovInfo.NumberOfOccurrences += 1

                                        If stopSearching = False AndAlso totalNumberOfCoveragesToGet > 0 AndAlso cs.Count >= totalNumberOfCoveragesToGet Then 'should never be greater since we evaluate before any cov is added; also added here so we can stop searching now if we've already reached max
                                            stopSearching = True
                                        End If
                                        'If stopSearching = False AndAlso maximumNumberOfCoveragesToGetForEachCoverageCodeId > 0 Then 'also added here so we can stop searching now if we've already reached covCodeId max and there are no other lookup items
                                        'updated 10/19/2016 to also check new property on covLookupInfo
                                        If stopSearching = False AndAlso (maximumNumberOfCoveragesToGetForEachCoverageInfoMatch > 0 OrElse covLookupInfo.NumberOfOccurrences > 0) Then 'also added here so we can stop searching now if we've already reached covCodeId max and there are no other lookup items
                                            'added maxNumToUse variable 10/19/2016
                                            Dim maxNumToUse As Integer = maximumNumberOfCoveragesToGetForEachCoverageInfoMatch
                                            If covLookupInfo.NumberOfOccurrences > maxNumToUse Then
                                                maxNumToUse = covLookupInfo.NumberOfOccurrences
                                            End If

                                            Dim specificCovCodeIdList As List(Of Integer) = covCodeIds.FindAll(Function(ByVal covCodeId As Integer) covCodeId = CInt(c.CoverageCodeId)) 'should at least find the one we just added
                                            'If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maximumNumberOfCoveragesToGetForEachCoverageCodeId Then 'should never be greater since we evaluate before any cov/covCodeId is added
                                            'updated 10/19/2016 to use new maxNumToUse variable
                                            If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maxNumToUse Then 'should never be greater since we evaluate before any cov/covCodeId is added
                                                If covLookupInfos.Count = 1 Then
                                                    'only 1 item in list of lookups and max has already been reached for that covCodeId... so no need to continue
                                                    stopSearching = True
                                                End If
                                            End If
                                            'updated 10/20/2016 to use returnedCoverageInfos instead so we can check exact count for full matches instead of just covCodeId
                                            If returnedCovInfo.NumberOfOccurrences >= maxNumToUse Then 'should always be something since we instantiate above if needed
                                                If covLookupInfos.Count = 1 Then
                                                    'only 1 item in list of lookups and max has already been reached for that covMatch... so no need to continue
                                                    stopSearching = True
                                                End If
                                            End If
                                        End If
                                        Exit For 'already found match so no need to keep looking in covLookupInfos list
                                    Else 'added 10/19/2016 for removeMatchingCoveragesInExcessOfMax logic
                                        'okayToAdd is False; must have exceeded max for coverage total or specific covCodeId max
                                        If removeMatchingCoveragesInExcessOfMax = True Then
                                            If covIndexesToRemove Is Nothing Then
                                                covIndexesToRemove = New List(Of Integer)
                                            End If
                                            covIndexesToRemove.Add(counter - 1)
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        If stopSearching = True AndAlso removeMatchingCoveragesInExcessOfMax = False Then 'updated 10/19/2016 to only exit if removeMatchingCoveragesInExcessOfMax is False
                            Exit For
                        End If
                    Next
                    If stopSearching = True AndAlso removeMatchingCoveragesInExcessOfMax = False Then 'updated 10/19/2016 to only exit if removeMatchingCoveragesInExcessOfMax is False
                        Exit For
                    End If
                Next

                'added 10/19/2016 for removeMatchingCoveragesInExcessOfMax logic
                If covIndexesToRemove IsNot Nothing AndAlso covIndexesToRemove.Count > 0 Then
                    RemoveQuickQuoteCoveragesByIndexes(covs, covIndexesToRemove, numberOfCoveragesRemoved, removedCoverageInfos)
                End If

                'added 10/19/2016 for addCoveragesUpToMaxWhenSet logic
                If stopSearching = False AndAlso addCoveragesUpToMaxWhenSet = True Then 'stopSearching False means we haven't reached max

                End If
            End If

            Return cs
        End Function
        'added new Enum 10/10/2016
        Enum AlreadyExistedOrAddedNew
            None = 0
            AlreadyExisted = 1
            AddedNew = 2
        End Enum
        'Public Function QuickQuoteCoverageForCoverageCodeId(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteCoverage
        'updated 10/10/2016 to set optional byref param so calling method can tell if coverage was already in list or added new; 12/23/2019 - updated w/ optional param for itemPosition and useSameDescriptionForAdditionalItems (when there can be multiple... will nullify firstOrLastItem param)
        Public Function QuickQuoteCoverageForCoverageCodeId(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "", Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByRef itemAlreadyExistedOrAddedNew As AlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.None, Optional ByVal itemPosition As Integer = 0, Optional ByVal useSameDescriptionForAdditionalItems As Boolean = False) As QuickQuoteCoverage
            itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.None 'added 10/10/2016
            Dim c As QuickQuoteCoverage = Nothing
            Dim cs As List(Of QuickQuoteCoverage) = QuickQuoteCoveragesForCoverageCodeId(covs, covCodeId, description)

            Dim existingCovCount As Integer = 0 'added 12/23/2019

            If cs IsNot Nothing AndAlso cs.Count > 0 Then
                existingCovCount = cs.Count 'added 12/23/2019
                If itemPosition > 0 Then 'added IF 12/23/2019; original logic in ELSE
                    If cs.Count >= itemPosition Then
                        c = cs.Item(itemPosition - 1)
                        itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AlreadyExisted
                    End If
                Else
                    If firstOrLastItem = FirstOrLast.Last AndAlso cs.Count > 1 Then
                        c = cs.Item(cs.Count - 1)
                    Else
                        c = cs.Item(0)
                    End If
                    itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AlreadyExisted 'added 10/10/2016
                End If
            End If

            If returnNewIfNothing = True AndAlso c Is Nothing Then
                If itemPosition > 0 Then 'added IF 12/23/2019; original logic in ELSE
                    Dim keepAdding As Boolean = True
                    Do While keepAdding = True
                        Dim newCov As QuickQuoteCoverage = Nothing
                        Dim descriptionToUse As String = ""
                        If useSameDescriptionForAdditionalItems = True OrElse existingCovCount + 1 >= itemPosition Then
                            descriptionToUse = description
                        End If
                        AddQuickQuoteCoverageToList(covs, newCov, covCodeId, description:=descriptionToUse)
                        existingCovCount += 1
                        If existingCovCount >= itemPosition Then
                            c = newCov
                            keepAdding = False
                            Exit Do
                        End If
                    Loop
                    itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AddedNew
                Else
                    'c = New QuickQuoteCoverage
                    'c.CoverageCodeId = covCodeId
                    'c.Description = description
                    'If covs Is Nothing Then
                    '    covs = New List(Of QuickQuoteCoverage)
                    'End If
                    'covs.Add(c)
                    'updated 10/10/2016 to use new method
                    AddQuickQuoteCoverageToList(covs, c, covCodeId, description)
                    itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AddedNew 'added 10/10/2016
                End If
            End If

            Return c
        End Function
        Public Sub AddQuickQuoteCoverageToList(ByRef covs As List(Of QuickQuoteCoverage), ByRef c As QuickQuoteCoverage, ByVal covCodeId As String, Optional ByVal description As String = "") 'added 10/10/2016
            c = New QuickQuoteCoverage
            c.CoverageCodeId = covCodeId
            c.Description = description
            If covs Is Nothing Then
                covs = New List(Of QuickQuoteCoverage)
            End If
            covs.Add(c)
        End Sub
        '12/23/2019 - updated w/ optional params for itemPosition and useSameDescriptionForAdditionalItems (when there can be multiple... will nullify firstOrLastItem param)
        Public Function QuickQuoteCoverageForCoverageCodeId_AddIfNeeded(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "", Optional ByVal checkListForExistingCoverageFirst As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByRef itemAlreadyExistedOrAddedNew As AlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.None, Optional ByVal itemPosition As Integer = 0, Optional ByVal useSameDescriptionForAdditionalItems As Boolean = False) As QuickQuoteCoverage 'added 10/10/2016
            itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.None
            Dim c As QuickQuoteCoverage = Nothing

            If checkListForExistingCoverageFirst = True Then
                c = QuickQuoteCoverageForCoverageCodeId(covs, covCodeId, description, returnNewIfNothing:=True, itemAlreadyExistedOrAddedNew:=itemAlreadyExistedOrAddedNew, itemPosition:=itemPosition, useSameDescriptionForAdditionalItems:=useSameDescriptionForAdditionalItems)
            Else
                AddQuickQuoteCoverageToList(covs, c, covCodeId, description)
                itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AddedNew
            End If

            Return c
        End Function

        Public Function QuickQuoteCoverageIndexesForCoverageCodeId(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "") As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                Dim counter As Integer = 0
                For Each c As QuickQuoteCoverage In covs
                    counter += 1
                    If IsPositiveIntegerString(covCodeId) AndAlso IsPositiveIntegerString(c.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(c.CoverageCodeId) Then
                        If String.IsNullOrEmpty(description) = True OrElse UCase(description) = UCase(c.Description) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                        End If
                    End If
                Next
            End If

            Return indexes
        End Function
        'added 11/6/2016 for removing multiple covs at once... possibly just temporary logic or may update all maintainExistingCovs functionality to use this
        Public Function QuickQuoteCoverageIndexesForCoverageCodeIds(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeIds As List(Of String)) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If covs IsNot Nothing AndAlso covs.Count > 0 AndAlso covCodeIds IsNot Nothing AndAlso covCodeIds.Count > 0 Then
                Dim counter As Integer = 0
                For Each c As QuickQuoteCoverage In covs
                    counter += 1
                    For Each covCodeId As String In covCodeIds
                        If IsPositiveIntegerString(covCodeId) AndAlso IsPositiveIntegerString(c.CoverageCodeId) AndAlso CInt(covCodeId) = CInt(c.CoverageCodeId) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                            Exit For 'no need to keep looking in covCodeIds until next iteration for covs
                        End If
                    Next
                Next
            End If

            Return indexes
        End Function
        '10/18/2016 - added similar method (to above method) that uses list of covCodeId/Desc objects
        'Public Function QuickQuoteCoverageIndexesForCoverageLookupInfoList(ByRef covs As List(Of QuickQuoteCoverage), ByVal covLookupInfos As List(Of QuickQuoteCoverageLookupInfo), Optional ByVal totalNumberOfCoveragesToGet As Integer = 0, Optional ByVal maximumNumberOfCoveragesToGetForEachCoverageCodeId As Integer = 0) As List(Of Integer)
        '10/20/2016 - changed optional param name from maximumNumberOfCoveragesToGetForEachCoverageCodeId to maximumNumberOfCoveragesToGetForEachCoverageInfoMatch
        Public Function QuickQuoteCoverageIndexesForCoverageLookupInfoList(ByRef covs As List(Of QuickQuoteCoverage), ByVal covLookupInfos As List(Of QuickQuoteCoverageLookupInfo), Optional ByVal totalNumberOfCoveragesToGet As Integer = 0, Optional ByVal maximumNumberOfCoveragesToGetForEachCoverageInfoMatch As Integer = 0) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If covs IsNot Nothing AndAlso covs.Count > 0 AndAlso covLookupInfos IsNot Nothing AndAlso covLookupInfos.Count > 0 Then
                Dim counter As Integer = 0
                Dim covCodeIds As List(Of Integer) = Nothing 'keep track of coverageCodeIds used for indexes
                Dim stopSearching As Boolean = False
                For Each c As QuickQuoteCoverage In covs
                    counter += 1
                    For Each covLookupInfo As QuickQuoteCoverageLookupInfo In covLookupInfos
                        If covLookupInfo IsNot Nothing Then
                            If IsPositiveIntegerString(covLookupInfo.CoverageCodeId) AndAlso IsPositiveIntegerString(c.CoverageCodeId) AndAlso CInt(covLookupInfo.CoverageCodeId) = CInt(c.CoverageCodeId) Then
                                If String.IsNullOrEmpty(covLookupInfo.Description) = True OrElse UCase(covLookupInfo.Description) = UCase(c.Description) Then
                                    Dim okayToAdd As Boolean = True

                                    'added 10/20/2016 just in case; should never get here because of Exit For statements below... currently only needed on QuickQuoteCoveragesForCoverageLookupInfoList
                                    If stopSearching = True Then
                                        okayToAdd = False
                                    End If

                                    'see if total # of coverages has been reached if applicable
                                    If okayToAdd = True AndAlso totalNumberOfCoveragesToGet > 0 Then
                                        If indexes IsNot Nothing AndAlso indexes.Count >= totalNumberOfCoveragesToGet Then 'should never be greater since we evaluate before any index is added
                                            okayToAdd = False
                                            stopSearching = True
                                        End If
                                    End If

                                    'see if max # of covs per covCodeId has been reached if applicable
                                    'If okayToAdd = True AndAlso maximumNumberOfCoveragesToGetForEachCoverageCodeId > 0 Then
                                    'updated 10/19/2016 to also check new property on covLookupInfo
                                    If okayToAdd = True AndAlso (maximumNumberOfCoveragesToGetForEachCoverageInfoMatch > 0 OrElse covLookupInfo.NumberOfOccurrences > 0) Then
                                        'added maxNumToUse variable 10/19/2016
                                        Dim maxNumToUse As Integer = maximumNumberOfCoveragesToGetForEachCoverageInfoMatch
                                        If covLookupInfo.NumberOfOccurrences > maxNumToUse Then
                                            maxNumToUse = covLookupInfo.NumberOfOccurrences
                                        End If

                                        If covCodeIds IsNot Nothing AndAlso covCodeIds.Count > 0 Then
                                            Dim specificCovCodeIdList As List(Of Integer) = covCodeIds.FindAll(Function(ByVal covCodeId As Integer) covCodeId = CInt(c.CoverageCodeId))
                                            'If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maximumNumberOfCoveragesToGetForEachCoverageCodeId Then 'should never be greater since we evaluate before any index/covCodeId is added
                                            'updated 10/19/2016 to use new maxNumToUse variable
                                            If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maxNumToUse Then 'should never be greater since we evaluate before any index/covCodeId is added
                                                okayToAdd = False
                                                If covLookupInfos.Count = 1 Then
                                                    'only 1 item in list of lookups and max has already been reached for that covCodeId... so no need to continue
                                                    stopSearching = True
                                                End If
                                            End If
                                        End If
                                    End If

                                    If okayToAdd = True Then
                                        If indexes Is Nothing Then
                                            indexes = New List(Of Integer)
                                        End If
                                        indexes.Add(counter - 1)
                                        If covCodeIds Is Nothing Then
                                            covCodeIds = New List(Of Integer)
                                        End If
                                        covCodeIds.Add(CInt(c.CoverageCodeId))
                                        If stopSearching = False AndAlso totalNumberOfCoveragesToGet > 0 AndAlso indexes.Count >= totalNumberOfCoveragesToGet Then 'should never be greater since we evaluate before any index is added; also added here so we can stop searching now if we've already reached max
                                            stopSearching = True
                                        End If
                                        'If stopSearching = False AndAlso maximumNumberOfCoveragesToGetForEachCoverageCodeId > 0 Then 'also added here so we can stop searching now if we've already reached covCodeId max and there are no other lookup items
                                        'updated 10/19/2016 to also check new property on covLookupInfo
                                        If stopSearching = False AndAlso (maximumNumberOfCoveragesToGetForEachCoverageInfoMatch > 0 OrElse covLookupInfo.NumberOfOccurrences > 0) Then 'also added here so we can stop searching now if we've already reached covCodeId max and there are no other lookup items
                                            'added maxNumToUse variable 10/19/2016
                                            Dim maxNumToUse As Integer = maximumNumberOfCoveragesToGetForEachCoverageInfoMatch
                                            If covLookupInfo.NumberOfOccurrences > maxNumToUse Then
                                                maxNumToUse = covLookupInfo.NumberOfOccurrences
                                            End If

                                            Dim specificCovCodeIdList As List(Of Integer) = covCodeIds.FindAll(Function(ByVal covCodeId As Integer) covCodeId = CInt(c.CoverageCodeId)) 'should at least find the one we just added
                                            'If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maximumNumberOfCoveragesToGetForEachCoverageCodeId Then 'should never be greater since we evaluate before any index/covCodeId is added
                                            'updated 10/19/2016 to use new maxNumToUse variable
                                            If specificCovCodeIdList IsNot Nothing AndAlso specificCovCodeIdList.Count >= maxNumToUse Then 'should never be greater since we evaluate before any index/covCodeId is added
                                                If covLookupInfos.Count = 1 Then
                                                    'only 1 item in list of lookups and max has already been reached for that covCodeId... so no need to continue
                                                    stopSearching = True
                                                End If
                                            End If
                                        End If
                                        Exit For 'already found match so no need to keep looking in covLookupInfos list
                                    End If
                                End If
                            End If
                        End If
                        If stopSearching = True Then
                            Exit For
                        End If
                    Next
                    If stopSearching = True Then
                        Exit For
                    End If
                Next
            End If

            Return indexes
        End Function
        'Public Sub RemoveQuickQuoteCoveragesForCoverageCodeId(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "")
        'updated 10/10/2016 w/ optional byref param so calling method can tell how many coverages were removed; 12/23/2019 - added optional param for numberOfCovsToMaintain
        Public Sub RemoveQuickQuoteCoveragesForCoverageCodeId(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeId As String, Optional ByVal description As String = "", Optional ByRef numberOfCoveragesRemoved As Integer = 0, Optional ByVal numberOfCovsToMaintain As Integer = 0)
            numberOfCoveragesRemoved = 0 'added 10/10/2016
            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteCoverageIndexesForCoverageCodeId(covs, covCodeId, description)
                'If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                '    'put them in order 1st
                '    indexes.Sort()
                '    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                '    indexes.Reverse()
                '    For Each i As Integer In indexes
                '        If covs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                '            covs.RemoveAt(i)
                '            numberOfCoveragesRemoved += 1 'added 10/10/2016
                '        End If
                '    Next
                'End If
                'updated 10/19/2016 to use new method
                RemoveQuickQuoteCoveragesByIndexes(covs, indexes, numberOfCoveragesRemoved, numberOfCovsToMaintain:=numberOfCovsToMaintain)
            End If
        End Sub
        'added similar method 10/19/2016 to remove covs using list of indexes; 12/23/2019 - added optional param for numberOfCovsToMaintain
        Public Sub RemoveQuickQuoteCoveragesByIndexes(ByRef covs As List(Of QuickQuoteCoverage), ByVal covIndexes As List(Of Integer), Optional ByRef numberOfCoveragesRemoved As Integer = 0, Optional ByRef removedCoverageInfos As List(Of QuickQuoteCoverageLookupInfo) = Nothing, Optional ByVal numberOfCovsToMaintain As Integer = 0)
            numberOfCoveragesRemoved = 0
            removedCoverageInfos = Nothing

            'If covs IsNot Nothing AndAlso covs.Count > 0 AndAlso covIndexes IsNot Nothing AndAlso covIndexes.Count > 0 Then
            'updated IF 12/23/2019
            If covs IsNot Nothing AndAlso covs.Count > 0 AndAlso covIndexes IsNot Nothing AndAlso covIndexes.Count > 0 AndAlso (numberOfCovsToMaintain = 0 OrElse covIndexes.Count > numberOfCovsToMaintain) Then
                'put them in order 1st
                covIndexes.Sort()
                'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                covIndexes.Reverse()
                For Each i As Integer In covIndexes
                    If covs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If numberOfCovsToMaintain = 0 OrElse covIndexes.Count - numberOfCoveragesRemoved > numberOfCovsToMaintain Then 'added IF 12/23/2019; original logic in IF
                            If removedCoverageInfos Is Nothing Then
                                removedCoverageInfos = New List(Of QuickQuoteCoverageLookupInfo)
                            End If
                            Dim removedCovInfo As QuickQuoteCoverageLookupInfo = Nothing
                            Dim covCodeId As String = covs(i).CoverageCodeId
                            If removedCoverageInfos.Count > 0 Then
                                removedCovInfo = removedCoverageInfos.Find(Function(ByVal covInfo As QuickQuoteCoverageLookupInfo) UCase(covInfo.CoverageCodeId) = UCase(covCodeId))
                            End If
                            If removedCovInfo Is Nothing Then
                                removedCovInfo = New QuickQuoteCoverageLookupInfo
                                removedCovInfo.CoverageCodeId = covCodeId
                                removedCoverageInfos.Add(removedCovInfo)
                            End If
                            removedCovInfo.NumberOfOccurrences += 1
                            covs.RemoveAt(i)
                            numberOfCoveragesRemoved += 1
                        Else
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        'added 11/6/2016 for removing multiple covs at once... possibly just temporary logic or may update all maintainExistingCovs functionality to use this
        Public Sub RemoveQuickQuoteCoveragesForCoverageCodeIds(ByRef covs As List(Of QuickQuoteCoverage), ByVal covCodeIds As List(Of String), Optional ByRef numberOfCoveragesRemoved As Integer = 0)
            numberOfCoveragesRemoved = 0 'added 10/10/2016
            If covs IsNot Nothing AndAlso covs.Count > 0 AndAlso covCodeIds IsNot Nothing AndAlso covCodeIds.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteCoverageIndexesForCoverageCodeIds(covs, covCodeIds)
                RemoveQuickQuoteCoveragesByIndexes(covs, indexes, numberOfCoveragesRemoved)
            End If
        End Sub

        'added 5/12/2016 for VelociRaterServices... created like the existing methods for Drivers
        Public Function QuickQuoteVehicleForActiveNum(ByVal qqVehicles As List(Of QuickQuoteVehicle), ByVal activeNum As Integer) As QuickQuoteVehicle
            Dim qqVehicle As QuickQuoteVehicle = Nothing

            If activeNum > 0 AndAlso qqVehicles IsNot Nothing AndAlso qqVehicles.Count >= activeNum Then
                qqVehicle = qqVehicles.Item(activeNum - 1)
            End If

            Return qqVehicle
        End Function
        Public Function QuickQuoteVehicleForActiveNum(ByVal qq As QuickQuoteObject, ByVal activeNum As Integer) As QuickQuoteVehicle
            Dim qqVehicle As QuickQuoteVehicle = Nothing

            If qq IsNot Nothing Then
                'qqVehicle = QuickQuoteVehicleForActiveNum(qq.Vehicles, activeNum)
                'updated 9/14/2018
                qqVehicle = QuickQuoteVehicleForActiveNum(AllQuickQuoteVehicles(qq, level:=MultiStateLevel.AllStates), activeNum)
            End If

            Return qqVehicle
        End Function
        Public Sub RemoveQuickQuoteVehiclesByIndex(ByRef qqVehicles As List(Of QuickQuoteVehicle), ByVal vehicleIndexList As List(Of Integer))
            If qqVehicles IsNot Nothing AndAlso qqVehicles.Count > 0 AndAlso vehicleIndexList IsNot Nothing AndAlso vehicleIndexList.Count > 0 Then
                vehicleIndexList.Sort() 'put them in order 1st
                vehicleIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each vi As Integer In vehicleIndexList
                    If qqVehicles.Count >= CInt(vi + 1) Then
                        qqVehicles.RemoveAt(vi)
                    End If
                Next
            End If
            '11/9/2016 note: could update to use new RemoveQuickQuoteDriverByIndex method and also return removedCount as optional byref param
        End Sub
        'added 11/9/2016 to just remove 1 at a time
        Public Sub RemoveQuickQuoteVehicleByIndex(ByRef qqVehicles As List(Of QuickQuoteVehicle), ByVal vehicleIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqVehicles IsNot Nothing AndAlso vehicleIndex >= 0 AndAlso qqVehicles.Count >= CInt(vehicleIndex + 1) Then
                qqVehicles.RemoveAt(vehicleIndex)
                removed = True
            End If
        End Sub

        'added 5/18/2016
        'Public Function QuickQuotePhoneForTypeText(ByRef qqPhones As List(Of QuickQuotePhone), ByVal phoneType As String) As QuickQuotePhone
        '    Dim qqPhone As QuickQuotePhone = Nothing

        '    If qqPhones IsNot Nothing AndAlso qqPhones.Count > 0 AndAlso String.IsNullOrWhiteSpace(phoneType) = False Then
        '        For Each p As QuickQuotePhone In qqPhones
        '            If UCase(p.Type) = UCase(phoneType) Then
        '                qqPhone = p
        '                Exit For
        '            End If
        '        Next
        '    End If

        '    Return qqPhone
        'End Function
        'Public Function QuickQuoteEmailForTypeText(ByRef qqEmails As List(Of QuickQuoteEmail), ByVal emailType As String) As QuickQuoteEmail
        '    Dim qqEmail As QuickQuoteEmail = Nothing

        '    If qqEmails IsNot Nothing AndAlso qqEmails.Count > 0 AndAlso String.IsNullOrWhiteSpace(emailType) = False Then
        '        For Each e As QuickQuoteEmail In qqEmails
        '            If UCase(e.Type) = UCase(emailType) Then
        '                qqEmail = e
        '                Exit For
        '            End If
        '        Next
        '    End If

        '    Return qqEmail
        'End Function
        Public Function QuickQuotePhonesForType(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeId As Integer) As List(Of QuickQuotePhone)
            Dim ps As List(Of QuickQuotePhone) = Nothing

            If phones IsNot Nothing AndAlso phones.Count > 0 Then
                For Each p As QuickQuotePhone In phones
                    If (IsNumericString(p.TypeId) = True AndAlso CInt(p.TypeId) = phoneTypeId) OrElse (String.IsNullOrEmpty(p.TypeId) = True AndAlso phoneTypeId = 0) Then 'handle for any typeId including 0 or blank
                        If ps Is Nothing Then
                            ps = New List(Of QuickQuotePhone)
                        End If
                        ps.Add(p)
                    End If
                Next
            End If

            Return ps
        End Function
        Public Function QuickQuotePhonesForTypeText(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeText As String) As List(Of QuickQuotePhone)
            Dim phoneTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuotePhone, QuickQuotePropertyName.TypeId, phoneTypeText)
            If String.IsNullOrWhiteSpace(phoneTypeId) = True Then
                phoneTypeId = "0"
            End If
            Return QuickQuotePhonesForType(phones, CInt(phoneTypeId))
        End Function
        Public Function QuickQuotePhoneForType(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeId As Integer, Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePhone
            Dim p As QuickQuotePhone = Nothing
            Dim ps As List(Of QuickQuotePhone) = QuickQuotePhonesForType(phones, phoneTypeId)

            If ps IsNot Nothing AndAlso ps.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso ps.Count > 1 Then
                    p = ps.Item(ps.Count - 1)
                Else
                    p = ps.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso p Is Nothing Then
                p = New QuickQuotePhone
                p.TypeId = phoneTypeId.ToString
                If phones Is Nothing Then
                    phones = New List(Of QuickQuotePhone)
                End If
                phones.Add(p)
            End If

            Return p
        End Function
        Public Function QuickQuotePhoneForTypeText(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeText As String, Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePhone
            Dim phoneTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuotePhone, QuickQuotePropertyName.TypeId, phoneTypeText)
            If String.IsNullOrWhiteSpace(phoneTypeId) = True Then
                phoneTypeId = "0"
            End If
            Return QuickQuotePhoneForType(phones, CInt(phoneTypeId), returnNewIfNothing, firstOrLastItem)
        End Function
        Public Function QuickQuotePhoneIndexesForType(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeId As Integer) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If phones IsNot Nothing AndAlso phones.Count > 0 Then
                Dim counter As Integer = 0
                For Each p As QuickQuotePhone In phones
                    counter += 1
                    If (IsNumericString(p.TypeId) = True AndAlso CInt(p.TypeId) = phoneTypeId) OrElse (String.IsNullOrEmpty(p.TypeId) = True AndAlso phoneTypeId = 0) Then 'handle for any typeId including 0 or blank
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Function QuickQuotePhoneIndexesForTypeText(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeText As String) As List(Of Integer)
            Dim phoneTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuotePhone, QuickQuotePropertyName.TypeId, phoneTypeText)
            If String.IsNullOrWhiteSpace(phoneTypeId) = True Then
                phoneTypeId = "0"
            End If
            Return QuickQuotePhoneIndexesForType(phones, CInt(phoneTypeId))
        End Function
        Public Sub RemoveQuickQuotePhonesForType(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeId As Integer)
            If phones IsNot Nothing AndAlso phones.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuotePhoneIndexesForType(phones, phoneTypeId)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If phones.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            phones.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub RemoveQuickQuotePhonesForTypeText(ByRef phones As List(Of QuickQuotePhone), ByVal phoneTypeText As String)
            Dim phoneTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuotePhone, QuickQuotePropertyName.TypeId, phoneTypeText)
            If String.IsNullOrWhiteSpace(phoneTypeId) = True Then
                phoneTypeId = "0"
            End If
            RemoveQuickQuotePhonesForType(phones, CInt(phoneTypeId))
        End Sub
        Public Function QuickQuoteEmailsForType(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeId As Integer) As List(Of QuickQuoteEmail)
            Dim es As List(Of QuickQuoteEmail) = Nothing

            If emails IsNot Nothing AndAlso emails.Count > 0 Then
                For Each e As QuickQuoteEmail In emails
                    If (IsNumericString(e.TypeId) = True AndAlso CInt(e.TypeId) = emailTypeId) OrElse (String.IsNullOrEmpty(e.TypeId) = True AndAlso emailTypeId = 0) Then 'handle for any typeId including 0 or blank
                        If es Is Nothing Then
                            es = New List(Of QuickQuoteEmail)
                        End If
                        es.Add(e)
                    End If
                Next
            End If

            Return es
        End Function
        Public Function QuickQuoteEmailsForTypeText(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeText As String) As List(Of QuickQuoteEmail)
            Dim emailTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteEmail, QuickQuotePropertyName.TypeId, emailTypeText)
            If String.IsNullOrWhiteSpace(emailTypeId) = True Then
                emailTypeId = "0"
            End If
            Return QuickQuoteEmailsForType(emails, CInt(emailTypeId))
        End Function
        Public Function QuickQuoteEmailForType(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeId As Integer, Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteEmail
            Dim e As QuickQuoteEmail = Nothing
            Dim es As List(Of QuickQuoteEmail) = QuickQuoteEmailsForType(emails, emailTypeId)

            If es IsNot Nothing AndAlso es.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso es.Count > 1 Then
                    e = es.Item(es.Count - 1)
                Else
                    e = es.Item(0)
                End If
            End If

            If returnNewIfNothing = True AndAlso e Is Nothing Then
                e = New QuickQuoteEmail
                e.TypeId = emailTypeId.ToString
                If emails Is Nothing Then
                    emails = New List(Of QuickQuoteEmail)
                End If
                emails.Add(e)
            End If

            Return e
        End Function
        Public Function QuickQuoteEmailForTypeText(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeText As String, Optional ByVal returnNewIfNothing As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteEmail
            Dim emailTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteEmail, QuickQuotePropertyName.TypeId, emailTypeText)
            If String.IsNullOrWhiteSpace(emailTypeId) = True Then
                emailTypeId = "0"
            End If
            Return QuickQuoteEmailForType(emails, CInt(emailTypeId), returnNewIfNothing, firstOrLastItem)
        End Function
        Public Function QuickQuoteEmailIndexesForType(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeId As Integer) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If emails IsNot Nothing AndAlso emails.Count > 0 Then
                Dim counter As Integer = 0
                For Each e As QuickQuoteEmail In emails
                    counter += 1
                    If (IsNumericString(e.TypeId) = True AndAlso CInt(e.TypeId) = emailTypeId) OrElse (String.IsNullOrEmpty(e.TypeId) = True AndAlso emailTypeId = 0) Then 'handle for any typeId including 0 or blank
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Function QuickQuoteEmailIndexesForTypeText(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeText As String) As List(Of Integer)
            Dim emailTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteEmail, QuickQuotePropertyName.TypeId, emailTypeText)
            If String.IsNullOrWhiteSpace(emailTypeId) = True Then
                emailTypeId = "0"
            End If
            Return QuickQuoteEmailIndexesForType(emails, CInt(emailTypeId))
        End Function
        Public Sub RemoveQuickQuoteEmailsForType(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeId As Integer)
            If emails IsNot Nothing AndAlso emails.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteEmailIndexesForType(emails, emailTypeId)
                If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                    'put them in order 1st
                    indexes.Sort()
                    'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                    indexes.Reverse()
                    For Each i As Integer In indexes
                        If emails.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                            emails.RemoveAt(i)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub RemoveQuickQuoteEmailsForTypeText(ByRef emails As List(Of QuickQuoteEmail), ByVal emailTypeText As String)
            Dim emailTypeId As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteEmail, QuickQuotePropertyName.TypeId, emailTypeText)
            If String.IsNullOrWhiteSpace(emailTypeId) = True Then
                emailTypeId = "0"
            End If
            RemoveQuickQuoteEmailsForType(emails, CInt(emailTypeId))
        End Sub

        'added 10/15/2015; would need to convert IsNumericString to Shared in order to use Shared here
        'Public Shared Function IsPositiveIntegerString(ByVal str As String) As Boolean
        '    Dim isPosInt As Boolean = False

        '    If IsNumericString(str) = True AndAlso CInt(str) > 0 Then
        '        isPosInt = True
        '    End If

        '    Return isPosInt
        'End Function
        'Public Shared Function IsPositiveDecimalString(ByVal str As String) As Boolean
        '    Dim isPosDec As Boolean = False

        '    If IsNumericString(str) = True AndAlso CDec(str) > CDec(0) Then
        '        isPosDec = True
        '    End If

        '    Return isPosDec
        'End Function

        'Public Function DateRangesForRangeAndEffectiveDate(ByVal dr As QuickQuoteDateRange, ByVal effDt As Date) As List(Of QuickQuoteDateRange)
        '    Dim drs As List(Of QuickQuoteDateRange) = Nothing

        '    If dr IsNot Nothing AndAlso effDt <> Nothing AndAlso dr.StartDate <> Nothing AndAlso dr.EndDate <> Nothing Then

        '    End If

        '    Return drs
        'End Function

        'added 2/22/2016 for troubleshooting 531; 8/17/2016 note: may need to update to also allow for Yes/No
        Public Function GetRatedXml_DiamondService_SendExceptionEmail() As Boolean
            Dim sendIt As Boolean = False

            If ConfigurationManager.AppSettings("GetRatedXml_DiamondService_SendExceptionEmail") IsNot Nothing AndAlso ConfigurationManager.AppSettings("GetRatedXml_DiamondService_SendExceptionEmail").ToString <> "" Then
                sendIt = BitToBoolean(ConfigurationManager.AppSettings("GetRatedXml_DiamondService_SendExceptionEmail").ToString)
            End If

            Return sendIt
        End Function
        'added 8/17/2016 for troubleshooting
        Public Function GetRatedXml_DiamondService_AppendActualErrorWhenProblemGettingRatedXml() As Boolean
            Dim appendIt As Boolean = False

            If ConfigurationManager.AppSettings("GetRatedXml_DiamondService_AppendActualErrorWhenProblemGettingRatedXml") IsNot Nothing AndAlso ConfigurationManager.AppSettings("GetRatedXml_DiamondService_AppendActualErrorWhenProblemGettingRatedXml").ToString <> "" Then
                'appendIt = BitToBoolean(ConfigurationManager.AppSettings("GetRatedXml_DiamondService_AppendActualErrorWhenProblemGettingRatedXml").ToString)
                If UCase(ConfigurationManager.AppSettings("GetRatedXml_DiamondService_AppendActualErrorWhenProblemGettingRatedXml").ToString) = "YES" OrElse BitToBoolean(ConfigurationManager.AppSettings("GetRatedXml_DiamondService_AppendActualErrorWhenProblemGettingRatedXml").ToString) = True Then
                    appendIt = True
                End If
            End If

            Return appendIt
        End Function

        'added 8/10/2016 for new cov (PPA versionId 102; coverageCodeId 80443)
        Public Shared Function AutoPlusEnhancement_EffectiveDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("VR_AutoPlusEnhancement_EffectiveDate")
            'If String.IsNullOrWhiteSpace(dt) = False OrElse IsDate(dt) = False Then
            'corrected 10/1/2018
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                dt = CDate("10/1/2016").ToShortDateString
            End If

            Return dt
        End Function
        Public Shared Function IsValidEffectiveDateForAutoPlusEnhancement(ByVal effDate As String) As Boolean
            Dim isValid As Boolean = False

            If String.IsNullOrWhiteSpace(effDate) = False AndAlso IsDate(effDate) = True Then
                If CDate(effDate) >= CDate(AutoPlusEnhancement_EffectiveDate()) Then
                    isValid = True
                End If
            End If

            Return isValid
        End Function

        'added 9/28/2016 for Verisk Protection Class
        Public Shared Function VeriskProtectionClassVersion_EffectiveDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("VR_PCC_StartDate")
            'If String.IsNullOrWhiteSpace(dt) = False OrElse IsDate(dt) = False Then
            'corrected 10/1/2018
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                If IsTestEnvironment() = True Then
                    dt = CDate("10/1/2016").ToShortDateString
                Else
                    dt = CDate("1/1/2017").ToShortDateString
                End If
            End If

            Return dt
        End Function
        Public Shared Function IsValidEffectiveDateForVeriskProtectionClassVersion(ByVal effDate As String) As Boolean
            Dim isValid As Boolean = False

            If String.IsNullOrWhiteSpace(effDate) = False AndAlso IsDate(effDate) = True Then
                If CDate(effDate) >= CDate(VeriskProtectionClassVersion_EffectiveDate()) Then
                    isValid = True
                End If
            End If

            Return isValid
        End Function
        Public Sub VerifyProtectionClassFields(ByVal qqo As QuickQuoteObject)
            If qqo IsNot Nothing AndAlso IsDateString(qqo.EffectiveDate) = True Then
                Dim isVeriskDate As Boolean = IsValidEffectiveDateForVeriskProtectionClassVersion(qqo.EffectiveDate)

                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                    'For Each loc As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each loc As QuickQuoteLocation In qqLocations
                        Dim FireDepartmentDistanceId As String = loc.FireDepartmentDistanceId
                        Dim MilesToFireDepartment As String = loc.MilesToFireDepartment 'note: verifying it's a valid decimal here since that's what Diamond now uses, but conversion code still converts to int
                        If IsPositiveIntegerString(FireDepartmentDistanceId) = True OrElse IsPositiveDecimalString(MilesToFireDepartment) = True Then
                            If IsPositiveIntegerString(FireDepartmentDistanceId) = True Then
                                'at least has FireDepartmentDistanceId; could also have MilesToFireDepartment... verify if there or set if not
                                If isVeriskDate = True Then
                                    'use Verisk values
                                    If CInt(FireDepartmentDistanceId) >= 3 AndAlso CInt(FireDepartmentDistanceId) <= 19 Then
                                        'okay; verify MilesToFireDepartment if present or default if blank
                                        Dim tempMilesToFireDepartment As String = MilesToFireDepartment
                                        Dim tempFireDepartmentDistanceId As String = FireDepartmentDistanceId
                                        SetFireDepartmentDistanceIdForMilesToFireDepartment(isVeriskDate, tempMilesToFireDepartment, tempFireDepartmentDistanceId)
                                        If tempFireDepartmentDistanceId = FireDepartmentDistanceId Then
                                            'MilesToFireDepartment must be okay for FireDepartmentDistanceId if tempFireDepartmentDistanceId came back w/ the same value

                                        Else
                                            'need to default MilesToFireDepartment
                                            Select Case CInt(FireDepartmentDistanceId)
                                                Case 3 '1 mile or less
                                                    MilesToFireDepartment = "1"
                                                Case 4 'Greater than 1 to 2 miles
                                                    MilesToFireDepartment = "2"
                                                Case 5 'Greater than 2 to 3 miles
                                                    MilesToFireDepartment = "3"
                                                Case 6 'Greater than 3 to 4 miles
                                                    MilesToFireDepartment = "4"
                                                Case 7 'Greater than 4 to 5 miles
                                                    MilesToFireDepartment = "5"
                                                Case 8 'Greater than 5 to 6 miles
                                                    MilesToFireDepartment = "6"
                                                Case 9 'Greater than 6 to 7 miles
                                                    MilesToFireDepartment = "7"
                                                Case 10 'Greater than 7 to 8 miles
                                                    MilesToFireDepartment = "8"
                                                Case 11 'Greater than 8 to 9 miles
                                                    MilesToFireDepartment = "9"
                                                Case 12 'Greater than 9 to 10 miles
                                                    MilesToFireDepartment = "10"
                                                Case 13 'Greater than 10 to 11 miles
                                                    MilesToFireDepartment = "11"
                                                Case 14 'Greater than 11 to 12 miles
                                                    MilesToFireDepartment = "12"
                                                Case 15 'Greater than 12 to 13 miles
                                                    MilesToFireDepartment = "13"
                                                Case 16 'Greater than 13 to 14 miles
                                                    MilesToFireDepartment = "14"
                                                Case 17 'Greater than 14 to 15 miles
                                                    MilesToFireDepartment = "15"
                                                Case 18 'Greater than 15 to 16 miles
                                                    MilesToFireDepartment = "16"
                                                Case Else '19 - Greater than 16 miles
                                                    MilesToFireDepartment = "17"
                                            End Select
                                            loc.MilesToFireDepartment = MilesToFireDepartment
                                        End If
                                    ElseIf CInt(FireDepartmentDistanceId) >= 1 AndAlso CInt(FireDepartmentDistanceId) <= 2 Then
                                        'value for pre-Verisk date; need to change to Verisk value; verify MilesToFireDepartment if present or default if blank
                                        'try to use MilesToFireDepartment to determine Verisk value for FireDepartmentDistanceId if available
                                        Dim defaultBoth As Boolean = False
                                        If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                                            'see if it fits into pre-Verisk 1 and 2 value ranges and use to set Verisk FireDepartmentDistanceId if so; default both if not
                                            If CInt(FireDepartmentDistanceId) = 2 Then
                                                '2
                                                If CDec(MilesToFireDepartment) <= CDec(5) Then
                                                    'okay for 2	5 Miles or Less
                                                    'use it to determine Verisk FireDepartmentDistanceId
                                                    SetFireDepartmentDistanceIdForMilesToFireDepartment(isVeriskDate, MilesToFireDepartment, FireDepartmentDistanceId)
                                                    loc.MilesToFireDepartment = MilesToFireDepartment
                                                    loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                                                Else
                                                    'need to default since it's 1	More than 5 Miles
                                                    'defaultMilesToFireDept = True
                                                    defaultBoth = True
                                                End If
                                            Else
                                                '1
                                                If CDec(MilesToFireDepartment) > CDec(5) Then
                                                    'okay for 1	More than 5 Miles
                                                    'use it to determine Verisk FireDepartmentDistanceId
                                                    SetFireDepartmentDistanceIdForMilesToFireDepartment(isVeriskDate, MilesToFireDepartment, FireDepartmentDistanceId)
                                                    loc.MilesToFireDepartment = MilesToFireDepartment
                                                    loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                                                Else
                                                    'need to default since it's 2	5 Miles or Less
                                                    'defaultMilesToFireDept = True
                                                    defaultBoth = True
                                                End If
                                            End If
                                        Else
                                            'need to default both FireDepartmentDistanceId and MilesToFireDepartment
                                            defaultBoth = True
                                        End If
                                        If defaultBoth = True Then
                                            If CInt(FireDepartmentDistanceId) = 2 Then
                                                '2
                                                MilesToFireDepartment = "4"
                                                FireDepartmentDistanceId = "6" 'Greater than 3 to 4 miles
                                            Else
                                                '1
                                                MilesToFireDepartment = "6"
                                                FireDepartmentDistanceId = "8" 'Greater than 5 to 6 miles
                                            End If
                                            loc.MilesToFireDepartment = MilesToFireDepartment
                                            loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                                        End If
                                    Else
                                        'invalid value; can try to set to 3-19 based on MilesToFireDepartment if available or can always clear
                                        'If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                                        '    'set to 3-19
                                        '    If CDec(MilesToFireDepartment) <= CDec(1) Then
                                        '        '3	1 mile or less

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(1) AndAlso CDec(MilesToFireDepartment) <= CDec(2) Then
                                        '        '4	Greater than 1 to 2 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(2) AndAlso CDec(MilesToFireDepartment) <= CDec(3) Then
                                        '        '5	Greater than 2 to 3 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(3) AndAlso CDec(MilesToFireDepartment) <= CDec(4) Then
                                        '        '6	Greater than 3 to 4 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(4) AndAlso CDec(MilesToFireDepartment) <= CDec(5) Then
                                        '        '7	Greater than 4 to 5 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(5) AndAlso CDec(MilesToFireDepartment) <= CDec(6) Then
                                        '        '8	Greater than 5 to 6 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(6) AndAlso CDec(MilesToFireDepartment) <= CDec(7) Then
                                        '        '9	Greater than 6 to 7 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(7) AndAlso CDec(MilesToFireDepartment) <= CDec(8) Then
                                        '        '10	Greater than 7 to 8 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(8) AndAlso CDec(MilesToFireDepartment) <= CDec(9) Then
                                        '        '11	Greater than 8 to 9 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(9) AndAlso CDec(MilesToFireDepartment) <= CDec(10) Then
                                        '        '12	Greater than 9 to 10 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(10) AndAlso CDec(MilesToFireDepartment) <= CDec(11) Then
                                        '        '13	Greater than 10 to 11 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(11) AndAlso CDec(MilesToFireDepartment) <= CDec(12) Then
                                        '        '14	Greater than 11 to 12 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(12) AndAlso CDec(MilesToFireDepartment) <= CDec(13) Then
                                        '        '15	Greater than 12 to 13 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(13) AndAlso CDec(MilesToFireDepartment) <= CDec(14) Then
                                        '        '16	Greater than 13 to 14 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(14) AndAlso CDec(MilesToFireDepartment) <= CDec(15) Then
                                        '        '17	Greater than 14 to 15 miles

                                        '    ElseIf CDec(MilesToFireDepartment) > CDec(15) AndAlso CDec(MilesToFireDepartment) <= CDec(16) Then
                                        '        '18	Greater than 15 to 16 miles

                                        '    Else
                                        '        '19	Greater than 16 miles

                                        '    End If
                                        'Else
                                        '    'clear out both fields

                                        'End If
                                        SetFireDepartmentDistanceIdForMilesToFireDepartment(isVeriskDate, MilesToFireDepartment, FireDepartmentDistanceId)
                                        loc.MilesToFireDepartment = MilesToFireDepartment
                                        loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                                    End If
                                Else
                                    'use pre-Verisk values
                                    If CInt(FireDepartmentDistanceId) >= 1 AndAlso CInt(FireDepartmentDistanceId) <= 2 Then
                                        'okay; verify MilesToFireDepartment if present or default if blank
                                        Dim defaultMilesToFireDept As Boolean = False
                                        If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                                            'validate current value and default if needed
                                            If CInt(FireDepartmentDistanceId) = 2 Then
                                                '2
                                                If CDec(MilesToFireDepartment) <= CDec(5) Then
                                                    'okay for 2	5 Miles or Less

                                                Else
                                                    'need to default since it's 1	More than 5 Miles
                                                    defaultMilesToFireDept = True
                                                End If
                                            Else
                                                '1
                                                If CDec(MilesToFireDepartment) > CDec(5) Then
                                                    'okay for 1	More than 5 Miles

                                                Else
                                                    'need to default since it's 2	5 Miles or Less
                                                    defaultMilesToFireDept = True
                                                End If
                                            End If
                                        Else
                                            'default
                                            defaultMilesToFireDept = True
                                        End If
                                        If defaultMilesToFireDept = True Then
                                            If CInt(FireDepartmentDistanceId) = 2 Then
                                                '2
                                                MilesToFireDepartment = "4"
                                            Else
                                                '1
                                                MilesToFireDepartment = "6"
                                            End If
                                            loc.MilesToFireDepartment = MilesToFireDepartment
                                        End If
                                    ElseIf CInt(FireDepartmentDistanceId) >= 3 AndAlso CInt(FireDepartmentDistanceId) <= 19 Then
                                        'value for Verisk date; need to change to pre-Verisk value; verify MilesToFireDepartment if present or default if blank
                                        If CInt(FireDepartmentDistanceId) >= 3 AndAlso CInt(FireDepartmentDistanceId) <= 7 Then
                                            '2	5 Miles or Less
                                            FireDepartmentDistanceId = "2"
                                            loc.FireDepartmentDistanceId = FireDepartmentDistanceId

                                            Dim defaultMilesToFireDept As Boolean = False
                                            If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                                                If CDec(MilesToFireDepartment) <= CDec(5) Then
                                                    'okay for 2	5 Miles or Less

                                                Else
                                                    'need to default since it's 1	More than 5 Miles
                                                    defaultMilesToFireDept = True
                                                End If
                                            Else
                                                defaultMilesToFireDept = True
                                            End If
                                            If defaultMilesToFireDept = True Then
                                                MilesToFireDepartment = "4"
                                                loc.MilesToFireDepartment = MilesToFireDepartment
                                            End If
                                        Else 'If CInt(FireDepartmentDistanceId) >= 8 AndAlso CInt(FireDepartmentDistanceId) <= 19 Then
                                            '1	More than 5 Miles
                                            FireDepartmentDistanceId = "1"
                                            loc.FireDepartmentDistanceId = FireDepartmentDistanceId

                                            Dim defaultMilesToFireDept As Boolean = False
                                            If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                                                If CDec(MilesToFireDepartment) > CDec(5) Then
                                                    'okay for 1	More than 5 Miles

                                                Else
                                                    'need to default since it's 2	5 Miles or Less
                                                    defaultMilesToFireDept = True
                                                End If
                                            Else
                                                defaultMilesToFireDept = True
                                            End If
                                            If defaultMilesToFireDept = True Then
                                                MilesToFireDepartment = "6"
                                                loc.MilesToFireDepartment = MilesToFireDepartment
                                            End If
                                        End If
                                    Else
                                        'invalid value; can try to set to 1 or 2 based on MilesToFireDepartment if available or can always clear
                                        'If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                                        '    'set to 1 or 2
                                        '    If CDec(MilesToFireDepartment) <= CDec(5) Then
                                        '        '2	5 Miles or Less

                                        '    Else
                                        '        '1	More than 5 Miles

                                        '    End If
                                        'Else
                                        '    'clear out both fields

                                        'End If
                                        SetFireDepartmentDistanceIdForMilesToFireDepartment(isVeriskDate, MilesToFireDepartment, FireDepartmentDistanceId)
                                        loc.MilesToFireDepartment = MilesToFireDepartment
                                        loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                                    End If
                                End If
                            Else
                                'just has MilesToFireDepartment; need to set FireDepartmentDistanceId
                                'If isVeriskDate = True Then
                                '    'use Verisk values

                                'Else
                                '    'use pre-Verisk values

                                'End If
                                SetFireDepartmentDistanceIdForMilesToFireDepartment(isVeriskDate, MilesToFireDepartment, FireDepartmentDistanceId)
                                loc.MilesToFireDepartment = MilesToFireDepartment
                                loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                            End If
                        Else
                            'neither are valid; can reset to empty string to make sure they're not used
                            MilesToFireDepartment = ""
                            FireDepartmentDistanceId = ""
                            loc.MilesToFireDepartment = MilesToFireDepartment
                            loc.FireDepartmentDistanceId = FireDepartmentDistanceId
                        End If

                        Dim FireHydrantDistanceId As String = loc.FireHydrantDistanceId
                        Dim FeetToFireHydrant As String = loc.FeetToFireHydrant
                        If IsPositiveIntegerString(FireHydrantDistanceId) = True OrElse IsPositiveIntegerString(FeetToFireHydrant) = True Then
                            If IsPositiveIntegerString(FireHydrantDistanceId) = True Then
                                'at least has FireHydrantDistanceId; could also have FeetToFireHydrant... verify if there or set if not
                                If CInt(FireHydrantDistanceId) = 1 OrElse CInt(FireHydrantDistanceId) = 4 Then
                                    'okay; verify FeetToFireHydrant if present or default if blank
                                    Dim tempFeetToFireHydrant As String = FeetToFireHydrant
                                    Dim tempFireHydrantDistanceId As String = FireHydrantDistanceId
                                    SetFireHydrantDistanceIdForFeetToFireHydrant(isVeriskDate, tempFeetToFireHydrant, tempFireHydrantDistanceId)
                                    If tempFireHydrantDistanceId = FireHydrantDistanceId Then
                                        'FeetToFireHydrant must be okay for FireHydrantDistanceId if tempFireHydrantDistanceId came back w/ the same value

                                    Else
                                        'need to default FeetToFireHydrant
                                        Select Case CInt(FireHydrantDistanceId)
                                            Case 1 'Over 1,000 Feet
                                                FeetToFireHydrant = "1001"
                                            Case 4 'Within 1,000 feet
                                                FeetToFireHydrant = "999"
                                        End Select
                                        loc.FeetToFireHydrant = FeetToFireHydrant
                                    End If
                                Else
                                    'invalid value; can try to set to 1 or 4 based on FeetToFireHydrant if available or can always clear
                                    'note: could also try to convert ids 2 (1000+ feet) and 3 (1,000 Feet or Less) if they're being used, although that should never be the case since they've never been valid
                                    SetFireHydrantDistanceIdForFeetToFireHydrant(isVeriskDate, FeetToFireHydrant, FireHydrantDistanceId)
                                    loc.FeetToFireHydrant = FeetToFireHydrant
                                    loc.FireHydrantDistanceId = FireHydrantDistanceId
                                End If
                            Else
                                'just has FeetToFireHydrant; need to set FireHydrantDistanceId
                                SetFireHydrantDistanceIdForFeetToFireHydrant(isVeriskDate, FeetToFireHydrant, FireHydrantDistanceId)
                                loc.FeetToFireHydrant = FeetToFireHydrant
                                loc.FireHydrantDistanceId = FireHydrantDistanceId
                            End If
                        Else
                            'neither are valid; can reset to empty string to make sure they're not used
                            FeetToFireHydrant = ""
                            FireHydrantDistanceId = ""
                            loc.FeetToFireHydrant = FeetToFireHydrant
                            loc.FireHydrantDistanceId = FireHydrantDistanceId
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub SetFireDepartmentDistanceIdForMilesToFireDepartment(ByVal isVeriskDate As Boolean, ByRef MilesToFireDepartment As String, ByRef FireDepartmentDistanceId As String)
            If IsPositiveDecimalString(MilesToFireDepartment) = True Then
                If isVeriskDate = True Then
                    'use Verisk values
                    'set to 3-19
                    If CDec(MilesToFireDepartment) <= CDec(1) Then
                        '3	1 mile or less
                        FireDepartmentDistanceId = "3"
                    ElseIf CDec(MilesToFireDepartment) > CDec(1) AndAlso CDec(MilesToFireDepartment) <= CDec(2) Then
                        '4	Greater than 1 to 2 miles
                        FireDepartmentDistanceId = "4"
                    ElseIf CDec(MilesToFireDepartment) > CDec(2) AndAlso CDec(MilesToFireDepartment) <= CDec(3) Then
                        '5	Greater than 2 to 3 miles
                        FireDepartmentDistanceId = "5"
                    ElseIf CDec(MilesToFireDepartment) > CDec(3) AndAlso CDec(MilesToFireDepartment) <= CDec(4) Then
                        '6	Greater than 3 to 4 miles
                        FireDepartmentDistanceId = "6"
                    ElseIf CDec(MilesToFireDepartment) > CDec(4) AndAlso CDec(MilesToFireDepartment) <= CDec(5) Then
                        '7	Greater than 4 to 5 miles
                        FireDepartmentDistanceId = "7"
                    ElseIf CDec(MilesToFireDepartment) > CDec(5) AndAlso CDec(MilesToFireDepartment) <= CDec(6) Then
                        '8	Greater than 5 to 6 miles
                        FireDepartmentDistanceId = "8"
                    ElseIf CDec(MilesToFireDepartment) > CDec(6) AndAlso CDec(MilesToFireDepartment) <= CDec(7) Then
                        '9	Greater than 6 to 7 miles
                        FireDepartmentDistanceId = "9"
                    ElseIf CDec(MilesToFireDepartment) > CDec(7) AndAlso CDec(MilesToFireDepartment) <= CDec(8) Then
                        '10	Greater than 7 to 8 miles
                        FireDepartmentDistanceId = "10"
                    ElseIf CDec(MilesToFireDepartment) > CDec(8) AndAlso CDec(MilesToFireDepartment) <= CDec(9) Then
                        '11	Greater than 8 to 9 miles
                        FireDepartmentDistanceId = "11"
                    ElseIf CDec(MilesToFireDepartment) > CDec(9) AndAlso CDec(MilesToFireDepartment) <= CDec(10) Then
                        '12	Greater than 9 to 10 miles
                        FireDepartmentDistanceId = "12"
                    ElseIf CDec(MilesToFireDepartment) > CDec(10) AndAlso CDec(MilesToFireDepartment) <= CDec(11) Then
                        '13	Greater than 10 to 11 miles
                        FireDepartmentDistanceId = "13"
                    ElseIf CDec(MilesToFireDepartment) > CDec(11) AndAlso CDec(MilesToFireDepartment) <= CDec(12) Then
                        '14	Greater than 11 to 12 miles
                        FireDepartmentDistanceId = "14"
                    ElseIf CDec(MilesToFireDepartment) > CDec(12) AndAlso CDec(MilesToFireDepartment) <= CDec(13) Then
                        '15	Greater than 12 to 13 miles
                        FireDepartmentDistanceId = "15"
                    ElseIf CDec(MilesToFireDepartment) > CDec(13) AndAlso CDec(MilesToFireDepartment) <= CDec(14) Then
                        '16	Greater than 13 to 14 miles
                        FireDepartmentDistanceId = "16"
                    ElseIf CDec(MilesToFireDepartment) > CDec(14) AndAlso CDec(MilesToFireDepartment) <= CDec(15) Then
                        '17	Greater than 14 to 15 miles
                        FireDepartmentDistanceId = "17"
                    ElseIf CDec(MilesToFireDepartment) > CDec(15) AndAlso CDec(MilesToFireDepartment) <= CDec(16) Then
                        '18	Greater than 15 to 16 miles
                        FireDepartmentDistanceId = "18"
                    Else
                        '19	Greater than 16 miles
                        FireDepartmentDistanceId = "19"
                    End If
                Else
                    'use pre-Verisk values
                    'set to 1 or 2
                    If CDec(MilesToFireDepartment) <= CDec(5) Then
                        '2	5 Miles or Less
                        FireDepartmentDistanceId = "2"
                    Else
                        '1	More than 5 Miles
                        FireDepartmentDistanceId = "1"
                    End If
                End If
            Else
                'clear out both fields
                MilesToFireDepartment = ""
                FireDepartmentDistanceId = ""
            End If
        End Sub
        Public Sub SetFireHydrantDistanceIdForFeetToFireHydrant(ByVal isVeriskDate As Boolean, ByRef FeetToFireHydrant As String, ByRef FireHydrantDistanceId As String)
            'same values currently being used for pre and post Verisk
            If IsPositiveIntegerString(FeetToFireHydrant) = True Then
                If CInt(FeetToFireHydrant) <= 1000 Then
                    '4	Within 1,000 feet
                    FireHydrantDistanceId = "4"
                Else
                    '1	Over 1,000 Feet
                    FireHydrantDistanceId = "1"
                End If
            Else
                'clear out both fields
                FeetToFireHydrant = ""
                FireHydrantDistanceId = ""
            End If
        End Sub

        'added 10/9/2016
        Public Shared Function StreetAddressesMatch(ByVal add1 As QuickQuoteAddress, ByVal add2 As QuickQuoteAddress) As Boolean
            Dim isMatch As Boolean = False

            Dim hasStreetAddressInfo1 As Boolean = False
            Dim hasStreetAddressInfo2 As Boolean = False

            If add1 IsNot Nothing AndAlso add1.HasAnyStreetAddressInfo = True Then
                hasStreetAddressInfo1 = True
            End If
            If add2 IsNot Nothing AndAlso add2.HasAnyStreetAddressInfo = True Then
                hasStreetAddressInfo2 = True
            End If

            If hasStreetAddressInfo1 = False AndAlso hasStreetAddressInfo2 = False Then
                'neither have street address info
                isMatch = True
            Else
                '1 or both have street address info
                If hasStreetAddressInfo1 = True AndAlso hasStreetAddressInfo2 = True Then
                    'If add1.HouseNum = add2.HouseNum AndAlso add1.StreetName = add2.StreetName AndAlso add1.City = add2.City AndAlso add1.State = add2.State AndAlso add1.Zip = add2.Zip Then
                    'updated 10/12/2016 to check upper case
                    'If UCase(add1.HouseNum) = UCase(add2.HouseNum) AndAlso UCase(add1.StreetName) = UCase(add2.StreetName) AndAlso UCase(add1.City) = UCase(add2.City) AndAlso UCase(add1.State) = UCase(add2.State) AndAlso add1.Zip = add2.Zip Then
                    'updated 10/13/2016 to also check ApartmentNumber
                    If UCase(add1.HouseNum) = UCase(add2.HouseNum) AndAlso UCase(add1.StreetName) = UCase(add2.StreetName) AndAlso UCase(add1.ApartmentNumber) = UCase(add2.ApartmentNumber) AndAlso UCase(add1.City) = UCase(add2.City) AndAlso UCase(add1.State) = UCase(add2.State) AndAlso add1.Zip = add2.Zip Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function IsVeriskProtectionClassReportOrderingEnabled() As Boolean
            Dim isEnabled As Boolean = False
            Dim diaValidation As New Diamond.Common.Objects.DiamondValidation 'not currently uses by Diamond code? - verified in ILSPY
            'isEnabled = Diamond.UI.StaticDataManager.SystemSettingsDataManager.SystemSettingsData.Settings.SystemSettingBool("Integration\ISO\Passport\PPC", "Enabled", False) 'this works eventhough system setting value can be 0/1
            isEnabled = Diamond.UI.StaticDataManager _
                            .InterfaceSettingsDataManager.IsInterfaceEnabledAnyVersion(Diamond.Common.Enums.Interface.InterfaceType.ISOPPCLookup, diaValidation)

            Return isEnabled
        End Function
        Public Shared Function CanVeriskProtectionClassReportBeOrderedForQuote(ByVal quote As QuickQuoteObject) As Boolean
            Dim couldOrder As Boolean = False

            If quote IsNot Nothing Then
                'Dim isLobOkay As Boolean = False
                'Select Case quote.LobType
                '    Case QuickQuoteObject.QuickQuoteLobType.HomePersonal, QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                '        isLobOkay = True
                '    Case Else
                '        isLobOkay = False 'redundant
                'End Select
                'If isLobOkay = True AndAlso IsValidEffectiveDateForVeriskProtectionClassVersion(quote.EffectiveDate) = True Then
                '    couldOrder = IsVeriskProtectionClassReportOrderingEnabled()
                'End If
                'updated 10/20/2016 to use new method below
                couldOrder = CanVeriskProtectionClassReportBeOrderedForLobAndEffectiveDate(quote.LobType, quote.EffectiveDate)
            End If

            Return couldOrder
        End Function
        'added similar function 10/20/2016 for whenever we don't have full quote available
        Public Shared Function CanVeriskProtectionClassReportBeOrderedForLobAndEffectiveDate(ByVal lobType As QuickQuoteObject.QuickQuoteLobType, ByVal effDate As String) As Boolean
            Dim couldOrder As Boolean = False

            Dim isLobOkay As Boolean = False
            Select Case lobType
                Case QuickQuoteObject.QuickQuoteLobType.HomePersonal, QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                    isLobOkay = True
                Case Else
                    isLobOkay = False 'redundant
            End Select
            If isLobOkay = True AndAlso IsValidEffectiveDateForVeriskProtectionClassVersion(effDate) = True Then
                couldOrder = IsVeriskProtectionClassReportOrderingEnabled()
            End If

            Return couldOrder
        End Function

        'added 10/11/2016 - similar to functions above for Drivers, Applicants, etc.
        Public Function DiamondLocationForActiveNum(ByVal diaImage As Diamond.Common.Objects.Policy.Image, ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Location
            Dim diaLocation As Diamond.Common.Objects.Policy.Location = Nothing

            'Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)
            'If rl IsNot Nothing Then
            '    diaLocation = DiamondLocationForActiveNum(rl.Locations, activeNum)
            'End If
            'updated 9/14/2018
            diaLocation = DiamondLocationForActiveNum_GenericList(AllDiamondLocations(diaImage, level:=MultiStateLevel.AllStates), activeNum)

            Return diaLocation
        End Function
        Public Function DiamondLocationForActiveNum_GenericList(ByVal diaLocations As List(Of Diamond.Common.Objects.Policy.Location), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Location 'added 9/14/2018
            Dim diaLocation As Diamond.Common.Objects.Policy.Location = Nothing

            If activeNum > 0 AndAlso diaLocations IsNot Nothing AndAlso diaLocations.Count >= activeNum Then
                Dim activeCount As Integer = 0
                For Each l As Diamond.Common.Objects.Policy.Location In diaLocations
                    If l.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                        activeCount += 1
                        If activeNum = activeCount Then
                            diaLocation = l
                            Exit For
                        End If
                    End If
                Next
            End If

            Return diaLocation
        End Function
        Public Function DiamondLocationForActiveNum(ByVal diaLocations As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location), ByVal activeNum As Integer) As Diamond.Common.Objects.Policy.Location
            Dim diaLocation As Diamond.Common.Objects.Policy.Location = Nothing

            If activeNum > 0 AndAlso diaLocations IsNot Nothing AndAlso diaLocations.Count >= activeNum Then
                Dim activeCount As Integer = 0
                For Each l As Diamond.Common.Objects.Policy.Location In diaLocations
                    If l.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                        activeCount += 1
                        If activeNum = activeCount Then
                            diaLocation = l
                            Exit For 'added 12/9/2014
                        End If
                    End If
                Next
            End If

            Return diaLocation
        End Function
        'added 10/11/2016
        Public Function ISOTransmissionsForUnitNum(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal unitNum As Integer) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim uISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                    If iso.UnitNum = unitNum Then
                        If uISOs Is Nothing Then
                            uISOs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
                        End If
                        uISOs.Add(iso)
                    End If
                Next
            End If

            Return uISOs
        End Function
        'added 10/23/2016 to consolidate logic; note: difference between existing functions is that the ones w/ required params would try to find match on 0 where this method has optional params w/ 0 as the default and would not exclude anything
        Public Function ISOTransmissionsForSearchCriteria(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNum As Integer = 0, Optional ByVal isoTransmissionId As Integer = 0, Optional ByVal qqAddressToMatchReturnedAddress As QuickQuoteAddress = Nothing, Optional ByVal diaAddressToMatchReturnedAddress As Diamond.Common.Objects.Address = Nothing, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum, Optional ByVal UseQuickQuoteOrDiamondAddressWhenBothHaveValues As QuickQuoteXML.PolicyOriginType = QuickQuoteXML.PolicyOriginType.VelociRater) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim sISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                Dim s1ISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing
                For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                    If (policyImageNum = 0 OrElse iso.PolicyImageNum = policyImageNum) AndAlso (unitNum = 0 OrElse iso.UnitNum = unitNum) AndAlso (isoTransmissionId = 0 OrElse (IsValidDiamondNum(iso.ISOTransmissionId) = True AndAlso iso.ISOTransmissionId.Id = isoTransmissionId)) Then
                        If s1ISOs Is Nothing Then
                            s1ISOs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
                        End If
                        s1ISOs.Add(iso)
                    End If
                Next
                If qqAddressToMatchReturnedAddress IsNot Nothing OrElse diaAddressToMatchReturnedAddress IsNot Nothing Then
                    Dim addressToUse As QuickQuoteXML.PolicyOriginType = QuickQuoteXML.PolicyOriginType.VelociRater
                    If qqAddressToMatchReturnedAddress IsNot Nothing AndAlso diaAddressToMatchReturnedAddress IsNot Nothing Then
                        If UseQuickQuoteOrDiamondAddressWhenBothHaveValues = QuickQuoteXML.PolicyOriginType.Diamond Then
                            addressToUse = QuickQuoteXML.PolicyOriginType.Diamond
                        Else
                            addressToUse = QuickQuoteXML.PolicyOriginType.VelociRater 'redundant
                        End If
                    ElseIf diaAddressToMatchReturnedAddress IsNot Nothing Then
                        addressToUse = QuickQuoteXML.PolicyOriginType.Diamond
                    Else
                        addressToUse = QuickQuoteXML.PolicyOriginType.VelociRater 'redundant
                    End If
                    If addressToUse = QuickQuoteXML.PolicyOriginType.Diamond Then
                        sISOs = ISOTransmissionsForReturnedAddressMatchingDiamondAddress_WithStreetAddressEvaluationType(s1ISOs, diaAddressToMatchReturnedAddress, streetAddressEvalType)
                    Else
                        sISOs = ISOTransmissionsForReturnedAddressMatchingQuickQuoteAddress_WithStreetAddressEvaluationType(s1ISOs, qqAddressToMatchReturnedAddress, streetAddressEvalType)
                    End If
                Else
                    sISOs = s1ISOs
                End If
            End If

            Return sISOs
        End Function
        Public Function ISOTransmissionForSearchCriteria(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNum As Integer = 0, Optional ByVal isoTransmissionId As Integer = 0, Optional ByVal qqAddressToMatchReturnedAddress As QuickQuoteAddress = Nothing, Optional ByVal diaAddressToMatchReturnedAddress As Diamond.Common.Objects.Address = Nothing, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum, Optional ByVal UseQuickQuoteOrDiamondAddressWhenBothHaveValues As QuickQuoteXML.PolicyOriginType = QuickQuoteXML.PolicyOriginType.VelociRater, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal listOrderType As IsoTransmissionListOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId) As Diamond.Common.Objects.ThirdParty.ISOTransmission
            Dim sIso As Diamond.Common.Objects.ThirdParty.ISOTransmission = Nothing

            Dim sISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = ISOTransmissionsForSearchCriteria(isos, policyImageNum, unitNum, isoTransmissionId, qqAddressToMatchReturnedAddress, diaAddressToMatchReturnedAddress, streetAddressEvalType, UseQuickQuoteOrDiamondAddressWhenBothHaveValues)
            If sISOs IsNot Nothing AndAlso sISOs.Count > 0 Then
                sIso = FirstOrLastIsoTransmissionByOrderType(sISOs, firstOrLastItem, listOrderType)
            End If

            Return sIso
        End Function
        Enum StreetAddressEvaluationType
            None = 0
            NormalWithApartmentNum = 1
            WithoutApartmentNum = 2
            Both = 3
        End Enum
        Public Function ISOTransmissionsForReturnedAddressMatchingOneLineAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal oneLineAddress As String) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim aISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                    If UCase(iso.ReturnedAddress) = UCase(oneLineAddress) Then
                        If aISOs Is Nothing Then
                            aISOs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
                        End If
                        aISOs.Add(iso)
                    End If
                Next
            End If

            Return aISOs
        End Function
        Public Function ISOTransmissionsForReturnedAddressMatchingQuickQuoteAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal qqAddress As QuickQuoteAddress, Optional ByVal useApartmentNumberInStreetAddressEvaluation As Boolean = True) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim aISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                Dim qqOneLineAddress As String = ""
                If qqAddress IsNot Nothing Then
                    qqOneLineAddress = qqAddress.OneLineStreetAddress(useApartmentNumberInStreetAddressEvaluation)
                End If
                'For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                '    If UCase(iso.ReturnedAddress) = UCase(qqOneLineAddress) Then
                '        If aISOs Is Nothing Then
                '            aISOs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
                '        End If
                '        aISOs.Add(iso)
                '    End If
                'Next
                'updated to use common method for oneLineAddress
                aISOs = ISOTransmissionsForReturnedAddressMatchingOneLineAddress(isos, qqOneLineAddress)
            End If

            Return aISOs
        End Function
        Public Function ISOTransmissionsForReturnedAddressMatchingQuickQuoteAddress_WithStreetAddressEvaluationType(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal qqAddress As QuickQuoteAddress, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim aISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                Dim useApartmentNumberInStreetAddressEvaluation As Boolean = True
                If streetAddressEvalType = StreetAddressEvaluationType.WithoutApartmentNum Then
                    useApartmentNumberInStreetAddressEvaluation = False
                End If
                aISOs = ISOTransmissionsForReturnedAddressMatchingQuickQuoteAddress(isos, qqAddress, useApartmentNumberInStreetAddressEvaluation)
                If streetAddressEvalType = StreetAddressEvaluationType.Both AndAlso (aISOs Is Nothing OrElse aISOs.Count = 0) Then
                    'nothing found on 1st search attempt
                    'next see if address is any different w/ or w/o aptNum
                    If IsOneLineQuickQuoteAddressAnyDifferentWithOrWithoutApartmentNum(qqAddress) = True Then
                        'now try the opposite of what was already tried... current sequence is to try w/ AptNum 1st and then w/o, but logic should handle either way if initial search type changes
                        If useApartmentNumberInStreetAddressEvaluation = True Then
                            useApartmentNumberInStreetAddressEvaluation = False
                        Else
                            useApartmentNumberInStreetAddressEvaluation = True
                        End If
                        aISOs = ISOTransmissionsForReturnedAddressMatchingQuickQuoteAddress(isos, qqAddress, useApartmentNumberInStreetAddressEvaluation)
                    End If
                End If

            End If

            Return aISOs
        End Function
        Public Function ISOTransmissionsForReturnedAddressMatchingDiamondAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal diaAddress As Diamond.Common.Objects.Address, Optional ByVal useApartmentNumberInStreetAddressEvaluation As Boolean = True) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim aISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                Dim diaOneLineAddress As String = ""
                If diaAddress IsNot Nothing Then
                    diaOneLineAddress = OneLineStreetAddressForDiamondAddress(diaAddress, useApartmentNumberInStreetAddressEvaluation)
                End If
                'For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                '    If UCase(iso.ReturnedAddress) = UCase(diaOneLineAddress) Then
                '        If aISOs Is Nothing Then
                '            aISOs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
                '        End If
                '        aISOs.Add(iso)
                '    End If
                'Next
                'updated to use common method for oneLineAddress
                aISOs = ISOTransmissionsForReturnedAddressMatchingOneLineAddress(isos, diaOneLineAddress)
            End If

            Return aISOs
        End Function
        Public Function ISOTransmissionsForReturnedAddressMatchingDiamondAddress_WithStreetAddressEvaluationType(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal diaAddress As Diamond.Common.Objects.Address, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim aISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                Dim useApartmentNumberInStreetAddressEvaluation As Boolean = True
                If streetAddressEvalType = StreetAddressEvaluationType.WithoutApartmentNum Then
                    useApartmentNumberInStreetAddressEvaluation = False
                End If
                aISOs = ISOTransmissionsForReturnedAddressMatchingDiamondAddress(isos, diaAddress, useApartmentNumberInStreetAddressEvaluation)
                If streetAddressEvalType = StreetAddressEvaluationType.Both AndAlso (aISOs Is Nothing OrElse aISOs.Count = 0) Then
                    'nothing found on 1st search attempt
                    'next see if address is any different w/ or w/o aptNum
                    If IsOneLineDiamondAddressAnyDifferentWithOrWithoutApartmentNum(diaAddress) = True Then
                        'now try the opposite of what was already tried... current sequence is to try w/ AptNum 1st and then w/o, but logic should handle either way if initial search type changes
                        If useApartmentNumberInStreetAddressEvaluation = True Then
                            useApartmentNumberInStreetAddressEvaluation = False
                        Else
                            useApartmentNumberInStreetAddressEvaluation = True
                        End If
                        aISOs = ISOTransmissionsForReturnedAddressMatchingDiamondAddress(isos, diaAddress, useApartmentNumberInStreetAddressEvaluation)
                    End If
                End If

            End If

            Return aISOs
        End Function
        Public Function IsOneLineQuickQuoteAddressAnyDifferentWithOrWithoutApartmentNum(ByVal qqAddress As QuickQuoteAddress) As Boolean
            Dim isDifferent As Boolean = False

            Dim qqOneLineAddressWithAptNum As String = ""
            Dim qqOneLineAddressWithoutAptNum As String = ""
            If qqAddress IsNot Nothing Then
                qqOneLineAddressWithAptNum = qqAddress.OneLineStreetAddress(useApartmentNumber:=True)
                qqOneLineAddressWithoutAptNum = qqAddress.OneLineStreetAddress(useApartmentNumber:=False)
            End If
            If UCase(qqOneLineAddressWithAptNum) <> UCase(qqOneLineAddressWithoutAptNum) Then
                isDifferent = True
            End If

            Return isDifferent
        End Function
        Public Function IsOneLineDiamondAddressAnyDifferentWithOrWithoutApartmentNum(ByVal diaAddress As Diamond.Common.Objects.Address) As Boolean
            Dim isDifferent As Boolean = False

            Dim diaOneLineAddressWithAptNum As String = ""
            Dim diaOneLineAddressWithoutAptNum As String = ""
            If diaAddress IsNot Nothing Then
                diaOneLineAddressWithAptNum = OneLineStreetAddressForDiamondAddress(diaAddress, useApartmentNum:=True)
                diaOneLineAddressWithoutAptNum = OneLineStreetAddressForDiamondAddress(diaAddress, useApartmentNum:=False)
            End If
            If UCase(diaOneLineAddressWithAptNum) <> UCase(diaOneLineAddressWithoutAptNum) Then
                isDifferent = True
            End If

            Return isDifferent
        End Function
        Public Function ISOTransmissionsForUnitNumAndReturnedAddressMatchingQuickQuoteAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal unitNum As Integer, ByVal qqAddress As QuickQuoteAddress, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim uaISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            Dim uISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = ISOTransmissionsForUnitNum(isos, unitNum)

            If uISOs IsNot Nothing AndAlso uISOs.Count > 0 Then
                uaISOs = ISOTransmissionsForReturnedAddressMatchingQuickQuoteAddress_WithStreetAddressEvaluationType(uISOs, qqAddress, streetAddressEvalType)
            End If

            Return uaISOs
        End Function
        Public Function ISOTransmissionsForUnitNumAndReturnedAddressMatchingDiamondAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal unitNum As Integer, ByVal diaAddress As Diamond.Common.Objects.Address, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission)
            Dim uaISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing

            Dim uISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = ISOTransmissionsForUnitNum(isos, unitNum)

            If uISOs IsNot Nothing AndAlso uISOs.Count > 0 Then
                uaISOs = ISOTransmissionsForReturnedAddressMatchingDiamondAddress_WithStreetAddressEvaluationType(uISOs, diaAddress, streetAddressEvalType)
            End If

            Return uaISOs
        End Function
        Enum IsoTransmissionListOrderType
            None = 0
            ByOrderInList = 1
            ByIsoTransmissionId = 2
            ByPcAddedDate = 3
        End Enum
        Public Function ISOTransmissionForUnitNumAndReturnedAddressMatchingQuickQuoteAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal unitNum As Integer, ByVal qqAddress As QuickQuoteAddress, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal listOrderType As IsoTransmissionListOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId) As Diamond.Common.Objects.ThirdParty.ISOTransmission
            Dim uaIso As Diamond.Common.Objects.ThirdParty.ISOTransmission = Nothing

            Dim uaISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = ISOTransmissionsForUnitNumAndReturnedAddressMatchingQuickQuoteAddress(isos, unitNum, qqAddress, streetAddressEvalType)
            If uaISOs IsNot Nothing AndAlso uaISOs.Count > 0 Then
                'If listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId Then
                '    For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In uaISOs
                '        If IsValidDiamondNum(isoT.ISOTransmissionId) = True Then
                '            If uaIso Is Nothing Then
                '                uaIso = isoT
                '            Else
                '                If firstOrLastItem = FirstOrLast.First Then
                '                    If isoT.ISOTransmissionId.Id < uaIso.ISOTransmissionId.Id Then
                '                        uaIso = isoT
                '                    End If
                '                Else 'Last
                '                    If isoT.ISOTransmissionId.Id > uaIso.ISOTransmissionId.Id Then
                '                        uaIso = isoT
                '                    End If
                '                End If
                '            End If
                '        End If
                '    Next
                'End If
                'If uaIso Is Nothing Then 'use this if listOrderType <> ByIsoTransmissionId (ByOrderInList) or if nothing is returned for ByIsoTransmissionId
                '    If firstOrLastItem = FirstOrLast.First Then
                '        uaIso = uaISOs(0)
                '    Else
                '        uaIso = uaISOs(uaISOs.Count - 1)
                '    End If
                'End If
                'updated to use new common method
                uaIso = FirstOrLastIsoTransmissionByOrderType(uaISOs, firstOrLastItem, listOrderType)
            End If

            Return uaIso
        End Function
        Public Function ISOTransmissionForUnitNumAndReturnedAddressMatchingDiamondAddress(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal unitNum As Integer, ByVal diaAddress As Diamond.Common.Objects.Address, Optional ByVal streetAddressEvalType As StreetAddressEvaluationType = StreetAddressEvaluationType.NormalWithApartmentNum, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal listOrderType As IsoTransmissionListOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId) As Diamond.Common.Objects.ThirdParty.ISOTransmission
            Dim uaIso As Diamond.Common.Objects.ThirdParty.ISOTransmission = Nothing

            Dim uaISOs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = ISOTransmissionsForUnitNumAndReturnedAddressMatchingDiamondAddress(isos, unitNum, diaAddress, streetAddressEvalType)
            If uaISOs IsNot Nothing AndAlso uaISOs.Count > 0 Then
                'If listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId Then
                '    For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In uaISOs
                '        If IsValidDiamondNum(isoT.ISOTransmissionId) = True Then
                '            If uaIso Is Nothing Then
                '                uaIso = isoT
                '            Else
                '                If firstOrLastItem = FirstOrLast.First Then
                '                    If isoT.ISOTransmissionId.Id < uaIso.ISOTransmissionId.Id Then
                '                        uaIso = isoT
                '                    End If
                '                Else 'Last
                '                    If isoT.ISOTransmissionId.Id > uaIso.ISOTransmissionId.Id Then
                '                        uaIso = isoT
                '                    End If
                '                End If
                '            End If
                '        End If
                '    Next
                'End If
                'If uaIso Is Nothing Then 'use this if listOrderType <> ByIsoTransmissionId (ByOrderInList) or if nothing is returned for ByIsoTransmissionId
                '    If firstOrLastItem = FirstOrLast.First Then
                '        uaIso = uaISOs(0)
                '    Else
                '        uaIso = uaISOs(uaISOs.Count - 1)
                '    End If
                'End If
                'updated to use new common method
                uaIso = FirstOrLastIsoTransmissionByOrderType(uaISOs, firstOrLastItem, listOrderType)
            End If

            Return uaIso
        End Function
        Public Function FirstOrLastIsoTransmissionByOrderType(ByVal isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission), ByVal firstOrLastItem As FirstOrLast, Optional ByVal listOrderType As IsoTransmissionListOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId) As Diamond.Common.Objects.ThirdParty.ISOTransmission
            Dim iso As Diamond.Common.Objects.ThirdParty.ISOTransmission = Nothing

            If isos IsNot Nothing AndAlso isos.Count > 0 Then
                If listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId Then
                    For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                        If IsValidDiamondNum(isoT.ISOTransmissionId) = True Then
                            If iso Is Nothing Then
                                iso = isoT
                            Else
                                If firstOrLastItem = FirstOrLast.First Then
                                    If isoT.ISOTransmissionId.Id < iso.ISOTransmissionId.Id Then
                                        iso = isoT
                                    End If
                                Else 'Last
                                    If isoT.ISOTransmissionId.Id > iso.ISOTransmissionId.Id Then
                                        iso = isoT
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
                'updated 10/23/2016 for ByPcAddedDate
                If listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId OrElse listOrderType = IsoTransmissionListOrderType.ByPcAddedDate Then
                    For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
                        If (listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId AndAlso IsValidDiamondNum(isoT.ISOTransmissionId) = True) OrElse (listOrderType = IsoTransmissionListOrderType.ByPcAddedDate AndAlso isoT.PCAddedDate IsNot Nothing AndAlso IsDate(isoT.PCAddedDate.ToString) = True AndAlso CDate(isoT.PCAddedDate.ToString) <> CDate("1/1/1800")) Then
                            If iso Is Nothing Then
                                iso = isoT
                            Else
                                If firstOrLastItem = FirstOrLast.First Then
                                    If (listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId AndAlso isoT.ISOTransmissionId.Id < iso.ISOTransmissionId.Id) OrElse (listOrderType = IsoTransmissionListOrderType.ByPcAddedDate AndAlso isoT.PCAddedDate < iso.PCAddedDate) Then
                                        iso = isoT
                                    End If
                                Else 'Last
                                    If (listOrderType = IsoTransmissionListOrderType.ByIsoTransmissionId AndAlso isoT.ISOTransmissionId.Id > iso.ISOTransmissionId.Id) OrElse (listOrderType = IsoTransmissionListOrderType.ByPcAddedDate AndAlso isoT.PCAddedDate > iso.PCAddedDate) Then
                                        iso = isoT
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
                If iso Is Nothing Then 'use this if listOrderType <> ByIsoTransmissionId (ByOrderInList) or if nothing is returned for ByIsoTransmissionId
                    If firstOrLastItem = FirstOrLast.First Then
                        iso = isos(0)
                    Else
                        iso = isos(isos.Count - 1)
                    End If
                End If
            End If

            Return iso
        End Function

        'added 10/12/2016
        Public Shared Function DiamondAndQuickQuoteStreetAddressesMatch(ByVal diaAdd As Diamond.Common.Objects.Address, ByVal qqAdd As QuickQuoteAddress) As Boolean
            Dim isMatch As Boolean = False

            Dim hasDiaStreetAddressInfo As Boolean = False
            Dim hasQqStreetAddressInfo As Boolean = False

            hasDiaStreetAddressInfo = DiamondAddressHasAnyStreetInfo(diaAdd)

            If qqAdd IsNot Nothing AndAlso qqAdd.HasAnyStreetAddressInfo = True Then
                hasQqStreetAddressInfo = True
            End If

            If hasDiaStreetAddressInfo = False AndAlso hasQqStreetAddressInfo = False Then
                'neither have street address info
                isMatch = True
            Else
                '1 or both have street address info
                If hasDiaStreetAddressInfo = True AndAlso hasQqStreetAddressInfo = True Then
                    'If UCase(diaAdd.HouseNumber) = UCase(qqAdd.HouseNum) AndAlso UCase(diaAdd.StreetName) = UCase(qqAdd.StreetName) AndAlso UCase(diaAdd.City) = UCase(qqAdd.City) AndAlso diaAdd.StateId.ToString = qqAdd.StateId AndAlso diaAdd.Zip = qqAdd.Zip Then
                    'updated 10/13/2016 to also check ApartmentNumber
                    If UCase(diaAdd.HouseNumber) = UCase(qqAdd.HouseNum) AndAlso UCase(diaAdd.StreetName) = UCase(qqAdd.StreetName) AndAlso UCase(diaAdd.ApartmentNumber) = UCase(qqAdd.ApartmentNumber) AndAlso UCase(diaAdd.City) = UCase(qqAdd.City) AndAlso diaAdd.StateId.ToString = qqAdd.StateId AndAlso diaAdd.Zip = qqAdd.Zip Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Shared Function DiamondAddressHasAnyStreetInfo(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasInfo As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    'If String.IsNullOrWhiteSpace(.HouseNumber) = False OrElse String.IsNullOrWhiteSpace(.StreetName) = False OrElse String.IsNullOrWhiteSpace(.City) = False OrElse .StateId > 0 OrElse String.IsNullOrWhiteSpace(.Zip) = False Then
                    'updated 10/13/2016 to also check for ApartmentNumber
                    If String.IsNullOrWhiteSpace(.HouseNumber) = False OrElse String.IsNullOrWhiteSpace(.StreetName) = False OrElse String.IsNullOrWhiteSpace(.ApartmentNumber) = False OrElse String.IsNullOrWhiteSpace(.City) = False OrElse .StateId > 0 OrElse String.IsNullOrWhiteSpace(.Zip) = False Then
                        hasInfo = True
                    End If
                End With
            End If

            Return hasInfo
        End Function
        Public Shared Function DiamondAddressHasAllStreetInfo(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasInfo As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    If String.IsNullOrWhiteSpace(.HouseNumber) = False AndAlso String.IsNullOrWhiteSpace(.StreetName) = False AndAlso String.IsNullOrWhiteSpace(.City) = False AndAlso .StateId > 0 AndAlso String.IsNullOrWhiteSpace(.Zip) = False Then
                        hasInfo = True
                    End If
                End With
            End If

            Return hasInfo
        End Function
        'added 10/22/2016
        Public Shared Function OneLineStreetAddressForDiamondAddress(ByVal diaAdd As Diamond.Common.Objects.Address, Optional ByVal useApartmentNum As Boolean = True) As String 'updated 10/22/2016 w/ optional param to use aptNum... appears that IsoTransmission for Verisk Report doesn't use it
            Dim _OneLineStreetAddress As String = ""

            If diaAdd IsNot Nothing Then
                Dim qqHelper As New QuickQuoteHelperClass
                If String.IsNullOrWhiteSpace(diaAdd.HouseNumber) = False OrElse String.IsNullOrWhiteSpace(diaAdd.StreetName) = False Then
                    _OneLineStreetAddress = qqHelper.appendText(diaAdd.HouseNumber, diaAdd.StreetName, " ")
                    If useApartmentNum = True Then 'added IF 10/22/2016
                        _OneLineStreetAddress = qqHelper.appendText(_OneLineStreetAddress, diaAdd.ApartmentNumber, " ")
                    End If
                ElseIf String.IsNullOrWhiteSpace(diaAdd.POBox) = False Then
                    _OneLineStreetAddress = "PO BOX " & diaAdd.POBox
                End If
                _OneLineStreetAddress = qqHelper.appendText(_OneLineStreetAddress, diaAdd.City, " ")
                '_OneLineStreetAddress = qqHelper.appendText(_OneLineStreetAddress, diaAdd.StateAbbreviation, " ")
                'updated 10/22/2016 to make sure StateAbbreviation will come back w/ value
                Dim diaState As String = diaAdd.StateAbbreviation
                If String.IsNullOrWhiteSpace(diaState) = True AndAlso diaAdd.StateId = 16 Then
                    diaState = "IN"
                End If
                _OneLineStreetAddress = qqHelper.appendText(_OneLineStreetAddress, diaState, " ")
                _OneLineStreetAddress = qqHelper.appendText(_OneLineStreetAddress, diaAdd.Zip, " ")
            End If

            Return _OneLineStreetAddress
        End Function

        'added 10/13/2016; 10/22/2016 note: this isn't really needed anymore since updating Diamond.Common.Objects assembly reference... it now has property for ReturnedAddress; removed 10/22/2016
        'Public Shared Function ReturnedAddressForISOTransmission(ByVal isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission) As String
        '    Dim retAdd As String = ""

        '    If isoT IsNot Nothing Then
        '        'Dim dbQuery As String = "SELECT * FROM ISOTransmission AS I WITH (NOLOCK) WHERE "
        '        'If IsValidDiamondNum(isoT.ISOTransmissionId) = True Then
        '        '    'get last one for isoTransmissionId; should only be one
        '        '    dbQuery &= "I.isotransmission_id = " & isoT.ISOTransmissionId.Id.ToString
        '        'ElseIf isoT.PolicyId > 0 AndAlso isoT.PolicyImageNum > 0 AndAlso isoT.UnitNum > 0 Then
        '        '    'get last one for policyId, policyImageNum, and unitNum
        '        '    dbQuery &= "I.policy_id = " & isoT.PolicyId.ToString & " and I.policyimage_num = " & isoT.PolicyImageNum.ToString & " and I.unit_num = " & isoT.UnitNum.ToString
        '        'Else
        '        '    dbQuery = ""
        '        'End If
        '        'If String.IsNullOrWhiteSpace(dbQuery) = False Then
        '        '    dbQuery &= " ORDER BY I.isotransmission_id DESC"

        '        '    Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
        '        '        sqlSO.queryOrStoredProc = dbQuery
        '        '        Dim dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
        '        '        If dr IsNot Nothing AndAlso dr.HasRows = True Then
        '        '            dr.Read()
        '        '            retAdd = dr.Item("returned_address").ToString.Trim
        '        '        ElseIf sqlSO.hasError = True Then
        '        '            'db error
        '        '        End If
        '        '    End Using
        '        'End If
        '        'updated 10/22/2016 to use new functionality
        '        'Dim isoTranLookupInfo As New QuickQuoteIsoTransmissionLookupInfo
        '        'With isoTranLookupInfo
        '        '    If IsValidDiamondNum(isoT.ISOTransmissionId) = True Then
        '        '        .IsoTransmissionId = isoT.ISOTransmissionId
        '        '    End If
        '        '    .PolicyId = isoT.PolicyId
        '        '    .PolicyImageNum = isoT.PolicyImageNum
        '        '    .UnitNum = isoT.UnitNum
        '        'End With
        '        'Dim isoTranResult As QuickQuoteIsoTransmissionLookupInfo = IsoTransmissionResultForLookupInfo(isoTranLookupInfo, FirstOrLast.Last)
        '        'If isoTranResult IsNot Nothing Then
        '        '    retAdd = isoTranResult.ReturnedAddress
        '        'End If
        '        'updated 10/22/2016 to just use new property available w/ latest Diamond.Common.Object assembly reference
        '        retAdd = isoT.ReturnedAddress
        '    End If

        '    Return retAdd
        'End Function
        'added 10/22/2016 to perform multiple lookup options for IsoTransmission
        Public Shared Function IsoTransmissionResultsForLookupInfo(ByVal isoTranLookupInfo As QuickQuoteIsoTransmissionLookupInfo) As List(Of QuickQuoteIsoTransmissionLookupInfo)
            Dim isoTranResults As List(Of QuickQuoteIsoTransmissionLookupInfo) = Nothing

            If isoTranLookupInfo IsNot Nothing AndAlso isoTranLookupInfo.HasAnyDistinguishableInfo = True Then
                '10/23/2016 - added checkedAddress flags
                Dim checkedOrderedAddress As Boolean = False
                Dim checkedAlternateOrderedAddress As Boolean = False
                Dim checkedReturnedAddress As Boolean = False
                Dim checkedAlternateReturnedAddress As Boolean = False

                Dim dbQuery As String = "SELECT * FROM ISOTransmission AS I WITH (NOLOCK) WHERE "
                Dim dbWhereClause As String = ""
                Dim qqHelper As New QuickQuoteHelperClass
                If isoTranLookupInfo.IsoTransmissionId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "I.isotransmission_id = " & isoTranLookupInfo.IsoTransmissionId.ToString, " AND ")
                End If
                If isoTranLookupInfo.PolicyId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "I.policy_id = " & isoTranLookupInfo.PolicyId.ToString, " AND ")
                End If
                If isoTranLookupInfo.PolicyImageNum > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "I.policyimage_num = " & isoTranLookupInfo.PolicyImageNum.ToString, " AND ")
                End If
                If isoTranLookupInfo.UnitNum > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "I.unit_num = " & isoTranLookupInfo.UnitNum.ToString, " AND ")
                End If
                If String.IsNullOrWhiteSpace(isoTranLookupInfo.OrderedAddress) = False Then
                    checkedOrderedAddress = True 'added 10/23/2016
                    If isoTranLookupInfo.HasUsableAlternateOrderedAddress = True Then 'added IF 10/23/2016; original logic in ELSE
                        checkedAlternateOrderedAddress = True 'added 10/23/2016
                        dbWhereClause = qqHelper.appendText(dbWhereClause, "(I.ordered_address = '" & isoTranLookupInfo.OrderedAddress & "' OR I.ordered_address = '" & isoTranLookupInfo.AlternateOrderedAddress & "')", " AND ")
                    Else
                        dbWhereClause = qqHelper.appendText(dbWhereClause, "I.ordered_address = '" & isoTranLookupInfo.OrderedAddress & "'", " AND ")
                    End If
                End If
                If String.IsNullOrWhiteSpace(isoTranLookupInfo.ReturnedAddress) = False Then
                    checkedReturnedAddress = True 'added 10/23/2016
                    If isoTranLookupInfo.HasUsableAlternateReturnedAddress = True Then 'added IF 10/23/2016; original logic in ELSE
                        checkedAlternateReturnedAddress = True 'added 10/23/2016
                        dbWhereClause = qqHelper.appendText(dbWhereClause, "(I.returned_address = '" & isoTranLookupInfo.ReturnedAddress & "' OR I.returned_address = '" & isoTranLookupInfo.AlternateReturnedAddress & "')", " AND ")
                    Else
                        dbWhereClause = qqHelper.appendText(dbWhereClause, "I.returned_address = '" & isoTranLookupInfo.ReturnedAddress & "'", " AND ")
                    End If
                End If

                If String.IsNullOrWhiteSpace(dbWhereClause) = False Then
                    dbQuery &= dbWhereClause & " ORDER BY I.isotransmission_id ASC" 'just read them in order

                    Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                        sqlSO.queryOrStoredProc = dbQuery
                        Dim dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            While dr.Read
                                If isoTranResults Is Nothing Then
                                    isoTranResults = New List(Of QuickQuoteIsoTransmissionLookupInfo)
                                End If
                                Dim isoTranResult As New QuickQuoteIsoTransmissionLookupInfo
                                With isoTranResult
                                    .IsoTransmissionId = dr.Item("isotransmission_id")
                                    .PolicyId = dr.Item("policy_id")
                                    .PolicyImageNum = dr.Item("policyimage_num")
                                    .UnitNum = dr.Item("unit_num")
                                    .OrderedAddress = dr.Item("ordered_address").ToString.Trim
                                    If checkedOrderedAddress = True OrElse checkedAlternateOrderedAddress = True Then 'added 10/23/2016
                                        If checkedOrderedAddress = True AndAlso UCase(isoTranLookupInfo.OrderedAddress) = UCase(.OrderedAddress) Then
                                            .OrderedAddressMatchType = QuickQuoteIsoTransmissionLookupInfo.AddressMatchType.Normal
                                        ElseIf checkedAlternateOrderedAddress = True AndAlso UCase(isoTranLookupInfo.AlternateOrderedAddress) = UCase(.OrderedAddress) Then
                                            .OrderedAddressMatchType = QuickQuoteIsoTransmissionLookupInfo.AddressMatchType.Alternate
                                        End If
                                    End If
                                    .ReturnedAddress = dr.Item("returned_address").ToString.Trim
                                    If checkedReturnedAddress = True OrElse checkedAlternateReturnedAddress = True Then 'added 10/23/2016
                                        If checkedReturnedAddress = True AndAlso UCase(isoTranLookupInfo.ReturnedAddress) = UCase(.ReturnedAddress) Then
                                            .ReturnedAddressMatchType = QuickQuoteIsoTransmissionLookupInfo.AddressMatchType.Normal
                                        ElseIf checkedAlternateReturnedAddress = True AndAlso UCase(isoTranLookupInfo.AlternateReturnedAddress) = UCase(.ReturnedAddress) Then
                                            .ReturnedAddressMatchType = QuickQuoteIsoTransmissionLookupInfo.AddressMatchType.Alternate
                                        End If
                                    End If
                                    'If isoTranLookupInfo.GetXmlData = True Then 'may not need this if we don't have the overhead of having to convert it from binary to string; removed 10/22/2016
                                    '    'Dim exportXml As Byte() = dr.Item("export_xml") 'failed converting string to byte... must be encrypted or something and not binary
                                    '    'If exportXml IsNot Nothing Then
                                    '    '    .ExportXml = qqHelper.StringFromBytes(exportXml)
                                    '    'End If
                                    .ExportXml = dr.Item("export_xml").ToString.Trim
                                    '    'Dim importXml As Byte() = dr.Item("import_xml") 'failed converting string to byte... must be encrypted or something and not binary
                                    '    'If importXml IsNot Nothing Then
                                    '    '    .ImportXml = qqHelper.StringFromBytes(importXml)
                                    '    'End If
                                    .ImportXml = dr.Item("import_xml").ToString.Trim
                                    'End If
                                End With
                                isoTranResults.Add(isoTranResult)
                            End While
                        ElseIf sqlSO.hasError = True Then
                            'db error
                        End If
                    End Using
                End If
            End If

            Return isoTranResults
        End Function
        Public Shared Function HasIsoTransmissionResultsForLookupInfo(ByVal isoTranLookupInfo As QuickQuoteIsoTransmissionLookupInfo, Optional ByRef isoTranResults As List(Of QuickQuoteIsoTransmissionLookupInfo) = Nothing) As Boolean
            Dim hasIsoT As Boolean = False
            isoTranResults = Nothing

            isoTranResults = IsoTransmissionResultsForLookupInfo(isoTranLookupInfo)
            If isoTranResults IsNot Nothing AndAlso isoTranResults.Count > 0 Then
                hasIsoT = True
            End If

            Return hasIsoT
        End Function
        Public Shared Function IsoTransmissionResultForLookupInfo(ByVal isoTranLookupInfo As QuickQuoteIsoTransmissionLookupInfo, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuoteIsoTransmissionLookupInfo
            Dim isoTranResult As QuickQuoteIsoTransmissionLookupInfo = Nothing

            Dim isoTranResults As List(Of QuickQuoteIsoTransmissionLookupInfo) = IsoTransmissionResultsForLookupInfo(isoTranLookupInfo)
            If isoTranResults IsNot Nothing AndAlso isoTranResults.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    isoTranResult = isoTranResults(0)
                Else
                    isoTranResult = isoTranResults(isoTranResults.Count - 1)
                End If
            End If

            Return isoTranResult
        End Function
        Public Shared Function HasIsoTransmissionResultForLookupInfo(ByVal isoTranLookupInfo As QuickQuoteIsoTransmissionLookupInfo, Optional ByRef isoTranResult As QuickQuoteIsoTransmissionLookupInfo = Nothing, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As Boolean
            Dim hasIsoT As Boolean = False
            isoTranResult = Nothing

            isoTranResult = IsoTransmissionResultForLookupInfo(isoTranLookupInfo, firstOrLastItem)
            If isoTranResult IsNot Nothing Then
                hasIsoT = True
            End If

            Return hasIsoT
        End Function

        Public Shared Function QuickQuoteStreetAddressMatchesISOTransmissionReturnedAddress(ByVal qqAdd As QuickQuoteAddress, ByVal isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission) As Boolean
            Dim isMatch As Boolean = False

            Dim qqStreetAddress As String = ""
            Dim isoTranReturnedAddress As String = ""

            If qqAdd IsNot Nothing Then
                qqStreetAddress = qqAdd.OneLineStreetAddress '10/22/2016 note: may need to get OneLineStreetAddress w/o aptNum since Iso Transmission for Verisk Report doesn't appear to use it
            End If
            If isoT IsNot Nothing Then
                'isoTranReturnedAddress = ReturnedAddressForISOTransmission(isoT)
                'updated 10/22/2016 to use new property available w/ latest Diamond.Common.Object assembly reference
                isoTranReturnedAddress = isoT.ReturnedAddress
            End If

            If UCase(qqStreetAddress) = UCase(isoTranReturnedAddress) Then
                isMatch = True
            End If

            Return isMatch
        End Function

        'added 10/26/2016 for Endorsement stuff
        Public Shared Function ReversePositiveOrNegativeInteger(ByVal num As Integer) As Integer
            Dim reverseNum As Integer = 0

            If num > 0 Then
                reverseNum = CInt("-" & num.ToString)
            ElseIf num < 0 Then
                reverseNum = CInt(num.ToString.Replace("-", ""))
            End If

            Return reverseNum
        End Function

        'added 10/30/2016 for Endorsement stuff
        Public Shared Function PolicyResultsForLookupInfo(ByVal policyLookupInfo As QuickQuotePolicyLookupInfo, Optional ByRef caughtDatabaseError As Boolean = False) As List(Of QuickQuotePolicyLookupInfo)
            Dim policyResults As List(Of QuickQuotePolicyLookupInfo) = Nothing
            caughtDatabaseError = False

            If policyLookupInfo IsNot Nothing AndAlso policyLookupInfo.HasAnyDistinguishableInfo = True Then

                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id FROM "
                'updated 11/3/2016 for PolicyImage.transtype_id
                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id FROM "
                'updated 11/4/2016 for PolicyImage dates; added VersionId and LobId 11/5/2016; also broke query up to move From to next line
                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id, PI.eff_date, PI.exp_date, PI.teff_date, PI.texp_date, PI.version_id, V.lob_id"
                'updated 11/10/2016 for PolicyImage premiums
                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id, PI.eff_date, PI.exp_date, PI.teff_date, PI.texp_date, PI.version_id, V.lob_id, PI.premium_fullterm, PI.premium_chg_fullterm, PI.premium_written, PI.premium_chg_written"
                'updated 2/28/2017 for ClientId
                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id, PI.eff_date, PI.exp_date, PI.teff_date, PI.texp_date, PI.version_id, V.lob_id, P.client_id, PI.premium_fullterm, PI.premium_chg_fullterm, PI.premium_written, PI.premium_chg_written"
                'updated 3/22/2017 for date added/modified
                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id, PI.eff_date, PI.exp_date, PI.teff_date, PI.texp_date, PI.version_id, V.lob_id, P.client_id, PI.premium_fullterm, PI.premium_chg_fullterm, PI.premium_written, PI.premium_chg_written, PI.pcadded_date, PI.last_modified_date"
                'updated 5/31/2019 w/ cancelDate
                'Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id, PI.eff_date, PI.exp_date, PI.teff_date, PI.texp_date, PI.version_id, V.lob_id, P.client_id, PI.premium_fullterm, PI.premium_chg_fullterm, PI.premium_written, PI.premium_chg_written, PI.pcadded_date, PI.last_modified_date, P.cancel_date"
                'updated 11/28/2022 to include stateId and companyId
                Dim dbQuery As String = "SELECT PI.policy_id, PI.policyimage_num, PI.policy, PI.quote, PI.agency_id, A.code, P.current_policy, P.policycurrentstatus_id, PI.policystatuscode_id, PI.transtype_id, PI.eff_date, PI.exp_date, PI.teff_date, PI.texp_date, PI.version_id, V.lob_id, V.state_id, V.company_id, P.client_id, PI.premium_fullterm, PI.premium_chg_fullterm, PI.premium_written, PI.premium_chg_written, PI.pcadded_date, PI.last_modified_date, P.cancel_date"
                'Removed 11/11/2021 for bug 66784 MLW
                'If policyLookupInfo.TransTypeId = 3 Then
                '    'Updated 11/11/2021 for bug 66784 MLW
                '    'dbQuery &= ", DII.endorsementOriginTypeId"
                '    dbQuery &= ", latestEndorsement.endorsementOriginTypeId"
                'End If
                If policyLookupInfo.SetToReturnPolicyholder1Name = True Then 'added 11/5/2016
                    dbQuery &= ", N.display_name, N.sort_name"
                End If
                dbQuery &= " FROM "
                If policyLookupInfo.PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage Then
                    dbQuery &= "PolicyImage AS PI WITH (NOLOCK) INNER JOIN Policy as P WITH (NOLOCK) ON P.policy_id = PI.policy_id "
                Else 'ByPolicy
                    dbQuery &= "Policy AS P WITH (NOLOCK) INNER JOIN PolicyImage AS PI WITH (NOLOCK) ON PI.policy_id = P.policy_id AND PI.policyimage_num = "
                    dbQuery &= "CASE " 'begin CASE 1
                    'old join
                    'dbQuery &= "WHEN P.activeimage_num > 0 THEN P.activeimage_num WHEN P.cancelled = 1 THEN P.cancelimage_num ELSE P.lastimage_num "
                    'new join
                    dbQuery &= "WHEN P.cancelled = 1 THEN "
                    dbQuery &= "CASE WHEN P.futurecancel = 1 THEN " 'begin CASE 2
                    dbQuery &= "CASE WHEN P.activeimage_num = 0 AND P.cancelimage_num = 0 THEN P.lastimage_num " 'begin CASE 3
                    dbQuery &= "WHEN P.activeimage_num = 0 THEN P.cancelimage_num ELSE P.activeimage_num "
                    dbQuery &= "END " 'end CASE 3
                    dbQuery &= "ELSE P.cancelimage_num " 'P.futurecancel <> 1
                    dbQuery &= "END " 'end CASE 2
                    dbQuery &= "ELSE " 'P.cancelled <> 1
                    dbQuery &= "CASE WHEN P.nonrenew = 1 AND P.activeimage_num = 0 THEN " 'begin CASE 4
                    dbQuery &= "(SELECT TOP 1 PIMY.policyimage_num FROM PolicyImage AS PIMY WITH (NOLOCK) WHERE PIMY.policy_id = P.policy_id AND transtype_id = 11 ORDER BY PIMY.policy_id, PIMY.policyimage_num DESC) "
                    dbQuery &= "WHEN P.nonrenew = 1 AND P.activeimage_num > 0 THEN P.activeimage_num WHEN P.activeimage_num > 0 THEN P.activeimage_num ELSE P.lastimage_num "
                    dbQuery &= "END " 'end CASE 4
                    dbQuery &= "END " 'end CASE 1
                End If
                'dbQuery &= "INNER JOIN AGENCY AS A WITH (NOLOCK) ON A.agency_id = PI.agency_id WHERE "
                'updated 11/5/2016 for LobId
                dbQuery &= "INNER JOIN Agency AS A WITH (NOLOCK) ON A.agency_id = PI.agency_id "
                dbQuery &= "INNER JOIN Version AS V WITH (NOLOCK) ON V.version_id = PI.version_id "
                'Removed 11/11/2021 for bug 66784 MLW
                'If policyLookupInfo.TransTypeId = 3 Then
                '    'Updated 11/11/2021 for bug 66784 MLW
                '    'dbQuery &= "LEFT JOIN QuickQuote.dbo.DiamondImageInfo AS DII WITH (NOLOCK) ON P.policy_id = DII.policyId AND PI.policyimage_num = DII.policyImageNum "
                '    dbQuery &= "OUTER APPLY (select TOP 1 DII.endorsementOriginTypeId from QuickQuote.dbo.DiamondImageInfo AS DII WITH (NOLOCK) WHERE DII.policyId = P.policy_id AND DII.policyImageNum = PI.policyimage_num order by DII.active desc, CASE when DII.quoteStatusId in (12, 19) then 0 else 1 END desc, DII.diamondImageInfoId desc) as latestEndorsement"
                'End If
                If policyLookupInfo.SetToReturnPolicyholder1Name = True Then 'added 11/5/2016
                    dbQuery &= "LEFT JOIN PolicyImageNameLink AS PINL WITH (NOLOCK) ON PINL.policy_id = PI.policy_id AND PINL.policyimage_num = PI.policyimage_num AND PINL.nameaddresssource_id = 3 " 'PH1
                    dbQuery &= "LEFT JOIN Name AS N WITH (NOLOCK) ON N.name_id = PINL.name_id "
                End If
                dbQuery &= "WHERE "
                Dim dbWhereClause As String = ""
                Dim qqHelper As New QuickQuoteHelperClass
                If policyLookupInfo.PolicyId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.policy_id = " & policyLookupInfo.PolicyId.ToString, " AND ")
                End If
                If policyLookupInfo.PolicyImageNum > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.policyimage_num = " & policyLookupInfo.PolicyImageNum.ToString, " AND ")
                End If
                If String.IsNullOrWhiteSpace(policyLookupInfo.PolicyNumber) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "P.current_policy = '" & policyLookupInfo.PolicyNumber & "'", " AND ")
                End If
                If String.IsNullOrWhiteSpace(policyLookupInfo.QuoteNumber) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.quote = '" & policyLookupInfo.QuoteNumber & "'", " AND ")
                End If
                'If policyLookupInfo.AgencyId > 0 Then
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.agency_id = " & policyLookupInfo.AgencyId.ToString, " AND ")
                'End If
                'updated 11/4/2016 for AgencyIds
                Dim strListOfAgencyIds As String = ""
                If policyLookupInfo.AgencyIds IsNot Nothing AndAlso policyLookupInfo.AgencyIds.Count > 0 Then
                    For Each agId As Integer In policyLookupInfo.AgencyIds
                        If agId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfAgencyIds) = True Then
                                strListOfAgencyIds = "("
                            Else
                                strListOfAgencyIds &= ", "
                            End If
                            strListOfAgencyIds &= agId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfAgencyIds) = False Then
                        strListOfAgencyIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfAgencyIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.agency_id in " & strListOfAgencyIds, " AND ")
                ElseIf policyLookupInfo.AgencyId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.agency_id = " & policyLookupInfo.AgencyId.ToString, " AND ")
                End If
                'If String.IsNullOrWhiteSpace(policyLookupInfo.AgencyCode) = False Then
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "A.code = '" & policyLookupInfo.AgencyCode & "'", " AND ")
                'End If
                'updated 11/4/2016 for AgencyCodes
                Dim strListOfAgencyCodes As String = ""
                If policyLookupInfo.AgencyCodes IsNot Nothing AndAlso policyLookupInfo.AgencyCodes.Count > 0 Then
                    For Each agCode As String In policyLookupInfo.AgencyCodes
                        If String.IsNullOrWhiteSpace(agCode) = False Then
                            If String.IsNullOrWhiteSpace(strListOfAgencyCodes) = True Then
                                strListOfAgencyCodes = "("
                            Else
                                strListOfAgencyCodes &= ", "
                            End If
                            strListOfAgencyCodes &= "'" & agCode & "'"
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfAgencyCodes) = False Then
                        strListOfAgencyCodes &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfAgencyCodes) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "A.code in " & strListOfAgencyCodes, " AND ")
                ElseIf String.IsNullOrWhiteSpace(policyLookupInfo.AgencyCode) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "A.code = '" & policyLookupInfo.AgencyCode & "'", " AND ")
                End If
                'If policyLookupInfo.PolicyCurrentStatusId > 0 Then
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "P.policycurrentstatus_id = " & policyLookupInfo.PolicyCurrentStatusId.ToString, " AND ")
                'End If
                'updated 3/6/2017 for PolicyCurrentStatusIds
                Dim strListOfPolicyCurrentStatusIds As String = ""
                If policyLookupInfo.PolicyCurrentStatusIds IsNot Nothing AndAlso policyLookupInfo.PolicyCurrentStatusIds.Count > 0 Then
                    For Each pcsId As Integer In policyLookupInfo.PolicyCurrentStatusIds
                        If pcsId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfPolicyCurrentStatusIds) = True Then
                                strListOfPolicyCurrentStatusIds = "("
                            Else
                                strListOfPolicyCurrentStatusIds &= ", "
                            End If
                            strListOfPolicyCurrentStatusIds &= pcsId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfPolicyCurrentStatusIds) = False Then
                        strListOfPolicyCurrentStatusIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfPolicyCurrentStatusIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "P.policycurrentstatus_id in " & strListOfPolicyCurrentStatusIds, " AND ")
                ElseIf policyLookupInfo.PolicyCurrentStatusId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "P.policycurrentstatus_id = " & policyLookupInfo.PolicyCurrentStatusId.ToString, " AND ")
                End If
                'If policyLookupInfo.PolicyStatusCodeId > 0 Then
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.policystatuscode_id = " & policyLookupInfo.PolicyStatusCodeId.ToString, " AND ")
                'End If
                'updated 3/6/2017 for PolicyStatusCodeIds
                Dim strListOfPolicyStatusCodeIds As String = ""
                If policyLookupInfo.PolicyStatusCodeIds IsNot Nothing AndAlso policyLookupInfo.PolicyStatusCodeIds.Count > 0 Then
                    For Each pscId As Integer In policyLookupInfo.PolicyStatusCodeIds
                        If pscId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfPolicyStatusCodeIds) = True Then
                                strListOfPolicyStatusCodeIds = "("
                            Else
                                strListOfPolicyStatusCodeIds &= ", "
                            End If
                            strListOfPolicyStatusCodeIds &= pscId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfPolicyStatusCodeIds) = False Then
                        strListOfPolicyStatusCodeIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfPolicyStatusCodeIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.policystatuscode_id in " & strListOfPolicyStatusCodeIds, " AND ")
                ElseIf policyLookupInfo.PolicyStatusCodeId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.policystatuscode_id = " & policyLookupInfo.PolicyStatusCodeId.ToString, " AND ")
                End If
                'If policyLookupInfo.TransTypeId > 0 Then 'added 11/3/2016
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.transtype_id = " & policyLookupInfo.TransTypeId.ToString, " AND ")
                'End If
                'updated 3/6/2017 for TransTypeIds
                Dim strListOfTransTypeIds As String = ""
                If policyLookupInfo.TransTypeIds IsNot Nothing AndAlso policyLookupInfo.TransTypeIds.Count > 0 Then
                    For Each tId As Integer In policyLookupInfo.TransTypeIds
                        If tId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfTransTypeIds) = True Then
                                strListOfTransTypeIds = "("
                            Else
                                strListOfTransTypeIds &= ", "
                            End If
                            strListOfTransTypeIds &= tId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfTransTypeIds) = False Then
                        strListOfTransTypeIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfTransTypeIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.transtype_id in " & strListOfTransTypeIds, " AND ")
                ElseIf policyLookupInfo.TransTypeId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.transtype_id = " & policyLookupInfo.TransTypeId.ToString, " AND ")
                End If
                'If policyLookupInfo.VersionId > 0 Then 'added 11/5/2016
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.version_id = " & policyLookupInfo.VersionId.ToString, " AND ")
                'End If
                'updated 3/6/2017 for VersionIds
                Dim strListOfVersionIds As String = ""
                If policyLookupInfo.VersionIds IsNot Nothing AndAlso policyLookupInfo.VersionIds.Count > 0 Then
                    For Each vId As Integer In policyLookupInfo.VersionIds
                        If vId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfVersionIds) = True Then
                                strListOfVersionIds = "("
                            Else
                                strListOfVersionIds &= ", "
                            End If
                            strListOfVersionIds &= vId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfVersionIds) = False Then
                        strListOfVersionIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfVersionIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.version_id in " & strListOfVersionIds, " AND ")
                ElseIf policyLookupInfo.VersionId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.version_id = " & policyLookupInfo.VersionId.ToString, " AND ")
                End If
                If qqHelper.isValidDateString(policyLookupInfo.LookupDate, mustBeGreaterThanDefaultDate:=True) Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "PI.teff_date <= '" & qqHelper.DateForString(policyLookupInfo.LookupDate).ToString & "' AND PI.texp_date >= '" & qqHelper.DateForString(policyLookupInfo.LookupDate).ToString & "'", " AND ")
                End If
                'If policyLookupInfo.LobId > 0 Then 'added 11/5/2016
                '    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.lob_id = " & policyLookupInfo.LobId.ToString, " AND ")
                'End If
                'updated 3/6/2017 for LobIds
                Dim strListOfLobIds As String = ""
                If policyLookupInfo.LobIds IsNot Nothing AndAlso policyLookupInfo.LobIds.Count > 0 Then
                    For Each lId As Integer In policyLookupInfo.LobIds
                        If lId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfLobIds) = True Then
                                strListOfLobIds = "("
                            Else
                                strListOfLobIds &= ", "
                            End If
                            strListOfLobIds &= lId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfLobIds) = False Then
                        strListOfLobIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfLobIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.lob_id in " & strListOfLobIds, " AND ")
                ElseIf policyLookupInfo.LobId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.lob_id = " & policyLookupInfo.LobId.ToString, " AND ")
                End If

                'added 11/28/2022
                Dim strListOfStateIds As String = ""
                If policyLookupInfo.StateIds IsNot Nothing AndAlso policyLookupInfo.StateIds.Count > 0 Then
                    For Each sId As Integer In policyLookupInfo.StateIds
                        If sId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfStateIds) = True Then
                                strListOfStateIds = "("
                            Else
                                strListOfStateIds &= ", "
                            End If
                            strListOfStateIds &= sId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfStateIds) = False Then
                        strListOfStateIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfStateIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.state_id in " & strListOfStateIds, " AND ")
                ElseIf policyLookupInfo.StateId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.state_id = " & policyLookupInfo.StateId.ToString, " AND ")
                End If
                Dim strListOfCompanyIds As String = ""
                If policyLookupInfo.CompanyIds IsNot Nothing AndAlso policyLookupInfo.CompanyIds.Count > 0 Then
                    For Each cId As Integer In policyLookupInfo.CompanyIds
                        If cId > 0 Then
                            If String.IsNullOrWhiteSpace(strListOfCompanyIds) = True Then
                                strListOfCompanyIds = "("
                            Else
                                strListOfCompanyIds &= ", "
                            End If
                            strListOfCompanyIds &= cId.ToString
                        End If
                    Next
                    If String.IsNullOrWhiteSpace(strListOfCompanyIds) = False Then
                        strListOfCompanyIds &= ")"
                    End If
                End If
                If String.IsNullOrWhiteSpace(strListOfCompanyIds) = False Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.company_id in " & strListOfCompanyIds, " AND ")
                ElseIf policyLookupInfo.CompanyId > 0 Then
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "V.company_id = " & policyLookupInfo.CompanyId.ToString, " AND ")
                End If

                If policyLookupInfo.ClientId > 0 Then 'added 2/28/2017
                    dbWhereClause = qqHelper.appendText(dbWhereClause, "P.client_id = " & policyLookupInfo.ClientId.ToString, " AND ")
                End If
                If policyLookupInfo.SetToReturnPolicyholder1Name = True Then 'added 11/5/2016
                    If String.IsNullOrWhiteSpace(policyLookupInfo.Policyholder1NameToFind) = False AndAlso Len(policyLookupInfo.Policyholder1NameToFind) >= 3 Then
                        Dim ph1NameSearch As String = ""
                        'Select Case policyLookupInfo.Policyholder1NameLookupField
                        '    Case QuickQuotePolicyLookupInfo.NameLookupField.LastName
                        '        ph1NameSearch = "N.last_name"
                        '    Case QuickQuotePolicyLookupInfo.NameLookupField.CommercialName1
                        '        ph1NameSearch = "N.commercial_name1"
                        '    Case QuickQuotePolicyLookupInfo.NameLookupField.DoingBusinessAs 'added 3/31/2017
                        '        ph1NameSearch = "N.doing_business_as"
                        '    Case Else
                        '        ph1NameSearch = "N.display_name"
                        'End Select
                        'Select Case policyLookupInfo.Policyholder1NameLookupMatchType
                        '    Case QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchBeginning
                        '        ph1NameSearch &= " like '" & policyLookupInfo.Policyholder1NameToFind & "%'"
                        '    Case QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchEnd
                        '        ph1NameSearch &= " like '%" & policyLookupInfo.Policyholder1NameToFind & "'"
                        '    Case QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchMiddle
                        '        ph1NameSearch &= " like '%" & policyLookupInfo.Policyholder1NameToFind & "%'"
                        '    Case Else
                        '        ph1NameSearch &= " = '" & policyLookupInfo.Policyholder1NameToFind & "'"
                        'End Select
                        'updated 3/31/2017 to be able to search on multiple name fields; also included new ones to search on
                        Dim nameFields As List(Of String) = Nothing
                        Select Case policyLookupInfo.Policyholder1NameLookupField
                            Case QuickQuotePolicyLookupInfo.NameLookupField.LastName
                                AddStringToList("N.last_name", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.CommercialName1
                                AddStringToList("N.commercial_name1", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.DoingBusinessAs
                                AddStringToList("N.doing_business_as", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.CommercialName2
                                AddStringToList("N.commercial_name2", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.SortName
                                AddStringToList("N.sort_name", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.CommercialName1OrCommercialName2
                                AddStringToList("N.commercial_name1", nameFields)
                                AddStringToList("N.commercial_name2", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.CommercialName1OrDoingBusinessAs
                                AddStringToList("N.commercial_name1", nameFields)
                                AddStringToList("N.doing_business_as", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.CommercialName1OrCommercialName2OrDoingBusinessAs
                                AddStringToList("N.commercial_name1", nameFields)
                                AddStringToList("N.commercial_name2", nameFields)
                                AddStringToList("N.doing_business_as", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.LastNameOrCommercialName1
                                AddStringToList("N.last_name", nameFields)
                                AddStringToList("N.commercial_name1", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.LastNameOrDoingBusinessAs
                                AddStringToList("N.last_name", nameFields)
                                AddStringToList("N.doing_business_as", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.LastNameOrCommercialName1OrCommercialName2
                                AddStringToList("N.last_name", nameFields)
                                AddStringToList("N.commercial_name1", nameFields)
                                AddStringToList("N.commercial_name2", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.LastNameOrCommercialName1OrDoingBusinessAs
                                AddStringToList("N.last_name", nameFields)
                                AddStringToList("N.commercial_name1", nameFields)
                                AddStringToList("N.doing_business_as", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.LastNameOrCommercialName1OrCommercialName2OrDoingBusinessAs
                                AddStringToList("N.last_name", nameFields)
                                AddStringToList("N.commercial_name1", nameFields)
                                AddStringToList("N.commercial_name2", nameFields)
                                AddStringToList("N.doing_business_as", nameFields)
                            Case QuickQuotePolicyLookupInfo.NameLookupField.DisplayNameOrSortName
                                AddStringToList("N.display_name", nameFields)
                                AddStringToList("N.sort_name", nameFields)
                            Case Else
                                AddStringToList("N.display_name", nameFields)
                        End Select
                        If nameFields IsNot Nothing AndAlso nameFields.Count > 0 Then 'note: all records should have field in them w/ above code
                            If nameFields.Count > 1 Then
                                ph1NameSearch = "("
                            End If
                            Dim nameFieldCounter As Integer = 0
                            For Each nameField As String In nameFields
                                nameFieldCounter += 1
                                If nameFieldCounter > 1 Then
                                    ph1NameSearch &= " OR "
                                End If
                                ph1NameSearch &= nameField
                                Select Case policyLookupInfo.Policyholder1NameLookupMatchType
                                    Case QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchBeginning
                                        ph1NameSearch &= " like '" & policyLookupInfo.Policyholder1NameToFind & "%'"
                                    Case QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchEnd
                                        ph1NameSearch &= " like '%" & policyLookupInfo.Policyholder1NameToFind & "'"
                                    Case QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchMiddle
                                        ph1NameSearch &= " like '%" & policyLookupInfo.Policyholder1NameToFind & "%'"
                                    Case Else
                                        ph1NameSearch &= " = '" & policyLookupInfo.Policyholder1NameToFind & "'"
                                End Select
                            Next
                            If nameFields.Count > 1 Then
                                ph1NameSearch &= ")"
                            End If
                        End If
                        If String.IsNullOrWhiteSpace(ph1NameSearch) = False Then
                            dbWhereClause = qqHelper.appendText(dbWhereClause, ph1NameSearch, " AND ")
                        End If
                    End If
                End If

                If String.IsNullOrWhiteSpace(dbWhereClause) = False Then
                    dbQuery &= dbWhereClause & " ORDER BY P.current_policy ASC, PI.policy_id ASC, PI.policyimage_num ASC" 'just read them in order

                    Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                        sqlSO.queryOrStoredProc = dbQuery
                        Using dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                If policyResults Is Nothing Then
                                    policyResults = New List(Of QuickQuotePolicyLookupInfo)
                                End If
                                While dr.Read
                                    Dim policyResult As New QuickQuotePolicyLookupInfo
                                    With policyResult
                                        .PolicyId = dr.Item("policy_id")
                                        .PolicyImageNum = dr.Item("policyimage_num")
                                        .PolicyNumber = dr.Item("current_policy").ToString.Trim
                                        .QuoteNumber = dr.Item("quote").ToString.Trim
                                        .AgencyId = dr.Item("agency_id")
                                        .AgencyCode = dr.Item("code").ToString.Trim
                                        .PolicyCurrentStatusId = dr.Item("policycurrentstatus_id")
                                        .PolicyStatusCodeId = dr.Item("policystatuscode_id")
                                        .TransTypeId = dr.Item("transtype_id") 'added 11/3/2016
                                        .Set_EffectiveDate(dr.Item("eff_date").ToString.Trim) 'added 11/4/2016
                                        .Set_ExpirationDate(dr.Item("exp_date").ToString.Trim) 'added 11/4/2016
                                        .Set_TransactionEffectiveDate(dr.Item("teff_date").ToString.Trim) 'added 11/4/2016
                                        .Set_TransactionExpirationDate(dr.Item("texp_date").ToString.Trim) 'added 11/4/2016
                                        .VersionId = dr.Item("version_id") 'added 11/5/2016
                                        .LobId = dr.Item("lob_id") 'added 11/5/2016
                                        .StateId = dr.Item("state_id") 'added 11/28/2022
                                        .CompanyId = dr.Item("company_id") 'added 11/28/2022
                                        .ClientId = dr.Item("client_id") 'added 2/28/2017
                                        If policyLookupInfo.SetToReturnPolicyholder1Name = True Then 'added 11/5/2016
                                            .Set_Policyholder1Name(dr.Item("display_name").ToString.Trim)
                                            .Set_Policyholder1SortName(dr.Item("sort_name").ToString.Trim)
                                        End If
                                        'updated 11/10/2016 for PolicyImage premiums
                                        .Set_FullTermPremium(dr.Item("premium_fullterm").ToString.Trim)
                                        .Set_ChangeInFullTermPremium(dr.Item("premium_chg_fullterm").ToString.Trim)
                                        .Set_WrittenPremium(dr.Item("premium_written").ToString.Trim)
                                        .Set_ChangeInWrittenPremium(dr.Item("premium_chg_written").ToString.Trim)
                                        'updated 3/22/2017 for date added/modified
                                        .Set_DateAdded(dr.Item("pcadded_date").ToString.Trim)
                                        .Set_DateModified(dr.Item("last_modified_date").ToString.Trim)
                                        'updated 5/31/2019 for cancelDate
                                        .Set_CancelDate(dr.Item("cancel_date").ToString.Trim)
                                        'Removed 11/11/2021 for bug 66784 MLW
                                        'If policyLookupInfo.TransTypeId = 3 Then
                                        '    If IsDBNull(dr.Item("endorsementOriginTypeId")) = False Then
                                        '        .Set_EndorsementOriginTypeId(dr.Item("endorsementOriginTypeId"))
                                        '    End If
                                        'End If
                                    End With
                                    policyResults.Add(policyResult)
                                End While
                            ElseIf sqlSO.hasError = True Then
                                'database error
                                caughtDatabaseError = True
                                policyLookupInfo.ErrorMessage = sqlSO.errorMsg
                                policyLookupInfo.SqlQuery = sqlSO.queryOrStoredProc
                            Else
                                'nothing found
                                policyLookupInfo.ErrorMessage = "No policies found."
                            End If
                        End Using
                    End Using
                End If
            End If

            Return policyResults
        End Function
        Public Shared Function PolicyResultForLookupInfo(ByVal policyLookupInfo As QuickQuotePolicyLookupInfo, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuotePolicyLookupInfo
            Dim policyResult As QuickQuotePolicyLookupInfo = Nothing

            Dim policyResults As List(Of QuickQuotePolicyLookupInfo) = PolicyResultsForLookupInfo(policyLookupInfo, caughtDatabaseError)
            If policyResults IsNot Nothing AndAlso policyResults.Count > 0 Then

                'If firstOrLastItem = FirstOrLast.First Then
                '    policyResult = policyResults(0)
                'Else
                '    policyResult = policyResults(policyResults.Count - 1)
                'End If

                'put priority on issued images when searching by date
                Dim polResIndex As Integer = 0
                Dim qqHelper As New QuickQuoteHelperClass
                If qqHelper.IsValidDateString(policyLookupInfo.LookupDate, mustBeGreaterThanDefaultDate:=True) AndAlso policyLookupInfo.PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage AndAlso policyResults.Count > 1 Then
                    Dim firstIssuedPosition As Integer = 0
                    Dim lastIssuedPosition As Integer = 0
                    Dim currPosition As Integer = 0
                    For Each pr As QuickQuotePolicyLookupInfo In policyResults
                        currPosition += 1
                        If pr.IsInforceOrFuture = True Then
                            If firstIssuedPosition <= 0 Then
                                firstIssuedPosition = currPosition
                            End If
                            lastIssuedPosition = currPosition
                        End If
                    Next
                    If firstOrLastItem = FirstOrLast.First Then
                        If firstIssuedPosition > 0 Then
                            polResIndex = firstIssuedPosition - 1
                        Else
                            polResIndex = 0
                        End If
                    Else
                        If lastIssuedPosition > 0 Then
                            polResIndex = lastIssuedPosition - 1
                        Else
                            polResIndex = policyResults.Count - 1
                        End If
                    End If
                Else
                    If firstOrLastItem = FirstOrLast.First Then
                        polResIndex = 0
                    Else
                        polResIndex = policyResults.Count - 1
                    End If
                End If
                policyResult = policyResults(polResIndex)
            End If

            Return policyResult
        End Function
        Public Shared Function CurrentPolicyResultForPolicyNumber(ByVal polNum As String, Optional ByRef caughtDatabaseError As Boolean = False) As QuickQuotePolicyLookupInfo
            Dim policyResult As QuickQuotePolicyLookupInfo = Nothing

            Dim policyResults As List(Of QuickQuotePolicyLookupInfo) = PolicyResultsForLookupInfo(PolicyLookupInfoForPolicyInfo(policyNumber:=polNum), caughtDatabaseError)
            If policyResults IsNot Nothing AndAlso policyResults.Count > 0 Then
                If policyResults.Count > 1 Then
                    Dim bestResultSoFar As QuickQuotePolicyLookupInfo = Nothing
                    Dim lastResult As QuickQuotePolicyLookupInfo = Nothing
                    Dim prCounter As Integer = 0
                    For Each pr As QuickQuotePolicyLookupInfo In policyResults
                        If pr IsNot Nothing Then
                            prCounter += 1
                            Dim selectIt As Boolean = False
                            'Select Case pr.PolicyCurrentStatusId
                            '    Case 1 'In-Force
                            '        selectIt = True

                            '    Case 3 'Cancelled

                            'End Select
                            Select Case pr.ActualPolicyStatus()
                                Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.InForce
                                    selectIt = True
                                Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Future
                                    bestResultSoFar = pr
                                Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Pending
                                    If bestResultSoFar Is Nothing Then
                                        bestResultSoFar = pr
                                    Else
                                        Dim prevBestStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = bestResultSoFar.ActualPolicyStatus()
                                        If prevBestStatus <> QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Future Then
                                            bestResultSoFar = pr
                                        End If
                                    End If
                                Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Expired
                                    If bestResultSoFar Is Nothing Then
                                        bestResultSoFar = pr
                                    Else
                                        Dim prevBestStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = bestResultSoFar.ActualPolicyStatus()
                                        Select Case prevBestStatus
                                            Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.InForce, QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Future, QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Pending
                                                'previous best still holds
                                            Case Else
                                                bestResultSoFar = pr
                                        End Select
                                    End If
                                Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Cancelled
                                    If bestResultSoFar Is Nothing Then
                                        bestResultSoFar = pr
                                    Else
                                        Dim prevBestStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = bestResultSoFar.ActualPolicyStatus()
                                        Select Case prevBestStatus
                                            Case QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.InForce, QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Future, QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Pending, QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Expired
                                                'previous best still holds
                                            Case Else
                                                bestResultSoFar = pr
                                        End Select
                                    End If
                            End Select
                            If selectIt = True Then
                                policyResult = pr
                                Exit For
                            End If
                            lastResult = pr
                        End If
                    Next
                    If policyResult Is Nothing Then
                        If bestResultSoFar IsNot Nothing Then
                            policyResult = bestResultSoFar
                        Else
                            policyResult = lastResult
                        End If
                    End If
                Else
                    policyResult = policyResults(0)
                End If
            End If

            Return policyResult
        End Function
        Public Function IsPolicyOkayForUser(Optional ByVal policyNumber As String = "", Optional ByVal quoteNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef caughtDatabaseError As Boolean = False) As Boolean
            Dim isOkay As Boolean = False
            policyResult = Nothing
            caughtDatabaseError = False

            If String.IsNullOrWhiteSpace(policyNumber) = False OrElse String.IsNullOrWhiteSpace(quoteNumber) = False OrElse policyId > 0 Then
                Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
                With policyLookupInfo
                    .PolicyNumber = policyNumber
                    .QuoteNumber = quoteNumber
                    .PolicyId = policyId
                    If .PolicyId > 0 Then 'only set PolicyImageNum if PolicyId is there
                        .PolicyImageNum = policyImageNum
                    End If
                    If .PolicyImageNum > 0 Then 'only do lookup ByImage if PolicyId and PolicyImageNum are both there
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                    Else
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByPolicy
                    End If
                End With
                policyResult = PolicyResultForLookupInfo(policyLookupInfo, caughtDatabaseError:=caughtDatabaseError, firstOrLastItem:=FirstOrLast.Last)
                If policyResult IsNot Nothing Then
                    'isOkay = IsAgencyOkayForUser(policyResult.AgencyCode)
                    isOkay = IsAgencyOkayForUser_CodeOrId(policyResult.AgencyCode, policyResult.AgencyId)
                End If
            End If

            Return isOkay
        End Function

        'added 11/3/2016; updated 12/7/2018 w/ optional param for allowQuote; updated 10/7/2019 w/ optional param for mustHavePendingPolicyStatusWhenAllowingQuote
        Public Shared Function IsValidPendingDiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal allowQuote As Boolean = False, Optional ByVal mustHavePendingPolicyStatusWhenAllowingQuote As Boolean = True) As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            If diaImage IsNot Nothing Then
                If diaImage.PolicyId > 0 AndAlso diaImage.PolicyImageNum > 0 Then
                    Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
                    With policyLookupInfo
                        .PolicyId = diaImage.PolicyId
                        .PolicyImageNum = diaImage.PolicyImageNum
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                    End With
                    Dim caughtDatabaseError As Boolean = False
                    policyResult = PolicyResultForLookupInfo(policyLookupInfo, caughtDatabaseError:=caughtDatabaseError, firstOrLastItem:=FirstOrLast.Last)
                    If policyResult IsNot Nothing Then
                        'If policyResult.PolicyStatusCodeId = 4 Then 'Pending
                        'updated 12/7/2018
                        'If policyResult.PolicyStatusCodeId = 4 OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = 12 AndAlso policyResult.PolicyCurrentStatusId = 4) Then 'PolicyStatusCodeId Pending or (allowQuote True and PolicyStatusCodeId Quote and PolicyCurrentStatusId Pending)
                        'updated 10/7/2019
                        'If policyResult.PolicyStatusCodeId = 4 OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = 12 AndAlso (mustHavePendingPolicyStatusWhenAllowingQuote = False OrElse policyResult.PolicyCurrentStatusId = 4)) Then
                        If policyResult.PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending) OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Quote) AndAlso (mustHavePendingPolicyStatusWhenAllowingQuote = False OrElse policyResult.PolicyCurrentStatusId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Pending))) Then
                            isValid = True
                        Else
                            errorMessage = "policy image is no longer Pending"
                        End If
                    Else
                        If caughtDatabaseError = True Then
                            'db error caught performing lookup
                            errorMessage = "exception caught when trying to validate policy image"
                        Else
                            'nothing found
                            errorMessage = "unable to validate existance of policy image"
                        End If
                    End If
                Else
                    errorMessage = "invalid policyId and/or policyImageNum on diaImage"
                End If
            Else
                errorMessage = "diaImage required for this method"
            End If

            Return isValid
        End Function
        Public Shared Function IsValidPendingDiamondEndorsementImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "") As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            'If IsValidPendingDiamondImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage) = True Then
            'updated 10/7/2019
            If IsValidPendingDiamondImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=ConsiderEndorsementQuoteStatusAsPending(), mustHavePendingPolicyStatusWhenAllowingQuote:=False) = True Then
                If policyResult IsNot Nothing Then 'should always be something if IsValidPendingDiamondImage = True
                    If policyResult.TransTypeId = 3 Then 'Endorsement
                        isValid = True
                    Else
                        errorMessage = "policy image is not an Endorsement"
                    End If
                Else 'shouldn't ever get here
                    errorMessage = "unable to validate policy image type"
                End If
            End If

            Return isValid
        End Function
        Public Shared Function IsValidPendingDiamondNewBusinessImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal allowQuote As Boolean = False) As Boolean 'updated 12/7/2018 w/ optional param for allowQuote
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            'If IsValidPendingDiamondImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage) = True Then
            'updated 12/7/2018
            If IsValidPendingDiamondImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=allowQuote) = True Then
                If policyResult IsNot Nothing Then 'should always be something if IsValidPendingDiamondImage = True
                    If policyResult.TransTypeId = 2 Then 'New Business
                        isValid = True
                    Else
                        errorMessage = "policy image is not New Business"
                    End If
                Else 'shouldn't ever get here
                    errorMessage = "unable to validate policy image type"
                End If
            End If

            Return isValid
        End Function
        Public Shared Function PassesPendingDiamondImageValidation(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal tranTypeToValidate As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "") As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            Select Case tranTypeToValidate
                Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                    isValid = IsValidPendingDiamondEndorsementImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage)'12/7/2018 note: calls IsValidPendingDiamondImage and also looks for TransTypeId = 3 (Endorsement)
                Case QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote
                    isValid = IsValidPendingDiamondNewBusinessImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=True) '12/7/2018 note: calls IsValidPendingDiamondImage and also looks for TransTypeId = 2 (New Business); doesn't work for new business quotes since PolicyStatusCodeId is 12 (Quote) and not 4 (Pending), which is what IsValidPendingDiamondImage is looking for... only PolicyCurrentStatusId is 4 (Pending); updated 12/7/2018 w/ optional param for allowQuote
                Case Else
                    isValid = IsValidPendingDiamondImage(diaImage, policyResult:=policyResult, errorMessage:=errorMessage) '12/7/2018 note: looks for PolicyStatusCodeId = 4 (Pending)
            End Select
            If isValid = False AndAlso String.IsNullOrWhiteSpace(errorMessage) = True Then
                errorMessage = "unable to validate policy image"
            End If

            Return isValid
        End Function

        '11/3/2016 - and now similar validation methods for QuickQuoteObject; updated 10/7/2019 w/ optional params for allowQuote and mustHavePendingPolicyStatusWhenAllowingQuote
        Public Shared Function IsValidPendingQuickQuoteObject(ByVal qqo As QuickQuoteObject, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal allowQuote As Boolean = False, Optional ByVal mustHavePendingPolicyStatusWhenAllowingQuote As Boolean = True) As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            If qqo IsNot Nothing Then
                Dim qqHelper As New QuickQuoteHelperClass
                If qqHelper.IsPositiveIntegerString(qqo.PolicyId) = True AndAlso qqHelper.IsPositiveIntegerString(qqo.PolicyImageNum) = True Then
                    Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
                    With policyLookupInfo
                        .PolicyId = CInt(qqo.PolicyId)
                        .PolicyImageNum = CInt(qqo.PolicyImageNum)
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                    End With
                    Dim caughtDatabaseError As Boolean = False
                    policyResult = PolicyResultForLookupInfo(policyLookupInfo, caughtDatabaseError:=caughtDatabaseError, firstOrLastItem:=FirstOrLast.Last)
                    If policyResult IsNot Nothing Then
                        'If policyResult.PolicyStatusCodeId = 4 Then 'Pending
                        'updated 10/7/2019
                        'If policyResult.PolicyStatusCodeId = 4 OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = 12 AndAlso (mustHavePendingPolicyStatusWhenAllowingQuote = False OrElse policyResult.PolicyCurrentStatusId = 4)) Then
                        If policyResult.PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending) OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Quote) AndAlso (mustHavePendingPolicyStatusWhenAllowingQuote = False OrElse policyResult.PolicyCurrentStatusId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Pending))) Then
                            isValid = True
                        Else
                            errorMessage = "policy image is no longer Pending"
                        End If
                    Else
                        If caughtDatabaseError = True Then
                            'db error caught performing lookup
                            errorMessage = "exception caught when trying to validate policy image"
                        Else
                            'nothing found
                            errorMessage = "unable to validate existance of policy image"
                        End If
                    End If
                Else
                    errorMessage = "invalid policyId and/or policyImageNum on QuickQuoteObject"
                End If
            Else
                errorMessage = "QuickQuoteObject required for this method"
            End If

            Return isValid
        End Function
        Public Shared Function IsValidPendingQuickQuoteEndorsement(ByVal qqo As QuickQuoteObject, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "") As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            'If IsValidPendingQuickQuoteObject(qqo, policyResult:=policyResult, errorMessage:=errorMessage) = True Then
            'updated 10/7/2019
            If IsValidPendingQuickQuoteObject(qqo, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=ConsiderEndorsementQuoteStatusAsPending(), mustHavePendingPolicyStatusWhenAllowingQuote:=False) = True Then
                If policyResult IsNot Nothing Then 'should always be something if IsValidPendingDiamondImage = True
                    If policyResult.TransTypeId = 3 Then 'Endorsement
                        isValid = True
                    Else
                        errorMessage = "policy image is not an Endorsement"
                    End If
                Else 'shouldn't ever get here
                    errorMessage = "unable to validate policy image type"
                End If
            End If

            Return isValid
        End Function
        Public Shared Function IsValidPendingQuickQuoteNewBusiness(ByVal qqo As QuickQuoteObject, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal allowQuote As Boolean = False) As Boolean 'updated 10/7/2019 w/ optional param for allowQuote
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            'If IsValidPendingQuickQuoteObject(qqo, policyResult:=policyResult, errorMessage:=errorMessage) = True Then
            'updated 10/7/2019
            If IsValidPendingQuickQuoteObject(qqo, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=allowQuote) = True Then
                If policyResult IsNot Nothing Then 'should always be something if IsValidPendingDiamondImage = True
                    If policyResult.TransTypeId = 2 Then 'New Business
                        isValid = True
                    Else
                        errorMessage = "policy image is not New Business"
                    End If
                Else 'shouldn't ever get here
                    errorMessage = "unable to validate policy image type"
                End If
            End If

            Return isValid
        End Function
        Public Shared Function PassesPendingQuickQuoteObjectValidation(ByVal qqo As QuickQuoteObject, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "") As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            If qqo IsNot Nothing Then
                Select Case qqo.QuoteTransactionType
                    Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                        isValid = IsValidPendingQuickQuoteEndorsement(qqo, policyResult:=policyResult, errorMessage:=errorMessage)
                    Case QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote
                        'isValid = IsValidPendingQuickQuoteNewBusiness(qqo, policyResult:=policyResult, errorMessage:=errorMessage)
                        'updated 10/7/2019
                        isValid = IsValidPendingQuickQuoteNewBusiness(qqo, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=True)
                    Case Else
                        isValid = IsValidPendingQuickQuoteObject(qqo, policyResult:=policyResult, errorMessage:=errorMessage)
                End Select
                If isValid = False AndAlso String.IsNullOrWhiteSpace(errorMessage) = True Then
                    errorMessage = "unable to validate policy image"
                End If
            Else
                errorMessage = "QuickQuoteObject required for this method"
            End If

            Return isValid
        End Function

        'added 11/6/2016
        Public Shared Function HasPendingEndorsementImage(Optional ByVal policyNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef caughtDatabaseError As Boolean = False) As Boolean
            'Dim hasIt As Boolean
            'policyResult = Nothing
            'caughtDatabaseError = False

            'If String.IsNullOrWhiteSpace(policyNumber) = False OrElse policyId > 0 Then
            '    Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
            '    With policyLookupInfo
            '        .PolicyNumber = policyNumber
            '        .PolicyId = policyId
            '        .TransTypeId = 3 'Endorsement
            '        .PolicyStatusCodeId = 4 'Pending
            '        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
            '    End With
            '    policyResult = PolicyResultForLookupInfo(policyLookupInfo, caughtDatabaseError:=caughtDatabaseError, firstOrLastItem:=FirstOrLast.Last)
            '    If policyResult IsNot Nothing Then
            '        hasIt = True
            '    End If
            'End If

            'Return hasIt

            'updated 11/9/2016 to use new HasPendingImage method
            '2/27/2019 note: PassesPendingDiamondImageValidationForPolicyId does similar lookup to HasPendingImage, but can also validate user access
            Return HasPendingImage(policyNumber:=policyNumber, policyId:=policyId, tranTypeToFind:=QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, policyResult:=policyResult, caughtDatabaseError:=caughtDatabaseError, allowQuote:=ConsiderEndorsementQuoteStatusAsPending()) 'updated 10/7/2019 for allowQuote

        End Function
        'added 11/9/2016; updated 10/7/2019 w/ optional param for allowQuote... may also need param for mustHavePendingPolicyStatusWhenAllowingQuote, but we don't yet have methods for NewBusinessQuoting yet
        Public Shared Function HasPendingImage(Optional ByVal policyNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByVal tranTypeToFind As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal allowQuote As Boolean = False) As Boolean
            Dim transTypeId As Integer = 0
            Select Case tranTypeToFind
                Case QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote
                    transTypeId = 2 'New Business
                Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                    transTypeId = 3 'Endorsement
                Case Else
                    transTypeId = 0 'redundant
            End Select

            Return HasPendingImageForTransTypeId(policyNumber:=policyNumber, policyId:=policyId, transTypeId:=transTypeId, policyResult:=policyResult, caughtDatabaseError:=caughtDatabaseError, allowQuote:=allowQuote) 'updated 10/7/2019 for allowQuote
        End Function
        Public Shared Function HasPendingImageForTransTypeId(Optional ByVal policyNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByVal transTypeId As Integer = 0, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal allowQuote As Boolean = False) As Boolean 'updated 10/7/2019 w/ optional param for allowQuote... may also need param for mustHavePendingPolicyStatusWhenAllowingQuote, but we don't yet have methods for NewBusinessQuoting yet
            Dim hasIt As Boolean
            policyResult = Nothing
            caughtDatabaseError = False

            If String.IsNullOrWhiteSpace(policyNumber) = False OrElse policyId > 0 Then
                Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
                With policyLookupInfo
                    .PolicyNumber = policyNumber
                    .PolicyId = policyId
                    .TransTypeId = transTypeId
                    If allowQuote = True Then 'added IF 10/7/2019; original logic in ELSE
                        .PolicyStatusCodeIds = PendingDiamondPolicyStatusCodeIds(considerQuoteStatusAsPending:=True)
                    Else
                        '.PolicyStatusCodeId = 4 'Pending
                        .PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending)
                    End If
                    .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                End With
                policyResult = PolicyResultForLookupInfo(policyLookupInfo, caughtDatabaseError:=caughtDatabaseError, firstOrLastItem:=FirstOrLast.Last)
                If policyResult IsNot Nothing Then
                    hasIt = True
                Else
                    policyResult = New QuickQuotePolicyLookupInfo()
                    policyResult.ErrorMessage = policyLookupInfo.ErrorMessage
                    policyResult.SqlQuery = policyLookupInfo.SqlQuery
                End If
            End If

            Return hasIt
        End Function

        'added 11/13/2016
        Public Function NeedsToResetPolicyOriginTypeId(ByVal qqo As QuickQuoteObject) As Boolean
            Dim needsToReset As Boolean = False

            If qqo IsNot Nothing AndAlso qqo.Database_OriginatedInVR = True Then
                Dim policyOriginTypeIdForCompRater As String = GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.PolicyOriginTypeId, "Comparative Rating") 'latest value (1)
                If IsNumericString(policyOriginTypeIdForCompRater) = False Then
                    policyOriginTypeIdForCompRater = GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.PolicyOriginTypeId, "Web") 'original value (1)
                    If IsNumericString(policyOriginTypeIdForCompRater) = False Then
                        policyOriginTypeIdForCompRater = "1" 'defaulting just in case static data functionality isn't working for some reason
                    End If
                End If
                If qqo.PolicyOriginTypeId = policyOriginTypeIdForCompRater Then
                    needsToReset = True
                End If
            End If

            Return needsToReset
        End Function

        'added 11/14/2016
        'Public Shared Function HasCreditReport_Auto(ByVal policyId As Integer, ByVal policyImageNum As Integer, ByVal unitNumber As Integer, Optional ByRef caughtDatabaseError As Boolean = False) As Boolean
        'updated 11/22/2016 to make policyImageNum and unitNumber optional params; updated 4/9/2019 w/ more optional parameters for returning records
        Public Shared Function HasCreditReport_Auto(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNumber As Integer = 0, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal returnRecords As Boolean = False, Optional ByVal firstLastOrAllRecords As FirstLastOrAll = FirstLastOrAll.LastOnly, Optional ByRef choicePointTransmissions As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmission As QuickQuoteChoicePointTransmission = Nothing) As Boolean
            Dim hasReport As Boolean = False
            caughtDatabaseError = False
            choicePointTransmissions = Nothing
            choicePointTransmission = Nothing

            Dim dbQuery As String = ""

            'updated 11/22/2016
            If policyId > 0 Then
                'dbQuery = "SELECT * FROM ChoicePointTransmissionVehicle as V WITH (NOLOCK) WHERE V.thirdpartytype_id = 5" 'NCF Report Inquiry - Vehicle
                dbQuery = "SELECT"
                If returnRecords = False OrElse firstLastOrAllRecords <> FirstLastOrAll.All Then
                    dbQuery &= " TOP 1"
                End If
                dbQuery &= " * FROM ChoicePointTransmissionVehicle as V WITH (NOLOCK) WHERE V.thirdpartytype_id = 5" 'NCF Report Inquiry - Vehicle
                dbQuery &= " And V.policy_id = " & policyId.ToString
                If policyImageNum > 0 Then
                    dbQuery &= " And V.policyimage_num = " & policyImageNum.ToString
                End If
                If unitNumber > 0 Then 'could also validate that this is always greater than 0 since this method will likely only be used for 1 driver at a time (and unit_num is driver_num)
                    dbQuery &= " And V.unit_num = " & unitNumber.ToString
                End If
                If returnRecords = True Then
                    dbQuery &= " ORDER BY "
                    'dbQuery &= "V.pcadded_date"
                    'dbQuery &= "V.choicepointtransmission_num"
                    'If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                    '    dbQuery &= " DESC"
                    'End If
                    'updated 7/11/2019 to include policyId and policyImageNum in orderBy
                    Dim ascOrDesc As String = ""
                    If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                        ascOrDesc = " DESC"
                    Else
                        ascOrDesc = " ASC"
                    End If
                    dbQuery &= "V.policy_id" & ascOrDesc
                    dbQuery &= ", V.policyimage_num" & ascOrDesc
                    dbQuery &= ", V.choicepointtransmission_num" & ascOrDesc
                End If
            End If

            If String.IsNullOrWhiteSpace(dbQuery) = False Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sqlSO.queryOrStoredProc = dbQuery
                    Using dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            hasReport = True
                            'While dr.Read

                            'End While
                            If returnRecords = True Then
                                choicePointTransmissions = QuickQuoteChoicePointTransmissionsFromDatareader(dr, thirdPartyReportType:=QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.CreditAuto)
                                If choicePointTransmissions IsNot Nothing AndAlso choicePointTransmissions.Count > 0 Then
                                    choicePointTransmission = choicePointTransmissions(0)
                                End If
                            End If
                        ElseIf sqlSO.hasError = True Then
                            'database error
                            caughtDatabaseError = True
                        Else
                            'nothing found
                        End If
                    End Using
                End Using
            End If

            Return hasReport
        End Function
        'Public Shared Function HasCreditReport_Property(ByVal policyId As Integer, ByVal policyImageNum As Integer, ByVal unitNumber As Integer, Optional ByRef caughtDatabaseError As Boolean = False) As Boolean
        'updated 11/22/2016 to make policyImageNum and unitNumber optional params; updated 4/9/2019 w/ more optional parameters for returning records
        Public Shared Function HasCreditReport_Property(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNumber As Integer = 0, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal returnRecords As Boolean = False, Optional ByVal firstLastOrAllRecords As FirstLastOrAll = FirstLastOrAll.LastOnly, Optional ByRef choicePointTransmissions As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmission As QuickQuoteChoicePointTransmission = Nothing) As Boolean
            Dim hasReport As Boolean = False
            caughtDatabaseError = False
            choicePointTransmissions = Nothing
            choicePointTransmission = Nothing

            Dim dbQuery As String = ""

            'updated 11/22/2016
            If policyId > 0 Then
                'dbQuery = "SELECT * FROM ChoicePointTransmissionLocation as L WITH (NOLOCK) WHERE L.thirdpartytype_id = 4" 'NCF Report Inquiry - Location
                dbQuery = "SELECT"
                If returnRecords = False OrElse firstLastOrAllRecords <> FirstLastOrAll.All Then
                    dbQuery &= " TOP 1"
                End If
                dbQuery &= " * FROM ChoicePointTransmissionLocation as L WITH (NOLOCK) WHERE L.thirdpartytype_id = 4" 'NCF Report Inquiry - Location
                dbQuery &= " And L.policy_id = " & policyId.ToString
                If policyImageNum > 0 Then
                    dbQuery &= " And L.policyimage_num = " & policyImageNum.ToString
                End If
                If unitNumber > 0 Then 'could also validate that this is always greater than 0 since this method will likely only be used for 1 applicant at a time (and unit_num is applicant_num)
                    dbQuery &= " And L.unit_num = " & unitNumber.ToString
                End If
                If returnRecords = True Then
                    dbQuery &= " ORDER BY "
                    'dbQuery &= "L.pcadded_date"
                    'dbQuery &= "L.choicepointtransmission_num"
                    'If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                    '    dbQuery &= " DESC"
                    'End If
                    'updated 7/11/2019 to include policyId and policyImageNum in orderBy
                    Dim ascOrDesc As String = ""
                    If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                        ascOrDesc = " DESC"
                    Else
                        ascOrDesc = " ASC"
                    End If
                    dbQuery &= "L.policy_id" & ascOrDesc
                    dbQuery &= ", L.policyimage_num" & ascOrDesc
                    dbQuery &= ", L.choicepointtransmission_num" & ascOrDesc
                End If
            End If

            If String.IsNullOrWhiteSpace(dbQuery) = False Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sqlSO.queryOrStoredProc = dbQuery
                    Using dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            hasReport = True
                            'While dr.Read

                            'End While
                            If returnRecords = True Then
                                choicePointTransmissions = QuickQuoteChoicePointTransmissionsFromDatareader(dr, thirdPartyReportType:=QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.CreditProperty)
                                If choicePointTransmissions IsNot Nothing AndAlso choicePointTransmissions.Count > 0 Then
                                    choicePointTransmission = choicePointTransmissions(0)
                                End If
                            End If
                        ElseIf sqlSO.hasError = True Then
                            'database error
                            caughtDatabaseError = True
                        Else
                            'nothing found
                        End If
                    End Using
                End Using
            End If

            Return hasReport
        End Function
        'added 11/23/2016; updated 4/9/2019 w/ more optional parameters for returning records
        Public Shared Function HasMvrReport(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNumber As Integer = 0, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal returnRecords As Boolean = False, Optional ByVal firstLastOrAllRecords As FirstLastOrAll = FirstLastOrAll.LastOnly, Optional ByRef choicePointTransmissions As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmission As QuickQuoteChoicePointTransmission = Nothing) As Boolean
            Dim hasReport As Boolean = False
            caughtDatabaseError = False
            choicePointTransmissions = Nothing
            choicePointTransmission = Nothing

            Dim dbQuery As String = ""

            If policyId > 0 Then
                'dbQuery = "SELECT * FROM ChoicePointTransmissionDriver as D WITH (NOLOCK) WHERE D.thirdpartytype_id = 1" 'Motor Vehicle Records
                dbQuery = "SELECT"
                If returnRecords = False OrElse firstLastOrAllRecords <> FirstLastOrAll.All Then
                    dbQuery &= " TOP 1"
                End If
                dbQuery &= " * FROM ChoicePointTransmissionDriver as D WITH (NOLOCK) WHERE D.thirdpartytype_id = 1" 'Motor Vehicle Records
                dbQuery &= " And D.policy_id = " & policyId.ToString
                If policyImageNum > 0 Then
                    dbQuery &= " And D.policyimage_num = " & policyImageNum.ToString
                End If
                If unitNumber > 0 Then 'could also validate that this is always greater than 0 since this method will likely only be used for 1 driver at a time (and unit_num is driver_num)
                    dbQuery &= " And D.unit_num = " & unitNumber.ToString
                End If
                If returnRecords = True Then
                    dbQuery &= " ORDER BY "
                    'dbQuery &= "D.pcadded_date"
                    'dbQuery &= "D.choicepointtransmission_num"
                    'If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                    '    dbQuery &= " DESC"
                    'End If
                    'updated 7/11/2019 to include policyId and policyImageNum in orderBy
                    Dim ascOrDesc As String = ""
                    If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                        ascOrDesc = " DESC"
                    Else
                        ascOrDesc = " ASC"
                    End If
                    dbQuery &= "D.policy_id" & ascOrDesc
                    dbQuery &= ", D.policyimage_num" & ascOrDesc
                    dbQuery &= ", D.choicepointtransmission_num" & ascOrDesc
                End If
            End If

            If String.IsNullOrWhiteSpace(dbQuery) = False Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sqlSO.queryOrStoredProc = dbQuery
                    Using dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            hasReport = True
                            'While dr.Read

                            'End While
                            If returnRecords = True Then
                                choicePointTransmissions = QuickQuoteChoicePointTransmissionsFromDatareader(dr, thirdPartyReportType:=QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.MVR)
                                If choicePointTransmissions IsNot Nothing AndAlso choicePointTransmissions.Count > 0 Then
                                    choicePointTransmission = choicePointTransmissions(0)
                                End If
                            End If
                        ElseIf sqlSO.hasError = True Then
                            'database error
                            caughtDatabaseError = True
                        Else
                            'nothing found
                        End If
                    End Using
                End Using
            End If

            Return hasReport
        End Function
        'added 4/11/2019
        Public Shared Function HasClueReport_Auto(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNumber As Integer = 0, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal returnRecords As Boolean = False, Optional ByVal returnAsSet As Boolean = False, Optional ByVal numberOfRecordsToEvaluateForInclusionInSet As Integer = 10, Optional ByVal firstLastOrAllRecords As FirstLastOrAll = FirstLastOrAll.LastOnly, Optional ByVal reverseSetOrder As Boolean = False, Optional ByRef choicePointTransmissions As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmissionSet As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmission As QuickQuoteChoicePointTransmission = Nothing) As Boolean
            Dim hasReport As Boolean = False
            caughtDatabaseError = False
            choicePointTransmissions = Nothing
            choicePointTransmissionSet = Nothing
            choicePointTransmission = Nothing

            Dim dbQuery As String = ""

            If policyId > 0 Then
                dbQuery = "SELECT"
                If returnRecords = False OrElse firstLastOrAllRecords <> FirstLastOrAll.All Then
                    dbQuery &= " TOP "
                    If returnRecords = True AndAlso returnAsSet = True Then
                        If numberOfRecordsToEvaluateForInclusionInSet <= 0 Then
                            numberOfRecordsToEvaluateForInclusionInSet = 10
                        End If
                        dbQuery &= numberOfRecordsToEvaluateForInclusionInSet.ToString
                    Else
                        dbQuery &= "1"
                    End If
                End If
                dbQuery &= " * FROM ChoicePointTransmissionAuto as A WITH (NOLOCK) WHERE A.thirdpartytype_id = 2" 'C.L.U.E Personal Auto
                dbQuery &= " And A.policy_id = " & policyId.ToString
                If policyImageNum > 0 Then
                    dbQuery &= " And A.policyimage_num = " & policyImageNum.ToString
                End If
                If unitNumber > 0 Then 'could also validate that this is always greater than 0, but it may not matter unless CLUE can be ordered for different locations on a policy (depending on the LOB)
                    dbQuery &= " And A.unit_num = " & unitNumber.ToString
                End If
                If returnRecords = True Then
                    dbQuery &= " ORDER BY "
                    'dbQuery &= "A.pcadded_date"
                    'dbQuery &= "A.choicepointtransmission_num"
                    'If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                    '    dbQuery &= " DESC"
                    'End If
                    'updated 7/11/2019 to include policyId and policyImageNum in orderBy
                    Dim ascOrDesc As String = ""
                    If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                        ascOrDesc = " DESC"
                    Else
                        ascOrDesc = " ASC"
                    End If
                    dbQuery &= "A.policy_id" & ascOrDesc
                    dbQuery &= ", A.policyimage_num" & ascOrDesc
                    dbQuery &= ", A.choicepointtransmission_num" & ascOrDesc
                End If
            End If

            If String.IsNullOrWhiteSpace(dbQuery) = False Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sqlSO.queryOrStoredProc = dbQuery
                    Using dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            hasReport = True
                            'While dr.Read

                            'End While
                            If returnRecords = True Then
                                choicePointTransmissions = QuickQuoteChoicePointTransmissionsFromDatareader(dr, thirdPartyReportType:=QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.CLUEAuto)
                                If choicePointTransmissions IsNot Nothing AndAlso choicePointTransmissions.Count > 0 Then
                                    choicePointTransmission = choicePointTransmissions(0)
                                    If returnAsSet = True Then
                                        choicePointTransmissionSet = New List(Of QuickQuoteChoicePointTransmission)
                                        Dim qqHelper As New QuickQuoteHelperClass
                                        If choicePointTransmission IsNot Nothing AndAlso qqHelper.IsValidDateString(choicePointTransmission.PcAddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                            Dim cptDateToCompare As Date = CDate(choicePointTransmission.PcAddedDate)
                                            For Each cpt As QuickQuoteChoicePointTransmission In choicePointTransmissions
                                                If cpt IsNot Nothing AndAlso qqHelper.IsValidDateString(cpt.PcAddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                                    Dim currDate As Date = CDate(cpt.PcAddedDate)
                                                    If currDate > DateAdd(DateInterval.Minute, -1, cptDateToCompare) AndAlso currDate < DateAdd(DateInterval.Minute, 1, cptDateToCompare) Then
                                                        choicePointTransmissionSet.Add(cpt)
                                                    End If
                                                End If
                                            Next
                                            If reverseSetOrder = True AndAlso choicePointTransmissionSet.Count > 1 Then
                                                choicePointTransmissionSet.Reverse()
                                            End If
                                        End If
                                        If choicePointTransmissionSet.Count = 0 Then
                                            choicePointTransmissionSet.Add(choicePointTransmission)
                                        End If
                                    End If
                                End If
                            End If
                        ElseIf sqlSO.hasError = True Then
                            'database error
                            caughtDatabaseError = True
                        Else
                            'nothing found
                        End If
                    End Using
                End Using
            End If

            Return hasReport
        End Function
        Public Shared Function HasClueReport_Property(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByVal unitNumber As Integer = 0, Optional ByRef caughtDatabaseError As Boolean = False, Optional ByVal returnRecords As Boolean = False, Optional ByVal returnAsSet As Boolean = False, Optional ByVal numberOfRecordsToEvaluateForInclusionInSet As Integer = 10, Optional ByVal firstLastOrAllRecords As FirstLastOrAll = FirstLastOrAll.LastOnly, Optional ByVal reverseSetOrder As Boolean = False, Optional ByRef choicePointTransmissions As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmissionSet As List(Of QuickQuoteChoicePointTransmission) = Nothing, Optional ByRef choicePointTransmission As QuickQuoteChoicePointTransmission = Nothing) As Boolean
            Dim hasReport As Boolean = False
            caughtDatabaseError = False
            choicePointTransmissions = Nothing
            choicePointTransmissionSet = Nothing
            choicePointTransmission = Nothing

            Dim dbQuery As String = ""

            If policyId > 0 Then
                dbQuery = "SELECT"
                If returnRecords = False OrElse firstLastOrAllRecords <> FirstLastOrAll.All Then
                    dbQuery &= " TOP "
                    If returnRecords = True AndAlso returnAsSet = True Then
                        If numberOfRecordsToEvaluateForInclusionInSet <= 0 Then
                            numberOfRecordsToEvaluateForInclusionInSet = 10
                        End If
                        dbQuery &= numberOfRecordsToEvaluateForInclusionInSet.ToString
                    Else
                        dbQuery &= "1"
                    End If
                End If
                dbQuery &= " * FROM ChoicePointTransmissionLocation as L WITH (NOLOCK) WHERE L.thirdpartytype_id = 3" 'C.L.U.E. Personal Property
                dbQuery &= " And L.policy_id = " & policyId.ToString
                If policyImageNum > 0 Then
                    dbQuery &= " And L.policyimage_num = " & policyImageNum.ToString
                End If
                If unitNumber > 0 Then 'could also validate that this is always greater than 0, but it may not matter unless CLUE can be ordered for different locations on a policy (depending on the LOB)
                    dbQuery &= " And L.unit_num = " & unitNumber.ToString
                End If
                If returnRecords = True Then
                    dbQuery &= " ORDER BY "
                    'dbQuery &= "L.pcadded_date"
                    'dbQuery &= "L.choicepointtransmission_num"
                    'If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                    '    dbQuery &= " DESC"
                    'End If
                    'updated 7/11/2019 to include policyId and policyImageNum in orderBy
                    Dim ascOrDesc As String = ""
                    If firstLastOrAllRecords = FirstLastOrAll.LastOnly Then
                        ascOrDesc = " DESC"
                    Else
                        ascOrDesc = " ASC"
                    End If
                    dbQuery &= "L.policy_id" & ascOrDesc
                    dbQuery &= ", L.policyimage_num" & ascOrDesc
                    dbQuery &= ", L.choicepointtransmission_num" & ascOrDesc
                End If
            End If

            If String.IsNullOrWhiteSpace(dbQuery) = False Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sqlSO.queryOrStoredProc = dbQuery
                    Using dr As SqlClient.SqlDataReader = sqlSO.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            hasReport = True
                            'While dr.Read

                            'End While
                            If returnRecords = True Then
                                choicePointTransmissions = QuickQuoteChoicePointTransmissionsFromDatareader(dr, thirdPartyReportType:=QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.CLUEProperty)
                                If choicePointTransmissions IsNot Nothing AndAlso choicePointTransmissions.Count > 0 Then
                                    choicePointTransmission = choicePointTransmissions(0)
                                    If returnAsSet = True Then
                                        choicePointTransmissionSet = New List(Of QuickQuoteChoicePointTransmission)
                                        Dim qqHelper As New QuickQuoteHelperClass
                                        If choicePointTransmission IsNot Nothing AndAlso qqHelper.IsValidDateString(choicePointTransmission.PcAddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                            Dim cptDateToCompare As Date = CDate(choicePointTransmission.PcAddedDate)
                                            For Each cpt As QuickQuoteChoicePointTransmission In choicePointTransmissions
                                                If cpt IsNot Nothing AndAlso qqHelper.IsValidDateString(cpt.PcAddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                                    Dim currDate As Date = CDate(cpt.PcAddedDate)
                                                    If currDate > DateAdd(DateInterval.Minute, -1, cptDateToCompare) AndAlso currDate < DateAdd(DateInterval.Minute, 1, cptDateToCompare) Then
                                                        choicePointTransmissionSet.Add(cpt)
                                                    End If
                                                End If
                                            Next
                                            If reverseSetOrder = True AndAlso choicePointTransmissionSet.Count > 1 Then
                                                choicePointTransmissionSet.Reverse()
                                            End If
                                        End If
                                        If choicePointTransmissionSet.Count = 0 Then
                                            choicePointTransmissionSet.Add(choicePointTransmission)
                                        End If
                                    End If
                                End If
                            End If
                        ElseIf sqlSO.hasError = True Then
                            'database error
                            caughtDatabaseError = True
                        Else
                            'nothing found
                        End If
                    End Using
                End Using
            End If

            Return hasReport
        End Function

        'added 2/7/2017; added optional quoteTransactionType param 2/8/2017
        Public Shared Function UseComparativeRaterForLob(Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal quoteTransactionType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None) As QuickQuoteYesNoMaybeType
            Dim yesNoMaybe As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe

            If quoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote Then 'added IF 2/8/2017; original logic in ELSE; may need to also include ReadOnlyImage or just look for anything not equal to None/NewBusinessQuoting
                yesNoMaybe = QuickQuoteYesNoMaybeType.No
            Else
                If lob <> QuickQuoteObject.QuickQuoteLobType.None AndAlso QuickQuote_RatingServices_DetermineByLOB() = True Then 'updated 2/8/2017 for QuickQuote_RatingServices_DetermineByLOB flag
                    Select Case lob
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialCrime
                            yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                        Case QuickQuoteObject.QuickQuoteLobType.AutoPersonal
                            yesNoMaybe = QuickQuoteYesNoMaybeType.No
                        Case QuickQuoteObject.QuickQuoteLobType.HomePersonal
                            yesNoMaybe = QuickQuoteYesNoMaybeType.No
                        Case QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                            yesNoMaybe = QuickQuoteYesNoMaybeType.No
                        Case QuickQuoteObject.QuickQuoteLobType.Farm
                            yesNoMaybe = QuickQuoteYesNoMaybeType.No
                    End Select

                    'added 2/8/2017; already defaulted above; will now check for specific LOB config key
                    Dim ratingServicesToUse As QuickQuoteXML.QuickQuoteRatingServices = QuickQuote_RatingServices_ForLOB(lob)
                    If ratingServicesToUse = QuickQuoteXML.QuickQuoteRatingServices.Diamond Then
                        yesNoMaybe = QuickQuoteYesNoMaybeType.No
                    ElseIf ratingServicesToUse = QuickQuoteXML.QuickQuoteRatingServices.ComparativeRater Then
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                    End If
                End If
            End If

            Return yesNoMaybe
        End Function
        'added 2/8/2017
        Public Shared Function QuickQuote_RatingServices_DetermineByLOB() As Boolean
            Dim determineIt As Boolean = False

            If ConfigurationManager.AppSettings("QuickQuote_RatingServices_DetermineByLOB") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuote_RatingServices_DetermineByLOB").ToString <> "" Then
                Dim qqHelper As New QuickQuoteHelperClass
                'determineIt = qqHelper.BitToBoolean(ConfigurationManager.AppSettings("QuickQuote_RatingServices_DetermineByLOB").ToString)
                'note: will eventually update BitToBoolean function to evaluate Yes as True; need to turn off GetRatedXml_DiamondService_SendExceptionEmail key in prod 1st
                If UCase(ConfigurationManager.AppSettings("QuickQuote_RatingServices_DetermineByLOB").ToString) = "YES" OrElse qqHelper.BitToBoolean(ConfigurationManager.AppSettings("QuickQuote_RatingServices_DetermineByLOB").ToString) = True Then
                    determineIt = True
                End If
            End If

            Return determineIt
        End Function
        Public Shared Function QuickQuote_RatingServices_ForLOB(ByVal lob As QuickQuoteObject.QuickQuoteLobType) As QuickQuoteXML.QuickQuoteRatingServices
            Dim ratingServices As QuickQuoteXML.QuickQuoteRatingServices = QuickQuoteXML.QuickQuoteRatingServices.None

            If lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                Dim configKeyName As String = "QuickQuote_RatingServices_To_Use_"
                '12/7/2018 note: should probably update to use QuickQuote_ThreeLetterAbbreviation_ForLOB function to get abbreviation
                'Select Case lob
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                '        configKeyName &= "BOP"
                '    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                '        configKeyName &= "WCP"
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                '        configKeyName &= "CAP"
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                '        configKeyName &= "CGL"
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                '        configKeyName &= "CPR"
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                '        configKeyName &= "CPP"
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
                '        configKeyName &= "CIM"
                '    Case QuickQuoteObject.QuickQuoteLobType.CommercialCrime
                '        configKeyName &= "CRM"
                '    Case QuickQuoteObject.QuickQuoteLobType.AutoPersonal
                '        configKeyName &= "PPA"
                '    Case QuickQuoteObject.QuickQuoteLobType.HomePersonal
                '        configKeyName &= "HOM"
                '    Case QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                '        configKeyName &= "DFR"
                '    Case QuickQuoteObject.QuickQuoteLobType.Farm
                '        configKeyName &= "FAR"
                'End Select
                'updated 12/7/2018
                configKeyName &= QuickQuote_ThreeLetterAbbreviation_ForLOB(lob)
                Dim configKeyValue As String = configAppSettingValueAsString(configKeyName)
                If String.IsNullOrWhiteSpace(configKeyValue) = False Then
                    Select Case UCase(configKeyValue)
                        Case "DIAMOND"
                            ratingServices = QuickQuoteXML.QuickQuoteRatingServices.Diamond
                        Case "COMPRATER", "COMPARATIVERATER"
                            ratingServices = QuickQuoteXML.QuickQuoteRatingServices.ComparativeRater
                    End Select
                End If
            End If

            Return ratingServices
        End Function

        'added 3/1/2017
        Public Shared Function NewBusinessQuoteResultsForLookupInfo(ByVal quoteLookupInfo As QuickQuotePolicyLookupInfo, Optional ByRef caughtDatabaseError As Boolean = False) As List(Of QuickQuotePolicyLookupInfo)
            Dim quoteResults As List(Of QuickQuotePolicyLookupInfo) = Nothing

            If quoteLookupInfo IsNot Nothing Then
                With quoteLookupInfo
                    .TransTypeId = 2 'New Business
                    .PolicyCurrentStatusId = 4 'Pending
                    .PolicyStatusCodeId = 12 'Quote
                    '.PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByPolicy
                    'updated 3/31/2017 (per meeting on 3/13/2017 where we'll search for policy # field and not quote # field, and we'll just search by image to make it more efficient... so it doesn't need to find current image for policy record)
                    .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                End With
                quoteResults = PolicyResultsForLookupInfo(quoteLookupInfo, caughtDatabaseError)
            End If

            Return quoteResults
        End Function
        'added 3/31/2017 for Diamond Proposal search functionality (Pending policy Status, Pending or Quote image status, and NewBusiness or Renewal transactionTypes)
        Public Shared Function PolicyResultsForDiamondProposalLookupInfo(ByVal quoteLookupInfo As QuickQuotePolicyLookupInfo, Optional ByRef caughtDatabaseError As Boolean = False) As List(Of QuickQuotePolicyLookupInfo)
            Dim quoteResults As List(Of QuickQuotePolicyLookupInfo) = Nothing

            If quoteLookupInfo IsNot Nothing Then
                With quoteLookupInfo
                    AddIntegerToIntegerList(2, .TransTypeIds) 'New Business
                    AddIntegerToIntegerList(4, .TransTypeIds) 'Renewal
                    AddIntegerToIntegerList(6, .TransTypeIds) 'Rewrite Full
                    AddIntegerToIntegerList(7, .TransTypeIds) 'Cancel-Rewrite
                    AddIntegerToIntegerList(15, .TransTypeIds) 'ABT Cancel-Rewrite
                    AddIntegerToIntegerList(1, .PolicyCurrentStatusIds) 'In-Force; added 4/11/2017 to allow for renewals on active policies; could possibly allow for 2 (Future) also, but shouldn't be needed
                    AddIntegerToIntegerList(4, .PolicyCurrentStatusIds) 'Pending
                    AddIntegerToIntegerList(4, .PolicyStatusCodeIds) 'Pending
                    AddIntegerToIntegerList(12, .PolicyStatusCodeIds) 'Quote
                    .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                End With
                quoteResults = PolicyResultsForLookupInfo(quoteLookupInfo, caughtDatabaseError)
            End If

            Return quoteResults
        End Function

        'added 3/22/2017 to keep logic in one spot (originally taken from QuickQuoteXML.ReadOnlyQuickQuoteObjectForPolicyInfo)
        Public Shared Function PolicyLookupInfoForPolicyInfo(Optional ByVal policyNumber As String = "", Optional ByVal quoteNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByRef errorMessage As String = "") As QuickQuotePolicyLookupInfo
            Dim policyLookupInfo As QuickQuotePolicyLookupInfo = Nothing
            errorMessage = ""

            If String.IsNullOrWhiteSpace(policyNumber) = False OrElse String.IsNullOrWhiteSpace(quoteNumber) = False OrElse policyId > 0 Then
                policyLookupInfo = New QuickQuotePolicyLookupInfo
                With policyLookupInfo
                    .PolicyNumber = policyNumber
                    .QuoteNumber = quoteNumber
                    .PolicyId = policyId
                    If .PolicyId > 0 Then 'only set PolicyImageNum if PolicyId is there
                        .PolicyImageNum = policyImageNum
                    End If
                    If .PolicyImageNum > 0 Then 'only do lookup ByImage if PolicyId and PolicyImageNum are both there
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                    Else
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByPolicy
                    End If
                End With
            Else
                errorMessage = "insufficient lookup information provided to load policy"
            End If

            Return policyLookupInfo
        End Function
        Public Shared Sub AddPolicyInfoToLookupInfoList(ByRef policyLookupInfos As List(Of QuickQuotePolicyLookupInfo), Optional ByVal policyNumber As String = "", Optional ByVal quoteNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0)
            Dim errorMessage As String = ""
            Dim policyLookupInfo As QuickQuotePolicyLookupInfo = QuickQuoteHelperClass.PolicyLookupInfoForPolicyInfo(policyNumber:=policyNumber, quoteNumber:=quoteNumber, policyId:=policyId, policyImageNum:=policyImageNum, errorMessage:=errorMessage)
            If policyLookupInfo IsNot Nothing Then
                If policyLookupInfos Is Nothing Then
                    policyLookupInfos = New List(Of QuickQuotePolicyLookupInfo)
                End If
                policyLookupInfos.Add(policyLookupInfo)
            End If
        End Sub

        'added 3/27/2017
        Public Sub SaveDiamondProposal(ByRef qqDiaProposal As QuickQuoteDiamondProposal, Optional ByRef errorMessages As List(Of String) = Nothing)
            errorMessages = Nothing

            If qqDiaProposal IsNot Nothing Then
                With qqDiaProposal
                    'see if main DiamondProposal record needs to be inserted 1st
                    If .DiamondProposalId = 0 Then
                        'insert proposal
                        Using sqlEO_DiamondProposal As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                            With sqlEO_DiamondProposal
                                .queryOrStoredProc = "usp_Insert_DiamondProposal"

                                .inputParameters = New ArrayList
                                With .inputParameters
                                    If qqDiaProposal.DiamondProposalBinaryId > 0 Then
                                        .Add(New SqlClient.SqlParameter("@diamondProposalBinaryId", qqDiaProposal.DiamondProposalBinaryId))
                                    End If
                                    If qqDiaProposal.InsertUserId = 0 Then
                                        If qqDiaProposal.UpdateUserId > 0 Then
                                            qqDiaProposal.InsertUserId = qqDiaProposal.UpdateUserId
                                        Else
                                            qqDiaProposal.InsertUserId = IntegerForString(DiamondUserId)
                                        End If
                                    End If
                                    If qqDiaProposal.InsertUserId > 0 Then
                                        .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.InsertUserId))
                                    End If
                                End With

                                .outputParameter = New SqlClient.SqlParameter("@diamondProposalId", Data.SqlDbType.Int)

                                .ExecuteStatement()

                                If .hasError = True Then
                                    AddStringToList("Database error encountered when inserting DiamondProposal record", errorMessages)
                                Else
                                    qqDiaProposal.DiamondProposalId = sqlEO_DiamondProposal.outputParameter.Value
                                    qqDiaProposal.InsertDate = Date.Now.ToString
                                    If qqDiaProposal.UpdateUserId = 0 Then
                                        qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                    End If
                                    qqDiaProposal.UpdateDate = qqDiaProposal.InsertDate
                                End If
                            End With
                        End Using
                    End If
                    If .DiamondProposalId > 0 Then
                        'now check for binary to insert
                        If .DiamondProposalBytes IsNot Nothing Then
                            If .DiamondProposalBinaryId = 0 Then
                                'insert binary
                                Using sqlEO_DiamondProposalBinary As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                                    With sqlEO_DiamondProposalBinary
                                        .queryOrStoredProc = "usp_Insert_DiamondProposalBinary"

                                        .inputParameters = New ArrayList
                                        With .inputParameters
                                            .Add(New SqlClient.SqlParameter("@diamondProposalId", qqDiaProposal.DiamondProposalId))
                                            .Add(New SqlClient.SqlParameter("@diamondProposalBytes", qqDiaProposal.DiamondProposalBytes))
                                            If IsPositiveDecimalString(qqDiaProposal.TotalQuotedPremium) = True Then 'added 4/22/2017
                                                .Add(New SqlClient.SqlParameter("@totalQuotedPremium", qqDiaProposal.TotalQuotedPremium))
                                            End If
                                            'If qqDiaProposal.InsertUserId = 0 Then
                                            '    If qqDiaProposal.UpdateUserId > 0 Then
                                            '        qqDiaProposal.InsertUserId = qqDiaProposal.UpdateUserId
                                            '    Else
                                            '        qqDiaProposal.InsertUserId = IntegerForString(DiamondUserId)
                                            '    End If
                                            'End If
                                            'If qqDiaProposal.InsertUserId > 0 Then
                                            '    .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.InsertUserId))
                                            'End If
                                            If qqDiaProposal.UpdateUserId = 0 Then
                                                qqDiaProposal.UpdateUserId = IntegerForString(DiamondUserId)
                                                If qqDiaProposal.UpdateUserId = 0 Then
                                                    qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                End If
                                            End If
                                            If qqDiaProposal.UpdateUserId > 0 Then
                                                .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.UpdateUserId))
                                            End If
                                        End With

                                        .outputParameter = New SqlClient.SqlParameter("@diamondProposalBinaryId", Data.SqlDbType.Int)

                                        .ExecuteStatement()

                                        If .hasError = True Then
                                            AddStringToList("Database error encountered when inserting DiamondProposalBinary record", errorMessages)
                                        Else
                                            qqDiaProposal.DiamondProposalBinaryId = sqlEO_DiamondProposalBinary.outputParameter.Value
                                            'qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                            qqDiaProposal.UpdateDate = Date.Now.ToString
                                        End If
                                    End With
                                End Using
                            End If
                        End If

                        'now check for DiamondProposalImage records to insert
                        If .Images IsNot Nothing AndAlso .Images.Count > 0 Then
                            Dim imageCounter As Integer = 0
                            For Each i As QuickQuoteDiamondProposalImage In .Images
                                imageCounter += 1
                                If i IsNot Nothing Then
                                    With i
                                        If .DiamondProposalImageLinkId = 0 Then
                                            'insert image link
                                            If .PolicyId > 0 AndAlso .PolicyImageNum > 0 Then
                                                Using sqlEO_DiamondProposalImageLink As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                                                    With sqlEO_DiamondProposalImageLink
                                                        .queryOrStoredProc = "usp_Insert_DiamondProposalImageLink"

                                                        .inputParameters = New ArrayList
                                                        With .inputParameters
                                                            .Add(New SqlClient.SqlParameter("@diamondProposalId", qqDiaProposal.DiamondProposalId))
                                                            .Add(New SqlClient.SqlParameter("@policyId", i.PolicyId))
                                                            .Add(New SqlClient.SqlParameter("@policyImageNum", i.PolicyImageNum))
                                                            'If qqDiaProposal.InsertUserId = 0 Then
                                                            '    If qqDiaProposal.UpdateUserId > 0 Then
                                                            '        qqDiaProposal.InsertUserId = qqDiaProposal.UpdateUserId
                                                            '    Else
                                                            '        qqDiaProposal.InsertUserId = IntegerForString(DiamondUserId)
                                                            '    End If
                                                            'End If
                                                            'If qqDiaProposal.InsertUserId > 0 Then
                                                            '    .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.InsertUserId))
                                                            'End If
                                                            If qqDiaProposal.UpdateUserId = 0 Then
                                                                qqDiaProposal.UpdateUserId = IntegerForString(DiamondUserId)
                                                                If qqDiaProposal.UpdateUserId = 0 Then
                                                                    qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                                End If
                                                            End If
                                                            If qqDiaProposal.UpdateUserId > 0 Then
                                                                .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.UpdateUserId))
                                                            End If

                                                            'added 11/30/2017
                                                            If String.IsNullOrWhiteSpace(i.PolicyNumber) = False Then
                                                                .Add(New SqlClient.SqlParameter("@policyNumber", i.PolicyNumber))
                                                            End If
                                                            If String.IsNullOrWhiteSpace(i.QuoteNumber) = False Then
                                                                .Add(New SqlClient.SqlParameter("@quoteNumber", i.QuoteNumber))
                                                            End If
                                                        End With

                                                        .outputParameter = New SqlClient.SqlParameter("@diamondProposalImageLinkId", Data.SqlDbType.Int)

                                                        .ExecuteStatement()

                                                        If .hasError = True Then
                                                            AddStringToList("Database error encountered when inserting DiamondProposalImageLink record", errorMessages)
                                                        Else
                                                            i.DiamondProposalImageLinkId = sqlEO_DiamondProposalImageLink.outputParameter.Value
                                                            'qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                            qqDiaProposal.UpdateDate = Date.Now.ToString
                                                        End If
                                                    End With
                                                End Using
                                            Else
                                                AddStringToList("Invalid policyId and/or policyImageNum for image # " & imageCounter.ToString, errorMessages)
                                            End If
                                        End If
                                        If .DiamondProposalImageLinkId > 0 Then
                                            'now check for DiamondProposalComment records to insert
                                            If .Comments IsNot Nothing AndAlso .Comments.Count > 0 Then
                                                Dim commentCounter As Integer = 0
                                                For Each c As QuickQuoteDiamondProposalComment In .Comments
                                                    commentCounter += 1
                                                    If c IsNot Nothing Then
                                                        With c
                                                            If .DiamondProposalCommentId = 0 Then
                                                                'insert comment
                                                                If String.IsNullOrWhiteSpace(c.CommentText) = False Then
                                                                    Using sqlEO_DiamondProposalComment As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                                                                        With sqlEO_DiamondProposalComment
                                                                            .queryOrStoredProc = "usp_Insert_DiamondProposalComment"

                                                                            .inputParameters = New ArrayList
                                                                            With .inputParameters
                                                                                If i.PolicyId > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("@policyId", i.PolicyId))
                                                                                End If
                                                                                If i.PolicyImageNum > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("@policyImageNum", i.PolicyImageNum))
                                                                                End If
                                                                                If c.LobId > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("@lobId", c.LobId))
                                                                                End If
                                                                                .Add(New SqlClient.SqlParameter("@diamondProposalId", qqDiaProposal.DiamondProposalId))
                                                                                .Add(New SqlClient.SqlParameter("@comments", c.CommentText))
                                                                                'If qqDiaProposal.InsertUserId = 0 Then
                                                                                '    If qqDiaProposal.UpdateUserId > 0 Then
                                                                                '        qqDiaProposal.InsertUserId = qqDiaProposal.UpdateUserId
                                                                                '    Else
                                                                                '        qqDiaProposal.InsertUserId = IntegerForString(DiamondUserId)
                                                                                '    End If
                                                                                'End If
                                                                                'If qqDiaProposal.InsertUserId > 0 Then
                                                                                '    .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.InsertUserId))
                                                                                'End If
                                                                                If qqDiaProposal.UpdateUserId = 0 Then
                                                                                    qqDiaProposal.UpdateUserId = IntegerForString(DiamondUserId)
                                                                                    If qqDiaProposal.UpdateUserId = 0 Then
                                                                                        qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                                                    End If
                                                                                End If
                                                                                If qqDiaProposal.UpdateUserId > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.UpdateUserId))
                                                                                End If
                                                                            End With

                                                                            .outputParameter = New SqlClient.SqlParameter("@diamondProposalCommentId", Data.SqlDbType.Int)

                                                                            .ExecuteStatement()

                                                                            If .hasError = True Then
                                                                                AddStringToList("Database error encountered when inserting DiamondProposalComment record", errorMessages)
                                                                            Else
                                                                                c.DiamondProposalCommentId = sqlEO_DiamondProposalComment.outputParameter.Value
                                                                                'qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                                                qqDiaProposal.UpdateDate = Date.Now.ToString
                                                                            End If
                                                                        End With
                                                                    End Using
                                                                Else
                                                                    AddStringToList("Missing commentText for comment # " & commentCounter.ToString, errorMessages)
                                                                End If
                                                            End If
                                                            If .DiamondProposalCommentId > 0 Then
                                                                'now check for DiamondProposalImageCommentLink record to insert
                                                                If .DiamondProposalImageCommentLinkId = 0 Then
                                                                    'insert image comment link
                                                                    Using sqlEO_DiamondProposalImageCommentLink As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                                                                        With sqlEO_DiamondProposalImageCommentLink
                                                                            .queryOrStoredProc = "usp_Insert_DiamondProposalImageCommentLink"

                                                                            .inputParameters = New ArrayList
                                                                            With .inputParameters
                                                                                .Add(New SqlClient.SqlParameter("@diamondProposalImageLinkId", i.DiamondProposalImageLinkId))
                                                                                .Add(New SqlClient.SqlParameter("@diamondProposalCommentId", c.DiamondProposalCommentId))
                                                                                .Add(New SqlClient.SqlParameter("@diamondProposalId", qqDiaProposal.DiamondProposalId))
                                                                                If i.PolicyId > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("@policyId", i.PolicyId))
                                                                                End If
                                                                                If i.PolicyImageNum > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("@policyImageNum", i.PolicyImageNum))
                                                                                End If
                                                                                If c.LobId > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("@lobId", c.LobId))
                                                                                End If
                                                                                'If qqDiaProposal.InsertUserId = 0 Then
                                                                                '    If qqDiaProposal.UpdateUserId > 0 Then
                                                                                '        qqDiaProposal.InsertUserId = qqDiaProposal.UpdateUserId
                                                                                '    Else
                                                                                '        qqDiaProposal.InsertUserId = IntegerForString(DiamondUserId)
                                                                                '    End If
                                                                                'End If
                                                                                'If qqDiaProposal.InsertUserId > 0 Then
                                                                                '    .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.InsertUserId))
                                                                                'End If
                                                                                If qqDiaProposal.UpdateUserId = 0 Then
                                                                                    qqDiaProposal.UpdateUserId = IntegerForString(DiamondUserId)
                                                                                    If qqDiaProposal.UpdateUserId = 0 Then
                                                                                        qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                                                    End If
                                                                                End If
                                                                                If qqDiaProposal.UpdateUserId > 0 Then
                                                                                    .Add(New SqlClient.SqlParameter("userId", qqDiaProposal.UpdateUserId))
                                                                                End If
                                                                            End With

                                                                            .outputParameter = New SqlClient.SqlParameter("@diamondProposalImageCommentLinkId", Data.SqlDbType.Int)

                                                                            .ExecuteStatement()

                                                                            If .hasError = True Then
                                                                                AddStringToList("Database error encountered when inserting DiamondProposalImageCommentLink record", errorMessages)
                                                                            Else
                                                                                c.DiamondProposalImageCommentLinkId = sqlEO_DiamondProposalImageCommentLink.outputParameter.Value
                                                                                'qqDiaProposal.UpdateUserId = qqDiaProposal.InsertUserId
                                                                                qqDiaProposal.UpdateDate = Date.Now.ToString
                                                                            End If
                                                                        End With
                                                                    End Using
                                                                End If
                                                            End If
                                                        End With
                                                    End If
                                                Next
                                            End If
                                        End If
                                    End With
                                End If
                            Next
                        End If
                    End If
                End With
            Else
                AddStringToList("Diamond Proposal object is nothing", errorMessages)
            End If
        End Sub
        'Public Shared Sub AddStringToList(ByVal newString As String, ByRef listOfStrings As List(Of String))
        'updated 4/7/2017 to allow adding blank or white space
        Public Shared Sub AddStringToList(ByVal newString As String, ByRef listOfStrings As List(Of String), Optional ByVal allowBlankOrWhiteSpace As Boolean = False)
            'If String.IsNullOrWhiteSpace(newString) = False Then
            'updated 4/7/2017
            If String.IsNullOrWhiteSpace(newString) = False OrElse allowBlankOrWhiteSpace = True Then
                If newString Is Nothing Then 'added 4/7/2017
                    newString = ""
                End If
                If listOfStrings Is Nothing Then
                    listOfStrings = New List(Of String)
                End If
                listOfStrings.Add(newString)
            End If
        End Sub
        'added 12/3/2019
        Public Shared Sub AddStringsToList(ByVal newStrings As List(Of String), ByRef listOfStrings As List(Of String), Optional ByVal allowBlankOrWhiteSpace As Boolean = False)
            If newStrings IsNot Nothing AndAlso newStrings.Count > 0 Then
                For Each s As String In newStrings
                    AddStringToList(s, listOfStrings, allowBlankOrWhiteSpace:=allowBlankOrWhiteSpace)
                Next
            End If
        End Sub
        'Public Shared Sub AddIntegerStringToIntegerList(ByVal intString As String, ByRef listOfInts As List(Of Integer)) 'added 3/29/2017
        '3/31/2017 - updated w/ new optional param for positiveOnly
        'Public Shared Sub AddIntegerStringToIntegerList(ByVal intString As String, ByRef listOfInts As List(Of Integer), Optional ByVal positiveOnly As Boolean = False) 'added 3/29/2017
        'updated 4/7/2017 for new optional param that allows conversion of non-numeric
        Public Shared Sub AddIntegerStringToIntegerList(ByVal intString As String, ByRef listOfInts As List(Of Integer), Optional ByVal positiveOnly As Boolean = False, Optional ByVal convertNonNumericToZero As Boolean = False) 'added 3/29/2017
            Dim qqHelper As New QuickQuoteHelperClass
            If convertNonNumericToZero = True Then 'added 4/7/2017
                intString = qqHelper.IntegerForString(intString).ToString
            End If
            If qqHelper.IsNumericString(intString) = True Then
                'If listOfInts Is Nothing Then
                '    listOfInts = New List(Of Integer)
                'End If
                'listOfInts.Add(CInt(intString))
                'updated 3/31/2017 to use new method below
                AddIntegerToIntegerList(CInt(intString), listOfInts, positiveOnly:=positiveOnly)
            End If
        End Sub
        Public Shared Sub AddIntegerToIntegerList(ByVal newInt As Integer, ByRef listOfInts As List(Of Integer), Optional ByVal positiveOnly As Boolean = False) 'added 3/31/2017
            If positiveOnly = False OrElse newInt > 0 Then
                If listOfInts Is Nothing Then
                    listOfInts = New List(Of Integer)
                End If
                listOfInts.Add(newInt)
            End If
        End Sub
        Public Shared Sub AddUniqueIntegerToIntegerList(ByVal newInt As Integer, ByRef listOfInts As List(Of Integer), Optional ByVal positiveOnly As Boolean = False) 'added 9/25/2017
            If listOfInts Is Nothing OrElse listOfInts.Contains(newInt) = False Then
                AddIntegerToIntegerList(newInt, listOfInts, positiveOnly:=positiveOnly)
            End If
        End Sub
        Public Shared Sub AddUniqueIntegersToIntegerList(ByVal newInts As List(Of Integer), ByRef listOfInts As List(Of Integer), Optional ByVal positiveOnly As Boolean = False) 'added 9/17/2018
            If newInts IsNot Nothing AndAlso newInts.Count > 0 Then
                For Each newInt As Integer In newInts
                    AddUniqueIntegerToIntegerList(newInt, listOfInts, positiveOnly:=positiveOnly)
                Next
            End If
        End Sub
        'added 3/28/2017
        Public Sub LoadDiamondProposal(ByRef qqDiaProposal As QuickQuoteDiamondProposal, Optional ByRef errorMessage As String = "")
            errorMessage = ""

            If qqDiaProposal IsNot Nothing AndAlso qqDiaProposal.DiamondProposalId > 0 Then
                'updated 3/30/2017
                Dim p As QuickQuoteDiamondProposal = DiamondProposalForLookup(diamondProposalId:=qqDiaProposal.DiamondProposalId, errorMessage:=errorMessage)
                If p IsNot Nothing AndAlso p.DiamondProposalId = qqDiaProposal.DiamondProposalId Then
                    qqDiaProposal = p
                End If
            Else
                errorMessage = "Unable to obtain DiamondProposalId for loading"
            End If
        End Sub
        Public Function DiamondProposalsForLookup(Optional ByVal diamondProposalId As Integer = 0, Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByRef errorMessage As String = "") As List(Of QuickQuoteDiamondProposal)
            Dim qqDiaProposals As List(Of QuickQuoteDiamondProposal) = Nothing

            If diamondProposalId > 0 OrElse policyId > 0 Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connQQ").ToString)
                    With sqlSO
                        .queryOrStoredProc = "usp_Get_DiamondProposal_ByLookup"
                        .parameters = New ArrayList
                        With .parameters
                            If diamondProposalId > 0 Then
                                .Add(New SqlClient.SqlParameter("@diamondProposalId", diamondProposalId))
                            Else
                                .Add(New SqlClient.SqlParameter("@policyId", policyId))
                                If policyImageNum > 0 Then
                                    .Add(New SqlClient.SqlParameter("@policyImageNum", policyImageNum))
                                End If
                            End If
                        End With

                        Dim dr As SqlClient.SqlDataReader = .GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            With dr
                                While .Read
                                    Dim p As QuickQuoteDiamondProposal = CheckDiamondProposalAndAddOrReturnFromList(IntegerForString(.Item("diamondProposalId").ToString.Trim), qqDiaProposals)
                                    If p IsNot Nothing Then
                                        'should already have diamondProposalId set
                                        p.DiamondProposalBinaryId = IntegerForString(.Item("diamondProposalBinaryId").ToString.Trim)
                                        If .Item("diamondProposalBytes") IsNot DBNull.Value Then
                                            p.DiamondProposalBytes = .Item("diamondProposalBytes")
                                        Else
                                            p.DiamondProposalBytes = Nothing
                                        End If
                                        p.TotalQuotedPremium = .Item("totalQuotedPremium").ToString.Trim 'added 4/22/2017
                                        p.InsertUserId = IntegerForString(.Item("insertUserId").ToString.Trim)
                                        p.InsertDate = .Item("inserted").ToString.Trim
                                        p.UpdateUserId = IntegerForString(.Item("updateUserId").ToString.Trim)
                                        p.UpdateDate = .Item("updated").ToString.Trim
                                        p.InsertUsername = .Item("insertUsername").ToString.Trim
                                        p.UpdateUsername = .Item("updateUsername").ToString.Trim

                                        Dim i As QuickQuoteDiamondProposalImage = CheckDiamondProposalImageAndAddOrReturnFromList(IntegerForString(.Item("diamondProposalImageLinkId").ToString.Trim), p.Images)
                                        If i IsNot Nothing Then
                                            'should already have diamondProposalImageLinkId set
                                            i.PolicyId = IntegerForString(.Item("policyId").ToString.Trim)
                                            i.PolicyImageNum = IntegerForString(.Item("policyImageNum").ToString.Trim)
                                            i.PolicyNumber = .Item("policy").ToString.Trim
                                            i.QuoteNumber = .Item("quote").ToString.Trim
                                            'PolicyImage.last_modified_date
                                            i.AgencyId = IntegerForString(.Item("agency_id").ToString.Trim) 'added 3/29/2017
                                            i.AgencyCode = .Item("code").ToString.Trim 'added 3/29/2017

                                            Dim c As QuickQuoteDiamondProposalComment = CheckDiamondProposalCommentAndAddOrReturnFromList(IntegerForString(.Item("diamondProposalImageCommentLinkId").ToString.Trim), i.Comments)
                                            If c IsNot Nothing Then
                                                'should already have diamondProposalImageCommentLinkId set
                                                c.DiamondProposalCommentId = IntegerForString(.Item("diamondProposalCommentId").ToString.Trim)
                                                c.LobId = IntegerForString(.Item("lobId").ToString.Trim)
                                                c.CommentText = .Item("comments").ToString.Trim
                                            End If
                                        End If
                                    End If
                                End While
                            End With
                        ElseIf .hasError = True Then
                            errorMessage = "Database error encountered when retrieving proposal(s)"
                        Else
                            'no rows
                        End If

                    End With
                End Using
            Else
                errorMessage = "Insufficient lookup information provided to load proposals"
            End If

            Return qqDiaProposals
        End Function
        Public Function CheckDiamondProposalAndAddOrReturnFromList(ByVal diamondProposalId As Integer, ByRef qqDiaProposals As List(Of QuickQuoteDiamondProposal), Optional ByVal justCheckLastRecordInList As Boolean = True) As QuickQuoteDiamondProposal
            Dim qqDiaProposal As QuickQuoteDiamondProposal = Nothing

            If diamondProposalId > 0 Then
                qqDiaProposal = DiamondProposalFromListById(diamondProposalId, qqDiaProposals, justCheckLastRecordInList:=justCheckLastRecordInList)
                If qqDiaProposal Is Nothing Then
                    qqDiaProposal = New QuickQuoteDiamondProposal
                    qqDiaProposal.DiamondProposalId = diamondProposalId
                    If qqDiaProposals Is Nothing Then
                        qqDiaProposals = New List(Of QuickQuoteDiamondProposal)
                    End If
                    qqDiaProposals.Add(qqDiaProposal)
                End If
            End If

            Return qqDiaProposal
        End Function
        Public Function DiamondProposalFromListById(ByVal diamondProposalId As Integer, ByRef qqDiaProposals As List(Of QuickQuoteDiamondProposal), Optional ByVal justCheckLastRecordInList As Boolean = True) As QuickQuoteDiamondProposal
            Dim qqDiaProposal As QuickQuoteDiamondProposal = Nothing

            If diamondProposalId > 0 AndAlso qqDiaProposals IsNot Nothing AndAlso qqDiaProposals.Count > 0 Then
                If justCheckLastRecordInList = True Then
                    Dim p As QuickQuoteDiamondProposal = qqDiaProposals.Item(qqDiaProposals.Count - 1)
                    If p IsNot Nothing AndAlso p.DiamondProposalId = diamondProposalId Then
                        qqDiaProposal = p
                    End If
                Else
                    For Each p As QuickQuoteDiamondProposal In qqDiaProposals
                        If p IsNot Nothing AndAlso p.DiamondProposalId = diamondProposalId Then
                            qqDiaProposal = p
                            Exit For
                        End If
                    Next
                End If
            End If

            Return qqDiaProposal
        End Function
        Public Function CheckDiamondProposalImageAndAddOrReturnFromList(ByVal diamondProposalImageLinkId As Integer, ByRef qqDiaProposalImages As List(Of QuickQuoteDiamondProposalImage), Optional ByVal justCheckLastRecordInList As Boolean = True) As QuickQuoteDiamondProposalImage
            Dim qqDiaProposalImage As QuickQuoteDiamondProposalImage = Nothing

            If diamondProposalImageLinkId > 0 Then
                qqDiaProposalImage = DiamondProposalImageFromListById(diamondProposalImageLinkId, qqDiaProposalImages, justCheckLastRecordInList:=justCheckLastRecordInList)
                If qqDiaProposalImage Is Nothing Then
                    qqDiaProposalImage = New QuickQuoteDiamondProposalImage
                    qqDiaProposalImage.DiamondProposalImageLinkId = diamondProposalImageLinkId
                    If qqDiaProposalImages Is Nothing Then
                        qqDiaProposalImages = New List(Of QuickQuoteDiamondProposalImage)
                    End If
                    qqDiaProposalImages.Add(qqDiaProposalImage)
                End If
            End If

            Return qqDiaProposalImage
        End Function
        Public Function DiamondProposalImageFromListById(ByVal diamondProposalImageLinkId As Integer, ByRef qqDiaProposalImages As List(Of QuickQuoteDiamondProposalImage), Optional ByVal justCheckLastRecordInList As Boolean = True) As QuickQuoteDiamondProposalImage
            Dim qqDiaProposalImage As QuickQuoteDiamondProposalImage = Nothing

            If diamondProposalImageLinkId > 0 AndAlso qqDiaProposalImages IsNot Nothing AndAlso qqDiaProposalImages.Count > 0 Then
                If justCheckLastRecordInList = True Then
                    Dim i As QuickQuoteDiamondProposalImage = qqDiaProposalImages.Item(qqDiaProposalImages.Count - 1)
                    If i IsNot Nothing AndAlso i.DiamondProposalImageLinkId = diamondProposalImageLinkId Then
                        qqDiaProposalImage = i
                    End If
                Else
                    For Each i As QuickQuoteDiamondProposalImage In qqDiaProposalImages
                        If i IsNot Nothing AndAlso i.DiamondProposalImageLinkId = diamondProposalImageLinkId Then
                            qqDiaProposalImage = i
                            Exit For
                        End If
                    Next
                End If
            End If

            Return qqDiaProposalImage
        End Function
        Public Function CheckDiamondProposalCommentAndAddOrReturnFromList(ByVal diamondProposalImageCommentLinkId As Integer, ByRef qqDiaProposalComments As List(Of QuickQuoteDiamondProposalComment), Optional ByVal justCheckLastRecordInList As Boolean = True) As QuickQuoteDiamondProposalComment
            Dim qqDiaProposalComment As QuickQuoteDiamondProposalComment = Nothing

            If diamondProposalImageCommentLinkId > 0 Then
                qqDiaProposalComment = DiamondProposalCommentFromListById(diamondProposalImageCommentLinkId, qqDiaProposalComments, justCheckLastRecordInList:=justCheckLastRecordInList)
                If qqDiaProposalComment Is Nothing Then
                    qqDiaProposalComment = New QuickQuoteDiamondProposalComment
                    qqDiaProposalComment.DiamondProposalImageCommentLinkId = diamondProposalImageCommentLinkId
                    If qqDiaProposalComments Is Nothing Then
                        qqDiaProposalComments = New List(Of QuickQuoteDiamondProposalComment)
                    End If
                    qqDiaProposalComments.Add(qqDiaProposalComment)
                End If
            End If

            Return qqDiaProposalComment
        End Function
        Public Function DiamondProposalCommentFromListById(ByVal diamondProposalImageCommentLinkId As Integer, ByRef qqDiaProposalComments As List(Of QuickQuoteDiamondProposalComment), Optional ByVal justCheckLastRecordInList As Boolean = True) As QuickQuoteDiamondProposalComment
            Dim qqDiaProposalComment As QuickQuoteDiamondProposalComment = Nothing

            If diamondProposalImageCommentLinkId > 0 AndAlso qqDiaProposalComments IsNot Nothing AndAlso qqDiaProposalComments.Count > 0 Then
                If justCheckLastRecordInList = True Then
                    Dim c As QuickQuoteDiamondProposalComment = qqDiaProposalComments.Item(qqDiaProposalComments.Count - 1)
                    If c IsNot Nothing AndAlso c.DiamondProposalImageCommentLinkId = diamondProposalImageCommentLinkId Then
                        qqDiaProposalComment = c
                    End If
                Else
                    For Each c As QuickQuoteDiamondProposalComment In qqDiaProposalComments
                        If c IsNot Nothing AndAlso c.DiamondProposalImageCommentLinkId = diamondProposalImageCommentLinkId Then
                            qqDiaProposalComment = c
                            Exit For
                        End If
                    Next
                End If
            End If

            Return qqDiaProposalComment
        End Function
        'commented out since we'll just use ""... since we'll need to verify the AgencyCodes
        'Public Function DiamondProposalBinaryById(ByVal diamondProposalBinaryId As Integer, Optional ByRef errorMessage As String = "") As Byte()
        '    Dim proposalBytes As Byte() = Nothing
        '    errorMessage = ""

        '    If diamondProposalBinaryId > 0 Then
        '        Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connQQ").ToString)
        '            With sqlSO
        '                .queryOrStoredProc = "usp_Get_DiamondProposalBinary"
        '                .parameters = New ArrayList
        '                With .parameters
        '                    .Add(New SqlClient.SqlParameter("@diamondProposalBinaryId", diamondProposalBinaryId))
        '                End With

        '                Dim dr As SqlClient.SqlDataReader = .GetDataReader
        '                If dr IsNot Nothing AndAlso dr.HasRows = True Then
        '                    With dr
        '                        .Read()
        '                        If .Item("diamondProposalBytes") IsNot DBNull.Value Then
        '                            proposalBytes = .Item("diamondProposalBytes")
        '                        Else
        '                            proposalBytes = Nothing
        '                        End If
        '                    End With
        '                ElseIf .hasError = True Then
        '                    errorMessage = "Database error encountered when retrieving proposal binary"
        '                Else
        '                    'no rows
        '                End If

        '            End With
        '        End Using
        '    Else
        '        errorMessage = "invalid diamondProposalBinaryId"
        '    End If

        '    Return proposalBytes
        'End Function
        'added 3/29/2017
        'Public Shared Function ListOfStringFromString(ByVal str As String, Optional ByVal delimiter As String = " ") As List(Of String)
        '    Dim lst As List(Of String) = Nothing

        '    If String.IsNullOrWhiteSpace(str) = False Then
        '        lst = New List(Of String)
        '        If String.IsNullOrEmpty(delimiter) = False AndAlso str.Contains(delimiter) = True AndAlso Len(str) > Len(delimiter) Then
        '            Dim arStrings As String() = str.Split(delimiter)
        '            For Each s As String In arStrings
        '                If String.IsNullOrWhiteSpace(s) = False Then
        '                    lst.Add(s)
        '                End If
        '            Next
        '        Else
        '            lst.Add(str)
        '        End If
        '    End If

        '    Return lst
        'End Function
        'rewritten 4/7/2017 to use new optional param to return pair for each delimiter
        Public Shared Function ListOfStringFromString(ByVal str As String, Optional ByVal delimiter As String = " ", Optional ByVal returnPairForEachDelimiter As Boolean = False) As List(Of String)
            Dim lst As List(Of String) = Nothing

            If String.IsNullOrWhiteSpace(str) = False Then
                lst = New List(Of String)
                If String.IsNullOrEmpty(delimiter) = False AndAlso str.Contains(delimiter) = True AndAlso (Len(str) > Len(delimiter) OrElse returnPairForEachDelimiter = True) Then
                    If Len(str) = Len(delimiter) Then
                        If returnPairForEachDelimiter = True Then
                            lst.Add("")
                            lst.Add("")
                        Else
                            lst.Add(str)
                        End If
                    Else
                        'Dim arStrings As String() = str.Split(delimiter) '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                        Dim arStrings As String() = Split(str, Delimiter:=delimiter)
                        For Each s As String In arStrings
                            If String.IsNullOrWhiteSpace(s) = False OrElse returnPairForEachDelimiter = True Then
                                If s Is Nothing Then
                                    s = ""
                                End If
                                lst.Add(s)
                            End If
                        Next
                        If returnPairForEachDelimiter = True AndAlso lst.Count = 1 Then
                            lst.Add("")
                        End If
                    End If
                Else
                    lst.Add(str)
                End If
            End If

            Return lst
        End Function
        'Public Shared Function ListOfIntegerFromString(ByVal str As String, Optional ByVal delimiter As String = " ") As List(Of Integer)
        '    Dim lst As List(Of Integer) = Nothing

        '    If String.IsNullOrWhiteSpace(str) = False Then
        '        If String.IsNullOrEmpty(delimiter) = False AndAlso str.Contains(delimiter) = True AndAlso Len(str) > Len(delimiter) Then
        '            Dim arStrings As String() = str.Split(delimiter)
        '            For Each s As String In arStrings
        '                If String.IsNullOrWhiteSpace(s) = False Then
        '                    AddIntegerStringToIntegerList(s, lst)
        '                End If
        '            Next
        '        Else
        '            AddIntegerStringToIntegerList(str, lst)
        '        End If
        '    End If

        '    Return lst
        'End Function
        'rewritten 4/7/2017 to use new optional param to return pair for each delimiter
        Public Shared Function ListOfIntegerFromString(ByVal str As String, Optional ByVal delimiter As String = " ", Optional ByVal positiveOnly As Boolean = False, Optional ByVal returnPairForEachDelimiter As Boolean = False) As List(Of Integer)
            Dim lst As List(Of Integer) = Nothing

            If String.IsNullOrWhiteSpace(str) = False Then
                If String.IsNullOrEmpty(delimiter) = False AndAlso str.Contains(delimiter) = True AndAlso (Len(str) > Len(delimiter) OrElse returnPairForEachDelimiter = True) Then
                    If Len(str) = Len(delimiter) Then
                        If returnPairForEachDelimiter = True Then
                            AddIntegerToIntegerList(0, lst, positiveOnly:=positiveOnly) 'note: this won't do anything when positiveOnly is True
                            AddIntegerToIntegerList(0, lst, positiveOnly:=positiveOnly) 'note: this won't do anything when positiveOnly is True
                        Else
                            AddIntegerStringToIntegerList(str, lst, positiveOnly:=positiveOnly) 'note: this won't do anything when positiveOnly is True
                        End If
                    Else
                        'Dim arStrings As String() = str.Split(delimiter) '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                        Dim arStrings As String() = Split(str, Delimiter:=delimiter)
                        For Each s As String In arStrings
                            If String.IsNullOrWhiteSpace(s) = False OrElse returnPairForEachDelimiter = True Then
                                If s Is Nothing Then
                                    s = ""
                                End If
                                Dim convertNonNumericToZero As Boolean = False
                                If returnPairForEachDelimiter = True Then
                                    convertNonNumericToZero = True
                                End If
                                AddIntegerStringToIntegerList(s, lst, positiveOnly:=positiveOnly, convertNonNumericToZero:=convertNonNumericToZero)
                            End If
                        Next
                        If returnPairForEachDelimiter = True AndAlso lst.Count = 1 Then
                            AddIntegerToIntegerList(0, lst, positiveOnly:=positiveOnly) 'note: this won't do anything when positiveOnly is True
                        End If
                    End If
                Else
                    AddIntegerStringToIntegerList(str, lst, positiveOnly:=positiveOnly)
                End If
            End If

            Return lst
        End Function
        'added 3/30/2017
        Public Function DiamondProposalForLookup(Optional ByVal diamondProposalId As Integer = 0, Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByRef errorMessage As String = "", Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuoteDiamondProposal
            Dim p As QuickQuoteDiamondProposal = Nothing

            Dim diaProposals As List(Of QuickQuoteDiamondProposal) = DiamondProposalsForLookup(diamondProposalId:=diamondProposalId, policyId:=policyId, policyImageNum:=policyImageNum, errorMessage:=errorMessage)
            If diaProposals IsNot Nothing AndAlso diaProposals.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    p = diaProposals(0)
                Else
                    p = diaProposals(diaProposals.Count - 1)
                End If
            End If

            Return p
        End Function
        Public Function DiamondProposalsForBinaryId(ByVal diamondProposalBinaryId As Integer, Optional ByRef errorMessage As String = "") As List(Of QuickQuoteDiamondProposal)
            Dim qqDiaProposals As List(Of QuickQuoteDiamondProposal) = Nothing

            If diamondProposalBinaryId > 0 Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connQQ").ToString)
                    With sqlSO
                        .queryOrStoredProc = "usp_Get_DiamondProposal_By_BinaryId"
                        .parameters = New ArrayList
                        With .parameters
                            .Add(New SqlClient.SqlParameter("@diamondProposalBinaryId", diamondProposalBinaryId))
                        End With

                        Dim dr As SqlClient.SqlDataReader = .GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            With dr
                                While .Read
                                    Dim p As QuickQuoteDiamondProposal = CheckDiamondProposalAndAddOrReturnFromList(IntegerForString(.Item("diamondProposalId").ToString.Trim), qqDiaProposals)
                                    If p IsNot Nothing Then
                                        'should already have diamondProposalId set
                                        p.DiamondProposalBinaryId = IntegerForString(.Item("diamondProposalBinaryId").ToString.Trim)
                                        If .Item("diamondProposalBytes") IsNot DBNull.Value Then
                                            p.DiamondProposalBytes = .Item("diamondProposalBytes")
                                        Else
                                            p.DiamondProposalBytes = Nothing
                                        End If
                                        p.TotalQuotedPremium = .Item("totalQuotedPremium").ToString.Trim 'added 4/22/2017
                                        p.InsertUserId = IntegerForString(.Item("insertUserId").ToString.Trim)
                                        p.InsertDate = .Item("inserted").ToString.Trim
                                        p.UpdateUserId = IntegerForString(.Item("updateUserId").ToString.Trim)
                                        p.UpdateDate = .Item("updated").ToString.Trim
                                        p.InsertUsername = .Item("insertUsername").ToString.Trim
                                        p.UpdateUsername = .Item("updateUsername").ToString.Trim

                                        Dim i As QuickQuoteDiamondProposalImage = CheckDiamondProposalImageAndAddOrReturnFromList(IntegerForString(.Item("diamondProposalImageLinkId").ToString.Trim), p.Images)
                                        If i IsNot Nothing Then
                                            'should already have diamondProposalImageLinkId set
                                            i.PolicyId = IntegerForString(.Item("policyId").ToString.Trim)
                                            i.PolicyImageNum = IntegerForString(.Item("policyImageNum").ToString.Trim)
                                            i.PolicyNumber = .Item("policy").ToString.Trim
                                            i.QuoteNumber = .Item("quote").ToString.Trim
                                            'PolicyImage.last_modified_date
                                            i.AgencyId = IntegerForString(.Item("agency_id").ToString.Trim) 'added 3/29/2017
                                            i.AgencyCode = .Item("code").ToString.Trim 'added 3/29/2017

                                            Dim c As QuickQuoteDiamondProposalComment = CheckDiamondProposalCommentAndAddOrReturnFromList(IntegerForString(.Item("diamondProposalImageCommentLinkId").ToString.Trim), i.Comments)
                                            If c IsNot Nothing Then
                                                'should already have diamondProposalImageCommentLinkId set
                                                c.DiamondProposalCommentId = IntegerForString(.Item("diamondProposalCommentId").ToString.Trim)
                                                c.LobId = IntegerForString(.Item("lobId").ToString.Trim)
                                                c.CommentText = .Item("comments").ToString.Trim
                                            End If
                                        End If
                                    End If
                                End While
                            End With
                        ElseIf .hasError = True Then
                            errorMessage = "Database error encountered when retrieving proposal(s)"
                        Else
                            'no rows
                        End If

                    End With
                End Using
            Else
                errorMessage = "Invalid diamondProposalBinaryId"
            End If

            Return qqDiaProposals
        End Function
        Public Function DiamondProposalForBinaryId(ByVal diamondProposalBinaryId As Integer, Optional ByRef errorMessage As String = "", Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuoteDiamondProposal
            Dim p As QuickQuoteDiamondProposal = Nothing

            Dim diaProposals As List(Of QuickQuoteDiamondProposal) = DiamondProposalsForBinaryId(diamondProposalBinaryId, errorMessage:=errorMessage)
            If diaProposals IsNot Nothing AndAlso diaProposals.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    p = diaProposals(0)
                Else
                    p = diaProposals(diaProposals.Count - 1)
                End If
            End If

            Return p
        End Function
        Public Function QuickQuoteCommentsForLobId(ByRef qqComments As List(Of QuickQuoteComment), ByVal lobId As Integer) As List(Of QuickQuoteComment)
            'Dim qqCs As List(Of QuickQuoteComment) = Nothing

            'If qqComments IsNot Nothing AndAlso qqComments.Count > 0 Then
            '    For Each c As QuickQuoteComment In qqComments
            '        If c.LobId = lobId Then
            '            If qqCs Is Nothing Then
            '                qqCs = New List(Of QuickQuoteComment)
            '            End If
            '            qqCs.Add(c)
            '        End If
            '    Next
            'End If

            'Return qqCs
            'updated 10/12/2018 to call new overload
            Return QuickQuoteCommentsForLobId(qqComments, lobId, accommodateMultiState:=True)
        End Function
        'added overload 10/12/2018 for multiState
        Public Function QuickQuoteCommentsForLobId(ByRef qqComments As List(Of QuickQuoteComment), ByVal lobId As Integer, ByVal accommodateMultiState As Boolean) As List(Of QuickQuoteComment)
            Dim qqCs As List(Of QuickQuoteComment) = Nothing

            If qqComments IsNot Nothing AndAlso qqComments.Count > 0 Then

                Dim otherLobId As Integer = lobId
                If accommodateMultiState = True Then
                    otherLobId = MasterLobIdForLobId(lobId)
                    If otherLobId = lobId Then
                        otherLobId = LobIdForMasterLobId(lobId)
                    End If
                    If otherLobId = 0 Then
                        otherLobId = lobId
                    End If
                End If

                For Each c As QuickQuoteComment In qqComments
                    If c.LobId = lobId OrElse c.LobId = otherLobId Then
                        If qqCs Is Nothing Then
                            qqCs = New List(Of QuickQuoteComment)
                        End If
                        qqCs.Add(c)
                    End If
                Next
            End If

            Return qqCs
        End Function
        Public Function QuickQuoteCommentForLobId(ByRef qqComments As List(Of QuickQuoteComment), ByVal lobId As Integer, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuoteComment
            'Dim c As QuickQuoteComment = Nothing

            'Dim qqCs As List(Of QuickQuoteComment) = QuickQuoteCommentsForLobId(qqComments, lobId)
            'If qqCs IsNot Nothing AndAlso qqCs.Count > 0 Then
            '    If firstOrLastItem = FirstOrLast.First Then
            '        c = qqCs(0)
            '    Else
            '        c = qqCs(qqCs.Count - 1)
            '    End If
            'End If

            'Return c
            'updated 10/12/2018 to call new overload
            Return QuickQuoteCommentForLobId(qqComments, lobId, accommodateMultiState:=True, firstOrLastItem:=firstOrLastItem)
        End Function
        'added overload 10/12/2018 for multiState
        Public Function QuickQuoteCommentForLobId(ByRef qqComments As List(Of QuickQuoteComment), ByVal lobId As Integer, ByVal accommodateMultiState As Boolean, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuoteComment
            Dim c As QuickQuoteComment = Nothing

            Dim qqCs As List(Of QuickQuoteComment) = QuickQuoteCommentsForLobId(qqComments, lobId, accommodateMultiState)
            If qqCs IsNot Nothing AndAlso qqCs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    c = qqCs(0)
                Else
                    c = qqCs(qqCs.Count - 1)
                End If
            End If

            Return c
        End Function
        'added 4/28/2017
        Public Function QuickQuoteCommentsForLobType(ByRef qqComments As List(Of QuickQuoteComment), ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As List(Of QuickQuoteComment)
            Dim qqCs As List(Of QuickQuoteComment) = Nothing

            If lobType <> Nothing AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                Dim lobId As String = GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteObject.QuickQuoteLobType), lobType), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
                qqCs = QuickQuoteCommentsForLobId(qqComments, IntegerForString(lobId))
            End If

            Return qqCs
        End Function
        Public Function QuickQuoteCommentForLobType(ByRef qqComments As List(Of QuickQuoteComment), ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuoteComment
            Dim c As QuickQuoteComment = Nothing

            Dim qqCs As List(Of QuickQuoteComment) = QuickQuoteCommentsForLobType(qqComments, lobType)
            If qqCs IsNot Nothing AndAlso qqCs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    c = qqCs(0)
                Else
                    c = qqCs(qqCs.Count - 1)
                End If
            End If

            Return c
        End Function
        Public Function HtmlForQuickQuoteProposalComments(ByVal qqComments As List(Of QuickQuoteComment), Optional ByVal includeBreakAtBeginning As Boolean = False, Optional ByVal includeBreakAtEnd As Boolean = False, Optional ByRef lineCount As Integer = 0, Optional ByVal htmlTableAttributes As String = "width=""100%"" class=""quickQuoteSectionTable""", Optional ByVal htmlTableRowAttributes As String = "", Optional ByVal htmlTableCellAttributes As String = "align=""left"" class=""tableFieldValue""") As String
            Dim htmlForComments As String = ""
            lineCount = 0

            If qqComments IsNot Nothing AndAlso qqComments.Count > 0 Then
                For Each c As QuickQuoteComment In qqComments
                    If String.IsNullOrWhiteSpace(c.CommentText) = False Then
                        lineCount += 1
                        If String.IsNullOrWhiteSpace(htmlForComments) = True Then
                            htmlForComments = "<table"
                            If String.IsNullOrWhiteSpace(htmlTableAttributes) = False Then
                                htmlForComments &= " " & htmlTableAttributes
                            End If
                            htmlForComments &= ">"
                        End If
                        htmlForComments &= "<tr"
                        If String.IsNullOrWhiteSpace(htmlTableRowAttributes) = False Then
                            htmlForComments &= " " & htmlTableRowAttributes
                        End If
                        htmlForComments &= ">"
                        htmlForComments &= "<td"
                        If String.IsNullOrWhiteSpace(htmlTableCellAttributes) = False Then
                            htmlForComments &= " " & htmlTableCellAttributes
                        End If
                        htmlForComments &= ">"
                        htmlForComments &= c.CommentText
                        htmlForComments &= "</td>"
                        htmlForComments &= "</tr>"
                    End If

                Next
                If String.IsNullOrWhiteSpace(htmlForComments) = False Then
                    htmlForComments &= "</table>"
                    If includeBreakAtBeginning = True Then
                        lineCount += 1
                        htmlForComments = "<br />" & htmlForComments
                    End If
                    If includeBreakAtEnd = True Then
                        lineCount += 1
                        htmlForComments &= "<br />"
                    End If
                End If
            End If

            Return htmlForComments
        End Function
        Public Function HtmlForQuickQuoteProposalCommentsForLobType(ByVal qqComments As List(Of QuickQuoteComment), ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal includeBreakAtBeginning As Boolean = False, Optional ByVal includeBreakAtEnd As Boolean = False, Optional ByRef lineCount As Integer = 0, Optional ByVal htmlTableAttributes As String = "width=""100%"" class=""quickQuoteSectionTable""", Optional ByVal htmlTableRowAttributes As String = "", Optional ByVal htmlTableCellAttributes As String = "align=""left"" class=""tableFieldValue""") As String
            Dim htmlForComments As String = ""

            htmlForComments = HtmlForQuickQuoteProposalComments(QuickQuoteCommentsForLobType(qqComments, lobType), includeBreakAtBeginning:=includeBreakAtBeginning, includeBreakAtEnd:=includeBreakAtEnd, lineCount:=lineCount, htmlTableAttributes:=htmlTableAttributes, htmlTableRowAttributes:=htmlTableRowAttributes, htmlTableCellAttributes:=htmlTableCellAttributes)

            Return htmlForComments
        End Function

        Public Sub UpdateDiamondProposalImageInfo(ByRef diamondProposal As QuickQuoteDiamondProposal, ByVal policyId As Integer, ByVal policyImageNum As Integer, Optional ByVal commentText As String = "", Optional ByVal commentLobId As Integer = 0)
            'Dim img As QuickQuoteDiamondProposalImage = CheckForDiamondProposalImageAndAddIfNeeded(diamondProposal, policyId, policyImageNum)
            'If img IsNot Nothing Then
            '    If String.IsNullOrWhiteSpace(commentText) = False Then
            '        If img.Comments Is Nothing Then
            '            img.Comments = New List(Of QuickQuoteDiamondProposalComment)
            '        End If
            '        Dim c As New QuickQuoteDiamondProposalComment
            '        c.CommentText = commentText
            '        c.LobId = commentLobId
            '        img.Comments.Add(c)
            '    End If
            'End If
            'updated 11/30/2017 to use new method
            UpdateDiamondProposalImageInfo_WithOptionalPolicyAndQuoteNumbers(diamondProposal, policyId, policyImageNum, commentText:=commentText, commentLobId:=commentLobId)
        End Sub
        'added 11/30/2017
        Public Sub UpdateDiamondProposalImageInfo_WithOptionalPolicyAndQuoteNumbers(ByRef diamondProposal As QuickQuoteDiamondProposal, ByVal policyId As Integer, ByVal policyImageNum As Integer, Optional ByVal policyNumber As String = "", Optional ByVal quoteNumber As String = "", Optional ByVal commentText As String = "", Optional ByVal commentLobId As Integer = 0)
            Dim img As QuickQuoteDiamondProposalImage = CheckForDiamondProposalImageAndAddIfNeeded_WithOptionalPolicyAndQuoteNumbers(diamondProposal, policyId, policyImageNum, policyNumber:=policyNumber, quoteNumber:=quoteNumber)
            If img IsNot Nothing Then
                If String.IsNullOrWhiteSpace(commentText) = False Then
                    If img.Comments Is Nothing Then
                        img.Comments = New List(Of QuickQuoteDiamondProposalComment)
                    End If
                    Dim c As New QuickQuoteDiamondProposalComment
                    c.CommentText = commentText
                    c.LobId = commentLobId
                    img.Comments.Add(c)
                End If
            End If
        End Sub
        Public Function DiamondProposalImageForPolicyIdAndImageNum(ByRef diamondProposal As QuickQuoteDiamondProposal, ByVal policyId As Integer, ByVal policyImageNum As Integer) As QuickQuoteDiamondProposalImage
            Dim img As QuickQuoteDiamondProposalImage = Nothing

            If policyId > 0 AndAlso policyImageNum > 0 And diamondProposal IsNot Nothing Then
                If diamondProposal.Images IsNot Nothing AndAlso diamondProposal.Images.Count > 0 Then
                    For Each i As QuickQuoteDiamondProposalImage In diamondProposal.Images
                        If i IsNot Nothing AndAlso i.PolicyId = policyId AndAlso i.PolicyImageNum = policyImageNum Then
                            img = i
                            Exit For 'use this to return 1st one it finds; remove this to stay in loop and return last instance if multiple exist
                        End If
                    Next
                End If
            End If

            Return img
        End Function
        Public Function CheckForDiamondProposalImageAndAddIfNeeded(ByRef diamondProposal As QuickQuoteDiamondProposal, ByVal policyId As Integer, ByVal policyImageNum As Integer) As QuickQuoteDiamondProposalImage
            'Dim img As QuickQuoteDiamondProposalImage = Nothing
            'If policyId > 0 AndAlso policyImageNum > 0 Then
            '    If diamondProposal Is Nothing Then
            '        diamondProposal = New QuickQuoteDiamondProposal
            '    Else
            '        img = DiamondProposalImageForPolicyIdAndImageNum(diamondProposal, policyId, policyImageNum)
            '    End If
            '    If img Is Nothing Then
            '        img = New QuickQuoteDiamondProposalImage
            '        img.PolicyId = policyId
            '        img.PolicyImageNum = policyImageNum

            '        If diamondProposal.Images Is Nothing Then
            '            diamondProposal.Images = New List(Of QuickQuoteDiamondProposalImage)
            '        End If
            '        diamondProposal.Images.Add(img)
            '    End If
            'End If
            'Return img
            'updated 11/30/2017 to use new method
            Return CheckForDiamondProposalImageAndAddIfNeeded_WithOptionalPolicyAndQuoteNumbers(diamondProposal, policyId, policyImageNum)
        End Function
        'added 11/30/2017
        Public Function CheckForDiamondProposalImageAndAddIfNeeded_WithOptionalPolicyAndQuoteNumbers(ByRef diamondProposal As QuickQuoteDiamondProposal, ByVal policyId As Integer, ByVal policyImageNum As Integer, Optional ByVal policyNumber As String = "", Optional ByVal quoteNumber As String = "") As QuickQuoteDiamondProposalImage
            Dim img As QuickQuoteDiamondProposalImage = Nothing
            If policyId > 0 AndAlso policyImageNum > 0 Then
                If diamondProposal Is Nothing Then
                    diamondProposal = New QuickQuoteDiamondProposal
                Else
                    img = DiamondProposalImageForPolicyIdAndImageNum(diamondProposal, policyId, policyImageNum)
                End If
                If img Is Nothing Then
                    img = New QuickQuoteDiamondProposalImage
                    img.PolicyId = policyId
                    img.PolicyImageNum = policyImageNum
                    If String.IsNullOrWhiteSpace(policyNumber) = False Then
                        img.PolicyNumber = policyNumber
                    End If
                    If String.IsNullOrWhiteSpace(quoteNumber) = False Then
                        img.QuoteNumber = quoteNumber
                    End If

                    If diamondProposal.Images Is Nothing Then
                        diamondProposal.Images = New List(Of QuickQuoteDiamondProposalImage)
                    End If
                    diamondProposal.Images.Add(img)
                End If
            End If
            Return img
        End Function

        'added 4/7/2017
        Public Enum StringPairType
            None = 0
            BothNotEmpty = 1
            AtLeastOneNotEmpty = 2
            BothNotEmptyAndNotWhiteSpace = 3
            AtLeastOneNotEmptyAndNotWhiteSpace = 4
        End Enum
        Public Shared Function ListOfGenericObjectWith2StringPropsFromString(ByVal str As String, Optional ByVal objectdelimiter As String = " ", Optional ByVal propDelimiter As String = "|", Optional ByVal stringPairRequirement As StringPairType = StringPairType.None) As List(Of QuickQuoteGenericObjectWithTwoStringProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoStringProperties) = Nothing

            Dim stringObjectList As List(Of String) = ListOfStringFromString(str, delimiter:=objectdelimiter)
            If stringObjectList IsNot Nothing AndAlso stringObjectList.Count > 0 Then
                For Each s As String In stringObjectList
                    Dim stringPropList As List(Of String) = ListOfStringFromString(s, delimiter:=propDelimiter, returnPairForEachDelimiter:=True)
                    If stringPropList IsNot Nothing AndAlso stringPropList.Count > 0 Then
                        Dim newObj As New QuickQuoteGenericObjectWithTwoStringProperties
                        With newObj
                            .Property1 = stringPropList(0)
                            If stringPropList.Count > 1 Then
                                .Property2 = stringPropList(1)
                            End If
                        End With
                        If newObj.PassesPairTypeRequirement(stringPairRequirement) = True Then
                            If lst Is Nothing Then
                                lst = New List(Of QuickQuoteGenericObjectWithTwoStringProperties)
                            End If
                            lst.Add(newObj)
                        End If
                    End If
                Next
            End If

            Return lst
        End Function
        Public Enum IntegerPairType
            None = 0
            BothPositive = 1
            AtLeastOnePositive = 2
        End Enum
        Public Shared Function ListOfGenericObjectWith2IntegerPropsFromString(ByVal str As String, Optional ByVal objectdelimiter As String = " ", Optional ByVal propDelimiter As String = "|", Optional ByVal integerPairRequirement As IntegerPairType = IntegerPairType.None) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            Dim stringObjectList As List(Of String) = ListOfStringFromString(str, delimiter:=objectdelimiter)
            If stringObjectList IsNot Nothing AndAlso stringObjectList.Count > 0 Then
                For Each s As String In stringObjectList
                    Dim intPropList As List(Of Integer) = ListOfIntegerFromString(s, delimiter:=propDelimiter, returnPairForEachDelimiter:=True)
                    If intPropList IsNot Nothing AndAlso intPropList.Count > 0 Then
                        Dim newObj As New QuickQuoteGenericObjectWithTwoIntegerProperties
                        With newObj
                            .Property1 = intPropList(0)
                            If intPropList.Count > 1 Then
                                .Property2 = intPropList(1)
                            End If
                        End With
                        If newObj.PassesPairTypeRequirement(integerPairRequirement) = True Then
                            If lst Is Nothing Then
                                lst = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                            End If
                            lst.Add(newObj)
                        End If
                    End If
                Next
            End If

            Return lst
        End Function
        Public Shared Function StringForListOfGenericObjectWith2StringProps(ByVal lst As List(Of QuickQuoteGenericObjectWithTwoStringProperties), Optional ByVal objectdelimiter As String = " ", Optional ByVal propDelimiter As String = "|", Optional ByVal stringPairRequirement As StringPairType = StringPairType.None) As String
            Dim str As String = ""

            If lst IsNot Nothing AndAlso lst.Count > 0 Then
                For Each obj As QuickQuoteGenericObjectWithTwoStringProperties In lst
                    If obj IsNot Nothing AndAlso obj.PassesPairTypeRequirement(stringPairRequirement) = True Then
                        If String.IsNullOrEmpty(str) = False Then
                            str &= objectdelimiter
                        End If
                        str &= obj.Property1 & propDelimiter & obj.Property2
                    End If
                Next
            End If

            Return str
        End Function
        Public Shared Function StringForListOfGenericObjectWith2IntegerProps(ByVal lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties), Optional ByVal objectdelimiter As String = " ", Optional ByVal propDelimiter As String = "|", Optional ByVal integerPairRequirement As IntegerPairType = IntegerPairType.None) As String
            Dim str As String = ""

            If lst IsNot Nothing AndAlso lst.Count > 0 Then
                For Each obj As QuickQuoteGenericObjectWithTwoIntegerProperties In lst
                    If obj IsNot Nothing AndAlso obj.PassesPairTypeRequirement(integerPairRequirement) = True Then
                        If String.IsNullOrEmpty(str) = False Then
                            str &= objectdelimiter
                        End If
                        str &= obj.Property1.ToString & propDelimiter & obj.Property2.ToString
                    End If
                Next
            End If

            Return str
        End Function

        'added 4/22/2017 - moved here from DiamondQuickQuotePages
        Public Shared Function GetLobNameForLobId(ByVal lobId As String) As String
            Dim lobName As String = ""

            Dim qqHelper As New QuickQuoteHelperClass
            If qqHelper.IsPositiveIntegerString(lobId) = True Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "SELECT L.lobname FROM Lob as L WITH (NOLOCK) WHERE L.lob_id = " & qqHelper.IntegerForString(lobId).ToString

                        Dim dr As Data.SqlClient.SqlDataReader = .GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            dr.Read()
                            lobName = dr.Item("lobname").ToString.Trim
                        End If
                    End With
                End Using
            End If

            Return lobName
        End Function
        Public Shared Function GetLobNameForVersionId(ByVal versionId As String) As String
            Dim lobName As String = ""

            Dim qqHelper As New QuickQuoteHelperClass
            If qqHelper.IsPositiveIntegerString(versionId) = True Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "SELECT L.lobname FROM Lob as L WITH (NOLOCK) INNER JOIN Version as V WITH (NOLOCK) on V.lob_id = L.lob_id WHERE V.version_id = " & qqHelper.IntegerForString(versionId).ToString

                        Dim dr As Data.SqlClient.SqlDataReader = .GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            dr.Read()
                            lobName = dr.Item("lobname").ToString.Trim
                        End If
                    End With
                End Using
            End If

            Return lobName
        End Function

        'added 5/8/2017
        Public Shared Function ProgramTypeForId(ByVal programTypeId As String) As String
            Dim programType As String = ""

            Dim qqHelper As New QuickQuoteHelperClass
            If qqHelper.IsPositiveIntegerString(programTypeId) = True Then
                programType = qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.ProgramTypeId, programTypeId)
            End If

            Return programType
        End Function

        'added 5/13/2017
        'Public Sub UpdateAdditionalInsuredsListBasedOnCount(ByVal aiCount As Integer, ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByRef additionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True)
        'updated 5/26/2017 w/ new optional params
        Public Sub UpdateAdditionalInsuredsListBasedOnCount(ByVal aiCount As Integer, ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByRef additionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False)
            If aiCount > 0 Then
                If additionalInsureds Is Nothing Then
                    additionalInsureds = New List(Of QuickQuoteAdditionalInsured)
                End If
                If aiCount > additionalInsureds.Count Then
                    'add more; use backup if available
                    Do Until additionalInsureds.Count = aiCount
                        If additionalInsureds.Count >= aiCount Then
                            Exit Do
                        End If
                        If additionalInsureds.Count < aiCount Then
                            If additionalInsuredsBackup IsNot Nothing AndAlso additionalInsuredsBackup.Count > additionalInsureds.Count Then
                                'additionalInsureds.Add(CloneObject(additionalInsuredsBackup(additionalInsureds.Count))) 'add the item from the next index of the backup list; will do in separate steps
                                Dim ai As QuickQuoteAdditionalInsured = CloneObject(additionalInsuredsBackup(additionalInsureds.Count)) 'the item from the next index of the backup list
                                'set aiType if it's blank
                                'If ai.AdditionalInsuredType = Nothing OrElse ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.None Then
                                '    ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                                'End If
                                'updated 5/26/2017 to use new method
                                DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                                additionalInsureds.Add(ai)
                            Else
                                'add dummy record
                                Dim ai As New QuickQuoteAdditionalInsured
                                'ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                                'updated 5/26/2017 to use new method
                                DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                                additionalInsureds.Add(ai)
                            End If
                            If additionalInsureds.Count = aiCount Then
                                Exit Do
                            End If
                        End If
                    Loop
                ElseIf aiCount < additionalInsureds.Count Then
                    'remove some; backup 1st
                    If updateBackupListBeforeRemoving = True Then 'added IF 6/5/2017
                        additionalInsuredsBackup = CloneObject(additionalInsureds)
                    End If
                    Dim diff As Integer = additionalInsureds.Count - aiCount
                    Do Until additionalInsureds.Count = aiCount
                        If additionalInsureds.Count <= aiCount Then
                            Exit Do
                        End If
                        If aiCount < additionalInsureds.Count Then
                            Dim ai As QuickQuoteAdditionalInsured = additionalInsureds(additionalInsureds.Count - 1)
                            If ai IsNot Nothing Then
                                ai.Dispose()
                                ai = Nothing
                            End If
                            'additionalInsureds.Remove(ai) 'not sure if this will remove it if it's nothing
                            additionalInsureds.RemoveAt(additionalInsureds.Count - 1) 'this should remove anything from that index, even an item that is nothing
                            If additionalInsureds.Count = aiCount Then
                                Exit Do
                            End If
                        End If
                    Loop
                Else
                    'same count; do nothing
                End If
            Else
                If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                    'clear out list; maybe backup 1st
                    If updateBackupListBeforeRemoving = True Then 'added IF 6/5/2017
                        additionalInsuredsBackup = CloneObject(additionalInsureds)
                    End If
                    For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                        If ai IsNot Nothing Then
                            ai.Dispose()
                            ai = Nothing
                        End If
                    Next
                    additionalInsureds.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        'added 5/26/2017
        'Public Sub DefaultAdditionalInsuredTypeIfNeeded(ByRef addIns As QuickQuoteAdditionalInsured, Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False)
        'updated 5/27/2017 for new optional param specific to AdditionalInsuredsManualCharge
        Public Sub DefaultAdditionalInsuredTypeIfNeeded(ByRef addIns As QuickQuoteAdditionalInsured, Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False, Optional ByVal isForAdditionalInsuredsManualCharge As Boolean = False)
            If addIns IsNot Nothing Then
                If addIns.AdditionalInsuredType = Nothing OrElse addIns.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.None Then
                    If IsPositiveIntegerString(addIns.CoverageCodeId) = True Then
                        addIns.CoverageCodeId = addIns.CoverageCodeId 'this will force SETTER logic to reset AdditionalInsuredType
                    End If
                    If addIns.AdditionalInsuredType = Nothing OrElse addIns.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.None Then
                        If IsDateString(effDate) = False Then
                            effDate = Date.Today.ToShortDateString
                        End If
                        If isForAdditionalInsuredsManualCharge = True Then 'added IF 5/27/2017; original logic in ELSE
                            addIns.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors '21021
                        Else
                            If lobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP AndAlso doUseNewBOPVersion(effDate) = True Then
                                If isAdditionalInsuredCheckboxBOP = True Then
                                    addIns.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.OwnersLesseesOrContractorsCompletedOperations '21081
                                Else
                                    addIns.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.OwnersLesseesOrContractorsBOP '80368
                                End If
                            Else
                                addIns.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors '21021
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        'added 5/27/2017
        Public Function DefaultCoverageCodeIdForAdditionalInsured(Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False, Optional ByVal isForAdditionalInsuredsManualCharge As Boolean = False) As String
            Dim covCodeId As String = ""

            Dim addIns As New QuickQuoteAdditionalInsured
            DefaultAdditionalInsuredTypeIfNeeded(addIns, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP, isForAdditionalInsuredsManualCharge:=isForAdditionalInsuredsManualCharge)
            If addIns IsNot Nothing AndAlso IsPositiveIntegerString(addIns.CoverageCodeId) = True Then
                covCodeId = addIns.CoverageCodeId
            Else
                If IsDateString(effDate) = False Then
                    effDate = Date.Today.ToShortDateString
                End If
                If isForAdditionalInsuredsManualCharge = True Then
                    If CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors) > 0 Then '21021
                        covCodeId = CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors).ToString
                    End If
                Else
                    If lobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP AndAlso doUseNewBOPVersion(effDate) = True Then
                        If isAdditionalInsuredCheckboxBOP = True Then
                            If CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.OwnersLesseesOrContractorsCompletedOperations) > 0 Then '21081
                                covCodeId = CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.OwnersLesseesOrContractorsCompletedOperations).ToString
                            End If
                        Else
                            If CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.OwnersLesseesOrContractorsBOP) > 0 Then '80368
                                covCodeId = CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.OwnersLesseesOrContractorsBOP).ToString
                            End If
                        End If
                    Else
                        If CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors) > 0 Then '21021
                            covCodeId = CInt(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors).ToString
                        End If
                    End If
                End If
                If IsPositiveIntegerString(covCodeId) = False Then
                    'not defaulted for some reason; just use value for QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                    covCodeId = "21021"
                End If
            End If

            Return covCodeId
        End Function
        Public Function AdditionalInsuredsCountFromList(ByVal addInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByVal checkForNothing As Boolean = False) As Integer
            Dim addInsCount As Integer = 0

            If addInsureds IsNot Nothing AndAlso addInsureds.Count > 0 Then
                If checkForNothing = True Then
                    For Each ai As QuickQuoteAdditionalInsured In addInsureds
                        If ai IsNot Nothing Then
                            addInsCount += 1
                        End If
                    Next
                Else
                    addInsCount = addInsureds.Count
                End If
            End If

            Return addInsCount
        End Function
        'note: not correct since these won't be SUMMED; 6/5/2017 note: was correct the 1st time... this will be used... un-commented and re-named from AdditionalInsuredsManualChargeFromList
        Public Function AdditionalInsuredsTotalManualChargeFromList(ByVal addInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByVal returnInQuotedPremiumFormat As Boolean = False) As String
            Dim addInsManCharge As String = ""

            If addInsureds IsNot Nothing AndAlso addInsureds.Count > 0 Then
                For Each ai As QuickQuoteAdditionalInsured In addInsureds
                    If ai IsNot Nothing Then
                        addInsManCharge = getSum(addInsManCharge, ai.ManualPremiumAmount)
                    End If
                Next
                If String.IsNullOrWhiteSpace(addInsManCharge) = False Then
                    If returnInQuotedPremiumFormat = True Then
                        addInsManCharge = QuotedPremiumFormat(addInsManCharge)
                    End If
                End If
            End If

            Return addInsManCharge
        End Function
        Public Function AdditionalInsuredsManualChargeFromList(ByVal addInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByVal returnInQuotedPremiumFormat As Boolean = False, Optional ByVal firstOrLastAmount As FirstOrLast = FirstOrLast.First, Optional ByRef hasItemsWithDifferentAmounts As Boolean = False) As String
            Dim addInsManCharge As String = ""
            hasItemsWithDifferentAmounts = False

            If addInsureds IsNot Nothing AndAlso addInsureds.Count > 0 Then
                Dim hasValidAmts As Boolean = False
                Dim hasInvalidAmts As Boolean = False
                Dim validAmts As List(Of String) = Nothing
                For Each ai As QuickQuoteAdditionalInsured In addInsureds
                    If ai IsNot Nothing Then
                        If IsPositiveDecimalString(ai.ManualPremiumAmount) = True Then
                            hasValidAmts = True
                            If validAmts Is Nothing Then
                                validAmts = New List(Of String)
                            End If
                            If hasTextMatchInList(ai.ManualPremiumAmount, validAmts, matchType:=TextMatchType.DecimalOrText_IgnoreCasing) = False Then
                                validAmts.Add(ai.ManualPremiumAmount)
                            End If
                        Else
                            hasInvalidAmts = True
                        End If
                    End If
                Next
                If hasValidAmts = True Then
                    If hasInvalidAmts = True OrElse (validAmts IsNot Nothing AndAlso validAmts.Count > 1) Then
                        hasItemsWithDifferentAmounts = True
                    End If
                End If
                If validAmts IsNot Nothing AndAlso validAmts.Count > 0 Then
                    If firstOrLastAmount = FirstOrLast.First Then
                        addInsManCharge = validAmts(0)
                    Else
                        addInsManCharge = validAmts(validAmts.Count - 1)
                    End If
                End If
                If String.IsNullOrWhiteSpace(addInsManCharge) = False Then
                    If returnInQuotedPremiumFormat = True Then
                        addInsManCharge = QuotedPremiumFormat(addInsManCharge)
                    End If
                End If
            End If

            Return addInsManCharge
        End Function
        'note: not correct since these won't be SUMMED
        'Public Sub UpdateAdditionalInsuredsListBasedOnManualCharge(ByVal aiManualCharge As String, ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByRef additionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False)
        'updated 6/6/2017 w/ optional params similar to UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit
        Public Sub UpdateAdditionalInsuredsListBasedOnManualCharge(ByVal aiManualCharge As String, ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByRef additionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False, Optional ByVal maintainOneItemFromOriginalListWhenResetting As Boolean = False, Optional ByVal maintainFirstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByVal maintainItemsOnUnresolvedDifference As Boolean = False, Optional ByVal applicableItemToApplyDifferenceTo As FirstLastOrAll = FirstLastOrAll.All, Optional ByVal firstOrLastItemOrderWhenApplyingDifferenceToAll As FirstOrLast = FirstOrLast.First, Optional ByVal treatAmountsAsIntegerOverDecimal As Boolean = False)
            If IsPositiveDecimalString(aiManualCharge) = True Then
                If additionalInsureds Is Nothing Then
                    additionalInsureds = New List(Of QuickQuoteAdditionalInsured)
                End If
                'Dim hasDiffAmounts As Boolean = False 'commented 6/5/2017
                'Dim aiListManualCharge As String = AdditionalInsuredsManualChargeFromList(additionalInsureds, hasItemsWithDifferentAmounts:=hasDiffAmounts)
                'updated 6/5/2017 to use method that returns SUM instead of first or last
                Dim aiListManualCharge As String = AdditionalInsuredsTotalManualChargeFromList(additionalInsureds)

                'added 6/6/2017
                If treatAmountsAsIntegerOverDecimal = True Then
                    Dim amtsCurrentlyMatch As Boolean = False
                    If DecimalForString(aiManualCharge) = DecimalForString(aiListManualCharge) Then
                        amtsCurrentlyMatch = True
                    End If
                    aiManualCharge = ConvertedDecimalString(aiManualCharge, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundUp)
                    If amtsCurrentlyMatch = True Then
                        aiListManualCharge = aiManualCharge
                    End If
                End If

                If DecimalForString(aiManualCharge) > DecimalForString(aiListManualCharge) Then
                    'new amount is more than SUM of amounts in current list
                    'add more; use backup if available

                    '1st check total for backup list
                    'If DecimalForString(aiManualCharge) = DecimalForString(AdditionalInsuredsManualChargeFromList(additionalInsuredsBackup)) Then
                    'updated 6/5/2017 to use method that returns SUM instead of first or last
                    If DecimalForString(aiManualCharge) = DecimalForString(AdditionalInsuredsTotalManualChargeFromList(additionalInsuredsBackup)) Then
                        'new amount is same as amount from backup list; replace current list w/ backup list
                        additionalInsureds = CloneObject(additionalInsuredsBackup)
                    ElseIf additionalInsureds.Count = 0 OrElse additionalInsureds.Count = 1 Then
                        'only 0 or 1 item in list; add 1 if needed and then change amount
                        If additionalInsureds.Count = 0 Then
                            Dim ai As New QuickQuoteAdditionalInsured
                            DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                            additionalInsureds.Add(ai)
                        End If
                        additionalInsureds(0).ManualPremiumAmount = aiManualCharge
                    Else
                        'would need to add more to one or more items in list
                        Dim diffToAdd As String = getDiff(aiManualCharge, aiListManualCharge)
                        'If IsPositiveDecimalString(diffToAdd) = True Then
                        'updated 6/6/2017
                        Dim resetItems As Boolean = False
                        If IsPositiveDecimalString(diffToAdd) = True AndAlso maintainItemsOnUnresolvedDifference = True Then
                            If applicableItemToApplyDifferenceTo = FirstLastOrAll.FirstOnly Then
                                additionalInsureds(0).ManualPremiumAmount = getSum(additionalInsureds(0).ManualPremiumAmount, diffToAdd)
                            ElseIf applicableItemToApplyDifferenceTo = FirstLastOrAll.LastOnly Then
                                additionalInsureds(additionalInsureds.Count - 1).ManualPremiumAmount = getSum(additionalInsureds(additionalInsureds.Count - 1).ManualPremiumAmount, diffToAdd)
                            Else 'All
                                If treatAmountsAsIntegerOverDecimal = True Then 'added IF 6/6/2017; original logic in ELSE
                                    'note: will round up when adding
                                    Dim ints As List(Of Integer) = IntegersSplitAsEvenlyAsPossible(IntegerForString(ConvertedDecimalString(diffToAdd, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundUp)), additionalInsureds.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If ints IsNot Nothing AndAlso ints.Count = additionalInsureds.Count Then
                                        Dim aiCounter As Integer = 0
                                        For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                            aiCounter += 1
                                            Dim currIntegerToAdd As Integer = ints(aiCounter - 1)
                                            ai.ManualPremiumAmount = getSum(ai.ManualPremiumAmount, currIntegerToAdd.ToString)
                                        Next
                                    Else
                                        resetItems = True
                                    End If
                                Else
                                    Dim decs As List(Of Decimal) = DecimalsSplitAsEvenlyAsPossible(DecimalForString(diffToAdd), additionalInsureds.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If decs IsNot Nothing AndAlso decs.Count = additionalInsureds.Count Then
                                        Dim aiCounter As Integer = 0
                                        For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                            aiCounter += 1
                                            Dim currDecimalToAdd As Decimal = decs(aiCounter - 1)
                                            ai.ManualPremiumAmount = getSum(ai.ManualPremiumAmount, currDecimalToAdd.ToString)
                                        Next
                                    Else
                                        resetItems = True
                                    End If
                                End If
                            End If
                        Else
                            'couldn't figure out difference; just wipe out list and add 1 item for amount
                            'updated 6/6/2017
                            resetItems = True
                        End If
                        'added 6/6/2017 to keep logic in one spot
                        If resetItems = True Then
                            If updateBackupListBeforeRemoving = True Then
                                additionalInsuredsBackup = CloneObject(additionalInsureds) 'backup original list first
                            End If
                            ClearOutAdditionalInsuredsListAndAddOne(additionalInsureds, manualPremiumToUse:=aiManualCharge, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP, maintainOneItemFromOriginalList:=maintainOneItemFromOriginalListWhenResetting, maintainFirstOrLastItem:=maintainFirstOrLastItem)
                        End If
                    End If

                    'Do Until additionalInsureds.Count = aiCount
                    '    If additionalInsureds.Count >= aiCount Then
                    '        Exit Do
                    '    End If
                    '    If additionalInsureds.Count < aiCount Then
                    '        If additionalInsuredsBackup IsNot Nothing AndAlso additionalInsuredsBackup.Count > additionalInsureds.Count Then
                    '            'additionalInsureds.Add(CloneObject(additionalInsuredsBackup(additionalInsureds.Count))) 'add the item from the next index of the backup list; will do in separate steps
                    '            Dim ai As QuickQuoteAdditionalInsured = CloneObject(additionalInsuredsBackup(additionalInsureds.Count)) 'the item from the next index of the backup list
                    '            'set aiType if it's blank
                    '            'If ai.AdditionalInsuredType = Nothing OrElse ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.None Then
                    '            '    ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                    '            'End If
                    '            'updated 5/26/2017 to use new method
                    '            DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                    '            additionalInsureds.Add(ai)
                    '        Else
                    '            'add dummy record
                    '            Dim ai As New QuickQuoteAdditionalInsured
                    '            'ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                    '            'updated 5/26/2017 to use new method
                    '            DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                    '            additionalInsureds.Add(ai)
                    '        End If
                    '        If additionalInsureds.Count = aiCount Then
                    '            Exit Do
                    '        End If
                    '    End If
                    'Loop
                ElseIf DecimalForString(aiManualCharge) < DecimalForString(aiListManualCharge) Then
                    'new amount is less than SUM of amounts in current list
                    'remove some; backup 1st

                    'Dim newAddInsBackup As List(Of QuickQuoteAdditionalInsured) = CloneObject(additionalInsureds)
                    'updated 6/5/2017
                    Dim newAddInsBackup As List(Of QuickQuoteAdditionalInsured) = Nothing
                    If updateBackupListBeforeRemoving = True Then
                        newAddInsBackup = CloneObject(additionalInsureds)
                    End If
                    '1st check total for backup list
                    'If DecimalForString(aiManualCharge) = DecimalForString(AdditionalInsuredsManualChargeFromList(additionalInsuredsBackup)) Then
                    'updated 6/5/2017 to use method that returns SUM instead of first or last
                    If DecimalForString(aiManualCharge) = DecimalForString(AdditionalInsuredsTotalManualChargeFromList(additionalInsuredsBackup)) Then
                        'new amount is same as amount from backup list; replace current list w/ backup list
                        additionalInsureds = CloneObject(additionalInsuredsBackup)
                    ElseIf additionalInsureds.Count = 0 OrElse additionalInsureds.Count = 1 Then
                        'only 0 or 1 item in list; add 1 if needed and then change amount
                        If additionalInsureds.Count = 0 Then 'this should never hit here since list amount was already more
                            Dim ai As New QuickQuoteAdditionalInsured
                            DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                            additionalInsureds.Add(ai)
                        End If
                        additionalInsureds(0).ManualPremiumAmount = aiManualCharge
                    Else
                        'would need to remove some from one or more items in list
                        Dim diffToRemove As String = getDiff(aiListManualCharge, aiManualCharge)
                        'If IsPositiveDecimalString(diffToRemove) = True Then
                        'updated 6/6/2017
                        Dim resetItems As Boolean = False
                        If IsPositiveDecimalString(diffToRemove) = True AndAlso maintainItemsOnUnresolvedDifference = True Then
                            If applicableItemToApplyDifferenceTo = FirstLastOrAll.FirstOnly Then
                                Dim ai As QuickQuoteAdditionalInsured = AdditionalInsuredWithManualPremiumAmount(additionalInsureds, diffToRemove, startSearchOnFirstOrLast:=FirstOrLast.First)
                                If ai IsNot Nothing Then
                                    ai.ManualPremiumAmount = getDiff(ai.ManualPremiumAmount, diffToRemove)
                                Else
                                    resetItems = True
                                End If
                            ElseIf applicableItemToApplyDifferenceTo = FirstLastOrAll.LastOnly Then
                                Dim ai As QuickQuoteAdditionalInsured = AdditionalInsuredWithManualPremiumAmount(additionalInsureds, diffToRemove, startSearchOnFirstOrLast:=FirstOrLast.Last)
                                If ai IsNot Nothing Then
                                    ai.ManualPremiumAmount = getDiff(ai.ManualPremiumAmount, diffToRemove)
                                Else
                                    resetItems = True
                                End If
                            Else 'All
                                If treatAmountsAsIntegerOverDecimal = True Then 'added IF 6/6/2017; original logic in ELSE
                                    'note: will round down when removing
                                    Dim ints As List(Of Integer) = IntegersSplitAsEvenlyAsPossible(IntegerForString(ConvertedDecimalString(diffToRemove, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundDown)), additionalInsureds.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If ints IsNot Nothing AndAlso ints.Count = additionalInsureds.Count Then
                                        'validate all 1st to make sure there won't be any negatives
                                        Dim needToReCalculateAfterResettingForNegatives As Boolean = False
                                        Dim aiCounter As Integer = 0
                                        Dim itemNumstoIgnoreOnNextDiffSplit As New List(Of Integer) 'need to instantiate here so count can come back, even when 0
                                        For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                            aiCounter += 1
                                            Dim currIntegerToSubtract As Integer = ints(aiCounter - 1)
                                            'ai.ManualPremiumAmount = getDiff(ai.ManualPremiumAmount, currIntegerToSubtract.ToString)
                                            Dim currEstimatedPrem As String = getDiff(ai.ManualPremiumAmount, currIntegerToSubtract.ToString)
                                            If IntegerForString(currEstimatedPrem) > 0 Then
                                                'okay
                                            Else
                                                'would be negative
                                                If IntegerForString(ai.ManualPremiumAmount) > 1 Then
                                                    ai.ManualPremiumAmount = "1.00"
                                                Else
                                                    'already 0... or below 1.00
                                                End If
                                                itemNumstoIgnoreOnNextDiffSplit.Add(aiCounter)
                                                needToReCalculateAfterResettingForNegatives = True
                                            End If
                                        Next
                                        Dim okayToContinue As Boolean = True
                                        If needToReCalculateAfterResettingForNegatives = True Then
                                            aiListManualCharge = AdditionalInsuredsTotalManualChargeFromList(additionalInsureds)
                                            diffToRemove = getDiff(aiListManualCharge, aiManualCharge)
                                            If IsPositiveDecimalString(diffToRemove) = True Then
                                                ints = IntegersSplitAsEvenlyAsPossible(IntegerForString(ConvertedDecimalString(diffToRemove, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundDown)), additionalInsureds.Count - itemNumstoIgnoreOnNextDiffSplit.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                                If ints IsNot Nothing AndAlso ints.Count = additionalInsureds.Count - itemNumstoIgnoreOnNextDiffSplit.Count Then
                                                    'validate one more time and bail if no good
                                                    aiCounter = 0
                                                    Dim aiValidCounter As Integer = 0
                                                    For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                                        aiCounter += 1
                                                        If itemNumstoIgnoreOnNextDiffSplit.Contains(aiCounter) = False Then
                                                            aiValidCounter += 1
                                                            Dim currIntegerToSubtract As Integer = ints(aiValidCounter - 1)
                                                            Dim currEstimatedPrem As String = getDiff(ai.ManualPremiumAmount, currIntegerToSubtract.ToString)
                                                            If IntegerForString(currEstimatedPrem) > 0 Then
                                                                'okay
                                                            Else
                                                                'would be negative
                                                                okayToContinue = False
                                                                Exit For
                                                            End If
                                                        End If
                                                    Next
                                                Else
                                                    okayToContinue = False
                                                End If
                                            Else
                                                okayToContinue = False
                                            End If
                                        End If
                                        If okayToContinue = True Then
                                            aiCounter = 0
                                            Dim aiValidCounter As Integer = 0
                                            For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                                aiCounter += 1
                                                If itemNumstoIgnoreOnNextDiffSplit.Contains(aiCounter) = False Then
                                                    aiValidCounter += 1
                                                    Dim currIntegerToSubtract As Integer = ints(aiValidCounter - 1)
                                                    ai.ManualPremiumAmount = getDiff(ai.ManualPremiumAmount, currIntegerToSubtract.ToString)
                                                End If
                                            Next
                                        Else
                                            resetItems = True
                                        End If
                                    Else
                                        resetItems = True
                                    End If
                                Else
                                    Dim decs As List(Of Decimal) = DecimalsSplitAsEvenlyAsPossible(DecimalForString(diffToRemove), additionalInsureds.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If decs IsNot Nothing AndAlso decs.Count = additionalInsureds.Count Then
                                        'validate all 1st to make sure there won't be any negatives
                                        Dim needToReCalculateAfterResettingForNegatives As Boolean = False
                                        Dim aiCounter As Integer = 0
                                        Dim itemNumstoIgnoreOnNextDiffSplit As New List(Of Integer) 'need to instantiate here so count can come back, even when 0
                                        For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                            aiCounter += 1
                                            Dim currDecimalToSubtract As Decimal = decs(aiCounter - 1)
                                            'ai.ManualPremiumAmount = getDiff(ai.ManualPremiumAmount, currDecimalToSubtract.ToString)
                                            Dim currEstimatedPrem As String = getDiff(ai.ManualPremiumAmount, currDecimalToSubtract.ToString)
                                            If DecimalForString(currEstimatedPrem) > CDec(0) Then
                                                'okay
                                            Else
                                                'would be negative
                                                If DecimalForString(ai.ManualPremiumAmount) > CDec(".01") Then
                                                    ai.ManualPremiumAmount = ".01"
                                                Else
                                                    'already 0... or below .01
                                                End If
                                                itemNumstoIgnoreOnNextDiffSplit.Add(aiCounter)
                                                needToReCalculateAfterResettingForNegatives = True
                                            End If
                                        Next
                                        Dim okayToContinue As Boolean = True
                                        If needToReCalculateAfterResettingForNegatives = True Then
                                            aiListManualCharge = AdditionalInsuredsTotalManualChargeFromList(additionalInsureds)
                                            diffToRemove = getDiff(aiListManualCharge, aiManualCharge)
                                            If IsPositiveDecimalString(diffToRemove) = True Then
                                                decs = DecimalsSplitAsEvenlyAsPossible(DecimalForString(diffToRemove), additionalInsureds.Count - itemNumstoIgnoreOnNextDiffSplit.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                                If decs IsNot Nothing AndAlso decs.Count = additionalInsureds.Count - itemNumstoIgnoreOnNextDiffSplit.Count Then
                                                    'validate one more time and bail if no good
                                                    aiCounter = 0
                                                    Dim aiValidCounter As Integer = 0
                                                    For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                                        aiCounter += 1
                                                        If itemNumstoIgnoreOnNextDiffSplit.Contains(aiCounter) = False Then
                                                            aiValidCounter += 1
                                                            Dim currDecimalToSubtract As Decimal = decs(aiValidCounter - 1)
                                                            Dim currEstimatedPrem As String = getDiff(ai.ManualPremiumAmount, currDecimalToSubtract.ToString)
                                                            If DecimalForString(currEstimatedPrem) > CDec(0) Then
                                                                'okay
                                                            Else
                                                                'would be negative
                                                                okayToContinue = False
                                                                Exit For
                                                            End If
                                                        End If
                                                    Next
                                                Else
                                                    okayToContinue = False
                                                End If
                                            Else
                                                okayToContinue = False
                                            End If
                                        End If
                                        If okayToContinue = True Then
                                            aiCounter = 0
                                            Dim aiValidCounter As Integer = 0
                                            For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                                aiCounter += 1
                                                If itemNumstoIgnoreOnNextDiffSplit.Contains(aiCounter) = False Then
                                                    aiValidCounter += 1
                                                    Dim currDecimalToSubtract As Decimal = decs(aiValidCounter - 1)
                                                    ai.ManualPremiumAmount = getDiff(ai.ManualPremiumAmount, currDecimalToSubtract.ToString)
                                                End If
                                            Next
                                        Else
                                            resetItems = True
                                        End If
                                    Else
                                        resetItems = True
                                    End If
                                End If
                            End If
                        Else
                            'couldn't figure out difference; just wipe out list and add 1 item for amount
                            'updated 6/6/2017
                            resetItems = True
                        End If
                        'added 6/6/2017 to keep logic in one spot
                        If resetItems = True Then
                            'contractorsEquipScheduledItemsBackup = CloneObject(contractorsEquipScheduledItems) 'backup original list first; already have logic in place for backup in this route
                            ClearOutAdditionalInsuredsListAndAddOne(additionalInsureds, manualPremiumToUse:=aiManualCharge, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP, maintainOneItemFromOriginalList:=maintainOneItemFromOriginalListWhenResetting, maintainFirstOrLastItem:=maintainFirstOrLastItem)
                        End If
                    End If
                    If updateBackupListBeforeRemoving = True Then 'added IF 6/5/2017
                        additionalInsuredsBackup = newAddInsBackup
                    End If

                    'additionalInsuredsBackup = CloneObject(additionalInsureds)
                    'Dim diff As Integer = additionalInsureds.Count - aiCount
                    'Do Until additionalInsureds.Count = aiCount
                    '    If additionalInsureds.Count <= aiCount Then
                    '        Exit Do
                    '    End If
                    '    If aiCount < additionalInsureds.Count Then
                    '        Dim ai As QuickQuoteAdditionalInsured = additionalInsureds(additionalInsureds.Count - 1)
                    '        If ai IsNot Nothing Then
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        End If
                    '        'additionalInsureds.Remove(ai) 'not sure if this will remove it if it's nothing
                    '        additionalInsureds.RemoveAt(additionalInsureds.Count - 1) 'this should remove anything from that index, even an item that is nothing
                    '        If additionalInsureds.Count = aiCount Then
                    '            Exit Do
                    '        End If
                    '    End If
                    'Loop
                Else
                    'same amount; do nothing
                End If
            Else
                'will just clear out list for CGL or CPP (assuming this would be the CGL packagePart); could clear out for all
                If lobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability OrElse lobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                    If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                        'clear out list; maybe backup 1st
                        If updateBackupListBeforeRemoving = True Then 'added IF 6/5/2017
                            additionalInsuredsBackup = CloneObject(additionalInsureds)
                        End If
                        For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                            If ai IsNot Nothing Then
                                ai.Dispose()
                                ai = Nothing
                            End If
                        Next
                        additionalInsureds.Clear()
                        'could also set to Nothing
                    End If
                Else
                    UpdateAdditionalInsuredManualPremiumAmountForAllInList("", additionalInsureds) 'could pass in aiManualCharge, but it will just get set to "" anyway
                End If
            End If
        End Sub
        Public Sub UpdateAdditionalInsuredManualPremiumAmountForAllInList(ByVal aiManualPremAmt As String, ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured))
            If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                    If ai IsNot Nothing Then
                        If IsPositiveDecimalString(aiManualPremAmt) = True Then
                            ai.ManualPremiumAmount = aiManualPremAmt
                        Else
                            ai.ManualPremiumAmount = ""
                        End If
                    End If
                Next
            End If
        End Sub
        'added 6/6/2017
        Public Sub ClearOutAdditionalInsuredsListAndAddOne(ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), Optional ByVal manualPremiumToUse As String = "", Optional ByVal effDate As String = "", Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal isAdditionalInsuredCheckboxBOP As Boolean = False, Optional ByVal maintainOneItemFromOriginalList As Boolean = False, Optional ByVal maintainFirstOrLastItem As FirstOrLast = FirstOrLast.First)
            If additionalInsureds Is Nothing Then
                additionalInsureds = New List(Of QuickQuoteAdditionalInsured)
            End If
            Dim addDummyItem As Boolean = False
            If additionalInsureds.Count > 0 Then
                If maintainOneItemFromOriginalList = True Then
                    addDummyItem = False 'redundant
                    If additionalInsureds.Count > 1 Then
                        If maintainFirstOrLastItem = Nothing Then 'should be same as First anyway since value is 0
                            maintainFirstOrLastItem = FirstOrLast.First
                        End If
                        Dim indexesToRemove As New List(Of Integer)
                        For i As Integer = 0 To additionalInsureds.Count - 1
                            Dim addIndex As Boolean = True
                            If i = 0 Then
                                If maintainFirstOrLastItem = FirstOrLast.First Then
                                    addIndex = False
                                Else
                                    addIndex = True 'redundant
                                End If
                            ElseIf i = additionalInsureds.Count - 1 Then
                                If maintainFirstOrLastItem = FirstOrLast.Last Then
                                    addIndex = False
                                Else
                                    addIndex = True 'redundant
                                End If
                            Else
                                addIndex = True 'redundant
                            End If
                            If addIndex = True Then
                                indexesToRemove.Add(i)
                            End If
                        Next
                        'now make sure there is all but 1 in index list and then remove all others
                        If indexesToRemove.Count = additionalInsureds.Count - 1 Then
                            'correct # in list; now remove them starting w/ last index
                            RemoveQuickQuoteAdditionalInsuredsByIndex(additionalInsureds, indexesToRemove)
                        Else
                            'manually clear list and re-add 1st/last item
                            Dim ceToMaintain As QuickQuoteAdditionalInsured = Nothing
                            If maintainFirstOrLastItem = FirstOrLast.First Then
                                ceToMaintain = CloneObject(additionalInsureds(0))
                            Else 'last
                                ceToMaintain = CloneObject(additionalInsureds(additionalInsureds.Count - 1))
                            End If
                            For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                                If ai IsNot Nothing Then
                                    ai.Dispose()
                                    ai = Nothing
                                End If
                            Next
                            additionalInsureds.Clear()
                            If ceToMaintain IsNot Nothing Then
                                additionalInsureds.Add(ceToMaintain)
                            Else
                                'unable to set item to maintain
                                addDummyItem = True
                            End If
                        End If
                    Else
                        'should only be 1 item in list anyway
                    End If
                    If IsPositiveDecimalString(manualPremiumToUse) = True Then
                        additionalInsureds(0).ManualPremiumAmount = manualPremiumToUse
                    Else
                        additionalInsureds(0).ManualPremiumAmount = ""
                    End If
                Else
                    'clear out all and then add one
                    addDummyItem = True
                    For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                        If ai IsNot Nothing Then
                            ai.Dispose()
                            ai = Nothing
                        End If
                    Next
                    additionalInsureds.Clear()
                End If
            Else
                addDummyItem = True
            End If
            If addDummyItem = True Then
                Dim ai As New QuickQuoteAdditionalInsured
                DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                If IsPositiveDecimalString(manualPremiumToUse) = True Then
                    ai.ManualPremiumAmount = manualPremiumToUse
                End If
                additionalInsureds.Add(ai)
            End If
        End Sub
        Public Sub RemoveQuickQuoteAdditionalInsuredsByIndex(ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal addInsIndexList As List(Of Integer))
            'If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 AndAlso addInsIndexList IsNot Nothing AndAlso addInsIndexList.Count > 0 Then
            '    addInsIndexList.Sort() 'put them in order 1st
            '    addInsIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
            '    For Each i As Integer In addInsIndexList
            '        RemoveQuickQuoteAdditionalInsuredByIndex(additionalInsureds, i)
            '    Next
            'End If
            ''note: could also return removedCount as optional byref param
            'updated 8/22/2018 to call new method
            RemoveQuickQuoteAdditionalInsuredsByIndex(additionalInsureds, addInsIndexList, 0)
        End Sub
        Public Sub RemoveQuickQuoteAdditionalInsuredByIndex(ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal aiIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If additionalInsureds IsNot Nothing AndAlso aiIndex >= 0 AndAlso additionalInsureds.Count >= CInt(aiIndex + 1) Then
                additionalInsureds.RemoveAt(aiIndex)
                removed = True
            End If
        End Sub
        Public Function HasAdditionalInsuredWithManualPremiumAmount(ByRef addInsureds As List(Of QuickQuoteAdditionalInsured), ByVal manualPremAmt As String) As Boolean
            Dim hasItem As Boolean = False

            Dim ai As QuickQuoteAdditionalInsured = AdditionalInsuredWithManualPremiumAmount(addInsureds, manualPremAmt)
            If ai IsNot Nothing Then
                hasItem = True
            End If

            Return hasItem
        End Function
        Public Function AdditionalInsuredWithManualPremiumAmount(ByRef addInsureds As List(Of QuickQuoteAdditionalInsured), ByVal manualPremAmt As String, Optional ByVal startSearchOnFirstOrLast As FirstOrLast = FirstOrLast.First) As QuickQuoteAdditionalInsured
            Dim ai As QuickQuoteAdditionalInsured = Nothing

            If addInsureds IsNot Nothing AndAlso addInsureds.Count > 0 Then
                If startSearchOnFirstOrLast = FirstOrLast.Last Then
                    Dim currIndex As Integer = addInsureds.Count - 1
                    Dim doneSearching As Boolean = False
                    Do Until doneSearching = True
                        If doneSearching = False AndAlso currIndex >= 0 Then
                            Dim addIns As QuickQuoteAdditionalInsured = addInsureds(currIndex)
                            If addIns IsNot Nothing Then
                                If DecimalForString(addIns.ManualPremiumAmount) >= DecimalForString(manualPremAmt) Then
                                    ai = addIns
                                    doneSearching = True
                                    Exit Do
                                End If
                            End If
                        Else
                            Exit Do
                        End If
                        currIndex -= 1
                        If currIndex < 0 Then
                            Exit Do
                        End If
                    Loop
                Else 'First
                    For Each addIns As QuickQuoteAdditionalInsured In addInsureds
                        If addIns IsNot Nothing Then
                            If DecimalForString(addIns.ManualPremiumAmount) >= DecimalForString(manualPremAmt) Then
                                ai = addIns
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return ai
        End Function
        'added 5/27/2017 for Contractors Equipment Scheduled Items (specific to BOP)
        Public Function ContractorsEquipmentScheduledItemsTotalLimitFromList(ByVal contEquips As List(Of QuickQuoteContractorsEquipmentScheduledItem), Optional ByVal returnInLimitFormat As Boolean = False) As String
            Dim totalLimit As String = ""

            If contEquips IsNot Nothing AndAlso contEquips.Count > 0 Then
                For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contEquips
                    If ce IsNot Nothing Then
                        totalLimit = getSum(totalLimit, ce.Limit)
                    End If
                Next
                If String.IsNullOrWhiteSpace(totalLimit) = False Then
                    If returnInLimitFormat = True Then
                        totalLimit = LimitFormat(totalLimit)
                    End If
                End If
            End If

            Return totalLimit
        End Function
        'Public Sub UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ByVal ceTotalLimit As String, ByRef contractorsEquipScheduledItems As List(Of QuickQuoteContractorsEquipmentScheduledItem), Optional ByRef contractorsEquipScheduledItemsBackup As List(Of QuickQuoteContractorsEquipmentScheduledItem) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True)
        'updated 5/29/2017 w/ optional params for maintaining existing items and divvying up difference
        'Public Sub UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ByVal ceTotalLimit As String, ByRef contractorsEquipScheduledItems As List(Of QuickQuoteContractorsEquipmentScheduledItem), Optional ByRef contractorsEquipScheduledItemsBackup As List(Of QuickQuoteContractorsEquipmentScheduledItem) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal maintainOneItemFromOriginalListWhenResetting As Boolean = False, Optional ByVal maintainFirstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByVal maintainItemsOnUnresolvedDifference As Boolean = False, Optional ByVal applicableItemToApplyDifferenceTo As FirstLastOrAll = FirstLastOrAll.All, Optional ByVal firstOrLastItemOrderWhenApplyingDifferenceToAll As FirstOrLast = FirstOrLast.First)
        'updated 6/6/2017 w/ new optional param to treat amounts as integer instead of decimal
        Public Sub UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ByVal ceTotalLimit As String, ByRef contractorsEquipScheduledItems As List(Of QuickQuoteContractorsEquipmentScheduledItem), Optional ByRef contractorsEquipScheduledItemsBackup As List(Of QuickQuoteContractorsEquipmentScheduledItem) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal maintainOneItemFromOriginalListWhenResetting As Boolean = False, Optional ByVal maintainFirstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByVal maintainItemsOnUnresolvedDifference As Boolean = False, Optional ByVal applicableItemToApplyDifferenceTo As FirstLastOrAll = FirstLastOrAll.All, Optional ByVal firstOrLastItemOrderWhenApplyingDifferenceToAll As FirstOrLast = FirstOrLast.First, Optional ByVal treatAmountsAsIntegerOverDecimal As Boolean = False)
            If IsPositiveDecimalString(ceTotalLimit) = True Then
                If contractorsEquipScheduledItems Is Nothing Then
                    contractorsEquipScheduledItems = New List(Of QuickQuoteContractorsEquipmentScheduledItem)
                End If
                Dim ceListTotalLimit As String = ContractorsEquipmentScheduledItemsTotalLimitFromList(contractorsEquipScheduledItems)

                'added 6/6/2017
                If treatAmountsAsIntegerOverDecimal = True Then
                    Dim amtsCurrentlyMatch As Boolean = False
                    If DecimalForString(ceTotalLimit) = DecimalForString(ceListTotalLimit) Then
                        amtsCurrentlyMatch = True
                    End If
                    ceTotalLimit = ConvertedDecimalString(ceTotalLimit, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundUp)
                    If amtsCurrentlyMatch = True Then
                        ceListTotalLimit = ceTotalLimit
                    End If
                End If

                If DecimalForString(ceTotalLimit) > DecimalForString(ceListTotalLimit) Then
                    'new amount is more than SUM of amounts in current list
                    'add more; use backup if available

                    '1st check total for backup list
                    If DecimalForString(ceTotalLimit) = DecimalForString(ContractorsEquipmentScheduledItemsTotalLimitFromList(contractorsEquipScheduledItemsBackup)) Then
                        'new amount is same as amount from backup list; replace current list w/ backup list
                        contractorsEquipScheduledItems = CloneObject(contractorsEquipScheduledItemsBackup)
                    ElseIf contractorsEquipScheduledItems.Count = 0 OrElse contractorsEquipScheduledItems.Count = 1 Then
                        'only 0 or 1 item in list; add 1 if needed and then change amount
                        If contractorsEquipScheduledItems.Count = 0 Then
                            Dim ce As New QuickQuoteContractorsEquipmentScheduledItem
                            contractorsEquipScheduledItems.Add(ce)
                        End If
                        contractorsEquipScheduledItems(0).Limit = ceTotalLimit
                    Else
                        'would need to add more to one or more items in list
                        Dim diffToAdd As String = getDiff(ceTotalLimit, ceListTotalLimit)
                        'If IsPositiveDecimalString(diffToAdd) = True Then
                        'updated 5/29/2017
                        Dim resetItems As Boolean = False
                        If IsPositiveDecimalString(diffToAdd) = True AndAlso maintainItemsOnUnresolvedDifference = True Then
                            If applicableItemToApplyDifferenceTo = FirstLastOrAll.FirstOnly Then
                                contractorsEquipScheduledItems(0).Limit = getSum(contractorsEquipScheduledItems(0).Limit, diffToAdd)
                            ElseIf applicableItemToApplyDifferenceTo = FirstLastOrAll.LastOnly Then
                                contractorsEquipScheduledItems(contractorsEquipScheduledItems.Count - 1).Limit = getSum(contractorsEquipScheduledItems(contractorsEquipScheduledItems.Count - 1).Limit, diffToAdd)
                            Else 'All
                                If treatAmountsAsIntegerOverDecimal = True Then 'added IF 6/6/2017; original logic in ELSE
                                    'note: will round up when adding
                                    Dim ints As List(Of Integer) = IntegersSplitAsEvenlyAsPossible(IntegerForString(ConvertedDecimalString(diffToAdd, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundUp)), contractorsEquipScheduledItems.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If ints IsNot Nothing AndAlso ints.Count = contractorsEquipScheduledItems.Count Then
                                        Dim ceCounter As Integer = 0
                                        For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                            ceCounter += 1
                                            Dim currIntegerToAdd As Decimal = ints(ceCounter - 1)
                                            ce.Limit = getSum(ce.Limit, currIntegerToAdd.ToString)
                                        Next
                                    Else
                                        resetItems = True
                                    End If
                                Else
                                    Dim decs As List(Of Decimal) = DecimalsSplitAsEvenlyAsPossible(DecimalForString(diffToAdd), contractorsEquipScheduledItems.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If decs IsNot Nothing AndAlso decs.Count = contractorsEquipScheduledItems.Count Then
                                        Dim ceCounter As Integer = 0
                                        For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                            ceCounter += 1
                                            Dim currDecimalToAdd As Decimal = decs(ceCounter - 1)
                                            ce.Limit = getSum(ce.Limit, currDecimalToAdd.ToString)
                                        Next
                                    Else
                                        resetItems = True
                                    End If
                                End If
                            End If
                        Else
                            'couldn't figure out difference; just wipe out list and add 1 item for amount
                            'updated 5/29/2017
                            resetItems = True
                        End If
                        'added 5/29/2017 to keep logic in one spot
                        If resetItems = True Then
                            If updateBackupListBeforeRemoving = True Then 'added IF 6/6/2017
                                contractorsEquipScheduledItemsBackup = CloneObject(contractorsEquipScheduledItems) 'backup original list first
                            End If
                            ClearOutContractorsEquipmentScheduledItemsListAndAddOne(contractorsEquipScheduledItems, limitToUse:=ceTotalLimit, maintainOneItemFromOriginalList:=maintainOneItemFromOriginalListWhenResetting, maintainFirstOrLastItem:=maintainFirstOrLastItem)
                        End If
                    End If

                    'Do Until contractorsEquipScheduledItems.Count = aiCount
                    '    If contractorsEquipScheduledItems.Count >= aiCount Then
                    '        Exit Do
                    '    End If
                    '    If contractorsEquipScheduledItems.Count < aiCount Then
                    '        If contractorsEquipScheduledItemsBackup IsNot Nothing AndAlso contractorsEquipScheduledItemsBackup.Count > contractorsEquipScheduledItems.Count Then
                    '            'contractorsEquipScheduledItems.Add(CloneObject(contractorsEquipScheduledItemsBackup(contractorsEquipScheduledItems.Count))) 'add the item from the next index of the backup list; will do in separate steps
                    '            Dim ai As QuickQuoteContractorsEquipmentScheduledItem = CloneObject(contractorsEquipScheduledItemsBackup(contractorsEquipScheduledItems.Count)) 'the item from the next index of the backup list
                    '            'set aiType if it's blank
                    '            'If ai.AdditionalInsuredType = Nothing OrElse ai.AdditionalInsuredType = QuickQuoteContractorsEquipmentScheduledItem.QuickQuoteContractorsEquipmentScheduledItemType.None Then
                    '            '    ai.AdditionalInsuredType = QuickQuoteContractorsEquipmentScheduledItem.QuickQuoteContractorsEquipmentScheduledItemType.Vendors
                    '            'End If
                    '            'updated 5/26/2017 to use new method
                    '            DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                    '            contractorsEquipScheduledItems.Add(ai)
                    '        Else
                    '            'add dummy record
                    '            Dim ai As New QuickQuoteContractorsEquipmentScheduledItem
                    '            'ai.AdditionalInsuredType = QuickQuoteContractorsEquipmentScheduledItem.QuickQuoteContractorsEquipmentScheduledItemType.Vendors
                    '            'updated 5/26/2017 to use new method
                    '            DefaultAdditionalInsuredTypeIfNeeded(ai, effDate:=effDate, lobType:=lobType, isAdditionalInsuredCheckboxBOP:=isAdditionalInsuredCheckboxBOP)
                    '            contractorsEquipScheduledItems.Add(ai)
                    '        End If
                    '        If contractorsEquipScheduledItems.Count = aiCount Then
                    '            Exit Do
                    '        End If
                    '    End If
                    'Loop
                ElseIf DecimalForString(ceTotalLimit) < DecimalForString(ceListTotalLimit) Then
                    'new amount is less than SUM of amounts in current list
                    'remove some; backup 1st

                    'Dim newContEquipSchedItemsBackup As List(Of QuickQuoteContractorsEquipmentScheduledItem) = CloneObject(contractorsEquipScheduledItems)
                    'updated 6/5/2017
                    Dim newContEquipSchedItemsBackup As List(Of QuickQuoteContractorsEquipmentScheduledItem) = Nothing
                    If updateBackupListBeforeRemoving = True Then
                        newContEquipSchedItemsBackup = CloneObject(contractorsEquipScheduledItems)
                    End If
                    '1st check total for backup list
                    If DecimalForString(ceTotalLimit) = DecimalForString(ContractorsEquipmentScheduledItemsTotalLimitFromList(contractorsEquipScheduledItemsBackup)) Then
                        'new amount is same as amount from backup list; replace current list w/ backup list
                        contractorsEquipScheduledItems = CloneObject(contractorsEquipScheduledItemsBackup)
                    ElseIf contractorsEquipScheduledItems.Count = 0 OrElse contractorsEquipScheduledItems.Count = 1 Then
                        'only 0 or 1 item in list; add 1 if needed and then change amount
                        If contractorsEquipScheduledItems.Count = 0 Then 'this should never hit here since list amount was already more
                            Dim ce As New QuickQuoteContractorsEquipmentScheduledItem
                            contractorsEquipScheduledItems.Add(ce)
                        End If
                        contractorsEquipScheduledItems(0).Limit = ceTotalLimit
                    Else
                        'would need to remove some from one or more items in list
                        Dim diffToRemove As String = getDiff(ceListTotalLimit, ceTotalLimit)
                        'If IsPositiveDecimalString(diffToRemove) = True Then
                        'updated 5/29/2017
                        Dim resetItems As Boolean = False
                        If IsPositiveDecimalString(diffToRemove) = True AndAlso maintainItemsOnUnresolvedDifference = True Then
                            If applicableItemToApplyDifferenceTo = FirstLastOrAll.FirstOnly Then
                                Dim ce As QuickQuoteContractorsEquipmentScheduledItem = ContractorsEquipmentScheduledItemWithLimit(contractorsEquipScheduledItems, diffToRemove, startSearchOnFirstOrLast:=FirstOrLast.First)
                                If ce IsNot Nothing Then
                                    ce.Limit = getDiff(ce.Limit, diffToRemove)
                                Else
                                    resetItems = True
                                End If
                            ElseIf applicableItemToApplyDifferenceTo = FirstLastOrAll.LastOnly Then
                                Dim ce As QuickQuoteContractorsEquipmentScheduledItem = ContractorsEquipmentScheduledItemWithLimit(contractorsEquipScheduledItems, diffToRemove, startSearchOnFirstOrLast:=FirstOrLast.Last)
                                If ce IsNot Nothing Then
                                    ce.Limit = getDiff(ce.Limit, diffToRemove)
                                Else
                                    resetItems = True
                                End If
                            Else 'All
                                If treatAmountsAsIntegerOverDecimal = True Then 'added IF 6/6/2017; original logic in ELSE
                                    'note: will round down when removing
                                    Dim ints As List(Of Integer) = IntegersSplitAsEvenlyAsPossible(IntegerForString(ConvertedDecimalString(diffToRemove, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundDown)), contractorsEquipScheduledItems.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If ints IsNot Nothing AndAlso ints.Count = contractorsEquipScheduledItems.Count Then
                                        'validate all 1st to make sure there won't be any negatives
                                        Dim needToReCalculateAfterResettingForNegatives As Boolean = False
                                        Dim ceCounter As Integer = 0
                                        Dim itemNumstoIgnoreOnNextDiffSplit As New List(Of Integer) 'need to instantiate here so count can come back, even when 0
                                        For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                            ceCounter += 1
                                            Dim currIntegerToSubtract As Integer = ints(ceCounter - 1)
                                            'ce.Limit = getDiff(ce.Limit, currIntegerToSubtract.ToString)
                                            Dim currEstimatedLimit As String = getDiff(ce.Limit, currIntegerToSubtract.ToString)
                                            If IntegerForString(currEstimatedLimit) > 0 Then
                                                'okay
                                            Else
                                                'would be negative
                                                If IntegerForString(ce.Limit) > 1 Then
                                                    ce.Limit = "1.00"
                                                Else
                                                    'already 0... or below 1.00
                                                End If
                                                itemNumstoIgnoreOnNextDiffSplit.Add(ceCounter)
                                                needToReCalculateAfterResettingForNegatives = True
                                            End If
                                        Next
                                        Dim okayToContinue As Boolean = True
                                        If needToReCalculateAfterResettingForNegatives = True Then
                                            ceListTotalLimit = ContractorsEquipmentScheduledItemsTotalLimitFromList(contractorsEquipScheduledItems)
                                            diffToRemove = getDiff(ceListTotalLimit, ceTotalLimit)
                                            If IsPositiveDecimalString(diffToRemove) = True Then
                                                'note: will round down when removing
                                                ints = IntegersSplitAsEvenlyAsPossible(IntegerForString(ConvertedDecimalString(diffToRemove, 0, roundOverTruncate:=True, roundUpOrDownWhenZeroDecimalPlaces:=RoundUpOrDown.RoundDown)), contractorsEquipScheduledItems.Count - itemNumstoIgnoreOnNextDiffSplit.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                                If ints IsNot Nothing AndAlso ints.Count = contractorsEquipScheduledItems.Count - itemNumstoIgnoreOnNextDiffSplit.Count Then
                                                    'validate one more time and bail if no good
                                                    ceCounter = 0
                                                    Dim ceValidCounter As Integer = 0
                                                    For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                                        ceCounter += 1
                                                        If itemNumstoIgnoreOnNextDiffSplit.Contains(ceCounter) = False Then
                                                            ceValidCounter += 1
                                                            Dim currIntegerToSubtract As Integer = ints(ceValidCounter - 1)
                                                            Dim currEstimatedLimit As String = getDiff(ce.Limit, currIntegerToSubtract.ToString)
                                                            If IntegerForString(currEstimatedLimit) > 0 Then
                                                                'okay
                                                            Else
                                                                'would be negative
                                                                okayToContinue = False
                                                                Exit For
                                                            End If
                                                        End If
                                                    Next
                                                Else
                                                    okayToContinue = False
                                                End If
                                            Else
                                                okayToContinue = False
                                            End If
                                        End If
                                        If okayToContinue = True Then
                                            ceCounter = 0
                                            Dim ceValidCounter As Integer = 0
                                            For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                                ceCounter += 1
                                                If itemNumstoIgnoreOnNextDiffSplit.Contains(ceCounter) = False Then
                                                    ceValidCounter += 1
                                                    Dim currIntegerToSubtract As Integer = ints(ceValidCounter - 1)
                                                    ce.Limit = getDiff(ce.Limit, currIntegerToSubtract.ToString)
                                                End If
                                            Next
                                        Else
                                            resetItems = True
                                        End If
                                    Else
                                        resetItems = True
                                    End If
                                Else
                                    Dim decs As List(Of Decimal) = DecimalsSplitAsEvenlyAsPossible(DecimalForString(diffToRemove), contractorsEquipScheduledItems.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                    If decs IsNot Nothing AndAlso decs.Count = contractorsEquipScheduledItems.Count Then
                                        'validate all 1st to make sure there won't be any negatives
                                        Dim needToReCalculateAfterResettingForNegatives As Boolean = False
                                        Dim ceCounter As Integer = 0
                                        Dim itemNumstoIgnoreOnNextDiffSplit As New List(Of Integer) 'need to instantiate here so count can come back, even when 0
                                        For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                            ceCounter += 1
                                            Dim currDecimalToSubtract As Decimal = decs(ceCounter - 1)
                                            'ce.Limit = getDiff(ce.Limit, currDecimalToSubtract.ToString)
                                            Dim currEstimatedLimit As String = getDiff(ce.Limit, currDecimalToSubtract.ToString)
                                            If DecimalForString(currEstimatedLimit) > CDec(0) Then
                                                'okay
                                            Else
                                                'would be negative
                                                If DecimalForString(ce.Limit) > CDec(".01") Then
                                                    ce.Limit = ".01"
                                                Else
                                                    'already 0... or below .01
                                                End If
                                                itemNumstoIgnoreOnNextDiffSplit.Add(ceCounter)
                                                needToReCalculateAfterResettingForNegatives = True
                                            End If
                                        Next
                                        Dim okayToContinue As Boolean = True
                                        If needToReCalculateAfterResettingForNegatives = True Then
                                            ceListTotalLimit = ContractorsEquipmentScheduledItemsTotalLimitFromList(contractorsEquipScheduledItems)
                                            diffToRemove = getDiff(ceListTotalLimit, ceTotalLimit)
                                            If IsPositiveDecimalString(diffToRemove) = True Then
                                                decs = DecimalsSplitAsEvenlyAsPossible(DecimalForString(diffToRemove), contractorsEquipScheduledItems.Count - itemNumstoIgnoreOnNextDiffSplit.Count, remainderGoesToFirstOrLastItems:=firstOrLastItemOrderWhenApplyingDifferenceToAll)
                                                If decs IsNot Nothing AndAlso decs.Count = contractorsEquipScheduledItems.Count - itemNumstoIgnoreOnNextDiffSplit.Count Then
                                                    'validate one more time and bail if no good
                                                    ceCounter = 0
                                                    Dim ceValidCounter As Integer = 0
                                                    For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                                        ceCounter += 1
                                                        If itemNumstoIgnoreOnNextDiffSplit.Contains(ceCounter) = False Then
                                                            ceValidCounter += 1
                                                            Dim currDecimalToSubtract As Decimal = decs(ceValidCounter - 1)
                                                            Dim currEstimatedLimit As String = getDiff(ce.Limit, currDecimalToSubtract.ToString)
                                                            If DecimalForString(currEstimatedLimit) > CDec(0) Then
                                                                'okay
                                                            Else
                                                                'would be negative
                                                                okayToContinue = False
                                                                Exit For
                                                            End If
                                                        End If
                                                    Next
                                                Else
                                                    okayToContinue = False
                                                End If
                                            Else
                                                okayToContinue = False
                                            End If
                                        End If
                                        If okayToContinue = True Then
                                            ceCounter = 0
                                            Dim ceValidCounter As Integer = 0
                                            For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                                ceCounter += 1
                                                If itemNumstoIgnoreOnNextDiffSplit.Contains(ceCounter) = False Then
                                                    ceValidCounter += 1
                                                    Dim currDecimalToSubtract As Decimal = decs(ceValidCounter - 1)
                                                    ce.Limit = getDiff(ce.Limit, currDecimalToSubtract.ToString)
                                                End If
                                            Next
                                        Else
                                            resetItems = True
                                        End If
                                    Else
                                        resetItems = True
                                    End If
                                End If
                            End If
                        Else
                            'couldn't figure out difference; just wipe out list and add 1 item for amount
                            'updated 5/29/2017
                            resetItems = True
                        End If
                        'added 5/29/2017 to keep logic in one spot
                        If resetItems = True Then
                            'contractorsEquipScheduledItemsBackup = CloneObject(contractorsEquipScheduledItems) 'backup original list first; already have logic in place for backup in this route
                            ClearOutContractorsEquipmentScheduledItemsListAndAddOne(contractorsEquipScheduledItems, limitToUse:=ceTotalLimit, maintainOneItemFromOriginalList:=maintainOneItemFromOriginalListWhenResetting, maintainFirstOrLastItem:=maintainFirstOrLastItem)
                        End If
                    End If
                    If updateBackupListBeforeRemoving = True Then 'added IF 6/5/2017
                        contractorsEquipScheduledItemsBackup = newContEquipSchedItemsBackup
                    End If

                    'contractorsEquipScheduledItemsBackup = CloneObject(contractorsEquipScheduledItems)
                    'Dim diff As Integer = contractorsEquipScheduledItems.Count - aiCount
                    'Do Until contractorsEquipScheduledItems.Count = aiCount
                    '    If contractorsEquipScheduledItems.Count <= aiCount Then
                    '        Exit Do
                    '    End If
                    '    If aiCount < contractorsEquipScheduledItems.Count Then
                    '        Dim ai As QuickQuoteContractorsEquipmentScheduledItem = contractorsEquipScheduledItems(contractorsEquipScheduledItems.Count - 1)
                    '        If ai IsNot Nothing Then
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        End If
                    '        'contractorsEquipScheduledItems.Remove(ai) 'not sure if this will remove it if it's nothing
                    '        contractorsEquipScheduledItems.RemoveAt(contractorsEquipScheduledItems.Count - 1) 'this should remove anything from that index, even an item that is nothing
                    '        If contractorsEquipScheduledItems.Count = aiCount Then
                    '            Exit Do
                    '        End If
                    '    End If
                    'Loop
                Else
                    'same amount; do nothing
                End If
            Else
                If contractorsEquipScheduledItems IsNot Nothing AndAlso contractorsEquipScheduledItems.Count > 0 Then
                    'clear out list; maybe backup 1st
                    If updateBackupListBeforeRemoving = True Then 'added IF 6/5/2017
                        contractorsEquipScheduledItemsBackup = CloneObject(contractorsEquipScheduledItems)
                    End If
                    For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                        If ce IsNot Nothing Then
                            ce.Dispose()
                            ce = Nothing
                        End If
                    Next
                    contractorsEquipScheduledItems.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Sub ClearOutContractorsEquipmentScheduledItemsListAndAddOne(ByRef contractorsEquipScheduledItems As List(Of QuickQuoteContractorsEquipmentScheduledItem), Optional ByVal limitToUse As String = "", Optional ByVal maintainOneItemFromOriginalList As Boolean = False, Optional ByVal maintainFirstOrLastItem As FirstOrLast = FirstOrLast.First)
            If contractorsEquipScheduledItems Is Nothing Then
                contractorsEquipScheduledItems = New List(Of QuickQuoteContractorsEquipmentScheduledItem)
            End If
            Dim addDummyItem As Boolean = False
            If contractorsEquipScheduledItems.Count > 0 Then
                If maintainOneItemFromOriginalList = True Then
                    addDummyItem = False 'redundant
                    If contractorsEquipScheduledItems.Count > 1 Then
                        If maintainFirstOrLastItem = Nothing Then 'should be same as First anyway since value is 0
                            maintainFirstOrLastItem = FirstOrLast.First
                        End If
                        Dim indexesToRemove As New List(Of Integer)
                        For i As Integer = 0 To contractorsEquipScheduledItems.Count - 1
                            Dim addIndex As Boolean = True
                            If i = 0 Then
                                If maintainFirstOrLastItem = FirstOrLast.First Then
                                    addIndex = False
                                Else
                                    addIndex = True 'redundant
                                End If
                            ElseIf i = contractorsEquipScheduledItems.Count - 1 Then
                                If maintainFirstOrLastItem = FirstOrLast.Last Then
                                    addIndex = False
                                Else
                                    addIndex = True 'redundant
                                End If
                            Else
                                addIndex = True 'redundant
                            End If
                            If addIndex = True Then
                                indexesToRemove.Add(i)
                            End If
                        Next
                        'now make sure there is all but 1 in index list and then remove all others
                        If indexesToRemove.Count = contractorsEquipScheduledItems.Count - 1 Then
                            'correct # in list; now remove them starting w/ last index
                            RemoveQuickQuoteContractorsEquipmentScheduledItemsByIndex(contractorsEquipScheduledItems, indexesToRemove)
                        Else
                            'manually clear list and re-add 1st/last item
                            Dim ceToMaintain As QuickQuoteContractorsEquipmentScheduledItem = Nothing
                            If maintainFirstOrLastItem = FirstOrLast.First Then
                                ceToMaintain = CloneObject(contractorsEquipScheduledItems(0))
                            Else 'last
                                ceToMaintain = CloneObject(contractorsEquipScheduledItems(contractorsEquipScheduledItems.Count - 1))
                            End If
                            For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                                If ce IsNot Nothing Then
                                    ce.Dispose()
                                    ce = Nothing
                                End If
                            Next
                            contractorsEquipScheduledItems.Clear()
                            If ceToMaintain IsNot Nothing Then
                                contractorsEquipScheduledItems.Add(ceToMaintain)
                            Else
                                'unable to set item to maintain
                                addDummyItem = True
                            End If
                        End If
                    Else
                        'should only be 1 item in list anyway
                    End If
                    If IsPositiveDecimalString(limitToUse) = True Then
                        contractorsEquipScheduledItems(0).Limit = limitToUse
                    Else
                        contractorsEquipScheduledItems(0).Limit = ""
                    End If
                Else
                    'clear out all and then add one
                    addDummyItem = True
                    For Each ce As QuickQuoteContractorsEquipmentScheduledItem In contractorsEquipScheduledItems
                        If ce IsNot Nothing Then
                            ce.Dispose()
                            ce = Nothing
                        End If
                    Next
                    contractorsEquipScheduledItems.Clear()
                End If
            Else
                addDummyItem = True
            End If
            If addDummyItem = True Then
                Dim ce As New QuickQuoteContractorsEquipmentScheduledItem
                If IsPositiveDecimalString(limitToUse) = True Then
                    ce.Limit = limitToUse
                End If
                contractorsEquipScheduledItems.Add(ce)
            End If
        End Sub
        'added 5/29/2017
        Public Sub RemoveQuickQuoteContractorsEquipmentScheduledItemsByIndex(ByRef contractorsEquipScheduledItems As List(Of QuickQuoteContractorsEquipmentScheduledItem), ByVal contractorsEquipScheduledItemIndexList As List(Of Integer))
            If contractorsEquipScheduledItems IsNot Nothing AndAlso contractorsEquipScheduledItems.Count > 0 AndAlso contractorsEquipScheduledItemIndexList IsNot Nothing AndAlso contractorsEquipScheduledItemIndexList.Count > 0 Then
                contractorsEquipScheduledItemIndexList.Sort() 'put them in order 1st
                contractorsEquipScheduledItemIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In contractorsEquipScheduledItemIndexList
                    RemoveQuickQuoteContractorsEquipmentScheduledItemByIndex(contractorsEquipScheduledItems, i)
                Next
            End If
            'note: could also return removedCount as optional byref param
        End Sub
        Public Sub RemoveQuickQuoteContractorsEquipmentScheduledItemByIndex(ByRef contractorsEquipScheduledItems As List(Of QuickQuoteContractorsEquipmentScheduledItem), ByVal ceIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If contractorsEquipScheduledItems IsNot Nothing AndAlso ceIndex >= 0 AndAlso contractorsEquipScheduledItems.Count >= CInt(ceIndex + 1) Then
                contractorsEquipScheduledItems.RemoveAt(ceIndex)
                removed = True
            End If
        End Sub
        'added 5/29/2017
        Public Function HasContractorsEquipmentScheduledItemWithLimit(ByRef contEquips As List(Of QuickQuoteContractorsEquipmentScheduledItem), ByVal limit As String) As Boolean
            Dim hasItem As Boolean = False

            Dim ce As QuickQuoteContractorsEquipmentScheduledItem = ContractorsEquipmentScheduledItemWithLimit(contEquips, limit)
            If ce IsNot Nothing Then
                hasItem = True
            End If

            Return hasItem
        End Function
        Public Function ContractorsEquipmentScheduledItemWithLimit(ByRef contEquips As List(Of QuickQuoteContractorsEquipmentScheduledItem), ByVal limit As String, Optional ByVal startSearchOnFirstOrLast As FirstOrLast = FirstOrLast.First) As QuickQuoteContractorsEquipmentScheduledItem
            Dim ce As QuickQuoteContractorsEquipmentScheduledItem = Nothing

            If contEquips IsNot Nothing AndAlso contEquips.Count > 0 Then
                If startSearchOnFirstOrLast = FirstOrLast.Last Then
                    Dim currIndex As Integer = contEquips.Count - 1
                    Dim doneSearching As Boolean = False
                    Do Until doneSearching = True
                        If doneSearching = False AndAlso currIndex >= 0 Then
                            Dim si As QuickQuoteContractorsEquipmentScheduledItem = contEquips(currIndex)
                            If si IsNot Nothing Then
                                If DecimalForString(si.Limit) >= DecimalForString(limit) Then
                                    ce = si
                                    doneSearching = True
                                    Exit Do
                                End If
                            End If
                        Else
                            Exit Do
                        End If
                        currIndex -= 1
                        If currIndex < 0 Then
                            Exit Do
                        End If
                    Loop
                Else 'First
                    For Each si As QuickQuoteContractorsEquipmentScheduledItem In contEquips
                        If si IsNot Nothing Then
                            If DecimalForString(si.Limit) >= DecimalForString(limit) Then
                                ce = si
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return ce
        End Function
        Public Enum FirstLastOrAll
            FirstOnly = 0
            LastOnly = 1
            All = 2
        End Enum
        Public Function IntegersSplitAsEvenlyAsPossible(ByVal total As Integer, ByVal numberOfIntegersToReturn As Integer, Optional ByVal remainderGoesToFirstOrLastItems As FirstOrLast = FirstOrLast.First) As List(Of Integer)
            Dim ints As List(Of Integer) = Nothing

            If numberOfIntegersToReturn > 0 Then
                ints = New List(Of Integer)

                Dim initialIntPerItem As Integer = 0
                If total <> 0 Then
                    'example 29 / 3 = 9.666666666666667 --> 1st give 9 to each of 3 (subtract remainder from quotient); next subtract currTotal (9 x 3 = 27) from startTotal = 2; next go through 3 items and give 1 to each until extras SUM up (1 to 1st and 1 to 2nd) --> 10 to 1st, 10 to 2nd, and 9 to 3rd
                    Dim divQuotient As Decimal = total / numberOfIntegersToReturn '9.666666666666667
                    Dim divRemainder As Decimal = total Mod numberOfIntegersToReturn '.666666666666667
                    initialIntPerItem = CInt(divQuotient - divRemainder)

                End If

                Do Until ints.Count = numberOfIntegersToReturn
                    If ints.Count < numberOfIntegersToReturn Then
                        ints.Add(initialIntPerItem)
                        If ints.Count >= numberOfIntegersToReturn Then
                            Exit Do
                        End If
                    Else
                        Exit Do
                    End If
                Loop

                Dim remainderToApply As Integer = total - SumOfIntegers(ints)
                If remainderToApply <> 0 AndAlso remainderGoesToFirstOrLastItems = Nothing Then 'shouldn't hit since First is 0 anyway
                    remainderGoesToFirstOrLastItems = FirstOrLast.First
                End If
                If remainderToApply > 0 Then
                    'add 1 to items in order until the SUM equals the total
                    Dim remainderApplied As Integer = 0
                    If remainderGoesToFirstOrLastItems = FirstOrLast.Last Then
                        Dim currIndex As Integer = ints.Count - 1
                        Do Until remainderApplied = remainderToApply
                            If remainderApplied < remainderToApply AndAlso currIndex >= 0 Then
                                ints(currIndex) += 1
                                remainderApplied += 1
                                If remainderApplied >= remainderToApply Then
                                    Exit Do
                                End If
                            Else
                                Exit Do
                            End If
                            currIndex -= 1
                            If currIndex < 0 Then
                                Exit Do
                            End If
                        Loop
                    Else 'First
                        For i As Integer = 0 To ints.Count - 1
                            If remainderApplied < remainderToApply Then
                                ints(i) += 1
                                remainderApplied += 1
                                If remainderApplied >= remainderToApply Then
                                    Exit For
                                End If
                            Else
                                Exit For
                            End If
                        Next
                    End If
                ElseIf remainderToApply < 0 Then
                    'subtract 1 from items in order until the SUM equals the total
                    Dim remainderToSubtract As Integer = CInt(Replace(remainderToApply.ToString, "-", ""))
                    Dim remainderSubtracted As Integer = 0
                    If remainderGoesToFirstOrLastItems = FirstOrLast.Last Then
                        Dim currIndex As Integer = ints.Count - 1
                        Do Until remainderSubtracted = remainderToSubtract
                            If remainderSubtracted < remainderToSubtract AndAlso currIndex >= 0 Then
                                ints(currIndex) -= 1
                                remainderSubtracted += 1
                                If remainderSubtracted >= remainderToSubtract Then
                                    Exit Do
                                End If
                            Else
                                Exit Do
                            End If
                            currIndex -= 1
                            If currIndex < 0 Then
                                Exit Do
                            End If
                        Loop
                    Else 'First
                        For i As Integer = 0 To ints.Count - 1
                            If remainderSubtracted < remainderToSubtract Then
                                ints(i) -= 1
                                remainderSubtracted += 1
                                If remainderSubtracted >= remainderToSubtract Then
                                    Exit For
                                End If
                            Else
                                Exit For
                            End If
                        Next
                    End If
                Else
                    'all good; nothing left over... must've split equally
                End If

            End If

            Return ints
        End Function
        Public Function SumOfIntegers(ByVal ints As List(Of Integer)) As Integer
            Dim intSum As Integer = 0

            If ints IsNot Nothing AndAlso ints.Count > 0 Then
                For Each int As Integer In ints
                    If int <> 0 Then
                        intSum += int
                    End If
                Next
            End If

            Return intSum
        End Function
        Public Function DecimalsSplitAsEvenlyAsPossible(ByVal total As Decimal, ByVal numberOfDecimalsToReturn As Integer, Optional ByVal remainderGoesToFirstOrLastItems As FirstOrLast = FirstOrLast.First) As List(Of Decimal)
            Dim decs As List(Of Decimal) = Nothing

            If numberOfDecimalsToReturn > 0 Then
                decs = New List(Of Decimal)

                Dim initialDecPerItem As Decimal = CDec(0)
                If total <> CDec(0) Then
                    'example 29 / 3 = 9.666666666666667 --> 1st give 9.66 to each of 3 (drop everything after 2nd decimal place from quotient); next subtract currTotal (9.66 x 3 = 28.98) from startTotal (29) = .02; ; next go through 3 items and give .01 to each until extras SUM up (.01 to 1st and .01 to 2nd) --> 9.67 to 1st, 9.67 to 2nd, and 9.66 to 3rd
                    Dim divQuotient As Decimal = total / numberOfDecimalsToReturn '9.666666666666667
                    initialDecPerItem = CDec(ConvertedDecimalString(divQuotient, 2, roundOverTruncate:=False))

                End If

                Do Until decs.Count = numberOfDecimalsToReturn
                    If decs.Count < numberOfDecimalsToReturn Then
                        decs.Add(initialDecPerItem)
                        If decs.Count >= numberOfDecimalsToReturn Then
                            Exit Do
                        End If
                    Else
                        Exit Do
                    End If
                Loop

                Dim remainderToApply As Decimal = total - SumOfDecimals(decs)
                If remainderToApply <> CDec(0) AndAlso remainderGoesToFirstOrLastItems = Nothing Then 'shouldn't hit since First is 0 anyway
                    remainderGoesToFirstOrLastItems = FirstOrLast.First
                End If
                If remainderToApply > CDec(0) Then
                    'add 1 to items in order until the SUM equals the total
                    Dim remainderApplied As Decimal = CDec(0)
                    If remainderGoesToFirstOrLastItems = FirstOrLast.Last Then
                        Dim currIndex As Integer = decs.Count - 1
                        Do Until remainderApplied = remainderToApply
                            If remainderApplied < remainderToApply AndAlso currIndex >= 0 Then
                                decs(currIndex) += CDec(".01")
                                remainderApplied += CDec(".01")
                                If remainderApplied >= remainderToApply Then
                                    Exit Do
                                End If
                            Else
                                Exit Do
                            End If
                            currIndex -= 1
                            If currIndex < 0 Then
                                Exit Do
                            End If
                        Loop
                    Else 'First
                        For i As Integer = 0 To decs.Count - 1
                            If remainderApplied < remainderToApply Then
                                decs(i) += CDec(".01")
                                remainderApplied += CDec(".01")
                                If remainderApplied >= remainderToApply Then
                                    Exit For
                                End If
                            Else
                                Exit For
                            End If
                        Next
                    End If
                ElseIf remainderToApply < CDec(0) Then
                    'subtract 1 from items in order until the SUM equals the total
                    Dim remainderToSubtract As Decimal = CDec(Replace(remainderToApply.ToString, "-", ""))
                    Dim remainderSubtracted As Decimal = CDec(0)
                    If remainderGoesToFirstOrLastItems = FirstOrLast.Last Then
                        Dim currIndex As Integer = decs.Count - 1
                        Do Until remainderSubtracted = remainderToSubtract
                            If remainderSubtracted < remainderToSubtract AndAlso currIndex >= 0 Then
                                decs(currIndex) -= CDec(".01")
                                remainderSubtracted += CDec(".01")
                                If remainderSubtracted >= remainderToSubtract Then
                                    Exit Do
                                End If
                            Else
                                Exit Do
                            End If
                            currIndex -= 1
                            If currIndex < 0 Then
                                Exit Do
                            End If
                        Loop
                    Else 'First
                        For i As Integer = 0 To decs.Count - 1
                            If remainderSubtracted < remainderToSubtract Then
                                decs(i) -= CDec(".01")
                                remainderSubtracted += CDec(".01")
                                If remainderSubtracted >= remainderToSubtract Then
                                    Exit For
                                End If
                            Else
                                Exit For
                            End If
                        Next
                    End If
                Else
                    'all good; nothing left over... must've split equally
                End If

            End If

            Return decs
        End Function
        Public Function SumOfDecimals(ByVal decs As List(Of Decimal)) As Decimal
            Dim decSum As Decimal = CDec(0)

            If decs IsNot Nothing AndAlso decs.Count > 0 Then
                For Each dec As Decimal In decs
                    If dec <> CDec(0) Then
                        decSum += dec
                    End If
                Next
            End If

            Return decSum
        End Function

        Public Function ConvertQQLobIdToQQLobType(ByVal lobId As String) As QuickQuoteObject.QuickQuoteLobType
            Dim returnVar As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
            Dim chc As New CommonHelperClass

            If chc.NumericStringComparison(lobId, CommonHelperClass.ComparisonOperators.GreaterThanOrEqual, "0") Then
                If System.Enum.TryParse(Of QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteLobType)(GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, lobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), returnVar) = False Then
                    returnVar = QuickQuoteObject.QuickQuoteLobType.None
                End If
            End If

            Return returnVar
        End Function

        'Public Function ConvertedDecimalString(ByVal input As String, ByVal numberOfDecimalPlaces As Integer, Optional ByVal roundOverTruncate As Boolean = False) As String
        'updated 6/6/2017 w/ optional param to round up to next whole number when zeroDecimalPlaces
        Public Function ConvertedDecimalString(ByVal input As String, ByVal numberOfDecimalPlaces As Integer, Optional ByVal roundOverTruncate As Boolean = False, Optional ByVal roundUpOrDownWhenZeroDecimalPlaces As RoundUpOrDown = RoundUpOrDown.None) As String
            Dim output As String = "0"

            If IsNumeric(input) = True Then
                output = Trim(input)
            End If

            If numberOfDecimalPlaces < 0 Then
                numberOfDecimalPlaces = 0
            End If

            If roundOverTruncate = True Then
                If numberOfDecimalPlaces = 0 AndAlso IsZeroAmount(output) = False AndAlso roundUpOrDownWhenZeroDecimalPlaces <> RoundUpOrDown.None Then 'added IF 6/6/2017; original logic in ELSE
                    If roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundUpForPositiveAndDownForNegative Then
                        If IsPositiveDecimalString(output) = False Then
                            'must be negative since we're only evaluating when IsZeroAmount = False
                            roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundDown
                        Else
                            'positive
                            roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundUp
                        End If
                    End If
                    If roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundDown Then
                        output = Math.Floor(CDec(output)).ToString
                    Else
                        'round up
                        output = Math.Ceiling(CDec(output)).ToString
                    End If
                Else
                    output = Math.Round(CDec(output), numberOfDecimalPlaces, MidpointRounding.AwayFromZero).ToString 'added .ToString 6/6/2017
                End If
            Else
                'note: could probably just use number formatting... i.e. output = FormatNumber(output, NumDigitsAfterDecimal:=numberOfDecimalPlaces)
                'If output.Contains(".") = False AndAlso numberOfDecimalPlaces > 0 Then
                '    output &= "."
                'End If
                If output.Contains(".") = False Then
                    output &= "."
                End If
                Dim amtList As List(Of String) = ListOfStringFromString(output, delimiter:=".", returnPairForEachDelimiter:=True)
                If amtList IsNot Nothing AndAlso amtList.Count = 2 Then
                    Dim beforeDecimal As String = amtList(0)
                    Dim afterDecimal As String = amtList(1)
                    If numberOfDecimalPlaces = 0 Then
                        output = beforeDecimal
                    Else
                        afterDecimal = afterDecimal.PadRight(numberOfDecimalPlaces, "0")
                        If Len(afterDecimal) > numberOfDecimalPlaces Then
                            afterDecimal = Left(afterDecimal, numberOfDecimalPlaces)
                        End If
                        output = beforeDecimal & "." & afterDecimal
                    End If
                Else
                    'shouldn't get here, but will Round if all else fails
                    If numberOfDecimalPlaces = 0 AndAlso IsZeroAmount(output) = False AndAlso roundUpOrDownWhenZeroDecimalPlaces <> RoundUpOrDown.None Then 'added IF 6/6/2017; original logic in ELSE
                        If roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundUpForPositiveAndDownForNegative Then
                            If IsPositiveDecimalString(output) = False Then
                                'must be negative since we're only evaluating when IsZeroAmount = False
                                roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundDown
                            Else
                                'positive
                                roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundUp
                            End If
                        End If
                        If roundUpOrDownWhenZeroDecimalPlaces = RoundUpOrDown.RoundDown Then
                            output = Math.Floor(CDec(output)).ToString
                        Else
                            'round up
                            output = Math.Ceiling(CDec(output)).ToString
                        End If
                    Else
                        output = Math.Round(CDec(output), numberOfDecimalPlaces, MidpointRounding.AwayFromZero).ToString 'added .ToString 6/6/2017
                    End If
                End If
            End If

            Return output
        End Function
        'added 6/6/2017
        Public Enum RoundUpOrDown
            None = 0
            RoundUp = 1
            RoundDown = 2
            RoundUpForPositiveAndDownForNegative = 3
        End Enum

        'added 5/18/2017 for AdditionalInterests
        Public Enum TextMatchType
            None = 0
            TextOnly_MaintainCasing = 1
            TextOnly_IgnoreCasing = 2
            IntegerOnly = 3
            DecimalOnly = 4
            IntegerOrText_MaintainCasing = 5
            IntegerOrText_IgnoreCasing = 6
            DecimalOrText_MaintainCasing = 7
            DecimalOrText_IgnoreCasing = 8
            'added 6/2/2017
            TextOnly_MaintainCasing_MatchBeginning = 9
            TextOnly_IgnoreCasing_MatchBeginning = 10
            TextOnly_MaintainCasing_MatchEnd = 11
            TextOnly_IgnoreCasing_MatchEnd = 12
            TextOnly_MaintainCasing_MatchAnywhere = 13
            TextOnly_IgnoreCasing_MatchAnywhere = 14
            TextOnly_MaintainCasing_MatchBeginningAndEndsWithNumeric = 15
            TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric = 16
            TextOnly_MaintainCasing_MatchEndAndBeginsWithNumeric = 17
            TextOnly_IgnoreCasing_MatchEndAndBeginsWithNumeric = 18
            DateOnly = 19 'added 9/23/2017
            DateOrText_MaintainCasing = 20
            DateOrText_IgnoreCasing = 21
        End Enum
        Public Shared Function isTextMatch(ByVal val1 As String, ByVal val2 As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As Boolean
            Dim isMatch As Boolean = False

            If matchType = TextMatchType.None Then
                matchType = TextMatchType.TextOnly_IgnoreCasing
            End If

            Dim qqHelper As New QuickQuoteHelperClass

            Dim textMatch As Boolean = False
            Select Case matchType
                'Case TextMatchType.TextOnly_MaintainCasing, TextMatchType.IntegerOrText_MaintainCasing, TextMatchType.DecimalOrText_MaintainCasing
                'updated 9/23/2017
                Case TextMatchType.TextOnly_MaintainCasing, TextMatchType.IntegerOrText_MaintainCasing, TextMatchType.DecimalOrText_MaintainCasing, TextMatchType.DateOrText_MaintainCasing
                    If val1 = val2 Then
                        textMatch = True
                    End If
                    'Case TextMatchType.TextOnly_IgnoreCasing, TextMatchType.IntegerOrText_IgnoreCasing, TextMatchType.DecimalOrText_IgnoreCasing
                    'updated 9/23/2017
                Case TextMatchType.TextOnly_IgnoreCasing, TextMatchType.IntegerOrText_IgnoreCasing, TextMatchType.DecimalOrText_IgnoreCasing, TextMatchType.DateOrText_IgnoreCasing
                    If UCase(val1) = UCase(val2) Then
                        textMatch = True
                    End If
                Case Else
                    textMatch = False 'redundant
            End Select

            Dim intMatch As Boolean = False
            Select Case matchType
                Case TextMatchType.IntegerOnly, TextMatchType.IntegerOrText_MaintainCasing, TextMatchType.IntegerOrText_IgnoreCasing
                    If qqHelper.IntegerForString(val1) = qqHelper.IntegerForString(val2) Then
                        intMatch = True
                    End If
                Case Else
                    intMatch = False 'redundant
            End Select

            Dim decMatch As Boolean = False
            Select Case matchType
                Case TextMatchType.DecimalOnly, TextMatchType.DecimalOrText_MaintainCasing, TextMatchType.DecimalOrText_IgnoreCasing
                    If qqHelper.DecimalForString(val1) = qqHelper.DecimalForString(val2) Then
                        decMatch = True
                    End If
                Case Else
                    decMatch = False 'redundant
            End Select

            'added 9/23/2017
            Dim dateMatch As Boolean = False
            Select Case matchType
                Case TextMatchType.DateOnly, TextMatchType.DateOrText_MaintainCasing, TextMatchType.DateOrText_IgnoreCasing
                    If qqHelper.DateForString(val1) = qqHelper.DateForString(val2) Then
                        dateMatch = True
                    End If
                Case Else
                    dateMatch = False 'redundant
            End Select

            'added 6/2/2017
            Dim beginningMatch As Boolean = False
            Dim tentativeBeginningMatch As Boolean = False
            Dim endMatch As Boolean = False
            Dim tentativeEndMatch As Boolean = False
            Dim anywhereMatch As Boolean = False
            Select Case matchType
                Case TextMatchType.TextOnly_MaintainCasing_MatchBeginning, TextMatchType.TextOnly_IgnoreCasing_MatchBeginning, TextMatchType.TextOnly_MaintainCasing_MatchEnd, TextMatchType.TextOnly_IgnoreCasing_MatchEnd, TextMatchType.TextOnly_MaintainCasing_MatchAnywhere, TextMatchType.TextOnly_IgnoreCasing_MatchAnywhere, TextMatchType.TextOnly_MaintainCasing_MatchBeginningAndEndsWithNumeric, TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric, TextMatchType.TextOnly_MaintainCasing_MatchEndAndBeginsWithNumeric, TextMatchType.TextOnly_IgnoreCasing_MatchEndAndBeginsWithNumeric
                    Dim val1Length As Integer = 0
                    If String.IsNullOrEmpty(val1) = False Then
                        val1Length = val1.Length
                    End If
                    Dim val2Length As Integer = 0
                    If String.IsNullOrEmpty(val2) = False Then
                        val2Length = val2.Length
                    End If
                    Dim shorterWord As String = ""
                    Dim longerWord As String = ""
                    Dim longerWordPartToMatch As String = ""
                    Dim longerWordLeftoverPart As String = ""
                    If val1Length > val2Length Then
                        longerWord = val1
                        shorterWord = val2
                    ElseIf val2Length > val1Length Then
                        longerWord = val2
                        shorterWord = val1
                    Else
                        'equal; currently defaulting like val2 is longer... everything like contains and match left/right should work the same
                        longerWord = val2
                        shorterWord = val1
                    End If

                    'when number at beginning or end, look for it in longerWord; else make sure both words have number as 1st/last character
                    Select Case matchType
                        Case TextMatchType.TextOnly_MaintainCasing_MatchBeginning, TextMatchType.TextOnly_IgnoreCasing_MatchBeginning, TextMatchType.TextOnly_MaintainCasing_MatchBeginningAndEndsWithNumeric, TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric
                            'beginning
                            If shorterWord.Length > 0 Then
                                longerWordPartToMatch = Left(longerWord, shorterWord.Length)
                                If longerWord.Length > shorterWord.Length Then
                                    longerWordLeftoverPart = Right(longerWord, longerWord.Length - shorterWord.Length)
                                Else
                                    'must be same size
                                    longerWordLeftoverPart = ""
                                End If
                            Else
                                longerWordPartToMatch = ""
                                longerWordLeftoverPart = ""
                            End If
                            Dim tentativeMatchType As TextMatchType = TextMatchType.TextOnly_MaintainCasing
                            If matchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginning OrElse matchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric Then
                                tentativeMatchType = TextMatchType.TextOnly_IgnoreCasing
                            End If
                            tentativeBeginningMatch = isTextMatch(shorterWord, longerWordPartToMatch, matchType:=tentativeMatchType)
                            If tentativeBeginningMatch = True Then
                                If matchType = TextMatchType.TextOnly_MaintainCasing_MatchBeginningAndEndsWithNumeric OrElse matchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric Then
                                    If longerWordLeftoverPart.Length = 0 Then
                                        If longerWord.Length = 0 Then
                                            beginningMatch = False
                                        Else
                                            beginningMatch = IsNumeric(Right(longerWord, 1))
                                        End If
                                    Else
                                        beginningMatch = IsNumeric(longerWordLeftoverPart)
                                    End If
                                Else
                                    beginningMatch = True
                                End If
                            Else
                                beginningMatch = False 'redundant
                            End If
                        Case TextMatchType.TextOnly_MaintainCasing_MatchEnd, TextMatchType.TextOnly_IgnoreCasing_MatchEnd, TextMatchType.TextOnly_MaintainCasing_MatchEndAndBeginsWithNumeric, TextMatchType.TextOnly_IgnoreCasing_MatchEndAndBeginsWithNumeric
                            'end
                            If shorterWord.Length > 0 Then
                                longerWordPartToMatch = Right(longerWord, shorterWord.Length)
                                If longerWord.Length > shorterWord.Length Then
                                    longerWordLeftoverPart = Left(longerWord, longerWord.Length - shorterWord.Length)
                                Else
                                    'must be same size
                                    longerWordLeftoverPart = ""
                                End If
                            Else
                                longerWordPartToMatch = ""
                                longerWordLeftoverPart = ""
                            End If
                            Dim tentativeMatchType As TextMatchType = TextMatchType.TextOnly_MaintainCasing
                            If matchType = TextMatchType.TextOnly_IgnoreCasing_MatchEnd OrElse matchType = TextMatchType.TextOnly_IgnoreCasing_MatchEndAndBeginsWithNumeric Then
                                tentativeMatchType = TextMatchType.TextOnly_IgnoreCasing
                            End If
                            tentativeEndMatch = isTextMatch(shorterWord, longerWordPartToMatch, matchType:=tentativeMatchType)
                            If tentativeEndMatch = True Then
                                If matchType = TextMatchType.TextOnly_MaintainCasing_MatchEndAndBeginsWithNumeric OrElse matchType = TextMatchType.TextOnly_IgnoreCasing_MatchEndAndBeginsWithNumeric Then
                                    If longerWordLeftoverPart.Length = 0 Then
                                        If longerWord.Length = 0 Then
                                            endMatch = False
                                        Else
                                            endMatch = IsNumeric(Left(longerWord, 1))
                                        End If
                                    Else
                                        endMatch = IsNumeric(longerWordLeftoverPart)
                                    End If
                                Else
                                    endMatch = True
                                End If
                            Else
                                endMatch = False 'redundant
                            End If
                        Case TextMatchType.TextOnly_MaintainCasing_MatchAnywhere, TextMatchType.TextOnly_IgnoreCasing_MatchAnywhere
                            'anywhere
                            longerWordPartToMatch = ""
                            longerWordLeftoverPart = ""
                            If longerWord.Length = shorterWord.Length Then
                                Dim tentativeMatchType As TextMatchType = TextMatchType.TextOnly_MaintainCasing
                                If matchType = TextMatchType.TextOnly_IgnoreCasing_MatchAnywhere Then
                                    tentativeMatchType = TextMatchType.TextOnly_IgnoreCasing
                                End If
                                anywhereMatch = isTextMatch(shorterWord, longerWord, matchType:=tentativeMatchType)
                            Else
                                If matchType = TextMatchType.TextOnly_MaintainCasing_MatchAnywhere Then
                                    anywhereMatch = longerWord.Contains(shorterWord)
                                Else 'TextMatchType.TextOnly_IgnoreCasing_MatchAnywhere
                                    anywhereMatch = UCase(longerWord).Contains(UCase(shorterWord))
                                End If
                            End If
                        Case Else
                            beginningMatch = False 'redundant
                            endMatch = False 'redundant
                            anywhereMatch = False 'redundant
                    End Select
                Case Else
                    beginningMatch = False 'redundant
                    endMatch = False 'redundant
                    anywhereMatch = False 'redundant
            End Select

            'If textMatch = True OrElse intMatch = True OrElse decMatch = True Then
            'updated 6/3/2017
            'If textMatch = True OrElse intMatch = True OrElse decMatch = True OrElse beginningMatch = True OrElse endMatch = True OrElse anywhereMatch = True Then
            'updated 9/23/2017
            If textMatch = True OrElse intMatch = True OrElse decMatch = True OrElse dateMatch = True OrElse beginningMatch = True OrElse endMatch = True OrElse anywhereMatch = True Then
                isMatch = True
            End If

            Return isMatch
        End Function
        'added 5/27/2017
        Public Shared Function hasTextMatchInList(ByVal valToMatch As String, ByVal listToMatch As List(Of String), Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByRef matchingIndexes As List(Of Integer) = Nothing) As Boolean
            Dim hasMatch As Boolean = False
            matchingIndexes = Nothing

            If listToMatch IsNot Nothing AndAlso listToMatch.Count > 0 Then
                Dim currNum As Integer = 0
                For Each str As String In listToMatch
                    currNum += 1
                    If isTextMatch(valToMatch, str, matchType:=matchType) Then
                        hasMatch = True
                        If matchingIndexes Is Nothing Then
                            matchingIndexes = New List(Of Integer)
                        End If
                        matchingIndexes.Add(currNum - 1)
                    End If
                Next
            End If

            Return hasMatch
        End Function
        Public Shared Function QuickQuoteAdditionalInterestsForListId(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal listId As String, Optional ByVal cloneList As Boolean = False, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As List(Of QuickQuoteAdditionalInterest)
            Dim AIs As List(Of QuickQuoteAdditionalInterest) = Nothing

            'If matchType = TextMatchType.None Then
            '    matchType = TextMatchType.IntegerOrText_IgnoreCasing
            'End If

            'If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
            '    For Each ai As QuickQuoteAdditionalInterest In additionalInterests
            '        If ai IsNot Nothing AndAlso isTextMatch(ai.ListId, listId, matchType:=matchType) = True Then
            '            If AIs Is Nothing Then
            '                AIs = New List(Of QuickQuoteAdditionalInterest)
            '            End If
            '            If cloneList = True Then
            '                Dim qqHelper As New QuickQuoteHelperClass
            '                AIs.Add(qqHelper.CloneObject(ai))
            '            Else
            '                AIs.Add(ai)
            '            End If
            '        End If
            '    Next
            'End If
            'updated 6/3/2017 to use method that returns indexes
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(additionalInterests, listId, matchType:=matchType)
                'If indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                '    'put them in order 1st
                '    indexes.Sort()
                '    For Each i As Integer In indexes
                '        If additionalInterests.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                '            If AIs Is Nothing Then
                '                AIs = New List(Of QuickQuoteAdditionalInterest)
                '            End If
                '            If cloneList = True Then
                '                Dim qqHelper As New QuickQuoteHelperClass
                '                AIs.Add(qqHelper.CloneObject(additionalInterests.Item(i)))
                '            Else
                '                AIs.Add(additionalInterests.Item(i))
                '            End If
                '        End If
                '    Next
                'End If
                'updated 6/3/2017 to use new method that uses indexes
                AIs = QuickQuoteAdditionalInterestsForIndexes(additionalInterests, indexes, cloneList:=cloneList)
            End If

            Return AIs
        End Function
        'Public Shared Function QuickQuoteAdditionalInterestForListId(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal listId As String, Optional ByVal cloneAI As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As QuickQuoteAdditionalInterest
        'updated 6/3/2017 w/ optional param to returnNewIfNothing
        Public Shared Function QuickQuoteAdditionalInterestForListId(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal listId As String, Optional ByVal cloneAI As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing, Optional ByVal returnNewIfNothing As Boolean = True) As QuickQuoteAdditionalInterest
            Dim ai As QuickQuoteAdditionalInterest = Nothing

            Dim AIs As List(Of QuickQuoteAdditionalInterest) = QuickQuoteAdditionalInterestsForListId(additionalInterests, listId, cloneList:=cloneAI, matchType:=matchType)
            If AIs IsNot Nothing AndAlso AIs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    ai = AIs(0)
                Else
                    'last
                    ai = AIs(AIs.Count - 1)
                End If
            End If

            'added 6/3/2017
            If returnNewIfNothing = True AndAlso ai Is Nothing Then
                AddNewAdditionalInterestToList(additionalInterests, ai:=ai, listId:=listId)
            End If

            Return ai
        End Function
        'added 6/2/2017
        Public Shared Function QuickQuoteAdditionalInterestsForDescription(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal description As String, Optional ByVal cloneList As Boolean = False, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As List(Of QuickQuoteAdditionalInterest)
            Dim AIs As List(Of QuickQuoteAdditionalInterest) = Nothing

            'If matchType = TextMatchType.None Then
            '    matchType = TextMatchType.TextOnly_IgnoreCasing
            'End If

            'If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
            '    For Each ai As QuickQuoteAdditionalInterest In additionalInterests
            '        If ai IsNot Nothing AndAlso isTextMatch(ai.Description, description, matchType:=matchType) = True Then
            '            If AIs Is Nothing Then
            '                AIs = New List(Of QuickQuoteAdditionalInterest)
            '            End If
            '            If cloneList = True Then
            '                Dim qqHelper As New QuickQuoteHelperClass
            '                AIs.Add(qqHelper.CloneObject(ai))
            '            Else
            '                AIs.Add(ai)
            '            End If
            '        End If
            '    Next
            'End If
            'updated 6/3/2017 to use method that returns indexes
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForDescription(additionalInterests, description, matchType:=matchType)
                AIs = QuickQuoteAdditionalInterestsForIndexes(additionalInterests, indexes, cloneList:=cloneList)
            End If

            Return AIs
        End Function
        'Public Shared Function QuickQuoteAdditionalInterestForDescription(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal description As String, Optional ByVal cloneAI As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As QuickQuoteAdditionalInterest
        'updated 6/3/2017 w/ optional param to returnNewIfNothing
        Public Shared Function QuickQuoteAdditionalInterestForDescription(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal description As String, Optional ByVal cloneAI As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal returnNewIfNothing As Boolean = True) As QuickQuoteAdditionalInterest
            Dim ai As QuickQuoteAdditionalInterest = Nothing

            Dim AIs As List(Of QuickQuoteAdditionalInterest) = QuickQuoteAdditionalInterestsForDescription(additionalInterests, description, cloneList:=cloneAI, matchType:=matchType)
            If AIs IsNot Nothing AndAlso AIs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    ai = AIs(0)
                Else
                    'last
                    ai = AIs(AIs.Count - 1)
                End If
            End If

            'added 6/3/2017
            If returnNewIfNothing = True AndAlso ai Is Nothing Then
                AddNewAdditionalInterestToList(additionalInterests, ai:=ai, description:=description)
            End If

            Return ai
        End Function
        'added 6/3/2017
        Public Shared Function QuickQuoteAdditionalInterestsForOther(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal other As String, Optional ByVal cloneList As Boolean = False, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric) As List(Of QuickQuoteAdditionalInterest)
            Dim AIs As List(Of QuickQuoteAdditionalInterest) = Nothing

            'If matchType = TextMatchType.None Then
            '    matchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric
            'End If

            'If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
            '    For Each ai As QuickQuoteAdditionalInterest In additionalInterests
            '        If ai IsNot Nothing AndAlso isTextMatch(ai.Other, other, matchType:=matchType) = True Then
            '            If AIs Is Nothing Then
            '                AIs = New List(Of QuickQuoteAdditionalInterest)
            '            End If
            '            If cloneList = True Then
            '                Dim qqHelper As New QuickQuoteHelperClass
            '                AIs.Add(qqHelper.CloneObject(ai))
            '            Else
            '                AIs.Add(ai)
            '            End If
            '        End If
            '    Next
            'End If
            'updated 6/3/2017 to use method that returns indexes
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForOther(additionalInterests, other, matchType:=matchType)
                AIs = QuickQuoteAdditionalInterestsForIndexes(additionalInterests, indexes, cloneList:=cloneList)
            End If

            Return AIs
        End Function
        Public Shared Function QuickQuoteAdditionalInterestForOther(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal other As String, Optional ByVal cloneAI As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric, Optional ByVal returnNewIfNothing As Boolean = True) As QuickQuoteAdditionalInterest
            Dim ai As QuickQuoteAdditionalInterest = Nothing

            Dim AIs As List(Of QuickQuoteAdditionalInterest) = QuickQuoteAdditionalInterestsForOther(additionalInterests, other, cloneList:=cloneAI, matchType:=matchType)
            If AIs IsNot Nothing AndAlso AIs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    ai = AIs(0)
                Else
                    'last
                    ai = AIs(AIs.Count - 1)
                End If
            End If

            If returnNewIfNothing = True AndAlso ai Is Nothing Then
                AddNewAdditionalInterestToList(additionalInterests, ai:=ai, other:=other)
            End If

            Return ai
        End Function
        Public Shared Sub RemoveQuickQuoteAdditionalInterestsByIndex(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal additionalInterestIndexList As List(Of Integer))
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 AndAlso additionalInterestIndexList IsNot Nothing AndAlso additionalInterestIndexList.Count > 0 Then
                additionalInterestIndexList.Sort() 'put them in order 1st
                additionalInterestIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In additionalInterestIndexList
                    RemoveQuickQuoteAdditionalInterestByIndex(additionalInterests, i)
                Next
            End If
            'note: could also return removedCount as optional byref param
        End Sub
        Public Shared Sub RemoveQuickQuoteAdditionalInterestByIndex(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal aiIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If additionalInterests IsNot Nothing AndAlso aiIndex >= 0 AndAlso additionalInterests.Count >= CInt(aiIndex + 1) Then
                additionalInterests.RemoveAt(aiIndex)
                removed = True
            End If
        End Sub
        Public Shared Function QuickQuoteAdditionalInterestIndexesForListId(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal listId As String, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If matchType = TextMatchType.None Then
                matchType = TextMatchType.IntegerOrText_IgnoreCasing
            End If

            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim counter As Integer = 0
                For Each ai As QuickQuoteAdditionalInterest In additionalInterests
                    counter += 1
                    If ai IsNot Nothing AndAlso isTextMatch(ai.ListId, listId, matchType:=matchType) = True Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteAdditionalInterestIndexesForDescription(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal description As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If matchType = TextMatchType.None Then
                matchType = TextMatchType.TextOnly_IgnoreCasing
            End If

            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim counter As Integer = 0
                For Each ai As QuickQuoteAdditionalInterest In additionalInterests
                    counter += 1
                    If ai IsNot Nothing AndAlso isTextMatch(ai.Description, description, matchType:=matchType) = True Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteAdditionalInterestIndexesForOther(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal other As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If matchType = TextMatchType.None Then
                matchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric
            End If

            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim counter As Integer = 0
                For Each ai As QuickQuoteAdditionalInterest In additionalInterests
                    counter += 1
                    If ai IsNot Nothing AndAlso isTextMatch(ai.Other, other, matchType:=matchType) = True Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteAdditionalInterestsForIndexes(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteAdditionalInterest)
            Dim AIs As List(Of QuickQuoteAdditionalInterest) = Nothing

            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    'If additionalInterests.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                    'updated 9/16/2017
                    If i >= 0 AndAlso additionalInterests.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If AIs Is Nothing Then
                            AIs = New List(Of QuickQuoteAdditionalInterest)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            AIs.Add(qqHelper.CloneObject(additionalInterests.Item(i)))
                        Else
                            AIs.Add(additionalInterests.Item(i))
                        End If
                    End If
                Next
            End If

            Return AIs
        End Function
        Public Shared Sub AddNewAdditionalInterestToList(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), Optional ByRef ai As QuickQuoteAdditionalInterest = Nothing, Optional ByVal listId As String = "", Optional ByVal typeId As String = "", Optional ByVal description As String = "", Optional ByVal other As String = "")
            If ai Is Nothing Then
                ai = New QuickQuoteAdditionalInterest
            End If
            With ai
                .ListId = listId
                .TypeId = typeId
                .Description = description
                .Other = other
            End With
            If additionalInterests Is Nothing Then
                additionalInterests = New List(Of QuickQuoteAdditionalInterest)
            End If
            additionalInterests.Add(ai)
        End Sub
        Public Shared Sub RemoveQuickQuoteAdditionalInterestsForListId(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal listId As String, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing)
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(additionalInterests, listId, matchType:=matchType)
                RemoveQuickQuoteAdditionalInterestsByIndex(additionalInterests, indexes)
            End If
        End Sub
        Public Shared Sub RemoveQuickQuoteAdditionalInterestsForDescription(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal description As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing)
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForDescription(additionalInterests, description, matchType:=matchType)
                RemoveQuickQuoteAdditionalInterestsByIndex(additionalInterests, indexes)
            End If
        End Sub
        Public Shared Sub RemoveQuickQuoteAdditionalInterestsForOther(ByRef additionalInterests As List(Of QuickQuoteAdditionalInterest), ByVal other As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric)
            If additionalInterests IsNot Nothing AndAlso additionalInterests.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForOther(additionalInterests, other, matchType:=matchType)
                RemoveQuickQuoteAdditionalInterestsByIndex(additionalInterests, indexes)
            End If
        End Sub
        Public Shared Sub RemoveContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(ByRef qqo As QuickQuoteObject, Optional ByVal contractorsEquipmentScheduledItemNumber As Integer = 0)
            If qqo IsNot Nothing Then
                Dim qqHelper As New QuickQuoteHelperClass 'added 9/14/2018
                Dim qqLocations As List(Of QuickQuoteLocation) = qqHelper.AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        If l IsNot Nothing AndAlso l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                            For Each b As QuickQuoteBuilding In l.Buildings
                                If b IsNot Nothing Then
                                    If contractorsEquipmentScheduledItemNumber > 0 Then
                                        RemoveQuickQuoteAdditionalInterestsForOther(b.AdditionalInterests, "CE" & contractorsEquipmentScheduledItemNumber.ToString, matchType:=TextMatchType.TextOnly_IgnoreCasing)
                                    Else
                                        RemoveQuickQuoteAdditionalInterestsForOther(b.AdditionalInterests, "CE", matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric)
                                    End If
                                End If
                            Next
                        End If
                    Next
                End If
            End If
        End Sub
        Public Shared Function ContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(ByRef qqo As QuickQuoteObject, Optional ByVal contractorsEquipmentScheduledItemNumber As Integer = 0, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteAdditionalInterest)
            Dim AIs As List(Of QuickQuoteAdditionalInterest) = Nothing

            If qqo IsNot Nothing Then
                Dim qqHelper As New QuickQuoteHelperClass 'added 9/14/2018
                Dim qqLocations As List(Of QuickQuoteLocation) = qqHelper.AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        If l IsNot Nothing AndAlso l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                            For Each b As QuickQuoteBuilding In l.Buildings
                                If b IsNot Nothing Then
                                    Dim buildingAIs As List(Of QuickQuoteAdditionalInterest) = Nothing
                                    If contractorsEquipmentScheduledItemNumber > 0 Then
                                        buildingAIs = QuickQuoteAdditionalInterestsForOther(b.AdditionalInterests, "CE" & contractorsEquipmentScheduledItemNumber.ToString, cloneList:=cloneList, matchType:=TextMatchType.TextOnly_IgnoreCasing)
                                    Else
                                        buildingAIs = QuickQuoteAdditionalInterestsForOther(b.AdditionalInterests, "CE", cloneList:=cloneList, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginningAndEndsWithNumeric)
                                    End If
                                    If buildingAIs IsNot Nothing AndAlso buildingAIs.Count > 0 Then
                                        For Each bAI As QuickQuoteAdditionalInterest In buildingAIs
                                            If bAI IsNot Nothing Then
                                                If AIs Is Nothing Then
                                                    AIs = New List(Of QuickQuoteAdditionalInterest)
                                                End If
                                                AIs.Add(bAI)
                                            End If
                                        Next
                                    End If
                                End If
                            Next
                        End If
                    Next
                End If
            End If

            Return AIs
        End Function
        Public Shared Function ContractorsEquipmentScheduledItemNumsFoundInAdditionalInterestsFromAllBuildings(ByVal qqo As QuickQuoteObject) As List(Of Integer)
            Dim ceScheduledItemNums As List(Of Integer) = Nothing

            Dim AIs As List(Of QuickQuoteAdditionalInterest) = ContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(qqo, contractorsEquipmentScheduledItemNumber:=0, cloneList:=False)
            If AIs IsNot Nothing AndAlso AIs.Count > 0 Then
                Dim qqHelper As New QuickQuoteHelperClass
                For Each ai As QuickQuoteAdditionalInterest In AIs
                    If ai IsNot Nothing AndAlso ai.Other.Length > 2 AndAlso qqHelper.IsPositiveIntegerString(Right(ai.Other, ai.Other.Length - 2)) = True Then
                        If ceScheduledItemNums Is Nothing Then
                            ceScheduledItemNums = New List(Of Integer)
                        End If
                        Dim scheduledItemNumToAdd As Integer = qqHelper.IntegerForString(Right(ai.Other, ai.Other.Length - 2))
                        If ceScheduledItemNums.Contains(scheduledItemNumToAdd) = False Then
                            ceScheduledItemNums.Add(scheduledItemNumToAdd)
                        End If
                    End If
                Next
            End If

            Return ceScheduledItemNums
        End Function
        Public Shared Sub RemoveAllAdditionalInterestsFromContractorsEquipmentScheduledItems(ByRef qqo As QuickQuoteObject, Optional ByVal contractorsEquipmentScheduledItemNumber As Integer = 0)
            If qqo IsNot Nothing Then

                If qqo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso qqo.ContractorsEquipmentScheduledItems.Count > 0 Then
                    Dim siCounter As Integer = 0
                    For Each si As QuickQuoteContractorsEquipmentScheduledItem In qqo.ContractorsEquipmentScheduledItems
                        siCounter += 1
                        If contractorsEquipmentScheduledItemNumber <= 0 OrElse contractorsEquipmentScheduledItemNumber = siCounter Then
                            If si IsNot Nothing Then
                                Dim qqHelper As New QuickQuoteHelperClass
                                qqHelper.DisposeAdditionalInterests(si.AdditionalInterests)
                            End If
                        End If
                    Next
                End If

            End If
        End Sub
        Public Shared Sub UpdateBuildingAdditionalInterestsFromContractorsEquipmentScheduledItems(ByRef qqo As QuickQuoteObject)
            If qqo IsNot Nothing Then
                'If qqo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso qqo.ContractorsEquipmentScheduledItems.Count > 0 Then
                '    Dim ceScheduledItemNums As List(Of Integer) = ContractorsEquipmentScheduledItemNumsFoundInAdditionalInterestsFromAllBuildings(qqo)

                '    Dim siCounter As Integer = 0
                '    For Each si As QuickQuoteContractorsEquipmentScheduledItem In qqo.ContractorsEquipmentScheduledItems
                '        siCounter += 1
                '        If si IsNot Nothing AndAlso si.AdditionalInterests IsNot Nothing AndAlso si.AdditionalInterests.Count > 0 Then
                '            'need to copy AIs to 1st building; may need to reconcile existing AIs on building and/or make sure other buildings don't have these AIs
                '            'TO-DO
                '        Else
                '            'no AIs for this CE scheduled item; remove all found for this item
                '            RemoveContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(qqo, contractorsEquipmentScheduledItemNumber:=siCounter)
                '        End If
                '    Next

                '    If ceScheduledItemNums IsNot Nothing AndAlso ceScheduledItemNums.Count > 0 Then
                '        For Each n As Integer In ceScheduledItemNums
                '            If n > siCounter Then
                '                'CE scheduled item doesn't exit anymore; remove its related AIs
                '                RemoveContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(qqo, contractorsEquipmentScheduledItemNumber:=n)
                '            End If
                '        Next
                '    End If
                'Else
                '    'no CE scheduled items; remove all found
                '    RemoveContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(qqo)
                'End If
                'updated to just remove all CE scheduled item AIs up front and then add them back
                RemoveContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(qqo)
                If qqo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso qqo.ContractorsEquipmentScheduledItems.Count > 0 Then
                    Dim siCounter As Integer = 0
                    Dim qqB As QuickQuoteBuilding = Nothing
                    For Each si As QuickQuoteContractorsEquipmentScheduledItem In qqo.ContractorsEquipmentScheduledItems
                        siCounter += 1
                        If si IsNot Nothing AndAlso si.AdditionalInterests IsNot Nothing AndAlso si.AdditionalInterests.Count > 0 Then
                            'need to copy AIs to 1st building
                            If qqB Is Nothing Then
                                qqB = FirstBuilding(qqo, cloneBuilding:=False)
                            End If
                            If qqB IsNot Nothing Then
                                For Each ai As QuickQuoteAdditionalInterest In si.AdditionalInterests
                                    If ai IsNot Nothing Then
                                        Dim qqHelper As New QuickQuoteHelperClass
                                        Dim clonedAI As QuickQuoteAdditionalInterest = qqHelper.CloneObject(ai)
                                        If clonedAI IsNot Nothing Then
                                            clonedAI.Other = "CE" & siCounter.ToString
                                            clonedAI.Description = si.Description
                                            If qqB.AdditionalInterests Is Nothing Then
                                                qqB.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                                            End If
                                            qqB.AdditionalInterests.Add(clonedAI)
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Shared Sub UpdateContractorsEquipmentScheduledItemAdditionalInterestsFromBuildings(ByRef qqo As QuickQuoteObject)
            If qqo IsNot Nothing Then
                'will remove all CE scheduled item AIs up front and then add them back from buildings; shouldn't have anything up front but here just in case
                RemoveAllAdditionalInterestsFromContractorsEquipmentScheduledItems(qqo)
                If qqo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso qqo.ContractorsEquipmentScheduledItems.Count > 0 Then
                    Dim siCounter As Integer = 0
                    For Each si As QuickQuoteContractorsEquipmentScheduledItem In qqo.ContractorsEquipmentScheduledItems
                        siCounter += 1
                        If si IsNot Nothing Then
                            si.AdditionalInterests = ContractorsEquipmentScheduledItemAdditionalInterestsFromAllBuildings(qqo, contractorsEquipmentScheduledItemNumber:=siCounter, cloneList:=True)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Shared Function FirstBuilding(ByRef qqo As QuickQuoteObject, Optional ByVal cloneBuilding As Boolean = False) As QuickQuoteBuilding
            Dim qqB As QuickQuoteBuilding = Nothing

            If qqo IsNot Nothing Then
                Dim qqHelper As New QuickQuoteHelperClass 'added 9/14/2018
                Dim qqLocations As List(Of QuickQuoteLocation) = qqHelper.AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                    Dim exitLoop As Boolean = False 'added 6/10/2017 since code was actually overwriting the building and returning the last one
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        If l IsNot Nothing AndAlso l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                            For Each b As QuickQuoteBuilding In l.Buildings
                                If b IsNot Nothing Then
                                    If cloneBuilding = True Then
                                        'Dim qqHelper As New QuickQuoteHelperClass 'removed 9/14/2018
                                        qqB = qqHelper.CloneObject(b)
                                    Else
                                        qqB = b
                                    End If
                                    exitLoop = True
                                    Exit For 'added 6/10/2017 since code was actually overwriting the building and returning the last one
                                End If
                                If exitLoop = True Then 'added 6/10/2017 since code was actually overwriting the building and returning the last one
                                    Exit For
                                End If
                            Next
                        End If
                        If exitLoop = True Then 'added 6/10/2017 since code was actually overwriting the building and returning the last one
                            Exit For
                        End If
                    Next
                End If
            End If

            Return qqB
        End Function
        'added 6/10/2017; updated 6/11/2017
        Public Shared Function GetQuickQuoteBuilding(ByRef qqo As QuickQuoteObject, Optional ByVal locationNum As Integer = 0, Optional ByVal buildingNum As Integer = 0, Optional ByVal cloneBuilding As Boolean = False) As QuickQuoteBuilding
            Dim qqB As QuickQuoteBuilding = Nothing

            'update any #s less than 0; may not be needed
            If locationNum < 0 Then
                locationNum = 0
            End If
            If buildingNum < 0 Then
                buildingNum = 0
            End If

            'just return 1st building found if neither locationNum or buildingNum are specified
            If locationNum <= 0 AndAlso buildingNum <= 0 Then
                buildingNum = 1
            End If

            Dim firstBuildingLocNum As Integer = 0
            Dim firstBuildingBuildNum As Integer = 0
            Dim lastBuildingLocNum As Integer = 0
            Dim lastBuildingBuildNum As Integer = 0

            If qqo IsNot Nothing Then
                Dim qqHelper As New QuickQuoteHelperClass 'added 9/14/2018
                Dim qqLocations As List(Of QuickQuoteLocation) = qqHelper.AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                    'just return 1st building found if invalid locationNum
                    'If locationNum > qqo.Locations.Count Then
                    'updated 9/14/2018
                    If locationNum > qqLocations.Count Then
                        locationNum = 0
                        buildingNum = 1
                    End If
                    Dim currActualLocNum As Integer = 0
                    Dim currValidLocNum As Integer = 0
                    Dim currOverAllBuildNum As Integer = 0
                    Dim exitLoop As Boolean = False
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        currActualLocNum += 1
                        If l IsNot Nothing Then
                            currValidLocNum += 1
                            If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                                'just return 1st building found for location if invalid buildNum
                                If locationNum > 0 AndAlso locationNum = currValidLocNum AndAlso (buildingNum <= 0 OrElse buildingNum > l.Buildings.Count) Then
                                    buildingNum = 1
                                End If
                                Dim currLocActualBuildNum As Integer = 0
                                Dim currLocValidBuildNum As Integer = 0
                                Dim currLocFirstBuildNum As Integer = 0
                                Dim currLocLastBuildNum As Integer = 0
                                For Each b As QuickQuoteBuilding In l.Buildings
                                    currLocActualBuildNum += 1
                                    If b IsNot Nothing Then
                                        currOverAllBuildNum += 1
                                        currLocValidBuildNum += 1

                                        'set loc/build #s for 1st building found if needed
                                        If firstBuildingLocNum = 0 AndAlso firstBuildingBuildNum = 0 Then
                                            firstBuildingLocNum = currActualLocNum
                                            firstBuildingBuildNum = currLocActualBuildNum
                                        End If
                                        lastBuildingLocNum = currActualLocNum
                                        lastBuildingBuildNum = currLocActualBuildNum
                                        If currLocFirstBuildNum = 0 Then
                                            currLocFirstBuildNum = currLocActualBuildNum
                                        End If
                                        currLocLastBuildNum = currLocActualBuildNum

                                        Dim okayToGetBuilding As Boolean = False

                                        If locationNum > 0 Then
                                            'try to match location # and possibly building #
                                            If locationNum = currValidLocNum Then
                                                'match on location #; now possibly match on building # too
                                                If buildingNum > 0 Then
                                                    If buildingNum = currLocValidBuildNum Then
                                                        okayToGetBuilding = True
                                                    End If
                                                Else
                                                    'no building # specified; return 1st one of loc
                                                    okayToGetBuilding = True
                                                End If
                                            End If
                                        Else
                                            'no location # specified; just match on overall building #
                                            If buildingNum = currOverAllBuildNum Then
                                                okayToGetBuilding = True
                                            End If
                                        End If

                                        If okayToGetBuilding = True Then
                                            If cloneBuilding = True Then
                                                'Dim qqHelper As New QuickQuoteHelperClass 'removed 9/14/2018
                                                qqB = qqHelper.CloneObject(b)
                                            Else
                                                qqB = b
                                            End If
                                            exitLoop = True
                                            Exit For
                                        End If
                                    End If
                                    If exitLoop = True Then
                                        Exit For
                                    End If
                                Next
                                'if just match on location # but not building #, just return 1st building for location if possible... could also do last building for location specified
                                If qqB Is Nothing AndAlso exitLoop = False Then
                                    If locationNum = currValidLocNum AndAlso currLocFirstBuildNum > 0 Then
                                        'Dim b As QuickQuoteBuilding = qqo.Locations(currActualLocNum - 1).Buildings(currLocFirstBuildNum - 1)
                                        'updated 9/14/2018
                                        Dim b As QuickQuoteBuilding = qqLocations(currActualLocNum - 1).Buildings(currLocFirstBuildNum - 1)
                                        If cloneBuilding = True Then
                                            'Dim qqHelper As New QuickQuoteHelperClass 'removed 9/14/2018
                                            qqB = qqHelper.CloneObject(b)
                                        Else
                                            qqB = b
                                        End If

                                        exitLoop = True
                                        Exit For
                                    End If
                                End If
                            End If
                        End If
                        If exitLoop = True Then
                            Exit For
                        End If
                    Next
                    If qqB Is Nothing AndAlso firstBuildingLocNum > 0 AndAlso firstBuildingBuildNum > 0 Then
                        'Dim b As QuickQuoteBuilding = qqo.Locations(firstBuildingLocNum - 1).Buildings(firstBuildingBuildNum - 1)
                        'updated 9/14/2018
                        Dim b As QuickQuoteBuilding = qqLocations(firstBuildingLocNum - 1).Buildings(firstBuildingBuildNum - 1)
                        If cloneBuilding = True Then
                            'Dim qqHelper As New QuickQuoteHelperClass 'removed 9/14/2018
                            qqB = qqHelper.CloneObject(b)
                        Else
                            qqB = b
                        End If
                    End If
                End If
            End If

            Return qqB
        End Function

        'added 5/31/2017
        Public Sub CheckBuildingClassifications(ByRef qqBuilding As QuickQuoteBuilding)
            If qqBuilding IsNot Nothing Then
                With qqBuilding
                    If (.BuildingClassifications Is Nothing OrElse .BuildingClassifications.Count = 0) AndAlso IsPositiveIntegerString(.ClassificationTypeId) = True Then
                        If .BuildingClassifications Is Nothing Then
                            .BuildingClassifications = New List(Of QuickQuoteClassification)
                        End If
                        Dim c As New QuickQuoteClassification
                        c.AnnualSalesReceipts = .AnnualReceipts
                        c.ClassificationTypeId = .ClassificationTypeId
                        c.NumberOfExecutiveOfficers = .NumberOfOfficersAndPartnersAndInsureds
                        c.Payroll = .EmployeePayroll
                        .BuildingClassifications.Add(c)
                    End If
                End With
            End If
        End Sub

        'added 7/8/2017
        Public Shared Function QuickQuoteBuildingPersonalPropertyIndexesForPropertyTypeId(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), ByVal propertyTypeId As String, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If matchType = TextMatchType.None Then
                matchType = TextMatchType.IntegerOrText_IgnoreCasing
            End If

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 Then
                Dim counter As Integer = 0
                For Each bpp As QuickQuoteBuildingPersonalProperty In buildingPersonalProperties
                    counter += 1
                    If bpp IsNot Nothing AndAlso isTextMatch(bpp.PropertyTypeId, propertyTypeId, matchType:=matchType) = True Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteBuildingPersonalPropertiesForPropertyTypeId(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), ByVal propertyTypeId As String, Optional ByVal cloneList As Boolean = False, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As List(Of QuickQuoteBuildingPersonalProperty)
            Dim BPPs As List(Of QuickQuoteBuildingPersonalProperty) = Nothing

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteBuildingPersonalPropertyIndexesForPropertyTypeId(buildingPersonalProperties, propertyTypeId, matchType:=matchType)
                BPPs = QuickQuoteBuildingPersonalPropertiesForIndexes(buildingPersonalProperties, indexes, cloneList:=cloneList)
            End If

            Return BPPs
        End Function
        Public Shared Function QuickQuoteBuildingPersonalPropertiesForIndexes(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteBuildingPersonalProperty)
            Dim BPPs As List(Of QuickQuoteBuildingPersonalProperty) = Nothing

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    'If buildingPersonalProperties.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                    'updated 9/16/2017
                    If i >= 0 AndAlso buildingPersonalProperties.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If BPPs Is Nothing Then
                            BPPs = New List(Of QuickQuoteBuildingPersonalProperty)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            BPPs.Add(qqHelper.CloneObject(buildingPersonalProperties.Item(i)))
                        Else
                            BPPs.Add(buildingPersonalProperties.Item(i))
                        End If
                    End If
                Next
            End If

            Return BPPs
        End Function
        Public Shared Function QuickQuoteBuildingPersonalPropertyIndexesForDifferentPropertyTypeId(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), ByVal propertyTypeId As String, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If matchType = TextMatchType.None Then
                matchType = TextMatchType.IntegerOrText_IgnoreCasing
            End If

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 Then
                Dim counter As Integer = 0
                For Each bpp As QuickQuoteBuildingPersonalProperty In buildingPersonalProperties
                    counter += 1
                    If bpp IsNot Nothing AndAlso isTextMatch(bpp.PropertyTypeId, propertyTypeId, matchType:=matchType) = False Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteBuildingPersonalPropertiesForDifferentPropertyTypeId(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), ByVal propertyTypeId As String, Optional ByVal cloneList As Boolean = False, Optional ByVal matchType As TextMatchType = TextMatchType.IntegerOrText_IgnoreCasing) As List(Of QuickQuoteBuildingPersonalProperty)
            Dim BPPs As List(Of QuickQuoteBuildingPersonalProperty) = Nothing

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteBuildingPersonalPropertyIndexesForDifferentPropertyTypeId(buildingPersonalProperties, propertyTypeId, matchType:=matchType)
                BPPs = QuickQuoteBuildingPersonalPropertiesForIndexes(buildingPersonalProperties, indexes, cloneList:=cloneList)
            End If

            Return BPPs
        End Function
        Public Shared Function QuickQuoteBuildingPersonalProperties_Other_FromList(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteBuildingPersonalProperty)
            Dim BPPs As List(Of QuickQuoteBuildingPersonalProperty) = Nothing

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 Then
                BPPs = QuickQuoteBuildingPersonalPropertiesForPropertyTypeId(buildingPersonalProperties, "8", cloneList:=cloneList, matchType:=TextMatchType.IntegerOrText_IgnoreCasing)
            End If

            Return BPPs
        End Function
        Public Shared Function QuickQuoteBuildingPersonalProperties_Normal_FromList(ByRef buildingPersonalProperties As List(Of QuickQuoteBuildingPersonalProperty), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteBuildingPersonalProperty)
            Dim BPPs As List(Of QuickQuoteBuildingPersonalProperty) = Nothing

            If buildingPersonalProperties IsNot Nothing AndAlso buildingPersonalProperties.Count > 0 Then
                BPPs = QuickQuoteBuildingPersonalPropertiesForDifferentPropertyTypeId(buildingPersonalProperties, "8", cloneList:=cloneList, matchType:=TextMatchType.IntegerOrText_IgnoreCasing)
            End If

            Return BPPs
        End Function

        'added 7/15/2017
        Public Function GarageKeepersOtherThanCollisionTotalLimitFromLocations(ByVal locs As List(Of QuickQuoteLocation), Optional ByVal returnInLimitFormat As Boolean = False) As String
            Dim totalLimit As String = ""

            If locs IsNot Nothing AndAlso locs.Count > 0 Then
                For Each l As QuickQuoteLocation In locs
                    If l IsNot Nothing Then
                        totalLimit = getSum(totalLimit, l.GarageKeepersOtherThanCollisionManualLimitAmount)
                    End If
                Next
                If String.IsNullOrWhiteSpace(totalLimit) = False Then
                    If returnInLimitFormat = True Then
                        totalLimit = LimitFormat(totalLimit)
                    End If
                End If
            End If

            Return totalLimit
        End Function
        Public Function GarageKeepersCollisionTotalLimitFromLocations(ByVal locs As List(Of QuickQuoteLocation), Optional ByVal returnInLimitFormat As Boolean = False) As String
            Dim totalLimit As String = ""

            If locs IsNot Nothing AndAlso locs.Count > 0 Then
                For Each l As QuickQuoteLocation In locs
                    If l IsNot Nothing Then
                        totalLimit = getSum(totalLimit, l.GarageKeepersCollisionManualLimitAmount)
                    End If
                Next
                If String.IsNullOrWhiteSpace(totalLimit) = False Then
                    If returnInLimitFormat = True Then
                        totalLimit = LimitFormat(totalLimit)
                    End If
                End If
            End If

            Return totalLimit
        End Function
        Public Sub UpdateGarageKeepersOtherThanCollisionAtLocationLevelBasedOnTotalLimit(ByVal otcTotalLimit As String, ByRef locs As List(Of QuickQuoteLocation))
            If IsPositiveDecimalString(otcTotalLimit) = True Then
                Dim locTotal As String = GarageKeepersOtherThanCollisionTotalLimitFromLocations(locs)
                If DecimalForString(otcTotalLimit) > DecimalForString(locTotal) Then
                    'new limit is more than SUM of limits in locs
                    If LocationCount(locs) = 1 AndAlso locs(0) IsNot Nothing Then
                        locs(0).GarageKeepersOtherThanCollisionManualLimitAmount = otcTotalLimit
                    Else
                        ClearGarageKeepersOtherThanCollisionLimitAtLocationLevel(locs, limitToSetForFirstOrLast:=otcTotalLimit, setLimitOnFirstOrLastLocation:=FirstOrLast.First)
                    End If
                ElseIf DecimalForString(otcTotalLimit) < DecimalForString(locTotal) Then
                    'new limit is less than SUM of limits in locs
                    If LocationCount(locs) = 1 AndAlso locs(0) IsNot Nothing Then
                        locs(0).GarageKeepersOtherThanCollisionManualLimitAmount = otcTotalLimit
                    Else
                        ClearGarageKeepersOtherThanCollisionLimitAtLocationLevel(locs, limitToSetForFirstOrLast:=otcTotalLimit, setLimitOnFirstOrLastLocation:=FirstOrLast.First)
                    End If
                Else
                    'okay; total and SUM are the same

                End If
            Else
                'wipe out on locations
                ClearGarageKeepersOtherThanCollisionLimitAtLocationLevel(locs)
            End If
        End Sub
        Public Sub ClearGarageKeepersOtherThanCollisionLimitAtLocationLevel(ByRef locs As List(Of QuickQuoteLocation), Optional ByVal limitToSetForFirstOrLast As String = "", Optional ByVal setLimitOnFirstOrLastLocation As FirstOrLast = FirstOrLast.First)
            If LocationCount(locs) > 0 Then
                Dim locCounter As Integer = 0
                Dim counterForFirstNonNothing As Integer = 0
                Dim counterForLastNonNothing As Integer = 0
                For Each l As QuickQuoteLocation In locs
                    locCounter += 1
                    If l IsNot Nothing Then
                        If counterForFirstNonNothing = 0 Then
                            counterForFirstNonNothing = locCounter
                        End If
                        counterForLastNonNothing = locCounter
                        l.GarageKeepersOtherThanCollisionManualLimitAmount = ""
                    End If
                Next
                If IsPositiveDecimalString(limitToSetForFirstOrLast) = True Then
                    If setLimitOnFirstOrLastLocation = FirstOrLast.Last Then
                        If counterForLastNonNothing > 0 Then
                            locs(counterForLastNonNothing - 1).GarageKeepersOtherThanCollisionManualLimitAmount = limitToSetForFirstOrLast
                        End If
                    Else 'FirstOrLast.First
                        If counterForFirstNonNothing > 0 Then
                            locs(counterForFirstNonNothing - 1).GarageKeepersOtherThanCollisionManualLimitAmount = limitToSetForFirstOrLast
                        End If
                    End If
                End If
            End If
        End Sub
        Public Sub UpdateGarageKeepersCollisionAtLocationLevelBasedOnTotalLimit(ByVal collTotalLimit As String, ByRef locs As List(Of QuickQuoteLocation))
            If IsPositiveDecimalString(collTotalLimit) = True Then
                Dim locTotal As String = GarageKeepersCollisionTotalLimitFromLocations(locs)
                If DecimalForString(collTotalLimit) > DecimalForString(locTotal) Then
                    'new limit is more than SUM of limits in locs
                    If LocationCount(locs) = 1 AndAlso locs(0) IsNot Nothing Then
                        locs(0).GarageKeepersCollisionManualLimitAmount = collTotalLimit
                    Else
                        ClearGarageKeepersCollisionLimitAtLocationLevel(locs, limitToSetForFirstOrLast:=collTotalLimit, setLimitOnFirstOrLastLocation:=FirstOrLast.First)
                    End If
                ElseIf DecimalForString(collTotalLimit) < DecimalForString(locTotal) Then
                    'new limit is less than SUM of limits in locs
                    If LocationCount(locs) = 1 AndAlso locs(0) IsNot Nothing Then
                        locs(0).GarageKeepersCollisionManualLimitAmount = collTotalLimit
                    Else
                        ClearGarageKeepersCollisionLimitAtLocationLevel(locs, limitToSetForFirstOrLast:=collTotalLimit, setLimitOnFirstOrLastLocation:=FirstOrLast.First)
                    End If
                Else
                    'okay; total and SUM are the same

                End If
            Else
                'wipe out on locations
                ClearGarageKeepersCollisionLimitAtLocationLevel(locs)
            End If
        End Sub
        Public Sub ClearGarageKeepersCollisionLimitAtLocationLevel(ByRef locs As List(Of QuickQuoteLocation), Optional ByVal limitToSetForFirstOrLast As String = "", Optional ByVal setLimitOnFirstOrLastLocation As FirstOrLast = FirstOrLast.First)
            If LocationCount(locs) > 0 Then
                Dim locCounter As Integer = 0
                Dim counterForFirstNonNothing As Integer = 0
                Dim counterForLastNonNothing As Integer = 0
                For Each l As QuickQuoteLocation In locs
                    locCounter += 1
                    If l IsNot Nothing Then
                        If counterForFirstNonNothing = 0 Then
                            counterForFirstNonNothing = locCounter
                        End If
                        counterForLastNonNothing = locCounter
                        l.GarageKeepersCollisionManualLimitAmount = ""
                    End If
                Next
                If IsPositiveDecimalString(limitToSetForFirstOrLast) = True Then
                    If setLimitOnFirstOrLastLocation = FirstOrLast.Last Then
                        If counterForLastNonNothing > 0 Then
                            locs(counterForLastNonNothing - 1).GarageKeepersCollisionManualLimitAmount = limitToSetForFirstOrLast
                        End If
                    Else 'FirstOrLast.First
                        If counterForFirstNonNothing > 0 Then
                            locs(counterForFirstNonNothing - 1).GarageKeepersCollisionManualLimitAmount = limitToSetForFirstOrLast
                        End If
                    End If
                End If
            End If
        End Sub

        'added 8/15/2017
        Public Function IsSpecialFarmOperationsRiskGrade(ByVal riskGradeLookupId As Integer) As Boolean
            Dim isSpecial As Boolean = False

            If riskGradeLookupId > 0 Then
                'could perform db lookup 1st and then use hard-coded logic if error is encountered
                Select Case riskGradeLookupId
                    Case 1152, 619, 520
                        isSpecial = True
                End Select
            End If
            'riskgradelookup_id  glclasscode	dscr
            '1152    44444	Farm - supporting policies for a FAR policy
            '619 45539	Land - occupied by persons other than the insured for business purposes (lessor's risk only)
            '520 95455	Grain Elevator Operations

            Return isSpecial
        End Function
        Public Function IsSpecialMeatOperationsRiskGrade(ByVal riskGradeLookupId As Integer) As Boolean
            Dim isSpecial As Boolean = False

            If riskGradeLookupId > 0 Then
                'could perform db lookup 1st and then use hard-coded logic if error is encountered
                Select Case riskGradeLookupId
                    Case 758, 868
                        isSpecial = True
                End Select
            End If
            'riskgradelookup_id  glclasscode	dscr
            '758 57651	Packing Houses
            '868 58682	Rendering Works

            Return isSpecial
        End Function
        Public Function IsSpecialRpgContractorRiskGrade(ByVal riskGradeLookupId As Integer) As Boolean
            Dim isSpecial As Boolean = False

            If riskGradeLookupId > 0 Then
                'could perform db lookup 1st and then use hard-coded logic if error is encountered
                Select Case riskGradeLookupId'note: can add ranges like 280 To 289
                    'ordered by glclasscode
                    'Case 1, 22, 155, 154, 161, 172, 175, 174, 197, 198, 196, 207, 225, 230, 251, 266, 267, 275, 280, 284, 282, 285, 283, 286, 287, 288, 281, 289, 305, 276, 328, 334, 345, 361, 371,
                    '     379, 380, 383, 391, 397, 405, 425, 429, 440, 279, 58, 519, 524, 528, 533, 537, 594, 593, 592, 600, 604, 620, 626, 644, 645, 646, 667, 761, 762, 763, 764, 765, 766, 767, 774,
                    '     799, 800, 801, 802, 804, 803, 805, 813, 818, 819, 826, 850, 869, 894, 895, 905, 931, 932, 935, 940, 951, 952, 968, 980, 981, 995, 996, 998, 1002, 1003, 1006, 1007, 1026, 1045,
                    '     1076, 1110, 1114, 1115, 1116, 1113, 1129, 1141, 1142, 1143
                    '    isSpecial = True
                        'ordered by riskgradelookup_id
                    Case 1, 22, 58, 154, 155, 161, 172, 174, 175, 196 To 198, 207, 225, 230, 251, 266, 267, 275, 276, 279 To 289, 305, 328, 334, 345, 361, 371, 379, 380, 383, 391, 397, 405, 425, 429,
                         440, 519, 524, 528, 533, 537, 592 To 594, 600, 604, 620, 626, 644 To 646, 667, 761 To 767, 774, 799 To 805, 813, 818, 819, 826, 850, 869, 894, 895, 905, 931, 932, 935, 940,
                         951, 952, 968, 980, 981, 995, 996, 998, 1002, 1003, 1006, 1007, 1026, 1045, 1076, 1110, 1113 To 1116, 1129, 1141 To 1143
                        isSpecial = True
                End Select
            End If
            'ordered by glclasscode
            'riskgradelookup_id  glclasscode	dscr
            '1   91111	A/C Equip Systems Or Equipment - dealers Or distributors And installation, servicing Or repair
            '22  91127	Alarms And Alarm Systems - installation, servicing Or repair
            '155 91265	Bridge Or Elevated Highway Construction- iron Or steel
            '154 91266	Bridge Or Elevated Highway Construction- concrete
            '161 91280	Building Structure - raising Or moving
            '172 91302	Cable Installation in Conduits Or Subways
            '175 91324	Caisson Or Cofferdam Work- foundations for buildings
            '174 91325	Caisson Or Cofferdam Work
            '197 91340	Carpentry - Construction of residential property Not exceeding three stories in height
            '198 91341	Carpentry- interior
            '196 91342	Carpentry - (no roofing)
            '207 91436	Ceiling Or Wall Installation - Metal
            '225 91481	Chimney Cleaning
            '230 91523	Cleaning - outside surfaces of buildings
            '251 91551	Communication Equip. Installation - industrial Or commercial
            '266 91560	Concrete Construction
            '267 91562	Concrete Or Cement Distributing Towers - rented to others - installation, repair Or removal operations only
            '275 91577	Conduit Construction for Cables Or Wires
            '280 91580	Contractors - Executive Supervisors Or Executive Superintendents
            '284 91581	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - Not buildings
            '282 91582	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - apartment Or office buildings over four stories
            '285 91583	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - one Or two family dwellings
            '283 91584	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - for industrial use
            '286 91585	Contractors - subcontracted work- in connection with construction, reconstruction, repair Or erection of buildings
            '287 91586	Contractors - subcontracted work- in connection with oil And gas field construction, reconstruction Or repair
            '288 91587	Contractors - subcontracted work- in connection with pipeline (other than oil Or gas) Or communication Or power line construction, reconstruction Or repair
            '281 91588	Contractors - subcontracted work- in connection with bridge, tunnel, elevated street Or highway construction, reconstruction Or repair
            '289 91589	Contractors - subcontracted work- in connection with street Or highway construction, Or repair, Not elevated
            '305 91590	Contractors Permanent Yards - maintenance Or storage of equipment Or material
            '276 91600	Construction Or Project Manager
            '328 91618	Dam Or Reservoir Construction
            '334 91629	Debris Removal - construction site
            '345 91641	Dike, Levee Or Revetment Construction
            '361 92215	Driveway, Parking Area Or Sidewalk - paving Or repaving - (no street/road work)
            '371 92338	Dry Wall Or Wallboard Installation
            '379 92446	Electric Light Or Power Line Construction
            '380 92447	Electric Light Or Power Line Construction - Rural Utilities Service projects only
            '383 92478	Electrical Contractors
            '391 92478	Electrical Work - within buildings (no alarm installation)
            '397 92593	Elevator Or Escalator Inspecting, Installation, Servicing Or Repair
            '405 94007	Excavation
            '425 94225	Farm Machinery Operations - by contractors
            '429 94276	Fence Erection
            '440 94381	Fire Suppression Systems - installation, servicing Or repair
            '279 94444	Contractors
            '58  94444	Asbestos Abatement Contractors
            '519 95410	Grading of Land -  (no excavation)
            '524 95487	Greenhouse Erection
            '528 95505	Guniting Or Shot-crete
            '533 95625	Handyperson
            '537 95630	Hazardous Material Contractors
            '594 96408	Insulation Work- plastic
            '593 96409	Insulation Work- organic Or plastic in solid state
            '592 96410	Insulation Work- mineral
            '600 96702	Irrigation Or Drainage System Construction
            '604 96872	Jetty Or Breakwater Construction
            '620 97047	Landscape Gardening (no tree trimming)
            '626 97050	Lawn Care Services
            '644 97221	Machinery Or Equipment - farm - installation, servicing, repair Or erection
            '645 97222	Machinery Or Equipment - industrial - installation, servicing Or repair
            '646 97223	Machinery Or Equipment - installation, servicing Or repair
            '667 97447	Masonry Contractors
            '761 98303	Painting - exterior - buildings Or structures - exceeding three stories in height
            '762 98304	Painting - exterior - buildings Or structures - three stories Or less in height
            '763 98305	Painting - interior - buildings Or structures
            '764 98306	Painting - oil Or gas tanks
            '765 98307	Painting - ship hulls
            '766 98308	Painting - shop only
            '767 98309	Painting - steel structures Or bridges
            '774 98344	Paperhanging
            '799 98413	Pile Driving- building foundation only
            '800 98414	Pile Driving- other
            '801 98415	Pile Driving- sonic method
            '802 98423	Pipeline Construction- gas
            '804 98424	Pipeline Construction- other
            '803 98425	Pipeline Construction- oil
            '805 98426	Pipeline Construction- slurry - nonflammable mixtures
            '813 98449	Plastering Or Stucco Work
            '818 98482	Plumbing - no boiler Or sprinkler system installation, service Or repair- commercial And industrial
            '819 98483	Plumbing - no boiler Or sprinkler system installation, service Or repair- residential Or domestic
            '826 98502	Prefabricated Building Erection
            '850 98601	Railroad Construction
            '869 98640	Renovating - outside surfaces of buildings
            '894 98677	Roofing- commercial
            '895 98678	Roofing- residential
            '905 98698	Salvage Operations
            '931 98805	Septic Tank Systems - cleaning
            '932 98806	Septic Tank Systems - installation, service Or repair
            '935 98820	Sewer Mains Or Connections - Construction
            '940 98884	Sheet Metal Work - outside
            '951 98967	Siding Installation - 3 stories Or less
            '952 98993	Sign Erection, Installation Or Repair
            '968 99080	Solar Energy Contractors
            '980 99163	Steam Mains Or Connections Construction
            '981 99165	Steam Pipe Or Boiler Insulation
            '995 99315	Street Or Road Construction Or Reconstruction
            '996 99321	Street Or Road Paving Or Repaving, Surfacing Or Resurfacing Or Scraping
            '998 99445	Subway Construction
            '1002    99471	Surveyors - land - Not engaged in actual construction
            '1003    99505	Swimming Pool Servicing
            '1006    99506	Swimming Pools - installation, servicing Or repair - above ground
            '1007    99507	Swimming Pools - installation, servicing Or repair - below ground
            '1026    99613	Telephone, Telegraph Or Cable Television Line Construction
            '1045    99746	Tile, Stone, Marble, Mosaic Or Terrazzo Work - interior construction
            '1076    99803	Underpinning Buildings Or Structures
            '1110    99946	Water Mains Or Connections Construction
            '1114    99952	Waterproofing - by pressure apparatus
            '1115    99953	Waterproofing - by trowel - exterior
            '1116    99954	Waterproofing - by trowel - interior Or insulation work
            '1113    99955	Waterproofing
            '1129    99975	Window Cleaning - 3 stories Or less
            '1141    99986	Wrecking- buildings Or structures
            '1142    99987	Wrecking- dismantling of prefabricated dwellings Not exceeding three stories for reerection
            '1143    99988	Wrecking- marine

            'ordered by riskgradelookup_id
            'riskgradelookup_id  glclasscode	dscr
            '1   91111	A/C Equip Systems Or Equipment - dealers Or distributors And installation, servicing Or repair
            '22  91127	Alarms And Alarm Systems - installation, servicing Or repair
            '58  94444	Asbestos Abatement Contractors
            '154 91266	Bridge Or Elevated Highway Construction- concrete
            '155 91265	Bridge Or Elevated Highway Construction- iron Or steel
            '161 91280	Building Structure - raising Or moving
            '172 91302	Cable Installation in Conduits Or Subways
            '174 91325	Caisson Or Cofferdam Work
            '175 91324	Caisson Or Cofferdam Work- foundations for buildings
            '196 91342	Carpentry - (no roofing)
            '197 91340	Carpentry - Construction of residential property Not exceeding three stories in height
            '198 91341	Carpentry- interior
            '207 91436	Ceiling Or Wall Installation - Metal
            '225 91481	Chimney Cleaning
            '230 91523	Cleaning - outside surfaces of buildings
            '251 91551	Communication Equip. Installation - industrial Or commercial
            '266 91560	Concrete Construction
            '267 91562	Concrete Or Cement Distributing Towers - rented to others - installation, repair Or removal operations only
            '275 91577	Conduit Construction for Cables Or Wires
            '276 91600	Construction Or Project Manager
            '279 94444	Contractors
            '280 91580	Contractors - Executive Supervisors Or Executive Superintendents
            '281 91588	Contractors - subcontracted work- in connection with bridge, tunnel, elevated street Or highway construction, reconstruction Or repair
            '282 91582	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - apartment Or office buildings over four stories
            '283 91584	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - for industrial use
            '284 91581	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - Not buildings
            '285 91583	Contractors - subcontracted work- in connection with building construction, reconstruction, repair Or erection - one Or two family dwellings
            '286 91585	Contractors - subcontracted work- in connection with construction, reconstruction, repair Or erection of buildings
            '287 91586	Contractors - subcontracted work- in connection with oil And gas field construction, reconstruction Or repair
            '288 91587	Contractors - subcontracted work- in connection with pipeline (other than oil Or gas) Or communication Or power line construction, reconstruction Or repair
            '289 91589	Contractors - subcontracted work- in connection with street Or highway construction, Or repair, Not elevated
            '305 91590	Contractors Permanent Yards - maintenance Or storage of equipment Or material
            '328 91618	Dam Or Reservoir Construction
            '334 91629	Debris Removal - construction site
            '345 91641	Dike, Levee Or Revetment Construction
            '361 92215	Driveway, Parking Area Or Sidewalk - paving Or repaving - (no street/road work)
            '371 92338	Dry Wall Or Wallboard Installation
            '379 92446	Electric Light Or Power Line Construction
            '380 92447	Electric Light Or Power Line Construction - Rural Utilities Service projects only
            '383 92478	Electrical Contractors
            '391 92478	Electrical Work - within buildings (no alarm installation)
            '397 92593	Elevator Or Escalator Inspecting, Installation, Servicing Or Repair
            '405 94007	Excavation
            '425 94225	Farm Machinery Operations - by contractors
            '429 94276	Fence Erection
            '440 94381	Fire Suppression Systems - installation, servicing Or repair
            '519 95410	Grading of Land -  (no excavation)
            '524 95487	Greenhouse Erection
            '528 95505	Guniting Or Shot-crete
            '533 95625	Handyperson
            '537 95630	Hazardous Material Contractors
            '592 96410	Insulation Work- mineral
            '593 96409	Insulation Work- organic Or plastic in solid state
            '594 96408	Insulation Work- plastic
            '600 96702	Irrigation Or Drainage System Construction
            '604 96872	Jetty Or Breakwater Construction
            '620 97047	Landscape Gardening (no tree trimming)
            '626 97050	Lawn Care Services
            '644 97221	Machinery Or Equipment - farm - installation, servicing, repair Or erection
            '645 97222	Machinery Or Equipment - industrial - installation, servicing Or repair
            '646 97223	Machinery Or Equipment - installation, servicing Or repair
            '667 97447	Masonry Contractors
            '761 98303	Painting - exterior - buildings Or structures - exceeding three stories in height
            '762 98304	Painting - exterior - buildings Or structures - three stories Or less in height
            '763 98305	Painting - interior - buildings Or structures
            '764 98306	Painting - oil Or gas tanks
            '765 98307	Painting - ship hulls
            '766 98308	Painting - shop only
            '767 98309	Painting - steel structures Or bridges
            '774 98344	Paperhanging
            '799 98413	Pile Driving- building foundation only
            '800 98414	Pile Driving- other
            '801 98415	Pile Driving- sonic method
            '802 98423	Pipeline Construction- gas
            '803 98425	Pipeline Construction- oil
            '804 98424	Pipeline Construction- other
            '805 98426	Pipeline Construction- slurry - nonflammable mixtures
            '813 98449	Plastering Or Stucco Work
            '818 98482	Plumbing - no boiler Or sprinkler system installation, service Or repair- commercial And industrial
            '819 98483	Plumbing - no boiler Or sprinkler system installation, service Or repair- residential Or domestic
            '826 98502	Prefabricated Building Erection
            '850 98601	Railroad Construction
            '869 98640	Renovating - outside surfaces of buildings
            '894 98677	Roofing- commercial
            '895 98678	Roofing- residential
            '905 98698	Salvage Operations
            '931 98805	Septic Tank Systems - cleaning
            '932 98806	Septic Tank Systems - installation, service Or repair
            '935 98820	Sewer Mains Or Connections - Construction
            '940 98884	Sheet Metal Work - outside
            '951 98967	Siding Installation - 3 stories Or less
            '952 98993	Sign Erection, Installation Or Repair
            '968 99080	Solar Energy Contractors
            '980 99163	Steam Mains Or Connections Construction
            '981 99165	Steam Pipe Or Boiler Insulation
            '995 99315	Street Or Road Construction Or Reconstruction
            '996 99321	Street Or Road Paving Or Repaving, Surfacing Or Resurfacing Or Scraping
            '998 99445	Subway Construction
            '1002    99471	Surveyors - land - Not engaged in actual construction
            '1003    99505	Swimming Pool Servicing
            '1006    99506	Swimming Pools - installation, servicing Or repair - above ground
            '1007    99507	Swimming Pools - installation, servicing Or repair - below ground
            '1026    99613	Telephone, Telegraph Or Cable Television Line Construction
            '1045    99746	Tile, Stone, Marble, Mosaic Or Terrazzo Work - interior construction
            '1076    99803	Underpinning Buildings Or Structures
            '1110    99946	Water Mains Or Connections Construction
            '1113    99955	Waterproofing
            '1114    99952	Waterproofing - by pressure apparatus
            '1115    99953	Waterproofing - by trowel - exterior
            '1116    99954	Waterproofing - by trowel - interior Or insulation work
            '1129    99975	Window Cleaning - 3 stories Or less
            '1141    99986	Wrecking- buildings Or structures
            '1142    99987	Wrecking- dismantling of prefabricated dwellings Not exceeding three stories for reerection
            '1143    99988	Wrecking- marine

            Return isSpecial
        End Function
        'added 8/17/2017
        Public Function WCP_RiskGrade_Parameters_ForQuickQuoteObject(ByVal qqo As QuickQuoteObject) As QuickQuote_WCP_RiskGrade_Parameters
            Dim params As QuickQuote_WCP_RiskGrade_Parameters = Nothing

            If qqo IsNot Nothing AndAlso qqo.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation Then
                params = New QuickQuote_WCP_RiskGrade_Parameters
                With params
                    '.OriginalRiskGradeLookupId = qqo.RiskGradeLookupId_Original
                    '.CurrentRiskGradeLookupId = qqo.RiskGradeLookupId
                    'updated 9/18/2018
                    Dim riskGradeLookupIdOriginal As String = ""
                    Dim riskGradeLookupId As String = ""
                    Dim govStateQuote As QuickQuoteObject = GoverningStateQuote(qqo)
                    If govStateQuote IsNot Nothing Then
                        riskGradeLookupIdOriginal = govStateQuote.RiskGradeLookupId_Original
                        riskGradeLookupId = govStateQuote.RiskGradeLookupId
                    Else
                        riskGradeLookupIdOriginal = qqo.RiskGradeLookupId_Original
                        riskGradeLookupId = qqo.RiskGradeLookupId
                    End If
                    .OriginalRiskGradeLookupId = riskGradeLookupIdOriginal
                    .CurrentRiskGradeLookupId = riskGradeLookupId
                    If qqo.Client IsNot Nothing AndAlso qqo.Client.Name IsNot Nothing Then
                        .ClientDateBusinessStarted = qqo.Client.Name.DateBusinessStarted
                    End If
                    .OriginalRiskGradeLookupId_isSpecialFarmOperationsRiskGrade = IsSpecialFarmOperationsRiskGrade(IntegerForString(.OriginalRiskGradeLookupId))
                    .CurrentRiskGradeLookupId_isSpecialFarmOperationsRiskGrade = IsSpecialFarmOperationsRiskGrade(IntegerForString(.CurrentRiskGradeLookupId))
                    .OriginalRiskGradeLookupId_isSpecialMeatOperationsRiskGrade = IsSpecialMeatOperationsRiskGrade(IntegerForString(.OriginalRiskGradeLookupId))
                    .CurrentRiskGradeLookupId_isSpecialMeatOperationsRiskGrade = IsSpecialMeatOperationsRiskGrade(IntegerForString(.CurrentRiskGradeLookupId))
                    .OriginalRiskGradeLookupId_isSpecialRpgContractorRiskGrade = IsSpecialRpgContractorRiskGrade(IntegerForString(.OriginalRiskGradeLookupId))
                    .CurrentRiskGradeLookupId_isSpecialRpgContractorRiskGrade = IsSpecialRpgContractorRiskGrade(IntegerForString(.CurrentRiskGradeLookupId))
                    If DecimalForString(qqo.IRPM_ClassificationPeculiarities) >= CDec("1.05") Then
                        .HasFivePercentIrpmDebitOnClassificationPeculiarities = True
                    End If
                    If IsDateString(.ClientDateBusinessStarted) = True Then
                        'If CDate(.ClientDateBusinessStarted) < DateAdd(DateInterval.Year, -2, Date.Today) Then
                        '    .DateBusStartedIsLessThanTwoYears = True
                        '    If CDate(.ClientDateBusinessStarted) < DateAdd(DateInterval.Year, -1, Date.Today) Then
                        '        .DateBusStartedIsLessThanOneYear = True
                        '    End If
                        'Else
                        '    .DateBusStartedIsAtLeastTwoYears = True
                        'End If
                        'corrected 8/30/2017
                        'If CDate(.ClientDateBusinessStarted) < DateAdd(DateInterval.Year, -2, Date.Today) Then
                        '    'dateBusStarted older than 2 years ago
                        '    .DateBusStartedIsAtLeastTwoYears = True
                        'Else
                        '    'dateBusStarted within 2 years
                        '    .DateBusStartedIsLessThanTwoYears = True
                        '    If CDate(.ClientDateBusinessStarted) < DateAdd(DateInterval.Year, -1, Date.Today) Then
                        '        'dateBusStarted older than 1 year ago
                        '    Else
                        '        'dateBusStarted within 1 year
                        '        .DateBusStartedIsLessThanOneYear = True
                        '    End If
                        'End If
                        If CDate(.ClientDateBusinessStarted) > DateAdd(DateInterval.Year, -2, Date.Today) Then
                            'dateBusStarted after date from 2 years ago (less than 2 years)
                            .DateBusStartedIsLessThanTwoYears = True
                            If CDate(.ClientDateBusinessStarted) > DateAdd(DateInterval.Year, -1, Date.Today) Then
                                'dateBusStarted after date from 1 year ago (less than 1 year)
                                .DateBusStartedIsLessThanOneYear = True
                            End If
                        Else
                            'dateBusStarted equal to or before date from 2 years ago (at least 2 years old)
                            .DateBusStartedIsAtLeastTwoYears = True
                        End If
                    End If

                    'If .CurrentRiskGradeLookupId_isSpecialMeatOperationsRiskGrade = True Then
                    '    If .DateBusStartedIsLessThanTwoYears = True Then
                    '        needsStop = True
                    '    ElseIf .dateBusStartedIsAtLeastTwoYears = True Then
                    '        shouldHaveFivePercentIrpmDebitOnClassificationPeculiarities = True
                    '    End If
                    'End If

                    'If .HasFivePercentIrpmDebitOnClassificationPeculiarities = True AndAlso .CurrentRiskGradeLookupId_isSpecialFarmOperationsRiskGrade = False AndAlso .CurrentRiskGradeLookupId_isSpecialMeatOperationsRiskGrade = False Then
                    '    'could also do some extra checking to make sure this Debit was added by VR... could check for IRPM Remark (not 100% reliable could change over time) or could see if riskGrade was just changed from one of the special ones (not 100% reliable as riskGrade could have previously been changed and saved, though RiskGrade isn't likely to change after set)
                    '    needsToRemoveFivePercentIrpmDebitOnClassificationPeculiarities = True
                    'End If

                    'If needsToRemoveFivePercentIrpmDebitOnClassificationPeculiarities = True Then
                    '    qqo.IRPM_ClassificationPeculiarities = "1.000"
                    '    qqo.IRPM_ClassificationPeculiaritiesDesc = ""
                    '    .HasFivePercentIrpmDebitOnClassificationPeculiarities = False
                    'End If
                End With
            End If

            Return params
        End Function

        'added 8/21/2017
        Public Sub SaveQuoteMessages(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteId As Integer = 0, Optional ByVal quoteXmlId As Integer = 0, Optional ByRef errorMessages As List(Of String) = Nothing)
            errorMessages = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                For Each msg As QuickQuoteMessage In qqMsgs
                    'If msg IsNot Nothing AndAlso (msg.QuoteMessageId > 0 OrElse msg.Active = True) Then
                    'updated 8/23/2017 to nest IFs
                    If msg IsNot Nothing Then
                        If msg.JustAddedOrMaintainedOnSaveRate = True Then
                            If quoteId > 0 Then
                                'reset messageId if existing message that was created for different quote version
                                If msg.QuoteMessageId > 0 AndAlso msg.QuoteId > 0 AndAlso msg.QuoteId <> quoteId Then
                                    msg.QuoteMessageId = 0
                                End If
                                msg.QuoteId = quoteId
                            End If
                            If quoteXmlId > 0 Then
                                'reset messageId if existing message that was created for different quote version
                                If msg.QuoteMessageId > 0 AndAlso msg.QuoteXmlId > 0 AndAlso msg.QuoteXmlId <> quoteXmlId Then
                                    msg.QuoteMessageId = 0
                                End If
                                msg.QuoteXmlId = quoteXmlId
                            End If
                        End If

                        If msg.QuoteMessageId > 0 OrElse msg.Active = True Then
                            If msg.QuoteId = 0 AndAlso quoteId > 0 Then
                                msg.QuoteId = quoteId
                            End If
                            If msg.QuoteXmlId = 0 AndAlso quoteXmlId > 0 Then
                                msg.QuoteXmlId = quoteXmlId
                            End If
                            If msg.QuoteMessageId = 0 AndAlso msg.Active = True Then
                                'save new
                                If msg.QuoteId > 0 AndAlso String.IsNullOrWhiteSpace(msg.QuoteMessageText) = False Then
                                    Using sqlEO_QuoteMessage As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                                        With sqlEO_QuoteMessage
                                            .queryOrStoredProc = "usp_Insert_QuoteMessage"

                                            .inputParameters = New ArrayList
                                            With .inputParameters
                                                If msg.QuoteId > 0 Then
                                                    .Add(New SqlClient.SqlParameter("@quoteId", msg.QuoteId))
                                                End If
                                                If msg.QuoteXmlId > 0 Then
                                                    .Add(New SqlClient.SqlParameter("@quoteXmlId", msg.QuoteXmlId))
                                                End If
                                                If msg.QuoteMessageTypeId > 0 Then
                                                    .Add(New SqlClient.SqlParameter("@quoteMessageTypeId", msg.QuoteMessageTypeId))
                                                End If
                                                If String.IsNullOrWhiteSpace(msg.QuoteMessageText) = False Then
                                                    .Add(New SqlClient.SqlParameter("@quoteMessageText", msg.QuoteMessageText))
                                                End If
                                                'If msg.InsertUserId = 0 Then
                                                '    If msg.UpdateUserId > 0 Then
                                                '        msg.InsertUserId = msg.UpdateUserId
                                                '    Else
                                                '        msg.InsertUserId = IntegerForString(DiamondUserId)
                                                '    End If
                                                'End If
                                                'If msg.InsertUserId > 0 Then
                                                '    .Add(New SqlClient.SqlParameter("userId", msg.InsertUserId))
                                                'End If
                                            End With

                                            .outputParameter = New SqlClient.SqlParameter("@quoteMessageId", Data.SqlDbType.Int)

                                            .ExecuteStatement()

                                            If .hasError = True Then
                                                AddStringToList("Database error encountered when inserting QuoteMessage record", errorMessages)
                                            Else
                                                msg.QuoteMessageId = sqlEO_QuoteMessage.outputParameter.Value
                                                msg.Inserted = Date.Now.ToString
                                                'If msg.UpdateUserId = 0 Then
                                                '    msg.UpdateUserId = msg.InsertUserId
                                                'End If
                                                msg.Updated = msg.Inserted
                                            End If
                                        End With
                                    End Using
                                Else
                                    If msg.QuoteId = 0 Then
                                        AddStringToList("quoteId required; message was not saved", errorMessages)
                                    End If
                                    If String.IsNullOrWhiteSpace(msg.QuoteMessageText) = True Then
                                        AddStringToList("messageText required; message was not saved", errorMessages)
                                    End If
                                End If
                            ElseIf msg.QuoteMessageId > 0 Then
                                'update existing
                                If msg.Active = True Then
                                    'nothing needed unless allowing updates to messageText, messageTypeId, quoteId, quoteXmlId, etc.
                                Else
                                    'deactivate
                                    Using sqlEO_DiamondProposalBinary As New SQLexecuteObject(ConfigurationManager.AppSettings("connQQ").ToString)
                                        With sqlEO_DiamondProposalBinary
                                            .queryOrStoredProc = "usp_Update_QuoteMessage"

                                            .inputParameters = New ArrayList
                                            With .inputParameters
                                                .Add(New SqlClient.SqlParameter("@quoteMessageId", msg.QuoteMessageId))
                                                .Add(New SqlClient.SqlParameter("@active", 0))
                                                'If msg.UpdateUserId = 0 Then
                                                '    msg.UpdateUserId = IntegerForString(DiamondUserId)
                                                '    If msg.UpdateUserId = 0 Then
                                                '        msg.UpdateUserId = msg.InsertUserId
                                                '    End If
                                                'End If
                                                'If msg.UpdateUserId > 0 Then
                                                '    .Add(New SqlClient.SqlParameter("userId", msg.UpdateUserId))
                                                'End If
                                            End With

                                            .ExecuteStatement()

                                            If .hasError = True Then
                                                AddStringToList("Database error encountered when update QuoteMessage record", errorMessages)
                                            Else
                                                msg.Updated = Date.Now.ToString
                                            End If
                                        End With
                                    End Using
                                End If
                            End If
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub LoadQuoteMessages(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Integer = 0, Optional ByVal quoteId As Integer = 0, Optional ByVal quoteXmlId As Integer = 0, Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByRef errorMessages As List(Of String) = Nothing)
            If quoteMessageId > 0 OrElse quoteId > 0 Then
                Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connQQ").ToString)
                    With sqlSO
                        .queryOrStoredProc = "usp_Get_QuoteMessage"
                        .parameters = New ArrayList
                        With .parameters
                            If quoteMessageId > 0 Then
                                .Add(New SqlClient.SqlParameter("@quoteMessageId", quoteMessageId))
                            Else
                                .Add(New SqlClient.SqlParameter("@quoteId", quoteId))
                                If quoteXmlId > 0 Then
                                    .Add(New SqlClient.SqlParameter("@quoteXmlId", quoteXmlId))
                                End If
                                'If active IsNot Nothing Then
                                If active.HasValue = True Then
                                    .Add(New SqlClient.SqlParameter("@active", BooleanToInt(active)))
                                End If
                            End If
                        End With

                        Dim dr As SqlClient.SqlDataReader = .GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            With dr
                                While .Read
                                    Dim msg As New QuickQuoteMessage
                                    msg.QuoteMessageId = IntegerForString(.Item("quoteMessageId").ToString.Trim)
                                    msg.QuoteId = IntegerForString(.Item("quoteId").ToString.Trim)
                                    msg.QuoteXmlId = IntegerForString(.Item("quoteXmlId").ToString.Trim)
                                    msg.QuoteMessageTypeId = IntegerForString(.Item("quoteMessageTypeId").ToString.Trim)
                                    msg.QuoteMessageText = .Item("quoteMessageText").ToString.Trim
                                    msg.Inserted = .Item("inserted").ToString.Trim
                                    msg.Updated = .Item("updated").ToString.Trim
                                    msg.Active = BitToBoolean(.Item("active").ToString.Trim)
                                    If qqMsgs Is Nothing Then
                                        qqMsgs = New List(Of QuickQuoteMessage)
                                    End If
                                    qqMsgs.Add(msg)
                                End While
                            End With
                        ElseIf .hasError = True Then
                            AddStringToList("Database error encountered when retrieving quote messages", errorMessages)
                        Else
                            'no rows
                        End If

                    End With
                End Using
            Else
                AddStringToList("quoteMessageId or quoteId required to load Quote Messages", errorMessages)
            End If
        End Sub
        'added 8/22/2017
        Public Sub SaveQuoteMessages(ByRef qqo As QuickQuoteObject, Optional ByRef errorMessages As List(Of String) = Nothing)
            If qqo IsNot Nothing Then
                'SaveQuoteMessages(qqo.Messages, quoteId:=IntegerForString(qqo.Database_QuoteId), quoteXmlId:=IntegerForString(qqo.Database_QuoteXmlId), errorMessages:=errorMessages)
                'updated 8/23/2017
                Dim latestQuoteId As Integer = IntegerForString(qqo.Database_QuoteId)
                Dim latestQuoteXmlId As Integer = IntegerForString(qqo.Database_QuoteXmlId)
                If latestQuoteId > 0 AndAlso latestQuoteXmlId > 0 Then
                    Dim msgsForLatestSaveRate As List(Of QuickQuoteMessage) = QuickQuoteMessagesForMessageParams(qqo.Messages, active:=True, justAddedOrMaintainedOnSaveRate:=True)
                    If msgsForLatestSaveRate IsNot Nothing AndAlso msgsForLatestSaveRate.Count > 0 Then
                        For Each msg As QuickQuoteMessage In msgsForLatestSaveRate
                            'reset messageId if existing message that was created for different quote version
                            If msg.QuoteMessageId > 0 AndAlso msg.QuoteId > 0 AndAlso msg.QuoteId <> latestQuoteId Then
                                msg.QuoteMessageId = 0
                            End If
                            msg.QuoteId = latestQuoteId
                            'reset messageId if existing message that was created for different quote version
                            If msg.QuoteMessageId > 0 AndAlso msg.QuoteXmlId > 0 AndAlso msg.QuoteXmlId <> latestQuoteXmlId Then
                                msg.QuoteMessageId = 0
                            End If
                            msg.QuoteXmlId = latestQuoteXmlId
                        Next
                    End If

                    RemoveQuickQuoteMessagesNotMatchingMessageParams(qqo.Messages, quoteId:=latestQuoteId, quoteXmlId:=latestQuoteXmlId)
                    ActivateOrDeactivateQuickQuoteMessagesNotMatchingMessageParams(qqo.Messages, ActivateOrDeactivate.Deactivate, justAddedOrMaintainedOnSaveRate:=True)
                End If

                SaveQuoteMessages(qqo.Messages, quoteId:=latestQuoteId, quoteXmlId:=latestQuoteXmlId, errorMessages:=errorMessages)
            Else
                AddStringToList("QuickQuoteObject required to save Quote Messages", errorMessages)
            End If
        End Sub
        Public Sub LoadQuoteMessages(ByRef qqo As QuickQuoteObject, Optional ByRef errorMessages As List(Of String) = Nothing)
            If qqo IsNot Nothing Then
                LoadQuoteMessages(qqo.Messages, quoteId:=IntegerForString(qqo.Database_QuoteId), quoteXmlId:=IntegerForString(qqo.Database_QuoteXmlId), active:=True, errorMessages:=errorMessages)
            Else
                AddStringToList("QuickQuoteObject required to load Quote Messages", errorMessages)
            End If
        End Sub
        Public Sub CopyMessagesToValidationItems(ByRef qqMsgs As List(Of QuickQuoteMessage), ByRef qqValItems As List(Of QuickQuoteValidationItem))
            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                For Each msg As QuickQuoteMessage In qqMsgs
                    If msg IsNot Nothing AndAlso msg.Active = True AndAlso String.IsNullOrWhiteSpace(msg.QuoteMessageText) = False Then
                        Dim vi As New QuickQuoteValidationItem
                        vi.Message = msg.QuoteMessageText
                        Select Case msg.QuoteMessageType
                            Case QuickQuoteXML.QuoteMessageType.QuoteWarning, QuickQuoteXML.QuoteMessageType.AppWarning
                                vi.ValidationSeverityType = QuickQuoteValidationItem.QuickQuoteValidationSeverityType.ValidationWarning
                            Case QuickQuoteXML.QuoteMessageType.QuoteStopped, QuickQuoteXML.QuoteMessageType.AppStopped
                                vi.ValidationSeverityType = QuickQuoteValidationItem.QuickQuoteValidationSeverityType.ValidationError
                            Case QuickQuoteXML.QuoteMessageType.QuoteKilled, QuickQuoteXML.QuoteMessageType.AppKilled
                                vi.ValidationSeverityType = QuickQuoteValidationItem.QuickQuoteValidationSeverityType.ValidationError
                            Case Else
                                vi.ValidationSeverityType = QuickQuoteValidationItem.QuickQuoteValidationSeverityType.Other
                        End Select
                        If qqValItems Is Nothing Then
                            qqValItems = New List(Of QuickQuoteValidationItem)
                        End If
                        qqValItems.Add(vi)
                    End If
                Next
            End If
        End Sub
        Public Sub CopyMessagesToValidationItems(ByRef qqo As QuickQuoteObject)
            If qqo IsNot Nothing Then
                CopyMessagesToValidationItems(qqo.Messages, qqo.ValidationItems)
            End If
        End Sub
        'Public Shared Function QuickQuoteMessageIndexesForMessageType(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal msgType As QuickQuoteXML.QuoteMessageType, Optional ByVal msgText As String = "") As List(Of Integer)
        '    Dim indexes As List(Of Integer) = Nothing

        '    If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
        '        Dim counter As Integer = 0
        '        For Each msg As QuickQuoteMessage In qqMsgs
        '            counter += 1
        '            If msg IsNot Nothing AndAlso msg.QuoteMessageType = msgType AndAlso (String.IsNullOrWhiteSpace(msgText) = True OrElse UCase(msg.QuoteMessageText) = UCase(msgText)) Then
        '                If indexes Is Nothing Then
        '                    indexes = New List(Of Integer)
        '                End If
        '                indexes.Add(counter - 1)
        '            End If
        '        Next
        '    End If

        '    Return indexes
        'End Function
        Public Shared Function QuickQuoteMessagesForIndexes(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteMessage)
            Dim msgs As List(Of QuickQuoteMessage) = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    'If qqMsgs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                    'updated 9/16/2017
                    If i >= 0 AndAlso qqMsgs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If msgs Is Nothing Then
                            msgs = New List(Of QuickQuoteMessage)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            msgs.Add(qqHelper.CloneObject(qqMsgs.Item(i)))
                        Else
                            msgs.Add(qqMsgs.Item(i))
                        End If
                    End If
                Next
            End If

            Return msgs
        End Function
        Public Shared Function QuickQuoteMessagesForMessageType(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal msgType As QuickQuoteXML.QuoteMessageType, Optional ByVal msgText As String = "", Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteMessage)
            Dim msgs As List(Of QuickQuoteMessage) = Nothing

            'If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
            '    Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesForMessageType(qqMsgs, msgType, msgText:=msgText)
            '    msgs = QuickQuoteMessagesForIndexes(qqMsgs, indexes, cloneList:=cloneList)
            'End If
            msgs = QuickQuoteMessagesForMessageParams(qqMsgs, msgType:=msgType, msgText:=msgType, cloneList:=cloneList)

            Return msgs
        End Function
        'added 8/23/2017
        Public Shared Function QuickQuoteMessageForMessageType(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal msgType As QuickQuoteXML.QuoteMessageType, Optional ByVal msgText As String = "", Optional ByVal cloneMsg As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal returnNewIfNothing As Boolean = False) As QuickQuoteMessage
            Dim msg As QuickQuoteMessage = Nothing

            Dim msgs As List(Of QuickQuoteMessage) = QuickQuoteMessagesForMessageType(qqMsgs, msgType, msgText:=msgText, cloneList:=cloneMsg)
            If msgs IsNot Nothing AndAlso msgs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    msg = msgs(0)
                Else
                    'last
                    msg = msgs(msgs.Count - 1)
                End If
            End If

            If returnNewIfNothing = True AndAlso msg Is Nothing Then
                AddNewMessageToList(qqMsgs, msg:=msg, msgType:=msgType, msgText:=msgText)
            End If

            Return msg
        End Function
        'Public Shared Sub AddNewMessageToList(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByRef msg As QuickQuoteMessage = Nothing, Optional ByVal msgType As QuickQuoteXML.QuoteMessageType = Nothing, Optional ByVal msgText As String = "")
        '    If msg Is Nothing Then
        '        msg = New QuickQuoteMessage
        '    End If
        '    With msg
        '        .QuoteMessageType = msgType
        '        .QuoteMessageText = msgText
        '    End With
        '    If qqMsgs Is Nothing Then
        '        qqMsgs = New List(Of QuickQuoteMessage)
        '    End If
        '    qqMsgs.Add(msg)
        'End Sub
        Public Sub DisposeMessages(ByRef qqMsgs As List(Of QuickQuoteMessage))
            If qqMsgs IsNot Nothing Then
                If qqMsgs.Count > 0 Then
                    For Each msg As QuickQuoteMessage In qqMsgs
                        If msg IsNot Nothing Then
                            msg.Dispose()
                            msg = Nothing
                        End If
                    Next
                    qqMsgs.Clear()
                End If
                qqMsgs = Nothing
            End If
        End Sub
        Public Shared Sub RemoveQuickQuoteMessagesByIndex(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal msgIndexList As List(Of Integer))
            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 AndAlso msgIndexList IsNot Nothing AndAlso msgIndexList.Count > 0 Then
                msgIndexList.Sort() 'put them in order 1st
                msgIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In msgIndexList
                    RemoveQuickQuoteMessageByIndex(qqMsgs, i)
                Next
            End If
            'note: could also return removedCount as optional byref param
        End Sub
        Public Shared Sub RemoveQuickQuoteMessageByIndex(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal msgIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqMsgs IsNot Nothing AndAlso msgIndex >= 0 AndAlso qqMsgs.Count >= CInt(msgIndex + 1) Then
                qqMsgs.RemoveAt(msgIndex)
                removed = True
            End If
        End Sub
        'Public Shared Sub RemoveQuickQuoteMessagesForMessageType(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal msgType As QuickQuoteXML.QuoteMessageType, Optional ByVal msgText As String = "")
        '    If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
        '        Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesForMessageType(qqMsgs, msgType, msgText:=msgText)
        '        RemoveQuickQuoteMessagesByIndex(qqMsgs, indexes)
        '    End If
        'End Sub
        Public Shared Function QuickQuoteMessageIndexesForMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim counter As Integer = 0
                For Each msg As QuickQuoteMessage In qqMsgs
                    counter += 1
                    If msg IsNot Nothing AndAlso (quoteMessageId.HasValue = False OrElse msg.QuoteMessageId = quoteMessageId) AndAlso (quoteId.HasValue = False OrElse msg.QuoteId = quoteId OrElse (includeNewMessagesWhenSearchingByQuoteIdOrXmlId = True AndAlso msg.QuoteMessageId = 0 AndAlso msg.Active = True)) AndAlso (quoteXmlId.HasValue = False OrElse msg.QuoteXmlId = quoteXmlId OrElse (includeNewMessagesWhenSearchingByQuoteIdOrXmlId = True AndAlso msg.QuoteMessageId = 0 AndAlso msg.Active = True)) AndAlso (msgType.HasValue = False OrElse msg.QuoteMessageType = msgType) AndAlso (String.IsNullOrWhiteSpace(msgText) = True OrElse UCase(msg.QuoteMessageText) = UCase(msgText)) AndAlso (active.HasValue = False OrElse msg.Active = active) AndAlso (justAddedOrMaintainedOnSaveRate.HasValue = False OrElse msg.JustAddedOrMaintainedOnSaveRate = justAddedOrMaintainedOnSaveRate) Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteMessagesForMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteMessage)
            Dim msgs As List(Of QuickQuoteMessage) = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesForMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate)
                msgs = QuickQuoteMessagesForIndexes(qqMsgs, indexes, cloneList:=cloneList)
            End If

            Return msgs
        End Function
        Public Shared Sub RemoveQuickQuoteMessagesForMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing)
            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesForMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate)
                RemoveQuickQuoteMessagesByIndex(qqMsgs, indexes)
            End If
        End Sub
        Public Shared Function QuickQuoteMessageForMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing, Optional ByVal cloneMsg As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal returnNewIfNothing As Boolean = False) As QuickQuoteMessage
            Dim msg As QuickQuoteMessage = Nothing

            Dim msgs As List(Of QuickQuoteMessage) = QuickQuoteMessagesForMessageParams(qqMsgs, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate, cloneList:=cloneMsg)
            If msgs IsNot Nothing AndAlso msgs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    msg = msgs(0)
                Else
                    'last
                    msg = msgs(msgs.Count - 1)
                End If
            End If

            If returnNewIfNothing = True AndAlso msg Is Nothing Then
                AddNewMessageToList(qqMsgs, msg:=msg, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate)
            End If

            Return msg
        End Function
        Public Shared Sub AddNewMessageToList(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByRef msg As QuickQuoteMessage = Nothing, Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing)
            If msg Is Nothing Then
                msg = New QuickQuoteMessage
            End If
            With msg
                If quoteMessageId.HasValue = True Then
                    .QuoteMessageId = quoteMessageId
                End If
                If quoteId.HasValue = True Then
                    .QuoteId = quoteId
                End If
                If quoteXmlId.HasValue = True Then
                    .QuoteXmlId = quoteId
                End If
                If msgType.HasValue = True Then
                    .QuoteMessageType = msgType
                End If
                .QuoteMessageText = msgText
                If active.HasValue = True Then
                    .Active = active
                End If
                If justAddedOrMaintainedOnSaveRate.HasValue = True Then
                    .JustAddedOrMaintainedOnSaveRate = justAddedOrMaintainedOnSaveRate
                End If
            End With
            If qqMsgs Is Nothing Then
                qqMsgs = New List(Of QuickQuoteMessage)
            End If
            qqMsgs.Add(msg)
        End Sub
        Public Shared Function QuickQuoteMessageIndexesNotMatchingMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing, Optional ByVal nullMessageEqualsNoMatch As Boolean = True) As List(Of Integer)
            Dim notMatchingindexes As List(Of Integer) = Nothing

            Dim matchingIndexes As List(Of Integer) = QuickQuoteMessageIndexesForMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate)
            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim counter As Integer = 0
                Dim index As Integer = 0
                For Each msg As QuickQuoteMessage In qqMsgs
                    counter += 1
                    index = counter - 1
                    If (msg IsNot Nothing OrElse nullMessageEqualsNoMatch = True) AndAlso (matchingIndexes Is Nothing OrElse matchingIndexes.Count = 0 OrElse matchingIndexes.Contains(index) = False) Then
                        If notMatchingindexes Is Nothing Then
                            notMatchingindexes = New List(Of Integer)
                        End If
                        notMatchingindexes.Add(index)
                    End If
                Next
            End If

            Return notMatchingindexes
        End Function
        Public Shared Function QuickQuoteMessagesNotMatchingMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing, Optional ByVal nullMessageEqualsNoMatch As Boolean = True, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteMessage)
            Dim msgs As List(Of QuickQuoteMessage) = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesNotMatchingMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate, nullMessageEqualsNoMatch:=nullMessageEqualsNoMatch)
                msgs = QuickQuoteMessagesForIndexes(qqMsgs, indexes, cloneList:=cloneList)
            End If

            Return msgs
        End Function
        Public Shared Sub RemoveQuickQuoteMessagesNotMatchingMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing, Optional ByVal nullMessageEqualsNoMatch As Boolean = True)
            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesNotMatchingMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate, nullMessageEqualsNoMatch:=nullMessageEqualsNoMatch)
                RemoveQuickQuoteMessagesByIndex(qqMsgs, indexes)
            End If
        End Sub
        Public Shared Sub ActivateOrDeactivateQuickQuoteMessagesForMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal action As ActivateOrDeactivate, Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing)
            Dim msgs As List(Of QuickQuoteMessage) = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesForMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate)
                msgs = QuickQuoteMessagesForIndexes(qqMsgs, indexes, cloneList:=False)
                ActivateOrDeactivateQuickQuoteMessages(msgs, action)
            End If

        End Sub
        Public Shared Sub ActivateOrDeactivateQuickQuoteMessagesNotMatchingMessageParams(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal action As ActivateOrDeactivate, Optional ByVal quoteMessageId As Nullable(Of Integer) = Nothing, Optional ByVal quoteId As Nullable(Of Integer) = Nothing, Optional ByVal quoteXmlId As Nullable(Of Integer) = Nothing, Optional ByVal includeNewMessagesWhenSearchingByQuoteIdOrXmlId As Boolean = True, Optional ByVal msgType As Nullable(Of QuickQuoteXML.QuoteMessageType) = Nothing, Optional ByVal msgText As String = "", Optional ByVal active As Nullable(Of Boolean) = Nothing, Optional ByVal justAddedOrMaintainedOnSaveRate As Nullable(Of Boolean) = Nothing, Optional ByVal nullMessageEqualsNoMatch As Boolean = True)
            Dim msgs As List(Of QuickQuoteMessage) = Nothing

            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteMessageIndexesNotMatchingMessageParams(qqMsgs, quoteMessageId:=quoteMessageId, quoteId:=quoteId, quoteXmlId:=quoteXmlId, includeNewMessagesWhenSearchingByQuoteIdOrXmlId:=includeNewMessagesWhenSearchingByQuoteIdOrXmlId, msgType:=msgType, msgText:=msgText, active:=active, justAddedOrMaintainedOnSaveRate:=justAddedOrMaintainedOnSaveRate, nullMessageEqualsNoMatch:=nullMessageEqualsNoMatch)
                msgs = QuickQuoteMessagesForIndexes(qqMsgs, indexes, cloneList:=False)
                ActivateOrDeactivateQuickQuoteMessages(msgs, action)
            End If

        End Sub
        Public Enum ActivateOrDeactivate
            Deactivate = 0
            Activate = 1
        End Enum
        Public Shared Sub ActivateOrDeactivateQuickQuoteMessages(ByRef qqMsgs As List(Of QuickQuoteMessage), ByVal action As ActivateOrDeactivate)
            If qqMsgs IsNot Nothing AndAlso qqMsgs.Count > 0 Then
                For Each msg As QuickQuoteMessage In qqMsgs
                    If msg IsNot Nothing Then
                        msg.Active = If(action = ActivateOrDeactivate.Activate, True, False)
                    End If
                Next
            End If
        End Sub

        'added 8/26/2017
        Public Shared Function PrimaryQuickQuoteClassification(ByRef qqClassifications As List(Of QuickQuoteClassification), Optional ByRef listPosition As Integer = 0) As QuickQuoteClassification
            Dim c As QuickQuoteClassification = Nothing
            listPosition = 0
            Dim firstCls As QuickQuoteClassification = Nothing
            Dim firstClsPos As Integer = 0

            If qqClassifications IsNot Nothing AndAlso qqClassifications.Count > 0 Then
                Dim counter As Integer = 0
                For Each cls As QuickQuoteClassification In qqClassifications
                    counter += 1
                    If cls IsNot Nothing Then
                        If firstClsPos = 0 Then
                            firstClsPos = counter
                            firstCls = cls
                        End If
                        If cls.PredominantOccupancy = True Then
                            listPosition = counter
                            c = cls
                            Exit For
                        End If
                    End If
                Next
                If listPosition = 0 AndAlso firstClsPos > 0 Then
                    listPosition = firstClsPos
                    c = firstCls
                End If
            End If

            Return c
        End Function
        Public Shared Function SecondaryQuickQuoteClassifications(ByRef qqClassifications As List(Of QuickQuoteClassification), Optional ByVal listPositionForPrimary As Integer = 0) As List(Of QuickQuoteClassification)
            Dim sCs As List(Of QuickQuoteClassification) = Nothing

            If qqClassifications IsNot Nothing AndAlso qqClassifications.Count > 0 Then
                If listPositionForPrimary = 0 Then
                    Dim pCls As QuickQuoteClassification = PrimaryQuickQuoteClassification(qqClassifications, listPosition:=listPositionForPrimary)
                End If

                Dim counter As Integer = 0
                For Each cls As QuickQuoteClassification In qqClassifications
                    counter += 1
                    If cls IsNot Nothing AndAlso counter <> listPositionForPrimary Then
                        If sCs Is Nothing Then
                            sCs = New List(Of QuickQuoteClassification)
                        End If
                        sCs.Add(cls)
                    End If
                Next
            End If

            Return sCs
        End Function
        Public Shared Sub SetPrimaryAndSecondaryQuickQuoteClassifications(ByRef qqClassifications As List(Of QuickQuoteClassification), ByRef primaryClassification As QuickQuoteClassification, ByRef secondaryClassifications As List(Of QuickQuoteClassification))
            primaryClassification = Nothing
            secondaryClassifications = Nothing

            If qqClassifications IsNot Nothing AndAlso qqClassifications.Count > 0 Then
                Dim pClsPos As Integer = 0
                primaryClassification = PrimaryQuickQuoteClassification(qqClassifications, listPosition:=pClsPos)
                secondaryClassifications = SecondaryQuickQuoteClassifications(qqClassifications, listPositionForPrimary:=pClsPos)
            End If
        End Sub
        'added 9/2/2017
        Public Shared Function QuickQuoteClassificationsWithPrimaryFirst(ByRef qqClassifications As List(Of QuickQuoteClassification)) As List(Of QuickQuoteClassification)
            Dim classifications As List(Of QuickQuoteClassification) = Nothing

            If qqClassifications IsNot Nothing Then
                Dim pClsPos As Integer = 0
                Dim primaryClassification As QuickQuoteClassification = PrimaryQuickQuoteClassification(qqClassifications, listPosition:=pClsPos)
                If primaryClassification IsNot Nothing Then
                    If classifications Is Nothing Then
                        classifications = New List(Of QuickQuoteClassification)
                    End If
                    classifications.Add(primaryClassification)
                    Dim secondaryClassifications As List(Of QuickQuoteClassification) = SecondaryQuickQuoteClassifications(qqClassifications, listPositionForPrimary:=pClsPos)
                    If secondaryClassifications IsNot Nothing AndAlso secondaryClassifications.Count > 0 Then
                        For Each cls As QuickQuoteClassification In secondaryClassifications
                            If cls IsNot Nothing Then
                                classifications.Add(cls)
                            End If
                        Next
                    End If
                End If
            End If

            Return classifications
        End Function

        'added 9/4/2017
        Public Function PaymentOptionByDescription(ByRef paymentOptions As List(Of QuickQuotePaymentOption), ByVal desc As String, Optional ByVal payplanId As String = "", Optional ByVal addToListIfNeededOnValidDescription As Boolean = False, Optional ByVal clonePaymentOption As Boolean = False, Optional ByRef addedNew As Boolean = False) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing
            addedNew = False

            If String.IsNullOrWhiteSpace(desc) = False Then
                If paymentOptions IsNot Nothing AndAlso paymentOptions.Count > 0 Then
                    For Each o As QuickQuotePaymentOption In paymentOptions
                        If o IsNot Nothing Then
                            If UCase(o.Description) = UCase(desc) AndAlso (String.IsNullOrWhiteSpace(payplanId) = True OrElse UCase(o.PayPlanId) = UCase(payplanId)) Then
                                If clonePaymentOption = True Then
                                    po = CloneObject(o)
                                Else
                                    po = o
                                End If
                                Exit For
                            End If
                        End If
                    Next
                End If
                If po Is Nothing AndAlso addToListIfNeededOnValidDescription = True Then
                    po = New QuickQuotePaymentOption
                    po.Description = desc
                    addedNew = True
                    If paymentOptions Is Nothing Then
                        paymentOptions = New List(Of QuickQuotePaymentOption)
                    End If
                    paymentOptions.Add(po)
                End If
            End If

            Return po
        End Function
        Public Sub CombinePaymentOptions(ByRef currentPaymentOptions As List(Of QuickQuotePaymentOption), ByVal paymentOptionsToInclude As List(Of QuickQuotePaymentOption))
            If paymentOptionsToInclude IsNot Nothing AndAlso paymentOptionsToInclude.Count > 0 Then
                If currentPaymentOptions IsNot Nothing AndAlso currentPaymentOptions.Count > 0 Then
                    'look for match on all current in list to include; only use paymentOptions common to both lists so remove anything w/o a match
                    Dim poIndexList As List(Of Integer) = Nothing
                    Dim currentPoPosition As Integer = 0
                    For Each po As QuickQuotePaymentOption In currentPaymentOptions
                        currentPoPosition += 1
                        Dim removeIndex As Boolean = False
                        If po IsNot Nothing Then
                            Dim poFromIncludeList As QuickQuotePaymentOption = PaymentOptionByDescription(paymentOptionsToInclude, po.Description, payplanId:=po.PayPlanId, addToListIfNeededOnValidDescription:=False, clonePaymentOption:=False)
                            If poFromIncludeList IsNot Nothing Then
                                With po
                                    .DepositAmount = getSum(.DepositAmount, poFromIncludeList.DepositAmount)
                                    .InstallmentAmount = getSum(.InstallmentAmount, poFromIncludeList.InstallmentAmount)
                                    .InstallmentFee = getSum(.InstallmentFee, poFromIncludeList.InstallmentFee)
                                    .TotalInstallmentAmount = getSum(.TotalInstallmentAmount, poFromIncludeList.TotalInstallmentAmount)
                                    .TotalPremiumFeeServiceChargeAmount = getSum(.TotalPremiumFeeServiceChargeAmount, poFromIncludeList.TotalPremiumFeeServiceChargeAmount) 'note: appears to be estimate based on DownPaymentAmount and TotalInstallmentAmount, but doesn't match SUM of actual installments

                                    'combine installments if both lists have same #; else remove all
                                    If .Installments IsNot Nothing AndAlso .Installments.Count > 0 Then
                                        Dim removeInstallments As Boolean = False
                                        If poFromIncludeList.Installments IsNot Nothing AndAlso poFromIncludeList.Installments.Count > 0 AndAlso poFromIncludeList.Installments.Count = .Installments.Count Then
                                            Dim installPosition As Integer = 0
                                            For Each install As QuickQuoteInstallment In .Installments
                                                installPosition += 1 'had to add correction 9/13/2017
                                                Dim installFromIncludeList As QuickQuoteInstallment = poFromIncludeList.Installments.Item(installPosition - 1)
                                                If install IsNot Nothing AndAlso installFromIncludeList IsNot Nothing Then
                                                    With install
                                                        .Amount = getSum(.Amount, installFromIncludeList.Amount)
                                                        .ServiceChargeAmount = getSum(.ServiceChargeAmount, installFromIncludeList.ServiceChargeAmount)
                                                    End With
                                                Else
                                                    removeInstallments = True
                                                    Exit For
                                                End If
                                            Next
                                        Else
                                            removeInstallments = True
                                        End If
                                        If removeInstallments = True Then
                                            For Each install As QuickQuoteInstallment In .Installments
                                                If install IsNot Nothing Then
                                                    install.Dispose()
                                                    install = Nothing
                                                End If
                                            Next
                                            .Installments.Clear()
                                        End If
                                    End If
                                End With
                            Else
                                removeIndex = True
                            End If
                        Else
                            removeIndex = True
                        End If
                        If removeIndex = True Then
                            If poIndexList Is Nothing Then
                                poIndexList = New List(Of Integer)
                            End If
                            poIndexList.Add(currentPoPosition - 1)
                        End If
                    Next
                    If poIndexList IsNot Nothing AndAlso poIndexList.Count > 0 Then
                        RemoveQuickQuotePaymentOtionsByIndex(currentPaymentOptions, poIndexList)
                    End If
                Else
                    'nothing in current list yet
                    currentPaymentOptions = CloneObject(paymentOptionsToInclude)
                End If
            End If
        End Sub
        Public Shared Sub RemoveQuickQuotePaymentOtionsByIndex(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal poIndexList As List(Of Integer))
            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 AndAlso poIndexList IsNot Nothing AndAlso poIndexList.Count > 0 Then
                poIndexList.Sort() 'put them in order 1st
                poIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In poIndexList
                    RemoveQuickQuotePaymentOtionByIndex(qqPaymentOptions, i)
                Next
            End If
            'note: could also return removedCount as optional byref param
        End Sub
        Public Shared Sub RemoveQuickQuotePaymentOtionByIndex(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal poIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqPaymentOptions IsNot Nothing AndAlso poIndex >= 0 AndAlso qqPaymentOptions.Count >= CInt(poIndex + 1) Then
                qqPaymentOptions.RemoveAt(poIndex)
                removed = True
            End If
        End Sub
        Public Sub NumberPaymentOptions(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption))
            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim poCounter As Integer = 0
                For Each po As QuickQuotePaymentOption In qqPaymentOptions
                    poCounter += 1
                    If po IsNot Nothing Then
                        po.Set_ListPosition(poCounter)
                    End If
                Next
            End If
        End Sub
        'added 9/6/2017
        Public Sub RemoveNumberFromEndOfString(ByRef str As String)
            If String.IsNullOrWhiteSpace(str) = False Then
                Dim numChars As Integer = 0
                Dim continueLooping As Boolean = True
                Dim charCounter As Integer = 0
                Do Until continueLooping = False
                    charCounter += 1
                    If charCounter > Len(str) Then
                        continueLooping = False
                        Exit Do
                    Else
                        If IsNumeric(Right(str, charCounter)) = True Then
                            numChars += 1
                        Else
                            continueLooping = False
                            Exit Do
                        End If
                    End If
                Loop
                If numChars > 0 Then
                    If numChars >= Len(str) Then
                        str = ""
                    Else
                        str = Trim(Left(str, Len(str) - numChars))
                    End If
                End If
            End If
        End Sub
        Public Sub RemoveNumberFromBeginningOfString(ByRef str As String)
            If String.IsNullOrWhiteSpace(str) = False Then
                Dim numChars As Integer = 0
                Dim continueLooping As Boolean = True
                Dim charCounter As Integer = 0
                Do Until continueLooping = False
                    charCounter += 1
                    If charCounter > Len(str) Then
                        continueLooping = False
                        Exit Do
                    Else
                        If IsNumeric(Left(str, charCounter)) = True Then
                            numChars += 1
                        Else
                            continueLooping = False
                            Exit Do
                        End If
                    End If
                Loop
                If numChars > 0 Then
                    If numChars >= Len(str) Then
                        str = ""
                    Else
                        str = Trim(Right(str, Len(str) - numChars))
                    End If
                End If
            End If
        End Sub
        'added 9/7/2017
        Public Function StringWithNumberRemovedFromEnd(ByVal str As String) As String
            Dim newStr As String = str

            RemoveNumberFromEndOfString(newStr)

            Return newStr
        End Function
        Public Function StringWithNumberRemovedFromBeginning(ByVal str As String) As String
            Dim newStr As String = str

            RemoveNumberFromBeginningOfString(newStr)

            Return newStr
        End Function
        'Public Sub SortPaymentOptions(ByRef options As List(Of QuickQuotePaymentOption), Optional ByVal sortBy As QuickQuotePaymentOption.SortBy = QuickQuotePaymentOption.SortBy.DescriptionAscending)
        'updated 9/8/2017 for optional backupListPositionSortBy
        Public Sub SortPaymentOptions(ByRef options As List(Of QuickQuotePaymentOption), Optional ByVal sortBy As QuickQuotePaymentOption.SortBy = QuickQuotePaymentOption.SortBy.DescriptionAscending, Optional ByVal backupListPositionSortBy As QuickQuotePaymentOption.ListPositionSortBy = QuickQuotePaymentOption.ListPositionSortBy.Ascending)
            If options IsNot Nothing AndAlso options.Count > 0 Then
                NumberPaymentOptionsIfNeeded(options) 'added 9/8/2017
                options.Sort(PaymentOptionComparerForSortBy(sortBy, backupListPositionSortBy:=backupListPositionSortBy)) 'updated 9/8/2017 for optional backupListPositionSortBy
            End If
        End Sub
        'Private Function PaymentOptionComparerForSortBy(ByVal sortBy As QuickQuotePaymentOption.SortBy) As IComparer(Of QuickQuotePaymentOption)
        'updated 9/8/2017 for optional backupListPositionSortBy
        Private Function PaymentOptionComparerForSortBy(ByVal sortBy As QuickQuotePaymentOption.SortBy, Optional ByVal backupListPositionSortBy As QuickQuotePaymentOption.ListPositionSortBy = QuickQuotePaymentOption.ListPositionSortBy.Ascending) As IComparer(Of QuickQuotePaymentOption)
            Dim comparer As IComparer(Of QuickQuotePaymentOption) = Nothing
            Select Case sortBy
                Case QuickQuotePaymentOption.SortBy.DescriptionAscending
                    'comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.DescriptionDescending
                    'comparer = New QuickQuotePaymentOptionComparer_DescriptionDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionDescending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionDescending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsAscending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescending
                    End Select
                Case QuickQuotePaymentOption.SortBy.PayPlanIdAscending
                    'comparer = New QuickQuotePaymentOptionComparer_PayPlanIdAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdAscending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.PayPlanIdDescending
                    'comparer = New QuickQuotePaymentOptionComparer_PayPlanIdDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdDescending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_PayPlanIdDescending
                    End Select
                Case QuickQuotePaymentOption.SortBy.FriendlyDescriptionAscending
                    'comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionAscending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.FriendlyDescriptionDescending
                    'comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionDescending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_FriendlyDescriptionDescending
                    End Select
                    'added 9/8/2017
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsAscendingThenDescriptionAscending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionAscending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionAscending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescendingThenDescriptionAscending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionAscending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionAscending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsAscendingThenDescriptionDescending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionDescending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionDescending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenDescriptionDescending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescendingThenDescriptionDescending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionDescending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionDescending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenDescriptionDescending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsAscendingThenFriendlyDescriptionDescending
                    End Select
                Case QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending
                    'comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending_WithBackupListPositionMatchingInitialSort
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending_WithBackupListPositionMatchingLastSort
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_NumberOfInstallmentsDescendingThenFriendlyDescriptionDescending
                    End Select
                Case Else 'same as default when no sortBy
                    'comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending
                    'updated 9/8/2017 for optional backupListPositionSortBy; original logic in ELSE
                    Select Case backupListPositionSortBy
                        Case QuickQuotePaymentOption.ListPositionSortBy.Ascending
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending_WithBackupListPositionAscending
                        Case QuickQuotePaymentOption.ListPositionSortBy.Descending
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending_WithBackupListPositionDescending
                        Case QuickQuotePaymentOption.ListPositionSortBy.MatchInitialSort, QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending_WithMatchingSortOnBackupListPosition
                        Case Else
                            comparer = New QuickQuotePaymentOptionComparer_DescriptionAscending
                    End Select
            End Select
            Return comparer
        End Function
        'added 9/8/2017
        Public Sub NumberPaymentOptionsIfNeeded(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption))
            If HasNumberedPaymentOptions(qqPaymentOptions) = False Then
                NumberPaymentOptions(qqPaymentOptions)
            End If
        End Sub
        Public Function HasNumberedPaymentOptions(ByVal qqPaymentOptions As List(Of QuickQuotePaymentOption)) As Boolean
            Dim hasNumbered As Boolean = False

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                For Each po As QuickQuotePaymentOption In qqPaymentOptions
                    If po.ListPosition > 0 Then
                        hasNumbered = True
                    Else
                        hasNumbered = False
                        Exit For
                    End If
                Next
            End If

            Return hasNumbered
        End Function
        'added 9/16/2017
        Public Shared Function QuickQuotePaymentOptionIndexesWithMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim counter As Integer = 0
                For Each po As QuickQuotePaymentOption In qqPaymentOptions
                    counter += 1
                    If po IsNot Nothing AndAlso (po.Description = txtToMatch OrElse (String.IsNullOrWhiteSpace(po.Description) = False AndAlso String.IsNullOrWhiteSpace(txtToMatch) = False AndAlso UCase(po.Description).Contains(UCase(txtToMatch)) = True)) Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuotePaymentOptionsForIndexes(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    If i >= 0 AndAlso qqPaymentOptions.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If pos Is Nothing Then
                            pos = New List(Of QuickQuotePaymentOption)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            pos.Add(qqHelper.CloneObject(qqPaymentOptions.Item(i)))
                        Else
                            pos.Add(qqPaymentOptions.Item(i))
                        End If
                    End If
                Next
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionIndexesWithoutMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of Integer)
            Dim notMatchingindexes As List(Of Integer) = Nothing

            Dim matchingIndexes As List(Of Integer) = QuickQuotePaymentOptionIndexesWithMatchingTextInDescription(qqPaymentOptions, txtToMatch)
            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim counter As Integer = 0
                Dim index As Integer = 0
                For Each po As QuickQuotePaymentOption In qqPaymentOptions
                    counter += 1
                    index = counter - 1
                    If (po IsNot Nothing OrElse nullPaymentOptionEqualsNoMatch = True) AndAlso (matchingIndexes Is Nothing OrElse matchingIndexes.Count = 0 OrElse matchingIndexes.Contains(index) = False) Then
                        If notMatchingindexes Is Nothing Then
                            notMatchingindexes = New List(Of Integer)
                        End If
                        notMatchingindexes.Add(index)
                    End If
                Next
            End If

            Return notMatchingindexes
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithoutMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, Optional ByVal cloneList As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuotePaymentOptionIndexesWithoutMatchingTextInDescription(qqPaymentOptions, txtToMatch, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
                pos = QuickQuotePaymentOptionsForIndexes(qqPaymentOptions, indexes, cloneList:=cloneList)
            End If

            Return pos
        End Function
        'added 9/19/2017
        Public Shared Function QuickQuotePaymentOptionIndexesWithMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String)) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 AndAlso txtMatchList IsNot Nothing AndAlso txtMatchList.Count > 0 Then
                Dim counter As Integer = 0
                For Each po As QuickQuotePaymentOption In qqPaymentOptions
                    counter += 1
                    For Each txtToMatch As String In txtMatchList
                        If po IsNot Nothing AndAlso (po.Description = txtToMatch OrElse (String.IsNullOrWhiteSpace(po.Description) = False AndAlso String.IsNullOrWhiteSpace(txtToMatch) = False AndAlso UCase(po.Description).Contains(UCase(txtToMatch)) = True)) Then
                            If indexes Is Nothing Then
                                indexes = New List(Of Integer)
                            End If
                            indexes.Add(counter - 1)
                            Exit For
                        End If
                    Next
                Next
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuotePaymentOptionIndexesWithoutMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of Integer)
            Dim notMatchingindexes As List(Of Integer) = Nothing

            Dim matchingIndexes As List(Of Integer) = QuickQuotePaymentOptionIndexesWithMatchingTextInDescription(qqPaymentOptions, txtMatchList)
            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim counter As Integer = 0
                Dim index As Integer = 0
                For Each po As QuickQuotePaymentOption In qqPaymentOptions
                    counter += 1
                    index = counter - 1
                    If (po IsNot Nothing OrElse nullPaymentOptionEqualsNoMatch = True) AndAlso (matchingIndexes Is Nothing OrElse matchingIndexes.Count = 0 OrElse matchingIndexes.Contains(index) = False) Then
                        If notMatchingindexes Is Nothing Then
                            notMatchingindexes = New List(Of Integer)
                        End If
                        notMatchingindexes.Add(index)
                    End If
                Next
            End If

            Return notMatchingindexes
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithoutMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), Optional ByVal cloneList As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuotePaymentOptionIndexesWithoutMatchingTextInDescription(qqPaymentOptions, txtMatchList, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
                pos = QuickQuotePaymentOptionsForIndexes(qqPaymentOptions, indexes, cloneList:=cloneList)
            End If

            Return pos
        End Function

        'added 9/21/2017
        Public Sub ClearOutQuickQuoteExperienceModification(ByRef qqExpMod As QuickQuoteExperienceModification)
            If qqExpMod IsNot Nothing Then
                qqExpMod = New QuickQuoteExperienceModification
            End If
        End Sub
        Public Sub DeactivateQuickQuoteExperienceModification(ByRef qqExpMod As QuickQuoteExperienceModification, Optional ByVal clearOutFirst As Boolean = True)
            If clearOutFirst = True Then
                ClearOutQuickQuoteExperienceModification(qqExpMod)
            End If
            If qqExpMod IsNot Nothing Then
                qqExpMod.DetailStatusCode = CInt(Diamond.Common.Enums.StatusCode.Deleted).ToString '2
            End If
        End Sub
        Public Sub ClearOutDiamondExperienceModification(ByRef diaExpMod As Diamond.Common.Objects.Policy.ExperienceModification)
            If diaExpMod IsNot Nothing Then
                With diaExpMod
                    .BureauTypeId = 0
                    .DetailStatusCode = 0
                    .ExperienceRatingPeriodStatusTypeId = 0
                    .Factor = CDec(0)
                    .ModificationProductionDate = Nothing
                    .RatingEffectiveDate = Nothing
                    .RiskIdentifier = ""
                End With
            End If
        End Sub
        Public Sub DeactivateDiamondExperienceModification(ByRef diaExpMod As Diamond.Common.Objects.Policy.ExperienceModification, Optional ByVal clearOutFirst As Boolean = True)
            If clearOutFirst = True Then
                ClearOutDiamondExperienceModification(diaExpMod)
            End If
            If diaExpMod IsNot Nothing Then
                diaExpMod.DetailStatusCode = Diamond.Common.Enums.StatusCode.Deleted '2
            End If
        End Sub
        'added 9/30/2017
        Public Function ActiveQuickQuoteExperienceModification(ByRef expMods As List(Of QuickQuoteExperienceModification), Optional ByVal firstOrLastExpMod As FirstOrLast = FirstOrLast.Last) As QuickQuoteExperienceModification
            Dim em As QuickQuoteExperienceModification = Nothing

            Dim activeIndexes As List(Of Integer) = ActiveQuickQuoteExperienceModificationIndexes(expMods)
            If activeIndexes IsNot Nothing AndAlso activeIndexes.Count > 0 Then
                activeIndexes.Sort() 'should already be in order but just in case
                'will assume expMods is valid per indexes returned; could validate and loop thru
                If firstOrLastExpMod = FirstOrLast.First Then
                    em = expMods.Item(activeIndexes.Item(0))
                Else
                    em = expMods.Item(activeIndexes.Item(activeIndexes.Count - 1))
                End If
            End If

            Return em
        End Function
        Public Function ActiveQuickQuoteExperienceModificationIndexes(ByRef expMods As List(Of QuickQuoteExperienceModification)) As List(Of Integer)
            Dim activeIndexes As List(Of Integer) = Nothing

            If expMods IsNot Nothing AndAlso expMods.Count > 0 Then
                Dim emCounter As Integer = 0
                For Each em As QuickQuoteExperienceModification In expMods
                    emCounter += 1
                    If em IsNot Nothing AndAlso IsDiamondDetailStatusCodeDeleted(em.DetailStatusCode) = False Then
                        AddIntegerToIntegerList(emCounter - 1, activeIndexes, positiveOnly:=False)
                    End If
                Next
            End If

            Return activeIndexes
        End Function
        'Public Function ActiveQuickQuoteExperienceModificationFactor(ByRef expMods As List(Of QuickQuoteExperienceModification), Optional ByVal firstOrLastExpMod As FirstOrLast = FirstOrLast.Last) As String
        'updated 10/2/2017 w/ optional byref param
        Public Function ActiveQuickQuoteExperienceModificationFactor(ByRef expMods As List(Of QuickQuoteExperienceModification), Optional ByVal firstOrLastExpMod As FirstOrLast = FirstOrLast.Last, Optional ByRef foundExpModInList As Boolean = False) As String
            Dim factor As String = ""
            foundExpModInList = False 'added 10/2/2017

            Dim em As QuickQuoteExperienceModification = ActiveQuickQuoteExperienceModification(expMods, firstOrLastExpMod:=firstOrLastExpMod)
            If em IsNot Nothing Then
                factor = em.Factor
                foundExpModInList = True 'added 10/2/2017
            End If

            Return factor
        End Function
        Public Function OnlyAllowExperienceModificationAndAnniversaryDateWithValidFactor() As Boolean
            Dim onlyAllow As Boolean = True 'default to True; key required to turn to False

            Dim strOnlyAllow As String = configAppSettingValueAsString("QuickQuote_OnlyAllowExperienceModificationAndAnniversaryDateWithValidFactor")
            If String.IsNullOrWhiteSpace(strOnlyAllow) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strOnlyAllow) = "YES" OrElse qqHelper.BitToBoolean(strOnlyAllow) = True Then 'key would just need any text value that doesn't equate to True to return False
                    onlyAllow = True
                Else
                    onlyAllow = False
                End If
            End If

            Return onlyAllow
        End Function
        'added 10/2/2017
        Public Function ActiveQuickQuoteExperienceModificationFactorForQuote(ByRef qqo As QuickQuoteObject, Optional ByVal firstOrLastExpMod As FirstOrLast = FirstOrLast.Last, Optional ByRef foundExpModInList As Boolean = False, Optional ByVal okayToReturnFromQuoteObjectIfPositiveDecimalAndListIsEmpty As Boolean = False) As String
            Dim factor As String = ""
            foundExpModInList = False

            If qqo IsNot Nothing Then
                factor = ActiveQuickQuoteExperienceModificationFactor(qqo.ExperienceModifications, firstOrLastExpMod:=firstOrLastExpMod, foundExpModInList:=foundExpModInList)
                If foundExpModInList = False AndAlso IsPositiveDecimalString(qqo.ExperienceModificationFactor) = True Then
                    factor = qqo.ExperienceModificationFactor
                End If
            End If

            Return factor
        End Function
        Public Function ActiveQuickQuoteExperienceModificationFactorForQuote_UseSettings(ByRef qqo As QuickQuoteObject, Optional ByVal firstOrLastExpMod As FirstOrLast = FirstOrLast.Last, Optional ByRef foundExpModInList As Boolean = False) As String
            Dim factor As String = ""

            Dim okayToReturnFromQuoteObjectIfPositiveDecimalAndListIsEmpty As Boolean = OkayToReturnExperienceModificationFactorFromQuoteObjectIfPositiveDecimalAndListIsEmpty()
            factor = ActiveQuickQuoteExperienceModificationFactorForQuote(qqo, firstOrLastExpMod:=firstOrLastExpMod, foundExpModInList:=foundExpModInList, okayToReturnFromQuoteObjectIfPositiveDecimalAndListIsEmpty:=okayToReturnFromQuoteObjectIfPositiveDecimalAndListIsEmpty)

            Return factor
        End Function
        Public Function OkayToReturnExperienceModificationFactorFromQuoteObjectIfPositiveDecimalAndListIsEmpty() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("QuickQuote_OkayToReturnExperienceModificationFactorFromQuoteObjectIfPositiveDecimalAndListIsEmpty")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function

        'added 10/7/2017
        Public Shared Function FirstPhoneWithNumber(ByRef phones As List(Of QuickQuotePhone), Optional ByVal cloneIt As Boolean = False) As QuickQuotePhone
            Dim p As QuickQuotePhone = Nothing

            If phones IsNot Nothing AndAlso phones.Count > 0 Then
                For Each qp As QuickQuotePhone In phones
                    If qp IsNot Nothing AndAlso String.IsNullOrWhiteSpace(qp.Number) = False Then
                        If cloneIt = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            p = qqHelper.CloneObject(qp)
                        Else
                            p = qp
                        End If
                        Exit For
                    End If
                Next
            End If

            Return p
        End Function
        Public Shared Function FirstEmailWithAddress(ByRef emails As List(Of QuickQuoteEmail), Optional ByVal cloneIt As Boolean = False) As QuickQuoteEmail
            Dim e As QuickQuoteEmail = Nothing

            For Each qe As QuickQuoteEmail In emails
                If qe IsNot Nothing AndAlso String.IsNullOrWhiteSpace(qe.Address) = False Then
                    If cloneIt = True Then
                        Dim qqHelper As New QuickQuoteHelperClass
                        e = qqHelper.CloneObject(qe)
                    Else
                        e = qe
                    End If
                    Exit For
                End If
            Next

            Return e
        End Function

        'added 10/9/2017
        Public Shared Sub AddInclusionOfSoleProprietorToList(ByRef inclusions As List(Of QuickQuoteInclusionOfSoleProprietorRecord), Optional ByVal numberToAdd As Integer = 1)
            If numberToAdd > 0 Then
                If inclusions Is Nothing Then
                    inclusions = New List(Of QuickQuoteInclusionOfSoleProprietorRecord)
                End If
                Dim numAdded As Integer = 0
                Do Until numAdded = numberToAdd
                    inclusions.Add(New QuickQuoteInclusionOfSoleProprietorRecord)
                    numAdded += 1
                    If numAdded = numberToAdd Then
                        Exit Do
                    End If
                Loop
            End If
        End Sub
        Public Shared Sub AddWaiverOfSubrogationRecordToList(ByRef waivers As List(Of QuickQuoteWaiverOfSubrogationRecord), Optional ByVal numberToAdd As Integer = 1)
            If numberToAdd > 0 Then
                If waivers Is Nothing Then
                    waivers = New List(Of QuickQuoteWaiverOfSubrogationRecord)
                End If
                Dim numAdded As Integer = 0
                Do Until numAdded = numberToAdd
                    waivers.Add(New QuickQuoteWaiverOfSubrogationRecord)
                    numAdded += 1
                    If numAdded = numberToAdd Then
                        Exit Do
                    End If
                Loop
            End If
        End Sub
        Public Shared Sub AddExclusionOfSoleProprietorToList(ByRef exclusions As List(Of QuickQuoteExclusionOfSoleProprietorRecord), Optional ByVal numberToAdd As Integer = 1)
            If numberToAdd > 0 Then
                If exclusions Is Nothing Then
                    exclusions = New List(Of QuickQuoteExclusionOfSoleProprietorRecord)
                End If
                Dim numAdded As Integer = 0
                Do Until numAdded = numberToAdd
                    exclusions.Add(New QuickQuoteExclusionOfSoleProprietorRecord)
                    numAdded += 1
                    If numAdded = numberToAdd Then
                        Exit Do
                    End If
                Loop
            End If
        End Sub
        Public Shared Sub AddExclusionOfSoleProprietorToList_IL(ByRef exclusions As List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL), Optional ByVal numberToAdd As Integer = 1) 'added 10/15/2018 for IL
            If numberToAdd > 0 Then
                If exclusions Is Nothing Then
                    exclusions = New List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL)
                End If
                Dim numAdded As Integer = 0
                Do Until numAdded = numberToAdd
                    exclusions.Add(New QuickQuoteExclusionOfSoleProprietorRecord_IL)
                    numAdded += 1
                    If numAdded = numberToAdd Then
                        Exit Do
                    End If
                Loop
            End If
        End Sub
        Public Shared Sub AddExclusionOfAmishWorkerToList(ByRef exclusions As List(Of QuickQuoteExclusionOfAmishWorkerRecord), Optional ByVal numberToAdd As Integer = 1)
            If numberToAdd > 0 Then
                If exclusions Is Nothing Then
                    exclusions = New List(Of QuickQuoteExclusionOfAmishWorkerRecord)
                End If
                Dim numAdded As Integer = 0
                Do Until numAdded = numberToAdd
                    exclusions.Add(New QuickQuoteExclusionOfAmishWorkerRecord)
                    numAdded += 1
                    If numAdded = numberToAdd Then
                        Exit Do
                    End If
                Loop
            End If
        End Sub
        'added 4/26/2019
        Public Shared Sub AddKentuckyRejectionOfCoverageEndorsementToList(ByRef krces As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement), Optional ByVal numberToAdd As Integer = 1)
            If numberToAdd > 0 Then
                If krces Is Nothing Then
                    krces = New List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement)
                End If
                Dim numAdded As Integer = 0
                Do Until numAdded = numberToAdd
                    krces.Add(New QuickQuoteKentuckyRejectionOfCoverageEndorsement)
                    numAdded += 1
                    If numAdded = numberToAdd Then
                        Exit Do
                    End If
                Loop
            End If
        End Sub
        'added 10/10/2017
        Public Shared Sub RemoveInclusionOfSoleProprietorFromList(ByRef inclusions As List(Of QuickQuoteInclusionOfSoleProprietorRecord), Optional ByVal numberToRemove As Integer = 1)
            If numberToRemove > 0 AndAlso inclusions IsNot Nothing Then
                If inclusions.Count > 0 Then
                    Dim numRemoved As Integer = 0
                    Do Until numRemoved = numberToRemove OrElse inclusions.Count = 0
                        inclusions.RemoveAt(inclusions.Count - 1)
                        numRemoved += 1
                        If numRemoved = numberToRemove OrElse inclusions.Count = 0 Then
                            Exit Do
                        End If
                    Loop
                End If
            End If
        End Sub
        Public Shared Sub RemoveWaiverOfSubrogationRecordFromList(ByRef waivers As List(Of QuickQuoteWaiverOfSubrogationRecord), Optional ByVal numberToRemove As Integer = 1)
            If numberToRemove > 0 AndAlso waivers IsNot Nothing Then
                If waivers.Count > 0 Then
                    Dim numRemoved As Integer = 0
                    Do Until numRemoved = numberToRemove OrElse waivers.Count = 0
                        waivers.RemoveAt(waivers.Count - 1)
                        numRemoved += 1
                        If numRemoved = numberToRemove OrElse waivers.Count = 0 Then
                            Exit Do
                        End If
                    Loop
                End If
            End If
        End Sub
        Public Shared Sub RemoveExclusionOfSoleProprietorFromList(ByRef exclusions As List(Of QuickQuoteExclusionOfSoleProprietorRecord), Optional ByVal numberToRemove As Integer = 1) '10/15/2018 note: renamed from RemoveExclusionOfSoleProprietorTFromList; must've been typo
            If numberToRemove > 0 AndAlso exclusions IsNot Nothing Then
                If exclusions.Count > 0 Then
                    Dim numRemoved As Integer = 0
                    Do Until numRemoved = numberToRemove OrElse exclusions.Count = 0
                        exclusions.RemoveAt(exclusions.Count - 1)
                        numRemoved += 1
                        If numRemoved = numberToRemove OrElse exclusions.Count = 0 Then
                            Exit Do
                        End If
                    Loop
                End If
            End If
        End Sub
        Public Shared Sub RemoveExclusionOfSoleProprietorFromList_IL(ByRef exclusions As List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL), Optional ByVal numberToRemove As Integer = 1) 'added 10/15/2018 for IL
            If numberToRemove > 0 AndAlso exclusions IsNot Nothing Then
                If exclusions.Count > 0 Then
                    Dim numRemoved As Integer = 0
                    Do Until numRemoved = numberToRemove OrElse exclusions.Count = 0
                        exclusions.RemoveAt(exclusions.Count - 1)
                        numRemoved += 1
                        If numRemoved = numberToRemove OrElse exclusions.Count = 0 Then
                            Exit Do
                        End If
                    Loop
                End If
            End If
        End Sub
        Public Shared Sub RemoveExclusionOfAmishWorkerFromList(ByRef exclusions As List(Of QuickQuoteExclusionOfAmishWorkerRecord), Optional ByVal numberToRemove As Integer = 1)
            If numberToRemove > 0 AndAlso exclusions IsNot Nothing Then
                If exclusions.Count > 0 Then
                    Dim numRemoved As Integer = 0
                    Do Until numRemoved = numberToRemove OrElse exclusions.Count = 0
                        exclusions.RemoveAt(exclusions.Count - 1)
                        numRemoved += 1
                        If numRemoved = numberToRemove OrElse exclusions.Count = 0 Then
                            Exit Do
                        End If
                    Loop
                End If
            End If
        End Sub
        'added 4/26/2019
        Public Shared Sub RemoveKentuckyRejectionOfCoverageEndorsementFromList(ByRef krces As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement), Optional ByVal numberToRemove As Integer = 1)
            If numberToRemove > 0 AndAlso krces IsNot Nothing Then
                If krces.Count > 0 Then
                    Dim numRemoved As Integer = 0
                    Do Until numRemoved = numberToRemove OrElse krces.Count = 0
                        krces.RemoveAt(krces.Count - 1)
                        numRemoved += 1
                        If numRemoved = numberToRemove OrElse krces.Count = 0 Then
                            Exit Do
                        End If
                    Loop
                End If
            End If
        End Sub
        Public Shared Sub UpdateInclusionOfSoleProprietorListFromHasFlag(ByRef inclusions As List(Of QuickQuoteInclusionOfSoleProprietorRecord), ByVal hasInclusions As Boolean, Optional ByRef inclusionsBackup As List(Of QuickQuoteInclusionOfSoleProprietorRecord) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal addInitialItemIfNeeded As Boolean = True) 'updated 10/13/2017 w/ optional param to addInitialItemIfNeeded
            Dim qqHelper As New QuickQuoteHelperClass
            If hasInclusions = True Then
                If inclusions IsNot Nothing AndAlso inclusions.Count > 0 Then
                    'okay
                Else
                    If inclusionsBackup IsNot Nothing AndAlso inclusionsBackup.Count > 0 Then
                        inclusions = qqHelper.CloneObject(inclusionsBackup)
                    Else
                        If addInitialItemIfNeeded = True Then 'added IF 10/13/2017
                            AddInclusionOfSoleProprietorToList(inclusions, numberToAdd:=1)
                        End If
                    End If
                End If
            Else
                If inclusions Is Nothing OrElse inclusions.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If inclusionsBackup IsNot Nothing AndAlso inclusionsBackup.Count > inclusions.Count Then
                            'backup already okay
                        Else
                            inclusionsBackup = qqHelper.CloneObject(inclusions)
                        End If
                    End If
                    For Each i As QuickQuoteInclusionOfSoleProprietorRecord In inclusions
                        If i IsNot Nothing Then
                            i.Dispose()
                            i = Nothing
                        End If
                    Next
                    inclusions.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Shared Sub UpdateWaiverOfSubrogationRecordListFromHasFlag(ByRef waivers As List(Of QuickQuoteWaiverOfSubrogationRecord), ByVal hasWaivers As Boolean, Optional ByRef waiversBackup As List(Of QuickQuoteWaiverOfSubrogationRecord) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal addInitialItemIfNeeded As Boolean = True) 'updated 10/13/2017 w/ optional param to addInitialItemIfNeeded
            Dim qqHelper As New QuickQuoteHelperClass
            If hasWaivers = True Then
                If waivers IsNot Nothing AndAlso waivers.Count > 0 Then
                    'okay
                Else
                    If waiversBackup IsNot Nothing AndAlso waiversBackup.Count > 0 Then
                        waivers = qqHelper.CloneObject(waiversBackup)
                    Else
                        If addInitialItemIfNeeded = True Then 'added IF 10/13/2017
                            AddWaiverOfSubrogationRecordToList(waivers, numberToAdd:=1)
                        End If
                    End If
                End If
            Else
                If waivers Is Nothing OrElse waivers.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If waiversBackup IsNot Nothing AndAlso waiversBackup.Count > waivers.Count Then
                            'backup already okay
                        Else
                            waiversBackup = qqHelper.CloneObject(waivers)
                        End If
                    End If
                    For Each w As QuickQuoteWaiverOfSubrogationRecord In waivers
                        If w IsNot Nothing Then
                            w.Dispose()
                            w = Nothing
                        End If
                    Next
                    waivers.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Shared Sub UpdateExclusionOfSoleProprietorListFromHasFlag(ByRef exclusions As List(Of QuickQuoteExclusionOfSoleProprietorRecord), ByVal hasExclusions As Boolean, Optional ByRef exclusionsBackup As List(Of QuickQuoteExclusionOfSoleProprietorRecord) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal addInitialItemIfNeeded As Boolean = True) 'updated 10/13/2017 w/ optional param to addInitialItemIfNeeded
            Dim qqHelper As New QuickQuoteHelperClass
            If hasExclusions = True Then
                If exclusions IsNot Nothing AndAlso exclusions.Count > 0 Then
                    'okay
                Else
                    If exclusionsBackup IsNot Nothing AndAlso exclusionsBackup.Count > 0 Then
                        exclusions = qqHelper.CloneObject(exclusionsBackup)
                    Else
                        If addInitialItemIfNeeded = True Then 'added IF 10/13/2017
                            AddExclusionOfSoleProprietorToList(exclusions, numberToAdd:=1)
                        End If
                    End If
                End If
            Else
                If exclusions Is Nothing OrElse exclusions.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If exclusionsBackup IsNot Nothing AndAlso exclusionsBackup.Count > exclusions.Count Then
                            'backup already okay
                        Else
                            exclusionsBackup = qqHelper.CloneObject(exclusions)
                        End If
                    End If
                    For Each e As QuickQuoteExclusionOfSoleProprietorRecord In exclusions
                        If e IsNot Nothing Then
                            e.Dispose()
                            e = Nothing
                        End If
                    Next
                    exclusions.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Shared Sub UpdateExclusionOfSoleProprietorListFromHasFlag_IL(ByRef exclusions As List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL), ByVal hasExclusions As Boolean, Optional ByRef exclusionsBackup As List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal addInitialItemIfNeeded As Boolean = True) 'added 10/15/2018 for IL
            Dim qqHelper As New QuickQuoteHelperClass
            If hasExclusions = True Then
                If exclusions IsNot Nothing AndAlso exclusions.Count > 0 Then
                    'okay
                Else
                    If exclusionsBackup IsNot Nothing AndAlso exclusionsBackup.Count > 0 Then
                        exclusions = qqHelper.CloneObject(exclusionsBackup)
                    Else
                        If addInitialItemIfNeeded = True Then
                            AddExclusionOfSoleProprietorToList_IL(exclusions, numberToAdd:=1)
                        End If
                    End If
                End If
            Else
                If exclusions Is Nothing OrElse exclusions.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If exclusionsBackup IsNot Nothing AndAlso exclusionsBackup.Count > exclusions.Count Then
                            'backup already okay
                        Else
                            exclusionsBackup = qqHelper.CloneObject(exclusions)
                        End If
                    End If
                    For Each e As QuickQuoteExclusionOfSoleProprietorRecord_IL In exclusions
                        If e IsNot Nothing Then
                            e.Dispose()
                            e = Nothing
                        End If
                    Next
                    exclusions.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Shared Sub UpdateExclusionOfAmishWorkerListFromHasFlag(ByRef exclusions As List(Of QuickQuoteExclusionOfAmishWorkerRecord), ByVal hasExclusions As Boolean, Optional ByRef exclusionsBackup As List(Of QuickQuoteExclusionOfAmishWorkerRecord) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal addInitialItemIfNeeded As Boolean = True) 'updated 10/13/2017 w/ optional param to addInitialItemIfNeeded
            Dim qqHelper As New QuickQuoteHelperClass
            If hasExclusions = True Then
                If exclusions IsNot Nothing AndAlso exclusions.Count > 0 Then
                    'okay
                Else
                    If exclusionsBackup IsNot Nothing AndAlso exclusionsBackup.Count > 0 Then
                        exclusions = qqHelper.CloneObject(exclusionsBackup)
                    Else
                        If addInitialItemIfNeeded = True Then 'added IF 10/13/2017
                            AddExclusionOfAmishWorkerToList(exclusions, numberToAdd:=1)
                        End If
                    End If
                End If
            Else
                If exclusions Is Nothing OrElse exclusions.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If exclusionsBackup IsNot Nothing AndAlso exclusionsBackup.Count > exclusions.Count Then
                            'backup already okay
                        Else
                            exclusionsBackup = qqHelper.CloneObject(exclusions)
                        End If
                    End If
                    For Each e As QuickQuoteExclusionOfAmishWorkerRecord In exclusions
                        If e IsNot Nothing Then
                            e.Dispose()
                            e = Nothing
                        End If
                    Next
                    exclusions.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Shared Sub UpdateWaiverOfSubrogationRecordListFromNumberOfWaivers(ByRef waivers As List(Of QuickQuoteWaiverOfSubrogationRecord), ByVal numberOfWaivers As Integer, Optional ByRef waiversBackup As List(Of QuickQuoteWaiverOfSubrogationRecord) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True)
            Dim qqHelper As New QuickQuoteHelperClass
            If numberOfWaivers > 0 Then
                If waivers IsNot Nothing AndAlso waivers.Count = numberOfWaivers Then
                    'okay
                Else
                    'If waiversBackup IsNot Nothing AndAlso waiversBackup.Count > 0 Then
                    '    waivers = qqHelper.CloneObject(waiversBackup)
                    'Else
                    '    AddWaiverOfSubrogationRecordToList(waivers, numberToAdd:=1)
                    'End If
                    If waiversBackup IsNot Nothing AndAlso waiversBackup.Count = numberOfWaivers Then
                        waivers = qqHelper.CloneObject(waiversBackup)
                    Else
                        Dim waiversCount As Integer = 0
                        If waivers IsNot Nothing AndAlso waivers.Count > 0 Then
                            waiversCount = waivers.Count
                        End If
                        If numberOfWaivers > waiversCount Then
                            'add
                            AddWaiverOfSubrogationRecordToList(waivers, numberToAdd:=numberOfWaivers - waiversCount)
                        ElseIf numberOfWaivers < waiversCount Then
                            'subtract
                            If updateBackupListBeforeRemoving = True Then
                                If waiversBackup IsNot Nothing AndAlso waiversBackup.Count > waiversCount Then
                                    'backup already okay
                                Else
                                    waiversBackup = qqHelper.CloneObject(waivers)
                                End If
                            End If
                            RemoveWaiverOfSubrogationRecordFromList(waivers, numberToRemove:=waiversCount - numberOfWaivers)
                        End If
                    End If
                End If
            Else
                If waivers Is Nothing OrElse waivers.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If waiversBackup IsNot Nothing AndAlso waiversBackup.Count > waivers.Count Then
                            'backup already okay
                        Else
                            waiversBackup = qqHelper.CloneObject(waivers)
                        End If
                    End If
                    For Each w As QuickQuoteWaiverOfSubrogationRecord In waivers
                        If w IsNot Nothing Then
                            w.Dispose()
                            w = Nothing
                        End If
                    Next
                    waivers.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub
        Public Shared Sub UpdateWaiverOfSubrogationRecordListWithPremiumId(ByRef waivers As List(Of QuickQuoteWaiverOfSubrogationRecord), ByVal premiumId As String, Optional ByRef waiversUpdated As Integer = 0) 'updated 10/12/2017 w/ optional ByRef param to see how many records were updated
            Dim qqHelper As New QuickQuoteHelperClass
            waiversUpdated = 0 'added 10/12/2017
            If waivers IsNot Nothing AndAlso waivers.Count > 0 Then
                For Each w As QuickQuoteWaiverOfSubrogationRecord In waivers
                    If w IsNot Nothing Then
                        'If qqHelper.IsPositiveIntegerString(premiumId) = True Then
                        If qqHelper.IsNumericString(premiumId) = True Then
                            w.PremiumId = qqHelper.IntegerForString(premiumId)
                        Else
                            w.PremiumId = ""
                        End If
                        waiversUpdated += 1 'added 10/12/2017
                    End If
                Next
            End If
        End Sub
        'added 4/26/2019
        Public Shared Sub UpdateKentuckyRejectionOfCoverageEndorsementListFromHasFlag(ByRef krces As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement), ByVal hasRejections As Boolean, Optional ByRef krcesBackup As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement) = Nothing, Optional ByVal updateBackupListBeforeRemoving As Boolean = True, Optional ByVal addInitialItemIfNeeded As Boolean = True)
            Dim qqHelper As New QuickQuoteHelperClass
            If hasRejections = True Then
                If krces IsNot Nothing AndAlso krces.Count > 0 Then
                    'okay
                Else
                    If krcesBackup IsNot Nothing AndAlso krcesBackup.Count > 0 Then
                        krces = qqHelper.CloneObject(krcesBackup)
                    Else
                        If addInitialItemIfNeeded = True Then
                            AddKentuckyRejectionOfCoverageEndorsementToList(krces, numberToAdd:=1)
                        End If
                    End If
                End If
            Else
                If krces Is Nothing OrElse krces.Count = 0 Then
                    'okay
                Else
                    If updateBackupListBeforeRemoving = True Then
                        If krcesBackup IsNot Nothing AndAlso krcesBackup.Count > krces.Count Then
                            'backup already okay
                        Else
                            krcesBackup = qqHelper.CloneObject(krces)
                        End If
                    End If
                    For Each r As QuickQuoteKentuckyRejectionOfCoverageEndorsement In krces
                        If r IsNot Nothing Then
                            r.Dispose()
                            r = Nothing
                        End If
                    Next
                    krces.Clear()
                    'could also set to Nothing
                End If
            End If
        End Sub

        'added 10/11/2017
        Public Shared Function QuickQuotePaymentOptionsWithMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuotePaymentOptionIndexesWithMatchingTextInDescription(qqPaymentOptions, txtToMatch)
                pos = QuickQuotePaymentOptionsForIndexes(qqPaymentOptions, indexes, cloneList:=cloneList)
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuotePaymentOptionIndexesWithMatchingTextInDescription(qqPaymentOptions, txtMatchList)
                pos = QuickQuotePaymentOptionsForIndexes(qqPaymentOptions, indexes, cloneList:=cloneList)
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, ByVal txtToIgnore As String, Optional ByVal cloneList As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim matchingPos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescription(qqPaymentOptions, txtToMatch, cloneList:=cloneList)
                If matchingPos IsNot Nothing AndAlso matchingPos.Count > 0 Then
                    pos = QuickQuotePaymentOptionsWithoutMatchingTextInDescription(matchingPos, txtToIgnore, cloneList:=cloneList, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
                End If
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), ByVal txtToIgnore As String, Optional ByVal cloneList As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim matchingPos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescription(qqPaymentOptions, txtMatchList, cloneList:=cloneList)
                If matchingPos IsNot Nothing AndAlso matchingPos.Count > 0 Then
                    pos = QuickQuotePaymentOptionsWithoutMatchingTextInDescription(matchingPos, txtToIgnore, cloneList:=cloneList, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
                End If
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, ByVal txtIgnoreList As List(Of String), Optional ByVal cloneList As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim matchingPos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescription(qqPaymentOptions, txtToMatch, cloneList:=cloneList)
                If matchingPos IsNot Nothing AndAlso matchingPos.Count > 0 Then
                    pos = QuickQuotePaymentOptionsWithoutMatchingTextInDescription(matchingPos, txtIgnoreList, cloneList:=cloneList, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
                End If
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), ByVal txtIgnoreList As List(Of String), Optional ByVal cloneList As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True) As List(Of QuickQuotePaymentOption)
            Dim pos As List(Of QuickQuotePaymentOption) = Nothing

            If qqPaymentOptions IsNot Nothing AndAlso qqPaymentOptions.Count > 0 Then
                Dim matchingPos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescription(qqPaymentOptions, txtMatchList, cloneList:=cloneList)
                If matchingPos IsNot Nothing AndAlso matchingPos.Count > 0 Then
                    pos = QuickQuotePaymentOptionsWithoutMatchingTextInDescription(matchingPos, txtIgnoreList, cloneList:=cloneList, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
                End If
            End If

            Return pos
        End Function
        Public Shared Function QuickQuotePaymentOptionWithMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, Optional ByVal clonePaymentOption As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing

            Dim pos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescription(qqPaymentOptions, txtToMatch, clonePaymentOption)
            If pos IsNot Nothing AndAlso pos.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    po = pos(0)
                Else
                    'last
                    po = pos(pos.Count - 1)
                End If
            End If

            Return po
        End Function
        Public Shared Function QuickQuotePaymentOptionWithMatchingTextInDescription(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), Optional ByVal clonePaymentOption As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing

            Dim pos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescription(qqPaymentOptions, txtMatchList, clonePaymentOption)
            If pos IsNot Nothing AndAlso pos.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    po = pos(0)
                Else
                    'last
                    po = pos(pos.Count - 1)
                End If
            End If

            Return po
        End Function
        Public Shared Function QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, ByVal txtToIgnore As String, Optional ByVal clonePaymentOption As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing

            Dim pos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(qqPaymentOptions, txtToMatch, txtToIgnore, cloneList:=clonePaymentOption, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
            If pos IsNot Nothing AndAlso pos.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    po = pos(0)
                Else
                    'last
                    po = pos(pos.Count - 1)
                End If
            End If

            Return po
        End Function
        Public Shared Function QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), ByVal txtToIgnore As String, Optional ByVal clonePaymentOption As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing

            Dim pos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(qqPaymentOptions, txtMatchList, txtToIgnore, cloneList:=clonePaymentOption, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
            If pos IsNot Nothing AndAlso pos.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    po = pos(0)
                Else
                    'last
                    po = pos(pos.Count - 1)
                End If
            End If

            Return po
        End Function
        Public Shared Function QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtToMatch As String, ByVal txtIgnoreList As List(Of String), Optional ByVal clonePaymentOption As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing

            Dim pos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(qqPaymentOptions, txtToMatch, txtIgnoreList, cloneList:=clonePaymentOption, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
            If pos IsNot Nothing AndAlso pos.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    po = pos(0)
                Else
                    'last
                    po = pos(pos.Count - 1)
                End If
            End If

            Return po
        End Function
        Public Shared Function QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(ByRef qqPaymentOptions As List(Of QuickQuotePaymentOption), ByVal txtMatchList As List(Of String), ByVal txtIgnoreList As List(Of String), Optional ByVal clonePaymentOption As Boolean = False, Optional ByVal nullPaymentOptionEqualsNoMatch As Boolean = True, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuotePaymentOption
            Dim po As QuickQuotePaymentOption = Nothing

            Dim pos As List(Of QuickQuotePaymentOption) = QuickQuotePaymentOptionsWithMatchingTextInDescriptionAndTextToIgnore(qqPaymentOptions, txtMatchList, txtIgnoreList, cloneList:=clonePaymentOption, nullPaymentOptionEqualsNoMatch:=nullPaymentOptionEqualsNoMatch)
            If pos IsNot Nothing AndAlso pos.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    po = pos(0)
                Else
                    'last
                    po = pos(pos.Count - 1)
                End If
            End If

            Return po
        End Function

        'added 10/27/2017
        Public Function OkayToUseDiamondServiceToTransferPolicyToClient() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("QuickQuote_OkayToUseDiamondServiceToTransferPolicyToClient")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function

        'added 10/27/2017
        Public Shared Function MBREquipmentBreakdownVersion_EffectiveDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("VR_MBREquipmentBreakdown_StartDate")
            'If String.IsNullOrWhiteSpace(dt) = False OrElse IsDate(dt) = False Then
            'corrected 10/1/2018
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                'If IsTestEnvironment() = True Then
                '    dt = CDate("10/1/2017").ToShortDateString
                'Else
                '    dt = CDate("1/1/2018").ToShortDateString
                'End If
                'updated 10/31/2017 to just use Prod date; can still change w/ key if needed
                dt = CDate("1/1/2018").ToShortDateString
            End If

            Return dt
        End Function
        Public Shared Function IsValidEffectiveDateForMBREquipmentBreakdownVersion(ByVal effDate As String) As Boolean
            Dim isValid As Boolean = False

            'If String.IsNullOrWhiteSpace(effDate) = False AndAlso IsDate(effDate) = True Then
            'updated 11/3/2017 to have the ability to turn off
            Dim qqHelper As New QuickQuoteHelperClass
            If qqHelper.IsMBREquipmentBreakdownVersionAvailable() = True AndAlso String.IsNullOrWhiteSpace(effDate) = False AndAlso IsDate(effDate) = True Then
                If CDate(effDate) >= CDate(MBREquipmentBreakdownVersion_EffectiveDate()) Then
                    isValid = True
                End If
            End If

            Return isValid
        End Function
        'added 11/2/2017
        Public Function IsSpecialEquipmentBreakdownMBRIneligibleRiskGrade(ByVal riskGradeLookupId As Integer) As Boolean
            Dim isSpecial As Boolean = False

            If riskGradeLookupId > 0 Then
                'could perform db lookup 1st and then use hard-coded logic if error is encountered
                Select Case riskGradeLookupId
                    'ordered by glclasscode
                    'Case 750, 459, 485, 486, 483, 484, 503, 864, 863, 1046, 4, 6, 5, 343, 8, 13, 3, 14, 19, 20, 26, 46, 47, 48, 49, 59, 60, 61, 85, 81, 82, 83, 84, 73, 93, 94, 100,
                    '     114, 118, 127, 126, 139, 144, 145, 146, 147, 148, 153, 156, 169, 171, 177, 179, 184, 190, 205, 210, 209, 214, 216, 219, 217, 218, 223, 220, 221, 222, 226,
                    '     229, 231, 244, 245, 248, 252, 253, 255, 260, 265, 268, 269, 270, 314, 324, 339, 340, 344, 346, 363, 364, 365, 368, 369, 386, 385, 387, 389, 390, 392, 393,
                    '     395, 396, 399, 404, 417, 420, 431, 434, 437, 441, 442, 451, 460, 462, 482, 500, 496, 497, 498, 499, 507, 513, 661, 555, 556, 557, 558, 567, 582, 583, 587,
                    '     586, 585, 588, 591, 590, 605, 612, 616, 617, 618, 629, 630, 633, 634, 635, 641, 649, 650, 651, 652, 648, 668, 679, 680, 681, 678, 700, 692, 693, 694, 695,
                    '     698, 699, 701, 702, 703, 704, 705, 718, 722, 726, 733, 753, 756, 757, 759, 771, 795, 796, 811, 812, 810, 814, 815, 816, 820, 822, 823, 824, 838, 839, 851,
                    '     852, 853, 857, 724, 866, 893, 897, 899, 901, 904, 910, 937, 938, 941, 948, 953, 954, 961, 962, 964, 970, 988, 989, 999, 1009, 1012, 1013, 1023, 1029, 1048,
                    '     1049, 1057, 1058, 1059, 1060, 1064, 1067, 1070, 1073, 1075, 1084, 697, 1089, 1105, 1117, 1118, 1126, 1127, 1133, 1134, 1135, 1136, 1137, 1138, 121, 357, 358,
                    '     356, 360, 359, 377, 378, 487, 490, 491, 508, 509, 640, 643, 708, 709, 749, 737, 740, 741, 742, 735, 743, 744, 736, 746, 747, 748, 806, 808, 807, 809, 840, 907, 994
                    '    isSpecial = True
                        'ordered by riskgradelookup_id
                    'Case 3, 4, 5, 6, 8, 13, 14, 19, 20, 26, 46, 47, 48, 49, 59, 60, 61, 73, 81, 82, 83, 84, 85, 93, 94, 100, 114, 118, 121, 126, 127, 139, 144, 145, 146, 147, 148, 153,
                    '     156, 169, 171, 177, 179, 184, 190, 205, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 226, 229, 231, 244, 245, 248, 252, 253, 255, 260, 265, 268, 269,
                    '     270, 314, 324, 339, 340, 343, 344, 346, 356, 357, 358, 359, 360, 363, 364, 365, 368, 369, 377, 378, 385, 386, 387, 389, 390, 392, 393, 395, 396, 399, 404, 417,
                    '     420, 431, 434, 437, 441, 442, 451, 459, 460, 462, 482, 483, 484, 485, 486, 487, 490, 491, 496, 497, 498, 499, 500, 503, 507, 508, 509, 513, 555, 556, 557, 558,
                    '     567, 582, 583, 585, 586, 587, 588, 590, 591, 605, 612, 616, 617, 618, 629, 630, 633, 634, 635, 640, 641, 643, 648, 649, 650, 651, 652, 661, 668, 678, 679, 680,
                    '     681, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 718, 722, 724, 726, 733, 735, 736, 737, 740, 741, 742, 743, 744, 746, 747, 748,
                    '     749, 750, 753, 756, 757, 759, 771, 795, 796, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 820, 822, 823, 824, 838, 839, 840, 851, 852, 853, 857, 863, 864,
                    '     866, 893, 897, 899, 901, 904, 907, 910, 937, 938, 941, 948, 953, 954, 961, 962, 964, 970, 988, 989, 994, 999, 1009, 1012, 1013, 1023, 1029, 1046, 1048, 1049, 1057,
                    '     1058, 1059, 1060, 1064, 1067, 1070, 1073, 1075, 1084, 1089, 1105, 1117, 1118, 1126, 1127, 1133, 1134, 1135, 1136, 1137, 1138
                    '    isSpecial = True
                        'ordered by riskgradelookup_id
                    Case 3 To 6, 8, 13, 14, 19, 20, 26, 46 To 49, 59 To 61, 73, 81 To 85, 93, 94, 100, 114, 118, 121, 126, 127, 139, 144 To 148, 153, 156, 169, 171, 177, 179, 184, 190, 205,
                         209, 210, 214, 216 To 223, 226, 229, 231, 244, 245, 248, 252, 253, 255, 260, 265, 268 To 270, 314, 324, 339, 340, 343, 344, 346, 356 To 360, 363 To 365, 368, 369,
                         377, 378, 385 To 387, 389, 390, 392, 393, 395, 396, 399, 404, 417, 420, 431, 434, 437, 441, 442, 451, 459, 460, 462, 482 To 487, 490, 491, 496 To 500, 503,
                         507 To 509, 513, 555 To 558, 567, 582, 583, 585 To 588, 590, 591, 605, 612, 616 To 618, 629, 630, 633 To 635, 640, 641, 643, 648 To 652, 661, 668, 678 To 681,
                         692 To 695, 697 To 705, 708, 709, 718, 722, 724, 726, 733, 735 To 737, 740 To 744, 746 To 750, 753, 756, 757, 759, 771, 795, 796, 806 To 812, 814 To 816, 820,
                         822 To 824, 838 To 840, 851 To 853, 857, 863, 864, 866, 893, 897, 899, 901, 904, 907, 910, 937, 938, 941, 948, 953, 954, 961, 962, 964, 970, 988, 989, 994, 999,
                         1009, 1012, 1013, 1023, 1029, 1046, 1048, 1049, 1057 To 1060, 1064, 1067, 1070, 1073, 1075, 1084, 1089, 1105, 1117, 1118, 1126, 1127, 1133 To 1138
                        isSpecial = True
                End Select
            End If
            'riskgradelookup_id  glclasscode	dscr
            '3   51116	A/C Equipment Mfg.
            '4   50010	Abrasive Wheel Mfg.
            '5   50017	Abrasives Or Abrasive Products Mfg.
            '6   50015	Abrasives Or Abrasive Products Mfg. - artificial
            '8   50045	Adhesives Mfg.
            '13  51001	Aerosol Container Mfg.
            '14  51201	Aircraft Parts Mfg.
            '19  51205	Alarm Mfg. - Burglar
            '20  51206	Alarm Mfg. - Fire Or smoke
            '26  51211	Ammunition Mfg.
            '46  51220	Appliance And Accessories Mfg. - commercial - gas
            '47  51221	Appliance And Accessories Mfg. - commercial - Not gas
            '48  51222	Appliance And Accessories Mfg. - household - gas
            '49  51224	Appliance And Accessories Mfg. - household - Not gas
            '59  51230	Asbestos Goods Mfg.
            '60  51240	Asphalt Or Tar Distilling Or Refining
            '61  51241	Asphalt Works
            '73  51255	Auto Mfg. Or Assembling
            '81  51251	Auto, Bus Or Truck Parts Mfg- brakes Or brake linings
            '82  51252	Auto, Bus Or Truck Parts Mfg- Not operating parts
            '83  51253	Auto, Bus Or Truck Parts Mfg- operating parts
            '84  51254	Auto, Bus Or Truck Parts Mfg- passenger restraining devices
            '85  51250	Automobile, Bus And Truck Body Mfg
            '93  51330	Battery Mfg.- dry cell
            '94  51333	Battery Mfg.- wet cell Or storage
            '100 51340	Bearing Mfg
            '114 51370	Bicycle Mfg. - Not motorized
            '118 51380	Billiard Or Pool Table Mfg.
            '121 91210	Blasting Operations
            '126 51401	Boat of Ship Building - without motors
            '127 51400	Boat Or Ship Building - inboard And inboard/outboard
            '139 51500	Bolt/Nut/Rivet/Screw Or Washer Mfg
            '144 51550	Bottle And Jar Mfg.
            '145 51551	Bottle And Jar Mfg.- glass - for use under pressure - nonreturnable
            '146 51552	Bottle And Jar Mfg.- glass - for use under pressure - returnable
            '147 51553	Bottle And Jar Mfg.- plastic - nonreturnable
            '148 51554	Bottle And Jar Mfg.- plastic - returnable
            '153 51600	Brick Mfg
            '156 51613	Brush/Broom Mfg
            '169 51625	Bus Mfg. Or Assembling Or Reconstruction
            '171 51666	Buttons/Fasteners Mfg
            '177 51702	Camper Bodies Or Camper Trailers Mfg.
            '179 51703	Campers Mfg. - self-powered
            '184 51734	Can Mfg.- metal
            '190 51767	Carbon Paper Or Inked Ribbon Mfg.
            '205 51790	Caulking Compounds, Putty And Similar Products Mfg.
            '209 51809	Cement Or Plaster Mfg. - bulk
            '210 51808	Cement, Concrete Mix Or Plaster Mfg. - packaged
            '214 51833	Charcoal Or Coal Briquette Mfg.
            '216 51850	Chemical Manufacturing- commercial Or industrial
            '217 51852	Chemical Manufacturing- commercial Or industrial - primarily flammable, explosive Or reactive
            '218 51853	Chemical Manufacturing- commercial Or industrial - primarily toxic Or presenting a health hazard
            '219 51851	Chemical Manufacturing- commercial Or industrial - toxic And either flammable, explosive Or reactive
            '220 51855	Chemical Manufacturing- household
            '221 51856	Chemical Manufacturing- household - primarily flammable, explosive Or reactive
            '222 51857	Chemical Manufacturing- household - primarily toxic Or presenting a health hazard
            '223 51854	Chemical Manufacturing- household - toxic And either flammable, explosive Or reactive
            '226 51869	China, Porcelain Or Earthenware Mfg.
            '229 51877	Clay Products Mfg.
            '231 51889	Clock Mfg.
            '244 51900	Coffins Or Caskets Mfg
            '245 51909	Coke Mfg.
            '248 51919	Color Or Pigment Preparation
            '252 51926	Communication Or Recording Systems Or Equipment Mfg.- industrial Or commercial
            '253 51927	Communication Or Recording Systems Or Equipment Mfg.- other than industrial Or commercial
            '255 51934	Composition Goods Mfg. - Not floor coverings
            '260 51941	Computer Mfg.
            '265 51956	Concrete - mixed in transit
            '268 51957	Concrete Or Plaster Prod Mfg.- Not structural
            '269 51958	Concrete Prod Mfg.- pre-stressed
            '270 51959	Concrete Prod Mfg.- structural
            '314 51970	Cosmetic Mfg.
            '324 51999	Cutlery (Not powered) And Flatware Mfg.
            '339 52075	Detergent Mfg.- household
            '340 52076	Detergent Mfg.- other than household
            '343 50017	Diamond Manufacturing - Industrial
            '344 52137	Die Casting Mfg.
            '346 52150	Distillation Or Extraction
            '356 92055	Dredging
            '357 92053	Dredging - gold- endless bucket Or ladder type
            '358 92054	Dredging - gold- floating dragline type
            '359 92102	Drilling - water
            '360 92101	Drilling -other than water
            '363 52341	Drug Mfg. - biological products
            '364 52342	Drug, Medicine Or Pharmaceutical Preparations Mfg.- for animal use
            '365 52343	Drug, Medicine Or Pharmaceutical Preparations Mfg.- other than for animal use
            '368 52401	Drums Or Containers Mfg.- metal
            '369 52402	Drums Or Containers Mfg.- plastic
            '377 92445	Electric Light Or Power Companies
            '378 92453	Electric Light Or Power Cooperatives - Rural Utilities Service projects only
            '385 52433	Electrical Equipment Mfg.- for direct And indirect application to the body
            '386 52432	Electrical Equipment Mfg.- other than for direct And indirect application to the body
            '387 52435	Electrical Generating Machinery Mfg.
            '389 52440	Electrical Power Distribution Or Transmission Equipment Mfg.
            '390 52467	Electrical Wire Or Cable Mfg
            '392 52469	Electronic Components Mfg.
            '393 52505	Electronic Games Mfg.
            '395 52547	Electroplating
            '396 52581	Elevator Mfg.
            '399 52619	Engine Or Turbine Mfg. - Not aircraft
            '404 52744	Escalator Or Moving Sidewalk Mfg.
            '417 52876	Explosive Or Fireworks Mfg.
            '420 52967	Eye Glass Lens Mfg.
            '431 53077	Fertilizer Mfg.
            '434 53121	Fiberglass Mfg.
            '437 53147	Fire Extinguisher Mfg.
            '441 53229	Fire Suppression Systems Mfg.
            '442 53271	Firearms Mfg.
            '451 53333	Floor Covering Mfg. - Not carpets, rugs, ceramic Or stone tiles
            '459 43822	Forestry Service
            '460 53403	Forging Work
            '462 53425	Foundries
            '482 53803	Galvanizing Or Tinning
            '483 43990	Gambling- casinos
            '484 43991	Gambling- incidental to other operations
            '485 43945	Garbage Or Refuse Dumps
            '486 43946	Garbage Works - separation for recycling, reduction Or incineration
            '487 95233	Garbage, Ash Or Refuse Collecting
            '490 95305	Gas Companies
            '491 95306	Gas Companies - natural gas - local distribution
            '496 53902	Gas Mfg.- inert
            '497 53903	Gas Mfg.- other
            '498 53904	Gas Mfg.- primarily flammable, explosive Or reactive
            '499 53905	Gas Mfg.- primarily toxic Or presenting a health hazard
            '500 53901	Gas Mfg.- toxic And either flammable, explosive Or reactive
            '503 44010	Gasoline Recovery - from casing head Or natural gas
            '507 54012	Gemstone Cutting Or Polishing
            '508 95357	Geophysical Exploration- other
            '509 95358	Geophysical Exploration- seismic method
            '513 54077	Glass Or Glassware Mfg.
            '555 55010	Heating Equipment Mfg.- coal Or wood
            '556 55011	Heating Equipment Mfg.- electric
            '557 55012	Heating Equipment Mfg.- fuel oil Or kerosene
            '558 55013	Heating Equipment Mfg.- gas Or liquefied petroleum gas (LPG)
            '567 55214	Hone, Oilstone Or Whetstone Mfg.
            '582 55426	Ink Mfg.
            '583 55597	Inner Tubes Mfg.
            '585 55649	Instrument Mfg.
            '586 55648	Instrument Mfg. - control
            '587 55647	Instrument Mfg.- analytical, calibrating, measuring, testing Or recording
            '588 55715	Insulation Material Mfg.- mineral
            '590 55718	Insulation Material Mfg.- plastic
            '591 55717	Insulation Material Mfg.- plastic - for application in a solid state
            '605 55802	Jewelry Mfg.
            '612 55918	Ladder Mfg- other than wood
            '616 56040	Lamp Shade Mfg.
            '617 56041	Lamps Or Lanterns Mfg.- electric
            '618 56042	Lamps Or Lanterns Mfg.- other than electric
            '629 56170	Lead Mfg. - red Or white
            '630 56171	Lead Works - sheet, pipe Or shot
            '633 56390	Light Bulb Or Tubes Mfg.
            '634 56391	Lighting Fixtures Mfg.
            '635 56427	Lime Mfg.
            '640 97111	Logging And Lumbering
            '641 56567	Lubricants Mfg. - grease
            '643 97220	Machine Shops
            '648 56654	Machinery Or Machinery Parts Mfg.
            '649 56650	Machinery Or Machinery Parts Mfg.- construction, mining Or materials handling type
            '650 56651	Machinery Or Machinery Parts Mfg.- farm type
            '651 56652	Machinery Or Machinery Parts Mfg.- industrial type
            '652 56653	Machinery Or Machinery Parts Mfg.- metalworking
            '661 54444	Manufacturers
            '668 56690	Match Mfg.
            '678 56808	Medical, Dental Or Surgical Diagnostic Or Treatment Machines Or Devices Mfg.
            '679 56805	Medical, Dental, Hospital Or Surgical Equipment Or Supplies Mfg.- expendable
            '680 56806	Medical, Dental, Hospital Or Surgical Equipment Or Supplies Mfg.- nonexpendable
            '681 56807	Medical, Dental, Hospital Or Surgical Instruments Mfg.
            '692 56910	Metal Foil Mfg.
            '693 56911	Metal Goods Mfg
            '694 56912	Metal Goods Mfg - stamping - Not signs
            '695 56913	Metal Heat Processing
            '697 59914	Metal Works - shop - decorative Or artistic
            '698 56915	Metal Works - shop - structural- load bearing
            '699 56916	Metal Works - shop - structural- Not load bearing
            '700 56900	Metals - extraction Or refining
            '701 56917	Metals - extraction Or refining- chemical processes
            '702 56918	Metals - extraction Or refining- electromechanical processes
            '703 56919	Metals - extraction Or refining of ferrous metals - blast furnace Or other pyrometallurgical processes
            '704 56920	Metals - extraction Or refining of nonferrous metals - blast furnace Or other pyrometallurgical processes
            '705 56980	Mica Goods Mfg.
            '708 98002	Mining
            '709 98003	Mining - surface
            '718 57202	Motorcycle, Moped Or Motor Scooter Mfg.
            '722 57257	Musical Instrument Mfg.
            '724 58627	Musical Products Mfg. - pre-recorded
            '726 57401	Nails Or Spikes Mfg.
            '733 57572	Office Machines Mfg.
            '735 98156	Oil of Gas Wells - cleaning Or swabbing by contractors - within the limits of any town Or city, on the right-of-way of any railroad, Or in any ocean, gulf Or bay
            '736 98159	Oil of Gas Wells - instrument logging Or survey work in wells
            '737 98151	Oil Or Gas Lease Operations - natural gas - within the limits of any town Or city on the right-of-way of any railroad, Or in any ocean, gulf Or bay
            '740 98153	Oil Or Gas Wells - acidizing
            '741 98154	Oil Or Gas Wells - cementing
            '742 98155	Oil Or Gas Wells - cleaning Or swabbing by contractors
            '743 98157	Oil Or Gas Wells - drilling Or redrilling, installation Or recovery of casing
            '744 98158	Oil Or Gas Wells - drilling Or redrilling, installation Or recovery of casing -within the limits of any town Or city on the right-of-way of any railroad, Or in any ocean, gulf Or bay
            '746 98160	Oil Or Gas Wells - perforating of casing
            '747 98161	Oil Or Gas Wells - servicing - by contractors
            '748 98162	Oil Or Gas Wells - shooting
            '749 98150	Oil Or Natural Gas Lease Operations
            '750 15733	Oil Refineries
            '753 57600	Optical Goods Mfg.
            '756 57611	Ore Milling Or Processing
            '757 57625	Orthopedic, Ambulation Or Prosthetic Devices Mfg.
            '759 57690	Paint, Varnish, Shellac Or Lacquer Mfg.
            '771 57726	Paper Mfg.
            '795 57998	Photographic Equipment Mfg.
            '796 57999	Photographic Supplies Mfg.
            '806 98427	Pipeline Operation- gas
            '807 98429	Pipeline Operation- oil
            '808 98428	Pipeline Operation- other
            '809 98430	Pipeline Operation- slurry - nonflammable mixtures
            '810 58020	Pipes Mfg. - tobacco
            '811 58009	Pipes Or Tubes Mfg.- metal
            '812 58010	Pipes Or Tubes Mfg.- plastic
            '814 58056	Plastic Mfg. - raw material
            '815 58057	Plastic Or Rubber Goods Mfg. (sprinkler sys. req.)- household
            '816 58058	Plastic Or Rubber Goods Mfg. (sprinkler sys. req.)- other than household
            '820 58095	Plumbing Fixtures Mfg.
            '822 58096	Plumbing Supplies Mfg.
            '823 58301	Plywood, Veneer Or Veneer Products Mfg.- other
            '824 58302	Plywood, Veneer Or Veneer Products Mfg.- without log processing
            '838 58503	Pulp Mfg.
            '839 58532	Pumps Or Compressors Mfg.
            '840 98555	Quarries
            '851 58559	Railroad Engine Mfg.
            '852 58560	Railroad Or Other Public Conveyance Cars Mfg.
            '853 58561	Railroad Or Other Public Conveyance Cars Parts Mfg.
            '857 58575	Razor Or Razor Blades Mfg.
            '863 47147	Recycling Collection Centers- Not-For-Profit only
            '864 47146	Recycling Collection Centers- Other than Not-For-Profit
            '866 58663	Refrigeration Equipment Mfg.
            '893 58713	Rolling Mills - cold Or hot process
            '897 58756	Rubber Mfg.
            '899 58759	Rubber Stamp Mfg. Or Assembling
            '901 58813	Safes Or Safe Vaults Mfg.
            '904 58837	Salt, Borax, Potash Or Phosphate - producing Or refining
            '907 98710	Sand Or Gravel Digging
            '910 58873	Saw Mills Or Planing Mills
            '937 58903	Sewing Machine Mfg. - commercial
            '938 58904	Sewing Machine Mfg. - household
            '941 58922	Sheet Metal Work - shop only
            '948 59005	Shoe, Boot Or Slipper Mfg.
            '953 59057	Sign Mfg- electrical
            '954 59058	Sign Mfg- other than electrical
            '961 59188	Slate Milling
            '962 59189	Slate Splitting Or Slate Roofing Mfg.
            '964 59223	Soap Mfg.
            '970 59257	Sponge Processing
            '988 59481	Stone Crushing
            '989 59482	Stone Cutting Or Polishing
            '994 99303	Street Cleaning (including snow removal)
            '999 59537	Sugar Refining
            '1009    59647	Syrups Or Molasses - refining, blending Or mfg.
            '1012    59660	Tank Building Or Mfg.- metal - Not pressurized
            '1013    59661	Tank Building Or Mfg.- metal - pressurized
            '1023    59695	Telecommunications Equipment Mfg.
            '1029    59701	Television Picture Tube Mfg.
            '1046    49239	Tire - retreading Or recapping
            '1048    59750	Tire Mfg.- auto, bus Or truck
            '1049    59751	Tire Mfg.- Not auto, bus Or truck
            '1057    59781	Tool Mfg- accessories
            '1058    59782	Tool Mfg- hand type - Not powered
            '1059    59783	Tool Mfg- hand type - powered
            '1060    59784	Tool Mfg- power equipment - household type - outdoor Or workshop
            '1064    59790	Toys Or Games Mfg.
            '1067    59798	Trailers Mfg.
            '1070    59806	Truck Mfg. Or Assembling
            '1073    59867	Turpentine Or Resin Mfg.
            '1075    59889	Umbrella Or Cane Mfg.
            '1084    59892	Valve Mfg.
            '1089    59915	Vending Machine Mfg.
            '1105    59923	Watch Or Watch Case Mfg.
            '1117    59931	Wax Or Wax Products Mfg.
            '1118    59932	Wax, Wax Products Or Polish Mfg. - floor
            '1126    59941	Wheel Mfg.
            '1127    59947	Wicker, Rattan, Willow Or Twisted Fiber Products Mfg.
            '1133    59970	Wire Cloth Mfg.
            '1134    59973	Wire Drawing
            '1135    59975	Wire Goods Mfg
            '1136    59977	Wire Rope Or Cable Mfg.- metal
            '1137    59984	Wood Preserving
            '1138    59985	Wood Products Mfg.

            Return isSpecial
        End Function
        'Added 3/25/2022 for bug 72793 MLW
        Public Function IsSpecialEquipmentBreakdownMBRIneligibleRiskGrade_WithLOBType(ByVal riskGradeLookupId As Integer, Optional lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            If lobType <> QuickQuoteObject.QuickQuoteLobType.CommercialBOP AndAlso
                lobType <> QuickQuoteObject.QuickQuoteLobType.CommercialProperty AndAlso
                lobType <> QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                Return IsSpecialEquipmentBreakdownMBRIneligibleRiskGrade(riskGradeLookupId)
            End If
            Return False
        End Function
        'added 11/3/2017
        Public Function IsMBREquipmentBreakdownVersionAvailable() As Boolean
            Dim isAvailable As Boolean = True 'default to True; key required to turn to False

            Dim strIsAvailable As String = configAppSettingValueAsString("QuickQuote_IsMBREquipmentBreakdownVersionAvailable")
            If String.IsNullOrWhiteSpace(strIsAvailable) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsAvailable) = "YES" OrElse qqHelper.BitToBoolean(strIsAvailable) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isAvailable = True
                Else
                    isAvailable = False
                End If
            End If

            Return isAvailable
        End Function
        Public Function DefaultMBREquipmentBreakdownDeductibleId() As Integer
            Dim dedId As Integer = 9999

            Dim strDedId As String = configAppSettingValueAsString("QuickQuote_DefaultMBREquipmentBreakdownDeductibleId")
            If IsNumericString(strDedId) = True Then 'key can be used to change from default value of 9999
                dedId = CInt(strDedId)
            End If

            Return dedId
        End Function
        'added 11/6/2017
        Public Function LocationEquipmentBreakdownDeductibleIds(ByVal qqo As QuickQuoteObject, Optional ByVal onlyCheckForEquipmentBreakdownLOBs As Boolean = True, Optional ByVal onlyCheckWhenEffectiveDateGoodForEquipmentBreakdownMBR As Boolean = True) As List(Of String)
            Dim ebDedIds As List(Of String) = Nothing

            'If qqo IsNot Nothing AndAlso qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
            '    For Each l As QuickQuoteLocation In qqo.Locations
            '        If l IsNot Nothing Then
            '            AddStringToList(l.EquipmentBreakdownDeductibleId, ebDedIds, allowBlankOrWhiteSpace:=True)
            '        End If
            '    Next
            'End If
            If qqo IsNot Nothing Then
                If onlyCheckForEquipmentBreakdownLOBs = False OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse (qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage AndAlso qqo.CPP_Has_Property_PackagePart = True) Then
                    If onlyCheckWhenEffectiveDateGoodForEquipmentBreakdownMBR = False OrElse IsValidEffectiveDateForMBREquipmentBreakdownVersion(qqo.EffectiveDate) = True Then
                        Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                        'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                        'updated 9/14/2018
                        If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                            'For Each l As QuickQuoteLocation In qqo.Locations
                            'updated 9/14/2018
                            For Each l As QuickQuoteLocation In qqLocations
                                If l IsNot Nothing Then
                                    AddStringToList(l.EquipmentBreakdownDeductibleId, ebDedIds, allowBlankOrWhiteSpace:=True)
                                End If
                            Next
                        End If
                    End If
                End If
            End If

            Return ebDedIds
        End Function
        Public Function StringListHasNumericValue(ByVal strList As List(Of String)) As Boolean
            Dim hasNumeric As Boolean = False

            If strList IsNot Nothing AndAlso strList.Count > 0 Then
                For Each str As String In strList
                    If IsNumericString(str) = True Then
                        hasNumeric = True
                        Exit For
                    End If
                Next
            End If

            Return hasNumeric
        End Function
        Public Function StringListHasPositiveIntegerValue(ByVal strList As List(Of String)) As Boolean
            Dim hasPosInt As Boolean = False

            If strList IsNot Nothing AndAlso strList.Count > 0 Then
                For Each str As String In strList
                    If IsPositiveIntegerString(str) = True Then
                        hasPosInt = True
                        Exit For
                    End If
                Next
            End If

            Return hasPosInt
        End Function
        'Public Sub RemoveEquipmentBreakdownFromQuote(ByRef qqo As QuickQuoteObject, Optional ByRef locationNumsWithNumericValueForEquipmentBreakdownDeductibleId As List(Of Integer) = Nothing, Optional ByRef locationNumsWithPositiveIntegerValueForEquipmentBreakdownDeductibleId As List(Of Integer) = Nothing)
        'updated 11/9/2017
        Public Sub RemoveEquipmentBreakdownFromQuote(ByRef qqo As QuickQuoteObject, Optional ByRef locationNumsWithUsableValueForEquipmentBreakdownDeductibleId As List(Of Integer) = Nothing)
            'locationNumsWithNumericValueForEquipmentBreakdownDeductibleId = Nothing
            'locationNumsWithPositiveIntegerValueForEquipmentBreakdownDeductibleId = Nothing
            'updated 11/9/2017
            locationNumsWithUsableValueForEquipmentBreakdownDeductibleId = Nothing

            'If qqo IsNot Nothing AndAlso qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
            'updated 9/14/2018 to 2 IFs
            If qqo IsNot Nothing Then
                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then 'added IF 9/14/2018
                    Dim locNum As Integer = 0
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        locNum += 1
                        If l IsNot Nothing Then
                            'If IsNumericString(l.EquipmentBreakdownDeductibleId) = True Then
                            '    AddIntegerToIntegerList(locNum, locationNumsWithNumericValueForEquipmentBreakdownDeductibleId)
                            '    If IsPositiveIntegerString(l.EquipmentBreakdownDeductibleId) = True Then
                            '        AddIntegerToIntegerList(locNum, locationNumsWithPositiveIntegerValueForEquipmentBreakdownDeductibleId)
                            '    End If
                            'End If
                            'updated 11/9/2017
                            If EquipmentBreakdownDeductibleIdLooksValid(l.EquipmentBreakdownDeductibleId) = True Then
                                AddIntegerToIntegerList(locNum, locationNumsWithUsableValueForEquipmentBreakdownDeductibleId)
                            End If
                            l.EquipmentBreakdownDeductibleId = ""
                        End If
                    Next
                End If
            End If
        End Sub
        'added 11/8/2017; 11/9/2017 - renamed from AddEquipmentBreakdownMBRToQuote and updated w/ lobList (since this will currently be used on BOP only and not all EB lobs) and also update params and alsoAddWhenNonPositiveIntegerEquipmentBreakdownDeductibleId removal
        Public Sub AddEquipmentBreakdownMBRToQuoteIfOkay(ByRef qqo As QuickQuoteObject, Optional ByVal onlyAddForEquipmentBreakdownLOBs As Boolean = True, Optional ByVal onlyAddWhenEffectiveDateGoodForEquipmentBreakdownMBR As Boolean = True, Optional ByVal onlyAddForEligibleRiskGrades As Boolean = True, Optional ByVal lobsEligibleForAdd As List(Of QuickQuoteObject.QuickQuoteLobType) = Nothing, Optional ByVal updateAllExisting As Boolean = True, Optional ByRef locationNumsUpdatedWithEquipmentBreakdownMBRDeductibleId As List(Of Integer) = Nothing, Optional ByRef existingLocationNumsUpdatedWithDeafultEquipmentBreakdownMBRDeductibleId As List(Of Integer) = Nothing)
            locationNumsUpdatedWithEquipmentBreakdownMBRDeductibleId = Nothing
            existingLocationNumsUpdatedWithDeafultEquipmentBreakdownMBRDeductibleId = Nothing

            If qqo IsNot Nothing Then
                If onlyAddForEquipmentBreakdownLOBs = False OrElse
                    qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP OrElse
                    qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse
                    (qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage AndAlso qqo.CPP_Has_Property_PackagePart = True) Then
                    If onlyAddWhenEffectiveDateGoodForEquipmentBreakdownMBR = False OrElse IsValidEffectiveDateForMBREquipmentBreakdownVersion(qqo.EffectiveDate) = True Then
                        'If onlyAddForEligibleRiskGrades = False OrElse IsSpecialEquipmentBreakdownMBRIneligibleRiskGrade(qqo.RiskGradeLookupId) = False Then
                        'updated 11/16/2017 to convert to int and also pull from different spot for CPP
                        'Dim riskGradeLookupIdToUse As String = qqo.RiskGradeLookupId
                        'If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage AndAlso IsNumericString(qqo.CPP_CPR_RiskGradeLookupId) = True Then
                        '    riskGradeLookupIdToUse = qqo.CPP_CPR_RiskGradeLookupId
                        'End If
                        'updated 12/21/2018 for multiState
                        Dim riskGradeLookupIdToUse As String = ""
                        Dim riskGradeLookupIdToUse_CPP_CPR As String = ""
                        Dim govStateQuote As QuickQuoteObject = GoverningStateQuote(qqo)
                        If govStateQuote IsNot Nothing Then
                            riskGradeLookupIdToUse = govStateQuote.RiskGradeLookupId
                            riskGradeLookupIdToUse_CPP_CPR = govStateQuote.CPP_CPR_RiskGradeLookupId
                        Else
                            riskGradeLookupIdToUse = qqo.RiskGradeLookupId
                            riskGradeLookupIdToUse_CPP_CPR = qqo.CPP_CPR_RiskGradeLookupId
                        End If
                        If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage AndAlso IsNumericString(riskGradeLookupIdToUse_CPP_CPR) = True Then
                            riskGradeLookupIdToUse = riskGradeLookupIdToUse_CPP_CPR
                        End If
                        'Updated 3/25/2022 for bug 72793 MLW
                        'If onlyAddForEligibleRiskGrades = False OrElse IsSpecialEquipmentBreakdownMBRIneligibleRiskGrade(IntegerForString(riskGradeLookupIdToUse)) = False Then                        
                        If onlyAddForEligibleRiskGrades = False OrElse IsSpecialEquipmentBreakdownMBRIneligibleRiskGrade_WithLOBType(IntegerForString(riskGradeLookupIdToUse), qqo.LobType) = False Then
                            'updated 11/9/2017 for lobsEligibleForAdd and updates
                            Dim isLobEligibleForAdd As Boolean = False
                            If lobsEligibleForAdd Is Nothing OrElse IsLobInList(qqo.LobType, lobsEligibleForAdd) = True Then
                                isLobEligibleForAdd = True
                            End If
                            If isLobEligibleForAdd = True OrElse updateAllExisting = True Then
                                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                                'updated 9/14/2018
                                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                                    Dim locNum As Integer = 0
                                    'For Each l As QuickQuoteLocation In qqo.Locations
                                    'updated 9/14/2018
                                    For Each l As QuickQuoteLocation In qqLocations
                                        locNum += 1
                                        If l IsNot Nothing Then
                                            Dim addMBR As Boolean = False
                                            Dim updateForMBR As Boolean = False
                                            'If IsNumericString(l.EquipmentBreakdownDeductibleId) = False Then
                                            '    If isLobEligibleForAdd = True Then
                                            '        addMBR = True
                                            '    End If
                                            'Else
                                            '    If isLobEligibleForAdd = True AndAlso alsoAddWhenNonPositiveIntegerEquipmentBreakdownDeductibleId = True AndAlso IsPositiveIntegerString(l.EquipmentBreakdownDeductibleId) = False Then
                                            '        addMBR = True
                                            '    End If
                                            '    If updateAllExisting = True AndAlso addMBR = False Then
                                            '        updateForMBR = True
                                            '    End If
                                            'End If
                                            If EquipmentBreakdownDeductibleIdLooksValid(l.EquipmentBreakdownDeductibleId) = False Then
                                                If isLobEligibleForAdd = True Then
                                                    addMBR = True
                                                End If
                                            Else
                                                updateForMBR = updateAllExisting
                                            End If
                                            If addMBR = True OrElse updateForMBR = True Then
                                                If addMBR = True Then
                                                    AddIntegerToIntegerList(locNum, locationNumsUpdatedWithEquipmentBreakdownMBRDeductibleId)
                                                Else
                                                    AddIntegerToIntegerList(locNum, existingLocationNumsUpdatedWithDeafultEquipmentBreakdownMBRDeductibleId)
                                                End If
                                                l.EquipmentBreakdownDeductibleId = DefaultMBREquipmentBreakdownDeductibleId().ToString
                                            End If
                                        End If
                                    Next
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        'added 11/9/2017
        Public Function EquipmentBreakdownDeductibleIdLooksValid(ByVal ebDeductibleId As String) As Boolean
            Dim isValid As Boolean = False

            isValid = IsNumericString(ebDeductibleId)

            Return isValid
        End Function
        Public Function IsLobInList(ByVal lob As QuickQuoteObject.QuickQuoteLobType, ByVal lobList As List(Of QuickQuoteObject.QuickQuoteLobType)) As Boolean
            Dim isIt As Boolean = False

            If lobList IsNot Nothing AndAlso lobList.Count > 0 Then
                For Each l As QuickQuoteObject.QuickQuoteLobType In lobList
                    If l = lob Then
                        isIt = True
                        Exit For
                    End If
                Next
            End If

            Return isIt
        End Function
        Public Sub AddLobToList(ByVal lob As QuickQuoteObject.QuickQuoteLobType, ByRef lobList As List(Of QuickQuoteObject.QuickQuoteLobType), Optional ByVal allowNoneType As Boolean = False)
            If allowNoneType = True OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                If lobList Is Nothing Then
                    lobList = New List(Of QuickQuoteObject.QuickQuoteLobType)
                End If
                lobList.Add(lob)
            End If
        End Sub
        Public Function OkayToAttemptReRateToRemoveMBREquipmentBreakdownWhenNeeded() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("QuickQuote_OkayToAttemptReRateToRemoveMBREquipmentBreakdownWhenNeeded")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Function StringListHasValueValidForEquipmentBreakdownDeductibleId(ByVal strList As List(Of String)) As Boolean
            Dim hasValid As Boolean = False

            If strList IsNot Nothing AndAlso strList.Count > 0 Then
                For Each str As String In strList
                    If EquipmentBreakdownDeductibleIdLooksValid(str) = True Then
                        hasValid = True
                        Exit For
                    End If
                Next
            End If

            Return hasValid
        End Function
        'added 11/14/2017 (11/15/2017 note: for BOP)
        Public Function EquipmentBreakdownDeductibleIdEquivalentForPropertyDeductibleId(ByVal propDedId As String, Optional ByVal okayToUseSameIdAsLastResortWhenPositiveInteger As Boolean = True) As String
            Dim ebDedId As String = ""

            If IsNumericString(propDedId) = True Then
                Dim propDedTxt As String = ""
                Dim foundPropDedVal As Boolean = False
                propDedTxt = GetStaticDataTextForValueWithSpecificTextMatching(QuickQuoteClassName.QuickQuoteBuilding, QuickQuotePropertyName.PropertyDeductibleId, propDedId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing, foundValue:=foundPropDedVal)
                If String.IsNullOrWhiteSpace(propDedTxt) = False OrElse foundPropDedVal = True Then
                    ebDedId = GetStaticDataValueForTextWithSpecificTextMatching(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.EquipmentBreakdownDeductibleId, propDedTxt, matchType:=TextMatchType.DecimalOrText_IgnoreCasing)
                End If
                If String.IsNullOrWhiteSpace(ebDedId) = True AndAlso IsPositiveIntegerString(propDedId) = True Then
                    Select Case CInt(propDedId)
                        Case 21 '250
                            ebDedId = "4"
                        Case 22 '500
                            ebDedId = "8"
                        Case 24 '1000
                            ebDedId = "9"
                        Case 75 '2500
                            ebDedId = "15"
                        Case 76 '5000
                            ebDedId = "16"
                        Case 333 '7500
                            ebDedId = "47"
                        Case 157 '10000
                            ebDedId = "17"
                        Case Else
                            If okayToUseSameIdAsLastResortWhenPositiveInteger = True Then
                                ebDedId = propDedId
                            End If
                    End Select
                End If
            End If

            Return ebDedId
        End Function
        'added 11/15/2017 (for CPR; should be same values so prob not needed)
        Public Function EquipmentBreakdownDeductibleIdEquivalentForDeductibleId(ByVal dedId As String, Optional ByVal okayToUseSameIdAsLastResortWhenPositiveInteger As Boolean = True) As String
            Dim ebDedId As String = ""

            If IsNumericString(dedId) = True Then
                Dim dedTxt As String = ""
                Dim foundDedVal As Boolean = False
                dedTxt = GetStaticDataTextForValueWithSpecificTextMatching(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.DeductibleId, dedId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing, foundValue:=foundDedVal)
                If String.IsNullOrWhiteSpace(dedTxt) = False OrElse foundDedVal = True Then
                    ebDedId = GetStaticDataValueForTextWithSpecificTextMatching(QuickQuoteClassName.QuickQuoteLocation, QuickQuotePropertyName.EquipmentBreakdownDeductibleId, dedTxt, matchType:=TextMatchType.DecimalOrText_IgnoreCasing)
                End If
                If String.IsNullOrWhiteSpace(ebDedId) = True AndAlso IsPositiveIntegerString(dedId) = True Then
                    Select Case CInt(dedId)
                        Case 4 '250
                            ebDedId = "4"
                        Case 8 '500
                            ebDedId = "8"
                        Case 9 '1000
                            ebDedId = "9"
                        Case 15 '2500
                            ebDedId = "15"
                        Case 16 '5000
                            ebDedId = "16"
                        Case 17 '10000
                            ebDedId = "17"
                        Case 19 '25000
                            ebDedId = "19"
                        Case 20 '50000
                            ebDedId = "20"
                        Case 21 '75000
                            ebDedId = "21"
                        Case Else
                            If okayToUseSameIdAsLastResortWhenPositiveInteger = True Then
                                ebDedId = dedId
                            End If
                    End Select
                End If
            End If

            Return ebDedId
        End Function
        Public Enum DeductibleToUse
            FirstOneFound = 0
            LocationPropertyDeductible = 1
            BuildingPropertyDeductible = 2
            LocationDeductible = 3
            BuildingDeductible = 4
        End Enum
        Public Sub CheckLocationEquipmentBreakdown(ByRef qqLoc As QuickQuoteLocation, Optional ByVal isMBR As Boolean = False)
            If qqLoc IsNot Nothing AndAlso EquipmentBreakdownDeductibleIdLooksValid(qqLoc.EquipmentBreakdownDeductibleId) = True Then
                If CInt(qqLoc.EquipmentBreakdownDeductibleId) = DefaultMBREquipmentBreakdownDeductibleId() Then
                    If EquipmentBreakdownDeductibleIdLooksValid(qqLoc.EquipmentBreakdownDeductibleIdBackup) = True Then
                        qqLoc.EquipmentBreakdownDeductibleId = qqLoc.EquipmentBreakdownDeductibleIdBackup
                    Else
                        qqLoc.EquipmentBreakdownDeductibleId = "8" '500; just so there is a default if needed
                    End If
                    If isMBR = True Then
                        'default based on property deductible
                        Dim locPropDedId As String = ""
                        Dim locDedId As String = ""
                        Dim buildPropDedId As String = ""
                        Dim buildDedId As String = ""
                        Dim keepGoing As Boolean = True
                        Dim dedToUse As DeductibleToUse = DeductibleToUse.FirstOneFound

                        If EquipmentBreakdownDeductibleIdLooksValid(qqLoc.PropertyDeductibleId) = True Then
                            locPropDedId = qqLoc.PropertyDeductibleId
                            If IsPositiveIntegerString(locPropDedId) = True Then
                                keepGoing = False
                                dedToUse = DeductibleToUse.LocationPropertyDeductible
                            End If
                        End If
                        If keepGoing = True Then
                            If EquipmentBreakdownDeductibleIdLooksValid(qqLoc.DeductibleId) = True Then
                                locDedId = qqLoc.DeductibleId
                                'If IsPositiveIntegerString(locDedId) = True Then 'removed so it can still check building deductibles
                                '    keepGoing = False
                                'End If
                            End If
                            If keepGoing = True Then
                                If qqLoc.Buildings IsNot Nothing AndAlso qqLoc.Buildings.Count > 0 Then
                                    For Each b As QuickQuoteBuilding In qqLoc.Buildings
                                        If b IsNot Nothing Then
                                            If EquipmentBreakdownDeductibleIdLooksValid(b.PropertyDeductibleId) = True AndAlso (String.IsNullOrWhiteSpace(buildPropDedId) = True OrElse IsPositiveIntegerString(b.PropertyDeductibleId) = True) Then
                                                buildPropDedId = b.PropertyDeductibleId
                                                If IsPositiveIntegerString(buildPropDedId) = True Then
                                                    keepGoing = False
                                                    dedToUse = DeductibleToUse.BuildingPropertyDeductible
                                                    Exit For
                                                End If
                                            End If
                                            If keepGoing = True Then
                                                If EquipmentBreakdownDeductibleIdLooksValid(b.DeductibleId) = True AndAlso (String.IsNullOrWhiteSpace(buildDedId) = True OrElse (IsPositiveIntegerString(b.DeductibleId) = True AndAlso IsPositiveIntegerString(buildDedId) = False)) Then
                                                    buildDedId = b.DeductibleId
                                                    'If IsPositiveIntegerString(buildDedId) = True Then 'removed so it can continue checking building property deductible ids
                                                    '    keepGoing = False
                                                    '    Exit For
                                                    'End If
                                                End If
                                            End If
                                        End If
                                    Next
                                    If dedToUse = DeductibleToUse.FirstOneFound Then
                                        If IsPositiveIntegerString(locDedId) = True Then
                                            dedToUse = DeductibleToUse.LocationDeductible
                                        ElseIf IsPositiveIntegerString(buildDedId) = True Then
                                            dedToUse = DeductibleToUse.BuildingDeductible
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        Dim propDedIdToUse As String = ""
                        Dim dedIdToUse As String = ""
                        Select Case dedToUse
                            Case DeductibleToUse.LocationPropertyDeductible
                                propDedIdToUse = locPropDedId
                            Case DeductibleToUse.BuildingPropertyDeductible
                                propDedIdToUse = buildPropDedId
                            Case DeductibleToUse.LocationDeductible
                                dedIdToUse = locDedId
                            Case DeductibleToUse.BuildingDeductible
                                dedIdToUse = buildDedId
                            Case Else 'DeductibleToUse.FirstOneFound
                                If String.IsNullOrWhiteSpace(locPropDedId) = False Then
                                    propDedIdToUse = locPropDedId
                                ElseIf String.IsNullOrWhiteSpace(buildPropDedId) = False Then
                                    propDedIdToUse = buildPropDedId
                                ElseIf String.IsNullOrWhiteSpace(locDedId) = False Then
                                    dedIdToUse = locDedId
                                ElseIf String.IsNullOrWhiteSpace(buildDedId) = False Then
                                    dedIdToUse = buildDedId
                                End If
                        End Select
                        If String.IsNullOrWhiteSpace(propDedIdToUse) = False Then
                            Dim possibleEbDedId As String = ""
                            possibleEbDedId = EquipmentBreakdownDeductibleIdEquivalentForPropertyDeductibleId(propDedIdToUse)
                            If EquipmentBreakdownDeductibleIdLooksValid(possibleEbDedId) = True Then
                                qqLoc.EquipmentBreakdownDeductibleId = possibleEbDedId
                            End If
                        ElseIf String.IsNullOrWhiteSpace(dedIdToUse) = False Then
                            Dim possibleEbDedId As String = ""
                            'possibleEbDedId = EquipmentBreakdownDeductibleIdEquivalentForDeductibleId(dedIdToUse)
                            'will bypass translation since all values should be the same
                            possibleEbDedId = dedIdToUse
                            If EquipmentBreakdownDeductibleIdLooksValid(possibleEbDedId) = True Then
                                qqLoc.EquipmentBreakdownDeductibleId = possibleEbDedId
                            End If
                        End If
                    Else
                        'can use backup value if available or default
                    End If
                End If

                'now verify EquipmentBreakdownDeductibleId; could also do something w/ static data
                If isMBR = False Then
                    Select Case CInt(qqLoc.EquipmentBreakdownDeductibleId)
                        Case 19, 20, 21 '25,000; 50,000; 75,000; all CPR
                            qqLoc.EquipmentBreakdownDeductibleId = "17" '10,000
                        Case 47 '7,500; just BOP
                            qqLoc.EquipmentBreakdownDeductibleId = "16" '5,000
                    End Select
                Else 'added 11/14/2017 to check AdjustmentFactor for MBR
                    If IsPositiveDecimalString(qqLoc.EquipmentBreakdown_AdjustmentFactor) = False Then
                        qqLoc.EquipmentBreakdown_AdjustmentFactor = "1"
                    End If
                End If
            End If
        End Sub
        'added 11/22/2017
        Public Function AlwaysUse_QuoteTypeId_DefaultValue_ForCompRater() As Boolean
            Dim alwaysUse As Boolean = True 'default to True; key required to turn to False

            Dim strAlwaysUse As String = configAppSettingValueAsString("QuickQuote_AlwaysUse_QuoteTypeId_DefaultValue_ForCompRater")
            If String.IsNullOrWhiteSpace(strAlwaysUse) = False Then
                If UCase(strAlwaysUse) = "YES" OrElse BitToBoolean(strAlwaysUse) = True Then 'key would just need any text value that doesn't equate to True to return False
                    alwaysUse = True
                Else
                    alwaysUse = False
                End If
            End If

            Return alwaysUse
        End Function
        'added 12/18/2017
        Public Function OkayToAlwaysSaveClassificationDescription() As Boolean
            Dim alwaysSave As Boolean = False 'default to False; key required to turn to True

            Dim strAlwaysSave As String = configAppSettingValueAsString("QuickQuote_OkayToAlwaysSaveClassificationDescription")
            If String.IsNullOrWhiteSpace(strAlwaysSave) = False Then
                If UCase(strAlwaysSave) = "YES" OrElse BitToBoolean(strAlwaysSave) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    alwaysSave = True
                Else
                    alwaysSave = False
                End If
            End If

            Return alwaysSave
        End Function

        'added 4/5/2018
        Public Shared Sub ClearDiamondPremiumBearingCoverageFieldsForRemoval(ByRef diaCov As Diamond.Common.Objects.Coverage)
            If diaCov IsNot Nothing Then
                With diaCov
                    .CoverageLimitId = 0
                    .Checkbox = False
                    .ManualLimitIncluded = CDec(0)
                    .ManualLimitIncreased = CDec(0)
                    .ManualLimitAmount = CDec(0)
                    .FullTermPremium = CDec(0)
                    .ScheduledItems = 0
                End With
            End If
        End Sub
        Public Shared Function HasDiamondPremiumBearingCoverageFields(ByVal diaCov As Diamond.Common.Objects.Coverage) As Boolean 'should match Diamond's BaseOnlyHasCoverage function
            Dim hasAny As Boolean = False

            If diaCov IsNot Nothing Then
                With diaCov
                    If .CoverageLimitId > 0 OrElse .Checkbox = True OrElse .ManualLimitIncluded > 0 OrElse .ManualLimitIncreased <> 0 OrElse .ManualLimitAmount > 0 OrElse .FullTermPremium > 0 Or .ScheduledItems > 0 Then
                        hasAny = True
                    End If
                End With
            End If

            Return hasAny
        End Function

        'added 5/1/2018
        Public Function CPR_Location_Default_Values_ForQuickQuoteObject(ByVal qqo As QuickQuoteObject, Optional ByVal verifyLob As Boolean = True) As List(Of QuickQuote_CPR_Location_Defaults)
            Dim defaultsList As List(Of QuickQuote_CPR_Location_Defaults) = Nothing

            'If qqo IsNot Nothing AndAlso (verifyLob = False OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage) AndAlso qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
            'updated 9/14/2018 to 2 IFs
            If qqo IsNot Nothing AndAlso (verifyLob = False OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage) Then
                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then 'added IF 9/14/2018
                    defaultsList = New List(Of QuickQuote_CPR_Location_Defaults)
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        Dim locDefaults As New QuickQuote_CPR_Location_Defaults
                        If l IsNot Nothing Then
                            With locDefaults
                                .CauseOfLossTypeId = l.CauseOfLossTypeId
                                .CoinsuranceTypeId = l.CoinsuranceTypeId
                                .ValuationMethodTypeId = l.ValuationMethodTypeId
                                .DeductibleId = l.DeductibleId
                            End With
                        End If
                        defaultsList.Add(locDefaults)
                    Next
                End If
            End If

            Return defaultsList
        End Function
        Public Function Has_Valid_CPR_Location_Defaults_Value(ByVal locDefaults As QuickQuote_CPR_Location_Defaults) As Boolean
            Dim hasValid As Boolean = False

            If locDefaults IsNot Nothing Then
                With locDefaults
                    If IsPositiveIntegerString(.CauseOfLossTypeId) = True OrElse IsPositiveIntegerString(.CoinsuranceTypeId) = True OrElse IsPositiveIntegerString(.ValuationMethodTypeId) = True OrElse IsPositiveIntegerString(.DeductibleId) = True Then
                        hasValid = True
                    End If
                End With
            End If

            Return hasValid
        End Function
        Public Function CPR_Location_Defaults_Match(ByVal locDefaults1 As QuickQuote_CPR_Location_Defaults, ByVal locDefaults2 As QuickQuote_CPR_Location_Defaults) As Boolean
            Dim isMatch As Boolean = False

            Dim hasValid1 As Boolean = Has_Valid_CPR_Location_Defaults_Value(locDefaults1)
            Dim hasValid2 As Boolean = Has_Valid_CPR_Location_Defaults_Value(locDefaults2)

            If hasValid1 = False AndAlso hasValid2 = False Then
                isMatch = True
            ElseIf hasValid1 = True AndAlso hasValid2 = True Then
                If isTextMatch(locDefaults1.CauseOfLossTypeId, locDefaults2.CauseOfLossTypeId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = True AndAlso isTextMatch(locDefaults1.CoinsuranceTypeId, locDefaults2.CoinsuranceTypeId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = True AndAlso isTextMatch(locDefaults1.ValuationMethodTypeId, locDefaults2.ValuationMethodTypeId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = True AndAlso isTextMatch(locDefaults1.DeductibleId, locDefaults2.DeductibleId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = True Then
                    isMatch = True
                End If
            End If

            Return isMatch
        End Function
        Public Function CPR_Location_Defaults_Lists_Match(ByVal locDefaultsList1 As List(Of QuickQuote_CPR_Location_Defaults), ByVal locDefaultsList2 As List(Of QuickQuote_CPR_Location_Defaults)) As Boolean
            Dim isMatch As Boolean = False

            Dim list1Count As Integer = 0
            Dim list2Count As Integer = 0

            If locDefaultsList1 IsNot Nothing Then
                list1Count = locDefaultsList1.Count
            End If
            If locDefaultsList2 IsNot Nothing Then
                list2Count = locDefaultsList2.Count
            End If

            If list1Count = 0 AndAlso list2Count = 0 Then
                isMatch = True
            Else
                Dim list1 As List(Of QuickQuote_CPR_Location_Defaults) = Nothing
                Dim list2 As List(Of QuickQuote_CPR_Location_Defaults) = Nothing

                If list1Count >= list2Count Then
                    list1 = locDefaultsList1
                    list2 = locDefaultsList2
                Else
                    list1 = locDefaultsList2
                    list2 = locDefaultsList1
                End If

                Dim lstItemCounter As Integer = 0
                For Each locDefaults1 As QuickQuote_CPR_Location_Defaults In list1
                    lstItemCounter += 1
                    Dim locDefaults2 As QuickQuote_CPR_Location_Defaults = Nothing
                    If list2 IsNot Nothing AndAlso list2.Count >= lstItemCounter Then
                        locDefaults2 = list2.Item(lstItemCounter - 1)
                    End If
                    isMatch = CPR_Location_Defaults_Match(locDefaults1, locDefaults2)
                    If isMatch = False Then
                        Exit For
                    End If
                Next
            End If

            Return isMatch
        End Function
        Public Sub Update_CPR_Location_Default_Values(ByRef qqo As QuickQuoteObject, ByVal locDefaultsList As List(Of QuickQuote_CPR_Location_Defaults), Optional ByVal verifyLob As Boolean = True, Optional ByRef UpdatedAnyValues As Boolean = False)
            UpdatedAnyValues = False
            If qqo IsNot Nothing AndAlso (verifyLob = False OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage) Then
                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 AndAlso locDefaultsList IsNot Nothing AndAlso locDefaultsList.Count > 0 AndAlso qqo.Locations.Count = locDefaultsList.Count Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 AndAlso locDefaultsList IsNot Nothing AndAlso locDefaultsList.Count > 0 AndAlso qqLocations.Count = locDefaultsList.Count Then
                    Dim locCounter As Integer = 0
                    'For Each l As QuickQuoteLocation In qqo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        locCounter += 1
                        If l IsNot Nothing Then
                            Dim locDefaultsToUse As QuickQuote_CPR_Location_Defaults = locDefaultsList.Item(locCounter - 1)
                            If locDefaultsToUse IsNot Nothing AndAlso Has_Valid_CPR_Location_Defaults_Value(locDefaultsToUse) = True Then
                                With locDefaultsToUse
                                    If IsPositiveIntegerString(.CauseOfLossTypeId) = True AndAlso isTextMatch(.CauseOfLossTypeId, l.CauseOfLossTypeId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                                        l.CauseOfLossTypeId = .CauseOfLossTypeId
                                        UpdatedAnyValues = True
                                    End If
                                    If IsPositiveIntegerString(.CoinsuranceTypeId) = True AndAlso isTextMatch(.CoinsuranceTypeId, l.CoinsuranceTypeId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                                        l.CoinsuranceTypeId = .CoinsuranceTypeId
                                        UpdatedAnyValues = True
                                    End If
                                    If IsPositiveIntegerString(.ValuationMethodTypeId) = True AndAlso isTextMatch(.ValuationMethodTypeId, l.ValuationMethodTypeId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                                        l.ValuationMethodTypeId = .ValuationMethodTypeId
                                        UpdatedAnyValues = True
                                    End If
                                    If IsPositiveIntegerString(.DeductibleId) = True AndAlso isTextMatch(.DeductibleId, l.DeductibleId, matchType:=TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                                        l.DeductibleId = .DeductibleId
                                        UpdatedAnyValues = True
                                    End If
                                End With
                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function OkayToAttemptReRateToFixCprLocationDefaultsWhenNeeded() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("QuickQuote_OkayToAttemptReRateToFixCprLocationDefaultsWhenNeeded")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        'added 5/2/2018
        Public Function Has_Valid_CPR_Location_Defaults_Value_In_List(ByVal locDefaultsList As List(Of QuickQuote_CPR_Location_Defaults)) As Boolean
            Dim hasValid As Boolean = False

            If locDefaultsList IsNot Nothing AndAlso locDefaultsList.Count > 0 Then
                For Each locDefaults As QuickQuote_CPR_Location_Defaults In locDefaultsList
                    If Has_Valid_CPR_Location_Defaults_Value(locDefaults) = True Then
                        hasValid = True
                        Exit For
                    End If
                Next
            End If

            Return hasValid
        End Function

        'added 6/1/2018 from original multi-state branch
        Public Enum QuickQuoteState
            None = 0
            Indiana = 1
            Illinois = 2
            Kentucky = 3 'added 4/24/2019
            Ohio = 4
        End Enum
        Public Shared Function QuickQuoteStateForDiamondStateId(ByVal stateId As Integer, Optional ByVal defaultToIndiana As Boolean = False) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None

            If stateId > 0 Then
                Dim qqHelper As New QuickQuoteHelperClass
                Dim stateText As String = qqHelper.GetStaticDataTextForValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.StateId, stateId.ToString)
                If String.IsNullOrWhiteSpace(stateText) = False Then
                    Select Case UCase(stateText)
                        Case "INDIANA", "IN"
                            qqState = QuickQuoteState.Indiana
                        Case "ILLINOIS", "IL"
                            qqState = QuickQuoteState.Illinois
                        Case "KENTUCKY", "KY" 'added 4/24/2019
                            qqState = QuickQuoteState.Kentucky
                        Case "OHIO", "OH" 'added 06/11/2020 - DJG
                            qqState = QuickQuoteState.Ohio
                    End Select
                End If
            End If

            If qqState = QuickQuoteState.None AndAlso stateId > 0 Then 'added as backup after adding static data logic
                Select Case stateId
                    Case 16
                        qqState = QuickQuoteState.Indiana
                    Case 15
                        qqState = QuickQuoteState.Illinois
                    Case 18 'added 4/24/2019
                        qqState = QuickQuoteState.Kentucky
                    Case 36 'added 06/11/2020 - DJG
                        qqState = QuickQuoteState.Ohio
                End Select
            End If

            If qqState = QuickQuoteState.None AndAlso defaultToIndiana = True Then
                qqState = QuickQuoteState.Indiana
            End If

            Return qqState
        End Function
        Public Shared Function DiamondStateIdForVersionId(ByVal versionId As Integer) As Integer
            Dim stateId As Integer = 0

            'If versionId > 0 Then
            '    Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
            '        With sso
            '            'note: should be able to select state_id directly from Version table also
            '            .queryOrStoredProc = "select CS.state_id from Version as V with (nolock)"
            '            .queryOrStoredProc &= " inner join CompanyStateLOB as CSL with (nolock) on CSL.companystatelob_id = V.companystatelob_id"
            '            .queryOrStoredProc &= " inner join CompanyState as CS with (nolock) on CS.companystate_id = CSL.companystate_id"
            '            .queryOrStoredProc &= " where V.version_id = " & versionId.ToString

            '            Using dr As SqlClient.SqlDataReader = .GetDataReader
            '                If dr IsNot Nothing AndAlso dr.HasRows = True Then
            '                    With dr
            '                        .Read()
            '                        stateId = .Item("state_id")
            '                    End With
            '                ElseIf .hasError = True Then
            '                    'database error
            '                Else
            '                    'nothing found
            '                End If
            '            End Using
            '        End With
            '    End Using
            'End If

            'updated 11/23/2022
            SetDiamondLobIdStateIdAndCompanyIdForVersionId(versionId, lobId:=0, stateId:=stateId, companyId:=0)

            Return stateId
        End Function
        Public Shared Function QuickQuoteStateForVersionId(ByVal versionId As Integer) As QuickQuoteState
            'Dim qqState As QuickQuoteState = QuickQuoteState.None

            'Dim diaStateId As Integer = DiamondStateIdForVersionId(versionId)
            'qqState = QuickQuoteStateForDiamondStateId(diaStateId)

            'Return qqState

            Return QuickQuoteStateForDiamondStateId(DiamondStateIdForVersionId(versionId))
        End Function
        Public Shared Sub SetDiamondLobIdAndStateIdForVersionId(ByVal versionId As Integer, ByRef lobId As Integer, ByRef stateId As Integer)
            'lobId = 0
            'stateId = 0

            'If versionId > 0 Then
            '    Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
            '        With sso
            '            'note: should be able to select lob_id and state_id directly from Version table also
            '            .queryOrStoredProc = "select CL.lob_id, CS.state_id from Version as V with (nolock)"
            '            .queryOrStoredProc &= " inner join CompanyStateLOB as CSL with (nolock) on CSL.companystatelob_id = V.companystatelob_id"
            '            .queryOrStoredProc &= " inner join CompanyLOB as CL with (nolock) on CL.companylob_id = CSL.companylob_id"
            '            .queryOrStoredProc &= " inner join CompanyState as CS with (nolock) on CS.companystate_id = CSL.companystate_id"
            '            .queryOrStoredProc &= " where V.version_id = " & versionId.ToString

            '            Using dr As SqlClient.SqlDataReader = .GetDataReader
            '                If dr IsNot Nothing AndAlso dr.HasRows = True Then
            '                    With dr
            '                        .Read()
            '                        lobId = .Item("lob_id")
            '                        stateId = .Item("state_id")
            '                    End With
            '                ElseIf .hasError = True Then
            '                    'database error
            '                Else
            '                    'nothing found
            '                End If
            '            End Using
            '        End With
            '    End Using
            'End If

            'updated 11/23/2022
            SetDiamondLobIdStateIdAndCompanyIdForVersionId(versionId, lobId:=lobId, stateId:=stateId, companyId:=0)

        End Sub
        Public Shared Sub SetDiamondLobIdStateIdAndCompanyIdForVersionId(ByVal versionId As Integer, ByRef lobId As Integer, ByRef stateId As Integer, ByRef companyId As Integer) 'added 11/23/2022
            lobId = 0
            stateId = 0
            companyId = 0

            If versionId > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "select V.lob_id, V.state_id, V.company_id from Version as V with (nolock)"
                        .queryOrStoredProc &= " where V.version_id = " & versionId.ToString

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    lobId = .Item("lob_id")
                                    stateId = .Item("state_id")
                                    companyId = .Item("company_id")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

        End Sub
        Public Shared Function DiamondStateIdForQuickQuoteState(ByVal qqState As QuickQuoteState, Optional ByVal defaultToIndiana As Boolean = False) As Integer
            Dim stateId As Integer = 0

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                Dim stateText1 As String = ""
                Dim stateText2 As String = ""
                Select Case qqState
                    Case QuickQuoteState.Indiana
                        stateText1 = "IN"
                        stateText2 = "Indiana"
                    Case QuickQuoteState.Illinois
                        stateText1 = "IL"
                        stateText2 = "Illinois"
                    Case QuickQuoteState.Kentucky 'added 4/24/2019
                        stateText1 = "KY"
                        stateText2 = "Kentucky"
                    Case QuickQuoteState.Ohio 'added 06/11/2020 - DJG
                        stateText1 = "OH"
                        stateText2 = "Ohio"
                End Select
                If String.IsNullOrWhiteSpace(stateText1) = False OrElse String.IsNullOrWhiteSpace(stateText2) = False Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    If String.IsNullOrWhiteSpace(stateText1) = False Then
                        Dim stateIdText As String = qqHelper.GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.StateId, stateText1)
                        If qqHelper.IsPositiveIntegerString(stateIdText) = True Then
                            stateId = CInt(stateIdText)
                        End If
                    End If
                    If stateId = 0 AndAlso String.IsNullOrWhiteSpace(stateText2) = False Then
                        Dim stateIdText As String = qqHelper.GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.StateId, stateText2)
                        If qqHelper.IsPositiveIntegerString(stateIdText) = True Then
                            stateId = CInt(stateIdText)
                        End If
                    End If
                End If
            End If

            If stateId = 0 AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True OrElse defaultToIndiana = True) Then 'added /as backup after adding static data logic
                Select Case qqState
                    Case QuickQuoteState.Indiana
                        stateId = 16
                    Case QuickQuoteState.Illinois
                        stateId = 15
                    Case QuickQuoteState.Kentucky 'added 4/24/2019
                        stateId = 18
                    Case QuickQuoteState.Ohio 'added 06/11/2020 - DJG
                        stateId = 36
                    Case Else
                        If defaultToIndiana = True Then
                            stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=False)
                        End If
                End Select
            End If

            Return stateId
        End Function
        Public Shared Function StateAbbreviationForQuickQuoteState(ByVal qqState As QuickQuoteState) As String
            Dim abbrev As String = ""

            Select Case qqState
                Case QuickQuoteState.Indiana
                    abbrev = "IN"
                Case QuickQuoteState.Illinois
                    abbrev = "IL"
                Case QuickQuoteState.Kentucky 'added 4/24/2019
                    abbrev = "KY"
                Case QuickQuoteState.Ohio  'added 06/11/2020 - DJG
                    abbrev = "OH"
            End Select

            Return abbrev
        End Function
        Public Shared Sub SetLobAndStateStuffFromDiamondVersionId(ByVal versionId As String, ByRef lobId As String, ByRef lobType As QuickQuoteObject.QuickQuoteLobType, ByRef stateId As String, Optional ByVal setFieldsToDefaultValuesUpFront As Boolean = False, Optional ByVal defaultStateToIndiana As Boolean = True, Optional ByRef actualLobId As String = "") 'updated 7/31/2018 for actualLobId
            'If setFieldsToDefaultValuesUpFront = True Then
            '    lobId = ""
            '    lobType = QuickQuoteObject.QuickQuoteLobType.None
            '    stateId = ""
            '    actualLobId = "" 'added 7/31/2018
            'End If

            'Dim qqHelper As New QuickQuoteHelperClass
            'If qqHelper.IsPositiveIntegerString(versionId) = True Then
            '    Dim lobIdText As String = ""
            '    Dim stateIdText As String = ""
            '    'lobIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, QuickQuotePropertyName.VersionId, QuickQuotePropertyName.LobId)
            '    'corrected 9/12/2018
            '    lobIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, versionId, QuickQuotePropertyName.LobId)
            '    If qqHelper.IsPositiveIntegerString(lobIdText) = True Then 'no need to check for stateId if lobId is bad
            '        'stateIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, QuickQuotePropertyName.VersionId, QuickQuotePropertyName.StateId)
            '        'updated 9/12/2018
            '        stateIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, versionId, QuickQuotePropertyName.StateId)
            '    End If
            '    If qqHelper.IsPositiveIntegerString(lobIdText) = False OrElse qqHelper.IsPositiveIntegerString(stateIdText) = False Then 'use db lookup if either are missing
            '        Dim diaLobId As Integer = 0
            '        Dim diaStateId As Integer = 0
            '        SetDiamondLobIdAndStateIdForVersionId(CInt(versionId), diaLobId, diaStateId)
            '        If diaLobId > 0 OrElse diaStateId > 0 Then
            '            If diaLobId > 0 OrElse qqHelper.IsPositiveIntegerString(lobIdText) = False Then
            '                lobIdText = diaLobId.ToString
            '            End If
            '            If diaStateId > 0 OrElse qqHelper.IsPositiveIntegerString(stateIdText) = False Then
            '                stateIdText = diaStateId.ToString
            '            End If
            '        End If
            '    Else
            '        'both static data lookups are good
            '    End If
            '    If qqHelper.IsPositiveIntegerString(lobIdText) = True AndAlso qqHelper.IsPositiveIntegerString(stateIdText) = True Then
            '        'lobId = lobIdText
            '        'updated 7/31/2018
            '        actualLobId = lobIdText
            '        If qqHelper.IsPositiveIntegerString(actualLobId) = True Then
            '            lobId = LobIdForMasterLobId(qqHelper.IntegerForString(actualLobId)).ToString
            '        Else
            '            lobId = actualLobId
            '        End If
            '        stateId = stateIdText
            '        If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId, QuickQuotePropertyName.LobType), lobType) = False Then
            '            lobType = QuickQuoteObject.QuickQuoteLobType.None
            '        End If
            '    End If
            '    '6/1/2018 (from original multi-state branch) note: could also write like this so stateId doesn't have to be in place if we're going to default it
            '    'If qqHelper.IsPositiveIntegerString(lobIdText) = True AndAlso (qqHelper.IsPositiveIntegerString(stateIdText) = True OrElse defaultStateToIndiana = True) Then
            '    '    lobId = lobIdText
            '    '    If qqHelper.IsPositiveIntegerString(stateIdText) = True Then
            '    '        stateId = stateIdText
            '    '    End If
            '    '    If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId, QuickQuotePropertyName.LobType), lobType) = False Then
            '    '        lobType = QuickQuoteObject.QuickQuoteLobType.None
            '    '    End If
            '    'End If
            'End If

            'If defaultStateToIndiana = True AndAlso qqHelper.IsPositiveIntegerString(stateId) = False Then
            '    stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=True).ToString
            'End If

            'updated 11/23/2022
            SetLobStateAndCompanyStuffFromDiamondVersionId(versionId, lobId:=lobId, lobType:=lobType, stateId:=stateId, companyId:="", setFieldsToDefaultValuesUpFront:=setFieldsToDefaultValuesUpFront, defaultStateToIndiana:=defaultStateToIndiana, defaultCompanyToIndianaFarmersMutual:=True, actualLobId:=actualLobId)
        End Sub
        Public Shared Sub SetLobStateAndCompanyStuffFromDiamondVersionId(ByVal versionId As String, ByRef lobId As String, ByRef lobType As QuickQuoteObject.QuickQuoteLobType, ByRef stateId As String, ByRef companyId As String, Optional ByVal setFieldsToDefaultValuesUpFront As Boolean = False, Optional ByVal defaultStateToIndiana As Boolean = True, Optional ByVal defaultCompanyToIndianaFarmersMutual As Boolean = True, Optional ByRef actualLobId As String = "") 'added 11/23/2022
            If setFieldsToDefaultValuesUpFront = True Then
                lobId = ""
                lobType = QuickQuoteObject.QuickQuoteLobType.None
                stateId = ""
                companyId = ""
                actualLobId = "" 'added 7/31/2018
            End If

            Dim qqHelper As New QuickQuoteHelperClass
            If qqHelper.IsPositiveIntegerString(versionId) = True Then
                Dim lobIdText As String = ""
                Dim stateIdText As String = ""
                Dim companyIdText As String = ""
                lobIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, versionId, QuickQuotePropertyName.LobId)
                If qqHelper.IsPositiveIntegerString(lobIdText) = True Then 'no need to check for stateId if lobId is bad
                    stateIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, versionId, QuickQuotePropertyName.StateId)
                    If qqHelper.IsPositiveIntegerString(stateIdText) = True Then 'no need to check for companyId if stateId is bad
                        companyIdText = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, versionId, QuickQuotePropertyName.CompanyId)
                    End If
                End If
                If qqHelper.IsPositiveIntegerString(lobIdText) = False OrElse qqHelper.IsPositiveIntegerString(stateIdText) = False OrElse qqHelper.IsPositiveIntegerString(companyIdText) = False Then 'use db lookup if either are missing
                    Dim diaLobId As Integer = 0
                    Dim diaStateId As Integer = 0
                    Dim diaCompanyId As Integer = 0
                    SetDiamondLobIdStateIdAndCompanyIdForVersionId(CInt(versionId), lobId:=diaLobId, stateId:=diaStateId, companyId:=diaCompanyId)
                    If diaLobId > 0 OrElse diaStateId > 0 OrElse diaCompanyId > 0 Then
                        If diaLobId > 0 OrElse qqHelper.IsPositiveIntegerString(lobIdText) = False Then
                            lobIdText = diaLobId.ToString
                        End If
                        If diaStateId > 0 OrElse qqHelper.IsPositiveIntegerString(stateIdText) = False Then
                            stateIdText = diaStateId.ToString
                        End If
                        If diaCompanyId > 0 OrElse qqHelper.IsPositiveIntegerString(companyIdText) = False Then
                            companyIdText = diaCompanyId.ToString
                        End If
                    End If
                Else
                    'all static data lookups are good
                End If
                If qqHelper.IsPositiveIntegerString(lobIdText) = True AndAlso qqHelper.IsPositiveIntegerString(stateIdText) = True AndAlso qqHelper.IsPositiveIntegerString(companyIdText) = True Then
                    'lobId = lobIdText
                    'updated 7/31/2018
                    actualLobId = lobIdText
                    If qqHelper.IsPositiveIntegerString(actualLobId) = True Then
                        lobId = LobIdForMasterLobId(qqHelper.IntegerForString(actualLobId)).ToString
                    Else
                        lobId = actualLobId
                    End If
                    stateId = stateIdText
                    companyId = companyIdText
                    If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId, QuickQuotePropertyName.LobType), lobType) = False Then
                        lobType = QuickQuoteObject.QuickQuoteLobType.None
                    End If
                End If
                'note: could also write like this so stateId/companyId doesn't have to be in place if we're going to default it
                'If qqHelper.IsPositiveIntegerString(lobIdText) = True AndAlso (qqHelper.IsPositiveIntegerString(stateIdText) = True OrElse defaultStateToIndiana = True) AndAlso (qqHelper.IsPositiveIntegerString(companyIdText) = True OrElse defaultCompanyToIndianaFarmersMutual = True) Then
                '    lobId = lobIdText
                '    If qqHelper.IsPositiveIntegerString(stateIdText) = True Then
                '        stateId = stateIdText
                '    End If
                '    If qqHelper.IsPositiveIntegerString(companyIdText) = True Then
                '        companyId = companyIdText
                '    End If
                '    If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId, QuickQuotePropertyName.LobType), lobType) = False Then
                '        lobType = QuickQuoteObject.QuickQuoteLobType.None
                '    End If
                'End If
            End If

            If defaultStateToIndiana = True AndAlso qqHelper.IsPositiveIntegerString(stateId) = False Then
                stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=True).ToString
            End If

            If defaultCompanyToIndianaFarmersMutual = True AndAlso qqHelper.IsPositiveIntegerString(companyId) = False Then
                companyId = DiamondCompanyIdForQuickQuoteCompany(QuickQuoteCompany.IndianaFarmersMutual, defaultToIndianaFarmersMutual:=True).ToString
            End If
        End Sub
        Public Shared Sub SetLobTypeAndDiamondVersionIdFromLobIdAndStateId(ByVal lobId As String, ByVal stateId As String, ByRef lobType As QuickQuoteObject.QuickQuoteLobType, ByRef versionId As String, Optional ByVal setFieldsToDefaultValuesUpFront As Boolean = False, Optional ByVal defaultStateToIndiana As Boolean = True)
            'If setFieldsToDefaultValuesUpFront = True Then
            '    lobType = QuickQuoteObject.QuickQuoteLobType.None
            '    versionId = ""
            'End If

            'Dim qqHelper As New QuickQuoteHelperClass
            'If defaultStateToIndiana = True AndAlso qqHelper.IsPositiveIntegerString(stateId) = False Then
            '    stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=True).ToString
            'End If

            'If IsNumeric(lobId) = True Then 'maybe use qqHelper.IsPositiveIntegerString
            '    If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId, QuickQuotePropertyName.LobType), lobType) = False Then
            '        lobType = QuickQuoteObject.QuickQuoteLobType.None
            '    End If

            '    'Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId))
            '    'updated 6/1/2018 (from original multi-state branch) to pass in optional param to default
            '    Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId), defaultToIndiana:=defaultStateToIndiana)

            '    versionId = qqHelper.GetRelatedStaticDataValueForOptionValueAndState(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, qqState, lobId, QuickQuotePropertyName.VersionId)
            'End If

            'updated 11/23/2022
            SetLobTypeAndDiamondVersionIdFromLobIdStateIdAndCompanyId(lobId, stateId, "", lobType:=lobType, versionId:=versionId, setFieldsToDefaultValuesUpFront:=setFieldsToDefaultValuesUpFront, defaultStateToIndiana:=defaultStateToIndiana, defaultCompanyToIndianaFarmersMutual:=True)
        End Sub
        Public Shared Sub SetLobTypeAndDiamondVersionIdFromLobIdStateIdAndCompanyId(ByVal lobId As String, ByVal stateId As String, ByVal companyId As String, ByRef lobType As QuickQuoteObject.QuickQuoteLobType, ByRef versionId As String, Optional ByVal setFieldsToDefaultValuesUpFront As Boolean = False, Optional ByVal defaultStateToIndiana As Boolean = True, Optional ByVal defaultCompanyToIndianaFarmersMutual As Boolean = True)
            If setFieldsToDefaultValuesUpFront = True Then
                lobType = QuickQuoteObject.QuickQuoteLobType.None
                versionId = ""
            End If

            Dim qqHelper As New QuickQuoteHelperClass
            If defaultStateToIndiana = True AndAlso qqHelper.IsPositiveIntegerString(stateId) = False Then
                stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=True).ToString
            End If
            If defaultCompanyToIndianaFarmersMutual = True AndAlso qqHelper.IsPositiveIntegerString(companyId) = False Then
                companyId = DiamondCompanyIdForQuickQuoteCompany(QuickQuoteCompany.IndianaFarmersMutual, defaultToIndianaFarmersMutual:=True).ToString
            End If

            If IsNumeric(lobId) = True Then 'maybe use qqHelper.IsPositiveIntegerString
                If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId, QuickQuotePropertyName.LobType), lobType) = False Then
                    lobType = QuickQuoteObject.QuickQuoteLobType.None
                End If

                'Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId))
                'updated 6/1/2018 (from original multi-state branch) to pass in optional param to default
                Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId), defaultToIndiana:=defaultStateToIndiana)
                Dim qqCompany As QuickQuoteCompany = QuickQuoteCompanyForDiamondCompanyId(qqHelper.IntegerForString(companyId), defaultToIndianaFarmersMutual:=defaultCompanyToIndianaFarmersMutual)

                versionId = qqHelper.GetRelatedStaticDataValueForOptionValueAndStateAndCompany(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, qqState, qqCompany, lobId, QuickQuotePropertyName.VersionId)
            End If
        End Sub
        Public Shared Sub SetDiamondLobIdAndVersionIdFromLobTypeAndStateId(ByVal lobType As QuickQuoteObject.QuickQuoteLobType, ByVal stateId As String, ByRef lobId As String, ByRef versionId As String, Optional ByVal setFieldsToDefaultValuesUpFront As Boolean = False, Optional ByVal defaultStateToIndiana As Boolean = True)
            'If setFieldsToDefaultValuesUpFront = True Then
            '    lobId = ""
            '    versionId = ""
            'End If

            'Dim qqHelper As New QuickQuoteHelperClass
            'If defaultStateToIndiana = True AndAlso qqHelper.IsPositiveIntegerString(stateId) = False Then
            '    stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=True).ToString
            'End If

            'If lobType <> Nothing AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
            '    lobId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteObject.QuickQuoteLobType), lobType), QuickQuotePropertyName.LobId)

            '    'Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId))
            '    'updated 6/1/2018 (from original multi-state branch) to pass in optional param to default
            '    Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId), defaultToIndiana:=defaultStateToIndiana)

            '    versionId = qqHelper.GetRelatedStaticDataValueForOptionValueAndState(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, qqState, lobId, QuickQuotePropertyName.VersionId)
            'End If

            'updated 11/23/2022
            SetDiamondLobIdAndVersionIdFromLobTypeStateIdAndCompanyId(lobType, stateId, "", lobId:=lobId, versionId:=versionId, setFieldsToDefaultValuesUpFront:=setFieldsToDefaultValuesUpFront, defaultStateToIndiana:=defaultStateToIndiana, defaultCompanyToIndianaFarmersMutual:=True)
        End Sub
        Public Shared Sub SetDiamondLobIdAndVersionIdFromLobTypeStateIdAndCompanyId(ByVal lobType As QuickQuoteObject.QuickQuoteLobType, ByVal stateId As String, ByVal companyId As String, ByRef lobId As String, ByRef versionId As String, Optional ByVal setFieldsToDefaultValuesUpFront As Boolean = False, Optional ByVal defaultStateToIndiana As Boolean = True, Optional ByVal defaultCompanyToIndianaFarmersMutual As Boolean = True)
            If setFieldsToDefaultValuesUpFront = True Then
                lobId = ""
                versionId = ""
            End If

            Dim qqHelper As New QuickQuoteHelperClass
            If defaultStateToIndiana = True AndAlso qqHelper.IsPositiveIntegerString(stateId) = False Then
                stateId = DiamondStateIdForQuickQuoteState(QuickQuoteState.Indiana, defaultToIndiana:=True).ToString
            End If
            If defaultCompanyToIndianaFarmersMutual = True AndAlso qqHelper.IsPositiveIntegerString(companyId) = False Then
                companyId = DiamondCompanyIdForQuickQuoteCompany(QuickQuoteCompany.IndianaFarmersMutual, defaultToIndianaFarmersMutual:=True).ToString
            End If

            If lobType <> Nothing AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                lobId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteObject.QuickQuoteLobType), lobType), QuickQuotePropertyName.LobId)

                'Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId))
                'updated 6/1/2018 (from original multi-state branch) to pass in optional param to default
                Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(stateId), defaultToIndiana:=defaultStateToIndiana)
                Dim qqCompany As QuickQuoteCompany = QuickQuoteCompanyForDiamondCompanyId(qqHelper.IntegerForString(companyId), defaultToIndianaFarmersMutual:=defaultCompanyToIndianaFarmersMutual)

                versionId = qqHelper.GetRelatedStaticDataValueForOptionValueAndStateAndCompany(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, qqState, qqCompany, lobId, QuickQuotePropertyName.VersionId)
            End If
        End Sub
        Public Shared Function QuickQuoteStateForStateAbbreviation(ByVal abbrev As String, Optional ByVal defaultToIndiana As Boolean = False) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None

            If String.IsNullOrWhiteSpace(abbrev) = False Then
                Select Case UCase(abbrev)
                    Case "IN"
                        qqState = QuickQuoteState.Indiana
                    Case "IL"
                        qqState = QuickQuoteState.Illinois
                    Case "KY" 'added 4/24/2019
                        qqState = QuickQuoteState.Kentucky
                    Case "OH" 'added 06/11/2020 - DJG
                        qqState = QuickQuoteState.Ohio
                End Select
            End If

            If qqState = QuickQuoteState.None AndAlso defaultToIndiana = True Then
                qqState = QuickQuoteState.Indiana
            End If

            Return qqState
        End Function
        Public Shared Function DiamondStateIdForStateAbbreviation(ByVal abbrev As String, Optional ByVal defaultToIndiana As Boolean = False) As Integer
            'Dim stateId As Integer = 0

            'Dim qqHelper As New QuickQuoteHelperClass
            'Dim strStateId As String = ""
            'If String.IsNullOrWhiteSpace(abbrev) = False Then
            '    strStateId = qqHelper.GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.StateId, abbrev)
            'End If

            'If qqHelper.IsPositiveIntegerString(strStateId) = True Then
            '    stateId = CInt(strStateId)
            'Else
            '    Dim qqState As QuickQuoteState = QuickQuoteStateForStateAbbreviation(abbrev, defaultToIndiana:=defaultToIndiana)
            '    stateId = DiamondStateIdForQuickQuoteState(qqState, defaultToIndiana:=defaultToIndiana)
            'End If

            'Return stateId
            'updated 2/3/2019 to use new multi-purpose method
            Return DiamondStateIdForStateAbbreviation_OptionalClassNameForStaticData(abbrev, qqClassName:=QuickQuoteClassName.QuickQuoteObject, defaultToIndiana:=defaultToIndiana)
        End Function
        'added 2/3/2019 for multi-purpose
        Public Shared Function DiamondStateIdForStateAbbreviation_OptionalClassNameForStaticData(ByVal abbrev As String, Optional ByVal qqClassName As QuickQuoteClassName = QuickQuoteClassName.QuickQuoteObject, Optional ByVal defaultToIndiana As Boolean = False) As Integer
            Dim stateId As Integer = 0

            If System.Enum.IsDefined(GetType(QuickQuoteClassName), qqClassName) = False OrElse qqClassName = QuickQuoteClassName.None Then
                qqClassName = QuickQuoteClassName.QuickQuoteObject
            End If

            Dim qqHelper As New QuickQuoteHelperClass
            Dim strStateId As String = ""
            If String.IsNullOrWhiteSpace(abbrev) = False Then
                strStateId = qqHelper.GetStaticDataValueForText(qqClassName, QuickQuotePropertyName.StateId, abbrev)
            End If

            If qqHelper.IsPositiveIntegerString(strStateId) = True Then
                stateId = CInt(strStateId)
            Else
                Dim qqState As QuickQuoteState = QuickQuoteStateForStateAbbreviation(abbrev, defaultToIndiana:=defaultToIndiana)
                stateId = DiamondStateIdForQuickQuoteState(qqState, defaultToIndiana:=defaultToIndiana)
            End If

            Return stateId
        End Function
        Public Shared Function StateAbbreviationForDiamondStateId(ByVal stateId As Integer, Optional ByVal defaultToIndiana As Boolean = False) As String
            'Dim abbrev As String = ""

            'Dim qqHelper As New QuickQuoteHelperClass
            'abbrev = qqHelper.GetStaticDataTextForValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.StateId, stateId.ToString)

            'If String.IsNullOrWhiteSpace(abbrev) = True Then
            '    Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(stateId, defaultToIndiana:=defaultToIndiana)
            '    abbrev = StateAbbreviationForQuickQuoteState(qqState)
            'End If

            'Return abbrev
            'updated 2/3/2019 to use new multi-purpose method
            Return StateAbbreviationForDiamondStateId_OptionalClassNameForStaticData(stateId, qqClassName:=QuickQuoteClassName.QuickQuoteObject, defaultToIndiana:=defaultToIndiana)
        End Function
        'added 2/3/2019 for multi-purpose
        Public Shared Function StateAbbreviationForDiamondStateId_OptionalClassNameForStaticData(ByVal stateId As Integer, Optional ByVal qqClassName As QuickQuoteClassName = QuickQuoteClassName.QuickQuoteObject, Optional ByVal defaultToIndiana As Boolean = False) As String
            Dim abbrev As String = ""

            If System.Enum.IsDefined(GetType(QuickQuoteClassName), qqClassName) = False OrElse qqClassName = QuickQuoteClassName.None Then
                qqClassName = QuickQuoteClassName.QuickQuoteObject
            End If

            Dim qqHelper As New QuickQuoteHelperClass
            abbrev = qqHelper.GetStaticDataTextForValue(qqClassName, QuickQuotePropertyName.StateId, stateId.ToString)

            If String.IsNullOrWhiteSpace(abbrev) = True Then
                Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(stateId, defaultToIndiana:=defaultToIndiana)
                abbrev = StateAbbreviationForQuickQuoteState(qqState)
            End If

            Return abbrev
        End Function

        'added 7/16/2018; updated 7/20/2018 w/ ability to clone non-primative types; removed 8/13/2018 in leiu of SetPropertyValue
        'Public Sub SetObjectProperty(ByVal obj As Object, ByVal propertyName As String, ByVal propertyValue As Object, Optional ByVal propertyTypeToVerify As Type = Nothing, Optional ByVal cloneNonPrimativePropertyValueTypes As Boolean = True)
        '    If obj IsNot Nothing Then
        '        'Dim objProperties As Reflection.PropertyInfo() = obj.GetType().GetProperties()
        '        'If objProperties IsNot Nothing AndAlso objProperties.Count > 0 Then
        '        '    For Each prop As Reflection.PropertyInfo In objProperties
        '        '        If prop.Name = propertyName AndAlso (propertyTypeToVerify = Nothing OrElse prop.PropertyType = propertyTypeToVerify) Then
        '        '            'prop.SetValue(obj, propertyValue)
        '        '            'updated 7/20/2018
        '        '            Dim propertyValueToUse As Object
        '        '            If cloneNonPrimativePropertyValueTypes = True AndAlso propertyValue.GetType.IsPrimitive = False Then
        '        '                propertyValueToUse = CloneObject(propertyValue)
        '        '            Else
        '        '                propertyValueToUse = propertyValue
        '        '            End If
        '        '            '8/2/2018 note: commented out to get around build error
        '        '            'prop.SetValue(obj, propertyValueToUse) 'added back 8/2/2018; forgot to put it back on when updating last
        '        '            'updated 8/13/2018
        '        '            prop.SetValue(obj, propertyValueToUse, Reflection.BindingFlags.SetProperty, Nothing, Nothing, Nothing)
        '        '            Exit For
        '        '        End If
        '        '    Next
        '        'End If
        '        'updated 8/13/2018 to not loop through full property list just to find the right one
        '        Dim objType As Type = obj.GetType()
        '        Dim pInfo As System.Reflection.PropertyInfo = objType.GetProperty(propertyName)
        '        If propertyTypeToVerify = Nothing OrElse pInfo.PropertyType = propertyTypeToVerify Then
        '            Dim propertyValueToUse As Object
        '            If cloneNonPrimativePropertyValueTypes = True AndAlso propertyValue.GetType.IsPrimitive = False Then
        '                propertyValueToUse = CloneObject(propertyValue)
        '            Else
        '                propertyValueToUse = propertyValue
        '            End If
        '            pInfo.SetValue(obj, propertyValueToUse, Reflection.BindingFlags.SetProperty, Nothing, Nothing, Nothing)
        '        End If
        '    End If
        'End Sub
        Public Sub CopyLikePropertiesFromObjectToObject(ByVal objToCopyFrom As Object, ByVal objToCopyTo As Object, Optional ByVal verifyPropertyTypes As Boolean = True, Optional ByVal cloneNonPrimativePropertyValueTypes As Boolean = True)
            If objToCopyFrom IsNot Nothing AndAlso objToCopyTo IsNot Nothing Then
                Dim objProperties As Reflection.PropertyInfo() = objToCopyFrom.GetType().GetProperties()
                If objProperties IsNot Nothing AndAlso objProperties.Count > 0 Then
                    For Each prop As Reflection.PropertyInfo In objProperties
                        Dim propertyTypeToVerify As Type = Nothing
                        If verifyPropertyTypes = True Then
                            propertyTypeToVerify = prop.PropertyType
                        End If
                        '8/2/2018 note: commented out to get around build error
                        'SetObjectProperty(objToCopyTo, prop.Name, prop.GetValue(objToCopyFrom), propertyTypeToVerify:=propertyTypeToVerify, cloneNonPrimativePropertyValueTypes:=cloneNonPrimativePropertyValueTypes)
                        'updated 8/13/2018; then updated to use other method, which now has the same functionality
                        'SetObjectProperty(objToCopyTo, prop.Name, prop.GetValue(objToCopyFrom, Reflection.BindingFlags.GetProperty, Nothing, Nothing, Nothing), propertyTypeToVerify:=propertyTypeToVerify, cloneNonPrimativePropertyValueTypes:=cloneNonPrimativePropertyValueTypes)
                        SetPropertyValue(objToCopyTo, prop.Name, prop.GetValue(objToCopyFrom, Reflection.BindingFlags.GetProperty, Nothing, Nothing, Nothing), verifyPropertyExists:=True, propertyTypeToVerify:=propertyTypeToVerify, cloneNonPrimativePropertyValueTypes:=cloneNonPrimativePropertyValueTypes)
                    Next
                End If
            End If
        End Sub
        Public Function GetPropertyValue(ByVal obj As Object, ByVal propertyName As String, Optional ByVal verifyPropertyExists As Boolean = False) As Object 'added 8/13/2018
            Dim PropValue As Object = Nothing
            If obj IsNot Nothing Then
                If verifyPropertyExists = True Then
                    Dim objType As Type = obj.GetType()
                    Dim pInfo As System.Reflection.PropertyInfo = objType.GetProperty(propertyName)
                    If pInfo IsNot Nothing Then
                        PropValue = pInfo.GetValue(obj, Reflection.BindingFlags.GetProperty, Nothing, Nothing, Nothing)
                    End If
                Else
                    'note: this works fine, but it's not as Safe as it would just fail if String was mistyped
                    PropValue = CallByName(obj, propertyName, Microsoft.VisualBasic.CallType.Get, Nothing)
                End If
            End If
            Return PropValue
        End Function
        'Public Sub SetPropertyValue_Simple(ByVal obj As Object, ByVal propertyName As String, ByVal propertyValue As Object, Optional ByVal verifyPropertyExists As Boolean = False) 'added 8/13/2018; original logic
        '    If obj IsNot Nothing Then
        '        If verifyPropertyExists = True Then
        '            Dim objType As Type = obj.GetType()
        '            Dim pInfo As System.Reflection.PropertyInfo = objType.GetProperty(propertyName)
        '            If pInfo IsNot Nothing Then
        '                pInfo.SetValue(obj, propertyValue, Reflection.BindingFlags.SetProperty, Nothing, Nothing, Nothing)
        '            End If
        '        Else
        '            'note: this works fine, but it's not as Safe as it would just fail if String was mistyped
        '            CallByName(obj, propertyName, Microsoft.VisualBasic.CallType.Set, propertyValue)
        '        End If
        '    End If
        'End Sub
        Public Sub SetPropertyValue(ByVal obj As Object, ByVal propertyName As String, ByVal propertyValue As Object, Optional ByVal verifyPropertyExists As Boolean = False, Optional ByVal propertyTypeToVerify As Type = Nothing, Optional ByVal cloneNonPrimativePropertyValueTypes As Boolean = True) 'added 8/13/2018; more like original SetObjectProperty
            If obj IsNot Nothing Then
                If verifyPropertyExists = True OrElse propertyTypeToVerify <> Nothing Then
                    Dim objType As Type = obj.GetType()
                    Dim pInfo As System.Reflection.PropertyInfo = objType.GetProperty(propertyName)
                    If pInfo IsNot Nothing Then
                        If propertyTypeToVerify = Nothing OrElse pInfo.PropertyType = propertyTypeToVerify Then
                            Dim propertyValueToUse As Object
                            If cloneNonPrimativePropertyValueTypes = True AndAlso propertyValue.GetType.IsPrimitive = False Then
                                propertyValueToUse = CloneObject(propertyValue)
                            Else
                                propertyValueToUse = propertyValue
                            End If
                            pInfo.SetValue(obj, propertyValueToUse, Reflection.BindingFlags.SetProperty, Nothing, Nothing, Nothing)
                        End If
                    End If
                Else
                    'note: this works fine, but it's not as Safe as it would just fail if String was mistyped
                    Dim propertyValueToUse As Object
                    If cloneNonPrimativePropertyValueTypes = True AndAlso propertyValue.GetType.IsPrimitive = False Then
                        propertyValueToUse = CloneObject(propertyValue)
                    Else
                        propertyValueToUse = propertyValue
                    End If
                    CallByName(obj, propertyName, Microsoft.VisualBasic.CallType.Set, propertyValueToUse)
                End If
            End If
        End Sub
        Public Function GetPropertyName(Of T)(ByVal expression As System.Linq.Expressions.Expression(Of Func(Of T))) As String 'added 8/13/2018
            Dim memberExpression As System.Linq.Expressions.MemberExpression = DirectCast(expression.Body, System.Linq.Expressions.MemberExpression)
            Return memberExpression.Member.Name
        End Function
        'Public Function GetPropertyNameValue(Of T)(ByVal obj As Object, ByVal expression As System.Linq.Expressions.Expression(Of Func(Of T))) As String 'added 8/13/2018
        '    'Return obj.expression
        '    Dim memberExpression As System.Linq.Expressions.MemberExpression = DirectCast(expression.Body, System.Linq.Expressions.MemberExpression)
        '    Return GetPropertyValue(obj, memberExpression.Member.Name)
        'End Function
        Public Function GetSumForPropertyValues(Of A, T)(ByVal objs As List(Of A), ByVal expression As System.Linq.Expressions.Expression(Of Func(Of T)), Optional ByVal maintainFormattingOrDefaultValue As Boolean = True, Optional ByVal verifyPropertyExists As Boolean = False) As String
            Dim sumOfProps As String = String.Empty
            If objs IsNot Nothing AndAlso objs.Count > 0 Then
                Dim propName As String = GetPropertyName(expression)
                If String.IsNullOrWhiteSpace(propName) = False Then
                    Dim holdVal As String = ""
                    Dim holdString As String = ""
                    Dim anyDollarSigns As Boolean = False
                    Dim anyDecimals As Boolean = False
                    For Each o As Object In objs
                        Dim objPropValue As Object = GetPropertyValue(o, propName, verifyPropertyExists:=verifyPropertyExists)
                        If objPropValue IsNot Nothing Then
                            If maintainFormattingOrDefaultValue = True Then
                                holdVal = objPropValue.ToString
                                If String.IsNullOrWhiteSpace(holdString) = True Then
                                    holdString = holdVal
                                Else
                                    'holdString already has something; see if it's the same as holdVal from a previous iteration
                                    If isTextMatch(holdString, holdVal, matchType:=TextMatchType.DecimalOrText_IgnoreCasing) Then
                                        'ignore
                                    Else
                                        'append; this should only get used if passing non-premiums in
                                        holdString = appendText(holdString, holdVal, splitter:=" ")
                                    End If
                                End If
                                If IsNumeric(holdVal) = True Then
                                    If holdVal.Contains("$") = True Then
                                        anyDollarSigns = True
                                    End If
                                    If holdVal.Contains(".") = True Then
                                        anyDecimals = True
                                    End If
                                End If
                            End If
                            If IsNumeric(objPropValue) = True Then
                                sumOfProps = getSum(sumOfProps, objPropValue.ToString)
                            End If
                        End If
                    Next
                    If maintainFormattingOrDefaultValue = True Then
                        If String.IsNullOrWhiteSpace(sumOfProps) = True Then
                            If String.IsNullOrWhiteSpace(holdString) = False Then
                                'could be N/A
                                sumOfProps = holdString
                            End If
                        Else
                            'has something already
                            If IsNumeric(sumOfProps) = True Then
                                If anyDollarSigns = True AndAlso sumOfProps.Contains("$") = False Then
                                    'should have currency formatting
                                    If anyDecimals = True Then
                                        'show cents
                                        sumOfProps = FormatCurrency(sumOfProps, 2).ToString
                                    Else
                                        'whole dollar w/o decimal
                                        sumOfProps = FormatCurrency(sumOfProps, 0).ToString
                                    End If
                                ElseIf anyDecimals = False AndAlso sumOfProps.Contains(".") = True Then
                                    'should be whole number
                                    sumOfProps = FormatNumber(sumOfProps, 0).ToString
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            Return sumOfProps
        End Function
        Public Function GetListOfPropertyValues(Of A, B)(ByVal objs As List(Of A), ByVal expression As System.Linq.Expressions.Expression(Of Func(Of B)), Optional ByVal verifyPropertyExists As Boolean = False) As List(Of B) 'added 11/16/2018
            Dim listOfProps As List(Of B) = Nothing
            If objs IsNot Nothing AndAlso objs.Count > 0 Then
                Dim propName As String = GetPropertyName(expression)
                If String.IsNullOrWhiteSpace(propName) = False Then
                    For Each o As Object In objs
                        Dim objPropValue As Object = GetPropertyValue(o, propName, verifyPropertyExists:=verifyPropertyExists)
                        If objPropValue IsNot Nothing Then
                            If listOfProps Is Nothing Then
                                listOfProps = New List(Of B)
                            End If
                            listOfProps.Add(objPropValue)
                        End If
                    Next
                End If
            End If
            Return listOfProps
        End Function
        Public Function GetSumForSubPropertyValues(Of A, B, C)(ByVal objs As List(Of A), ByVal mainPropertyExpression As System.Linq.Expressions.Expression(Of Func(Of B)), ByVal subPropertyExpression As System.Linq.Expressions.Expression(Of Func(Of C)), Optional ByVal maintainFormattingOrDefaultValue As Boolean = True, Optional ByVal verifyMainPropertyExists As Boolean = False, Optional ByVal verifySubPropertyExists As Boolean = False) As String 'added 11/16/2018
            Dim sumOfProps As String = ""

            Dim listOfProps As List(Of B) = GetListOfPropertyValues(objs, mainPropertyExpression, verifyPropertyExists:=verifyMainPropertyExists)
            If listOfProps IsNot Nothing AndAlso listOfProps.Count > 0 Then
                sumOfProps = GetSumForPropertyValues(listOfProps, subPropertyExpression, maintainFormattingOrDefaultValue:=maintainFormattingOrDefaultValue, verifyPropertyExists:=verifySubPropertyExists)
            End If

            Return sumOfProps
        End Function
        Public Function HasAnyTruePropertyValues(Of A, T)(ByVal objs As List(Of A), ByVal expression As System.Linq.Expressions.Expression(Of Func(Of T)), Optional ByVal verifyPropertyExists As Boolean = False) As Boolean
            Dim hasTrue As Boolean = False
            If objs IsNot Nothing AndAlso objs.Count > 0 Then
                Dim propName As String = GetPropertyName(expression)
                If String.IsNullOrWhiteSpace(propName) = False Then
                    For Each o As Object In objs
                        Dim objPropValue As Object = GetPropertyValue(o, propName, verifyPropertyExists:=verifyPropertyExists)
                        If objPropValue IsNot Nothing Then
                            Dim boolToCheck As Boolean = False
                            If Boolean.TryParse(objPropValue.ToString, boolToCheck) Then
                                If boolToCheck = True Then
                                    hasTrue = True
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                End If
            End If
            Return hasTrue
        End Function
        Public Sub SetPropertyValues(Of A, T)(ByVal objs As List(Of A), ByVal expression As System.Linq.Expressions.Expression(Of Func(Of T)), ByVal propertyValue As Object, Optional ByVal verifyPropertyExists As Boolean = False, Optional ByVal cloneNonPrimativePropertyValueTypes As Boolean = True)
            If objs IsNot Nothing AndAlso objs.Count > 0 Then
                Dim propName As String = GetPropertyName(expression)
                If String.IsNullOrWhiteSpace(propName) = False Then
                    For Each o As Object In objs
                        SetPropertyValue(o, propName, propertyValue, verifyPropertyExists:=verifyPropertyExists, cloneNonPrimativePropertyValueTypes:=cloneNonPrimativePropertyValueTypes)
                    Next
                End If
            End If
        End Sub
        'added 8/14/2018
        Public Function HasAnyPropertyValuesMatchingString(Of A, T)(ByVal objs As List(Of A), ByVal expression As System.Linq.Expressions.Expression(Of Func(Of T)), ByVal stringToMatch As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal verifyPropertyExists As Boolean = False) As Boolean
            Dim hasMatch As Boolean = False
            If objs IsNot Nothing AndAlso objs.Count > 0 Then
                Dim propName As String = GetPropertyName(expression)
                If String.IsNullOrWhiteSpace(propName) = False Then
                    For Each o As Object In objs
                        Dim objPropValue As Object = GetPropertyValue(o, propName, verifyPropertyExists:=verifyPropertyExists)
                        If objPropValue IsNot Nothing Then
                            If isTextMatch(objPropValue.ToString, stringToMatch, matchType:=matchType) = True Then
                                hasMatch = True
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If
            Return hasMatch
        End Function

        'added 7/25/2018
        Public Function QuickQuoteObjectForState(ByRef qqos As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState, Optional ByVal addToListIfNeeded As Boolean = False, Optional ByVal lobToUse As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None, Optional ByVal quoteLevelToUseWhenAdding As QuoteLevel = QuoteLevel.StateLevel) As QuickQuoteObject '7/28/2018 - added optional params to copy base information from one stateQuote to another; also optional param for quoteLevel
            'Dim qqo As QuickQuoteObject = Nothing

            'If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
            '    Dim lobTypeFound As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
            '    If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
            '        For Each qo As QuickQuoteObject In qqos
            '            If qo IsNot Nothing Then
            '                If qqo Is Nothing AndAlso qo.QuickQuoteState = qqState Then
            '                    qqo = qo
            '                End If
            '                If lobTypeFound = QuickQuoteObject.QuickQuoteLobType.None Then
            '                    lobTypeFound = LobTypeForQuickQuoteObject(qo)
            '                End If
            '                If qqo IsNot Nothing AndAlso lobTypeFound <> QuickQuoteObject.QuickQuoteLobType.None Then
            '                    Exit For
            '                End If
            '            End If
            '        Next
            '    End If

            '    If qqo Is Nothing AndAlso addToListIfNeeded = True Then
            '        If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = False OrElse lobToUse = QuickQuoteObject.QuickQuoteLobType.None Then
            '            lobToUse = lobTypeFound
            '        End If
            '        If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = True AndAlso lobToUse <> QuickQuoteObject.QuickQuoteLobType.None Then
            '            qqo = New QuickQuoteObject
            '            'qqo.LobType = lobToUse
            '            'qqo.QuickQuoteState = qqState
            '            'If qqos Is Nothing Then
            '            '    qqos = New List(Of QuickQuoteObject)
            '            'End If
            '            'qqos.Add(qqo)
            '            'updated 7/28/2018
            '            If copyQuoteInformationFromOneStateToAnotherWhenAdding = True Then
            '                Dim quoteToCopyFrom As QuickQuoteObject = GetStateQuoteForCopy(qqos, quoteStateToCopyInformationFrom)
            '                If quoteToCopyFrom IsNot Nothing Then
            '                    CopyInformationFromOneQuoteToAnother(quoteToCopyFrom, qqo, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.StateToState)
            '                End If
            '            End If
            '            AddNewQuickQuoteObjectToList(qqos, qqo:=qqo, lobType:=lobToUse, qqState:=qqState, level:=quoteLevelToUseWhenAdding)
            '        End If
            '    End If
            'End If

            'Return qqo

            'updated 11/28/2022
            Return QuickQuoteObjectForState_WithCompany(qqos, qqState, addToListIfNeeded:=addToListIfNeeded, lobToUse:=lobToUse, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom, quoteLevelToUseWhenAdding:=quoteLevelToUseWhenAdding)
        End Function
        Public Function QuickQuoteObjectForState_WithCompany(ByRef qqos As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState, Optional ByVal addToListIfNeeded As Boolean = False, Optional ByVal lobToUse As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal companyToUse As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None, Optional ByVal quoteLevelToUseWhenAdding As QuoteLevel = QuoteLevel.StateLevel) As QuickQuoteObject 'added 11/28/2022
            Dim qqo As QuickQuoteObject = Nothing

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                Dim lobTypeFound As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                Dim companyFound As QuickQuoteCompany = QuickQuoteCompany.None
                If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
                    For Each qo As QuickQuoteObject In qqos
                        If qo IsNot Nothing Then
                            If qqo Is Nothing AndAlso qo.QuickQuoteState = qqState Then
                                qqo = qo
                            End If
                            If lobTypeFound = QuickQuoteObject.QuickQuoteLobType.None Then
                                lobTypeFound = LobTypeForQuickQuoteObject(qo)
                            End If
                            If companyFound = QuickQuoteCompany.None Then
                                companyFound = QuickQuoteCompanyForQuote(qo)
                            End If
                            If qqo IsNot Nothing AndAlso lobTypeFound <> QuickQuoteObject.QuickQuoteLobType.None AndAlso companyFound <> QuickQuoteCompany.None Then
                                Exit For
                            End If
                        End If
                    Next
                End If

                If qqo Is Nothing AndAlso addToListIfNeeded = True Then
                    If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = False OrElse lobToUse = QuickQuoteObject.QuickQuoteLobType.None Then
                        lobToUse = lobTypeFound
                    End If
                    If System.Enum.IsDefined(GetType(QuickQuoteCompany), companyToUse) = False OrElse companyToUse = QuickQuoteCompany.None Then
                        companyToUse = companyFound
                    End If
                    If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = True AndAlso lobToUse <> QuickQuoteObject.QuickQuoteLobType.None Then
                        qqo = New QuickQuoteObject
                        'qqo.LobType = lobToUse
                        'qqo.QuickQuoteState = qqState
                        'If qqos Is Nothing Then
                        '    qqos = New List(Of QuickQuoteObject)
                        'End If
                        'qqos.Add(qqo)
                        'updated 7/28/2018
                        If copyQuoteInformationFromOneStateToAnotherWhenAdding = True Then
                            Dim quoteToCopyFrom As QuickQuoteObject = GetStateQuoteForCopy(qqos, quoteStateToCopyInformationFrom)
                            If quoteToCopyFrom IsNot Nothing Then
                                CopyInformationFromOneQuoteToAnother(quoteToCopyFrom, qqo, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.StateToState)
                            End If
                        End If
                        AddNewQuickQuoteObjectToList_WithCompany(qqos, qqo:=qqo, lobType:=lobToUse, qqState:=qqState, qqCompany:=companyToUse, level:=quoteLevelToUseWhenAdding)
                    End If
                End If
            End If

            Return qqo
        End Function
        Public Shared Function LobTypeForQuickQuoteObject(ByVal qqo As QuickQuoteObject) As QuickQuoteObject.QuickQuoteLobType
            Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

            If qqo IsNot Nothing Then
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), qqo.LobType) = True AndAlso qqo.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    lobType = qqo.LobType
                Else
                    If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In qqo.MultiStateQuotes
                            lobType = LobTypeForQuickQuoteObject(msq)
                            If lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                                Exit For
                            End If
                        Next
                    End If
                End If
            End If

            Return lobType
        End Function
        Public Shared Function QuickQuoteStateForQuote(ByVal qqo As QuickQuoteObject) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None

            If qqo IsNot Nothing Then
                If System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = True AndAlso qqo.QuickQuoteState <> QuickQuoteState.None Then
                    qqState = qqo.QuickQuoteState
                Else
                    If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In qqo.MultiStateQuotes
                            qqState = QuickQuoteStateForQuote(msq)
                            If qqState <> QuickQuoteState.None Then
                                Exit For
                            End If
                        Next
                    End If
                End If
            End If

            Return qqState
        End Function
        Public Shared Function QuickQuoteCompanyForQuote(ByVal qqo As QuickQuoteObject) As QuickQuoteCompany 'added 11/28/2022
            Dim qqCompany As QuickQuoteCompany = QuickQuoteCompany.None

            If qqo IsNot Nothing Then
                If System.Enum.IsDefined(GetType(QuickQuoteCompany), qqo.Company) = True AndAlso qqo.Company <> QuickQuoteCompany.None Then
                    qqCompany = qqo.Company
                Else
                    If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In qqo.MultiStateQuotes
                            qqCompany = QuickQuoteCompanyForQuote(msq)
                            If qqCompany <> QuickQuoteCompany.None Then
                                Exit For
                            End If
                        Next
                    End If
                End If
            End If

            Return qqCompany
        End Function
        Public Shared Function QuickQuoteStatesForQuote(ByVal qqo As QuickQuoteObject, Optional ByRef usedStateFromQuoteLevel As Boolean = False, Optional ByRef usedStateFromMultiStateLevel As Boolean = False) As List(Of QuickQuoteState) 'added optional byref params 3/16/2018
            Dim qqStates As List(Of QuickQuoteState) = Nothing

            If qqo IsNot Nothing Then
                AddQuickQuoteStateToList(QuickQuoteStateForQuote(qqo), qqStates, onlyAddIfValid:=True, onlyAddIfUnique:=True, added:=usedStateFromQuoteLevel) 'updated 3/16/2018 for optional byref param
                Dim statesAdded As Integer = 0
                AddQuickQuoteStatesToList(QuickQuoteStatesForQuotes(qqo.MultiStateQuotes), qqStates, onlyAddIfValid:=True, onlyAddIfUnique:=True, numberAdded:=statesAdded)
                If statesAdded > 0 Then
                    usedStateFromMultiStateLevel = True
                End If
            End If

            Return qqStates
        End Function
        Public Shared Sub AddQuickQuoteStateToList(ByRef qqState As QuickQuoteState, ByRef qqStates As List(Of QuickQuoteState), Optional ByVal onlyAddIfValid As Boolean = True, Optional ByVal onlyAddIfUnique As Boolean = True, Optional ByRef added As Boolean = False) 'added optional byref param 3/16/2018
            If onlyAddIfValid = False OrElse (System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None) Then
                If qqStates Is Nothing Then
                    qqStates = New List(Of QuickQuoteState)
                End If
                If onlyAddIfUnique = False OrElse qqStates.Count = 0 OrElse qqStates.Contains(qqState) = False Then
                    qqStates.Add(qqState)
                    added = True
                End If
            End If
        End Sub
        Public Function QuickQuoteObjectForState(ByRef quoteObject As QuickQuoteObject, ByVal qqState As QuickQuoteState, Optional ByVal addToListIfNeeded As Boolean = False, Optional ByVal lobToUse As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None) As QuickQuoteObject '7/28/2018 - added optional params to copy base information from one stateQuote to another
            'Dim qqo As QuickQuoteObject = Nothing

            'If quoteObject IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
            '    Dim lobTypeFound As QuickQuoteObject.QuickQuoteLobType = LobTypeForQuickQuoteObject(quoteObject)
            '    If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = False OrElse lobToUse = QuickQuoteObject.QuickQuoteLobType.None Then
            '        lobToUse = lobTypeFound
            '    End If
            '    Dim multiStateQuoteCount As Integer = 0
            '    If quoteObject.MultiStateQuotes IsNot Nothing Then
            '        multiStateQuoteCount = quoteObject.MultiStateQuotes.Count
            '    End If

            '    Dim statesAddedFromQuoteLevel As Boolean = False
            '    Dim statesAddedFromMultiStateLevel As Boolean = False
            '    Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(quoteObject, usedStateFromQuoteLevel:=statesAddedFromQuoteLevel, usedStateFromMultiStateLevel:=statesAddedFromMultiStateLevel)
            '    Dim qqStatesCount As Integer = 0
            '    If qqStates IsNot Nothing Then
            '        qqStatesCount = qqStates.Count
            '    End If
            '    Dim quoteHasStateAtQuoteLevel As Boolean = False
            '    Dim quoteHasStateAtMultiStateLevel As Boolean = False
            '    If QuoteHasState(quoteObject, qqState, atQuoteLevel:=quoteHasStateAtQuoteLevel, atMultiStateLevel:=quoteHasStateAtMultiStateLevel) = True Then
            '        If quoteHasStateAtMultiStateLevel = True Then
            '            qqo = QuickQuoteObjectForState(quoteObject.MultiStateQuotes, qqState, addToListIfNeeded:=addToListIfNeeded, lobToUse:=lobToUse, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom, quoteLevelToUseWhenAdding:=QuoteLevel.StateLevel) 'should find something w/o adding new since atMultiStateLevel came back True on call to QuoteHasState; updated 7/28/2018 w/ other params even though it shouldn't need them since they're only for Adding
            '        Else
            '            'state found at quote level
            '            If multiStateQuoteCount = 0 OrElse qqStatesCount = 1 OrElse statesAddedFromMultiStateLevel = False Then
            '                'currently single state quote
            '                qqo = quoteObject
            '            Else
            '                'other states exist at multi-state level; need to add to multi-state list from quote level
            '                'qqo = CloneObject(quoteObject)
            '                'If qqo IsNot Nothing Then
            '                '    DisposeQuickQuoteObjects(qqo.MultiStateQuotes) 'clear out any multi-state quotes on this one before adding it to multi-state list for main quote
            '                '    If quoteObject.MultiStateQuotes Is Nothing Then 'should already be something but just in case
            '                '        quoteObject.MultiStateQuotes = New List(Of QuickQuoteObject)
            '                '    End If
            '                '    quoteObject.MultiStateQuotes.Add(qqo)
            '                'End If
            '                'updated 8/27/2018
            '                qqo = New QuickQuoteObject
            '                CopyInformationFromOneQuoteToAnother(quoteObject, qqo, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.BetweenQuoteAndMultiStateLevels) 'note: this copy will exclude packageParts and multiStateQuotes
            '                AddNewQuickQuoteObjectToList(quoteObject.MultiStateQuotes, qqo:=qqo, level:=QuoteLevel.StateLevel) 'could pass in lobType and qqState, but they should already come over w/ CopyInfo call (, lobType:=quoteObject.LobType, qqState:=quoteObject.QuickQuoteState)
            '            End If
            '        End If
            '    Else
            '        'quote doesn't have state
            '        If addToListIfNeeded = True Then
            '            If qqStatesCount = 0 Then
            '                'just set on quoteObject if no states exist
            '                quoteObject.QuickQuoteState = qqState
            '                If (System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = False OrElse lobToUse = QuickQuoteObject.QuickQuoteLobType.None) AndAlso System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = True AndAlso lobToUse <> QuickQuoteObject.QuickQuoteLobType.None Then
            '                    quoteObject.LobType = lobToUse
            '                End If
            '                qqo = quoteObject
            '            Else
            '                'at least one state already on quote; will need to add this one to list... and possibly add what's at the quote level to the list too
            '                Dim multiStateQuoteStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(quoteObject.MultiStateQuotes)
            '                Dim multiStateQuoteStateCount As Integer = 0
            '                If multiStateQuoteStates IsNot Nothing Then
            '                    multiStateQuoteStateCount = multiStateQuoteStates.Count
            '                End If
            '                If multiStateQuoteStateCount > 0 Then
            '                    'already has state(s) at multi-state level; just add new one (below this IF)
            '                Else
            '                    'must just have state set at quote level; copy existing one from quote level to multi-state level and then add new to multi-state level (new one added below IF)
            '                    If System.Enum.IsDefined(GetType(QuickQuoteState), quoteObject.QuickQuoteState) = True AndAlso quoteObject.QuickQuoteState <> QuickQuoteState.None Then 'should be valid since state(s) was/were found but nothing at multi-state level
            '                        'Dim qqoForMultiStateLevel As QuickQuoteObject = CloneObject(quoteObject)
            '                        'If qqoForMultiStateLevel IsNot Nothing Then
            '                        '    DisposeQuickQuoteObjects(qqoForMultiStateLevel.MultiStateQuotes) 'clear out any multi-state quotes on this one before adding it to multi-state list for main quote
            '                        '    If quoteObject.MultiStateQuotes Is Nothing Then
            '                        '        quoteObject.MultiStateQuotes = New List(Of QuickQuoteObject)
            '                        '    End If
            '                        '    quoteObject.MultiStateQuotes.Add(qqoForMultiStateLevel)
            '                        'End If
            '                        'updated 7/28/2018
            '                        Dim qqoForMultiStateLevel As New QuickQuoteObject
            '                        CopyInformationFromOneQuoteToAnother(quoteObject, qqoForMultiStateLevel, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.BetweenQuoteAndMultiStateLevels) 'note: this copy will exclude packageParts and multiStateQuotes
            '                        AddNewQuickQuoteObjectToList(quoteObject.MultiStateQuotes, qqo:=qqoForMultiStateLevel, level:=QuoteLevel.StateLevel) 'could pass in lobType and qqState, but they should already come over w/ CopyInfo call (, lobType:=quoteObject.LobType, qqState:=quoteObject.QuickQuoteState)
            '                    End If
            '                End If
            '                qqo = QuickQuoteObjectForState(quoteObject.MultiStateQuotes, qqState, addToListIfNeeded:=True, lobToUse:=lobToUse, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom, quoteLevelToUseWhenAdding:=QuoteLevel.StateLevel) '7/28/2018 - updated with optional params to copy base information from one stateQuote to another; also quoteLevel
            '            End If
            '        End If
            '    End If
            'End If

            'Return qqo

            'updated 11/28/2022
            Return QuickQuoteObjectForState_WithCompany(quoteObject, qqState, addToListIfNeeded:=addToListIfNeeded, lobToUse:=lobToUse, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom)
        End Function
        Public Function QuickQuoteObjectForState_WithCompany(ByRef quoteObject As QuickQuoteObject, ByVal qqState As QuickQuoteState, Optional ByVal addToListIfNeeded As Boolean = False, Optional ByVal lobToUse As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal companyToUse As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None) As QuickQuoteObject 'added 11/28/2022
            Dim qqo As QuickQuoteObject = Nothing

            If quoteObject IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                Dim lobTypeFound As QuickQuoteObject.QuickQuoteLobType = LobTypeForQuickQuoteObject(quoteObject)
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = False OrElse lobToUse = QuickQuoteObject.QuickQuoteLobType.None Then
                    lobToUse = lobTypeFound
                End If
                Dim companyFound As QuickQuoteCompany = QuickQuoteCompanyForQuote(quoteObject)
                If System.Enum.IsDefined(GetType(QuickQuoteCompany), companyToUse) = False OrElse companyToUse = QuickQuoteCompany.None Then
                    companyToUse = companyFound
                End If
                Dim multiStateQuoteCount As Integer = 0
                If quoteObject.MultiStateQuotes IsNot Nothing Then
                    multiStateQuoteCount = quoteObject.MultiStateQuotes.Count
                End If

                Dim statesAddedFromQuoteLevel As Boolean = False
                Dim statesAddedFromMultiStateLevel As Boolean = False
                Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(quoteObject, usedStateFromQuoteLevel:=statesAddedFromQuoteLevel, usedStateFromMultiStateLevel:=statesAddedFromMultiStateLevel)
                Dim qqStatesCount As Integer = 0
                If qqStates IsNot Nothing Then
                    qqStatesCount = qqStates.Count
                End If
                Dim quoteHasStateAtQuoteLevel As Boolean = False
                Dim quoteHasStateAtMultiStateLevel As Boolean = False
                If QuoteHasState(quoteObject, qqState, atQuoteLevel:=quoteHasStateAtQuoteLevel, atMultiStateLevel:=quoteHasStateAtMultiStateLevel) = True Then
                    If quoteHasStateAtMultiStateLevel = True Then
                        qqo = QuickQuoteObjectForState_WithCompany(quoteObject.MultiStateQuotes, qqState, addToListIfNeeded:=addToListIfNeeded, lobToUse:=lobToUse, companyToUse:=companyToUse, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom, quoteLevelToUseWhenAdding:=QuoteLevel.StateLevel) 'should find something w/o adding new since atMultiStateLevel came back True on call to QuoteHasState; updated 7/28/2018 w/ other params even though it shouldn't need them since they're only for Adding
                    Else
                        'state found at quote level
                        If multiStateQuoteCount = 0 OrElse qqStatesCount = 1 OrElse statesAddedFromMultiStateLevel = False Then
                            'currently single state quote
                            qqo = quoteObject
                        Else
                            'other states exist at multi-state level; need to add to multi-state list from quote level
                            'qqo = CloneObject(quoteObject)
                            'If qqo IsNot Nothing Then
                            '    DisposeQuickQuoteObjects(qqo.MultiStateQuotes) 'clear out any multi-state quotes on this one before adding it to multi-state list for main quote
                            '    If quoteObject.MultiStateQuotes Is Nothing Then 'should already be something but just in case
                            '        quoteObject.MultiStateQuotes = New List(Of QuickQuoteObject)
                            '    End If
                            '    quoteObject.MultiStateQuotes.Add(qqo)
                            'End If
                            'updated 8/27/2018
                            qqo = New QuickQuoteObject
                            CopyInformationFromOneQuoteToAnother(quoteObject, qqo, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.BetweenQuoteAndMultiStateLevels) 'note: this copy will exclude packageParts and multiStateQuotes
                            AddNewQuickQuoteObjectToList(quoteObject.MultiStateQuotes, qqo:=qqo, level:=QuoteLevel.StateLevel) 'could pass in lobType and qqState, but they should already come over w/ CopyInfo call (, lobType:=quoteObject.LobType, qqState:=quoteObject.QuickQuoteState)
                        End If
                    End If
                Else
                    'quote doesn't have state
                    If addToListIfNeeded = True Then
                        If qqStatesCount = 0 Then
                            'just set on quoteObject if no states exist
                            quoteObject.QuickQuoteState = qqState
                            If (System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), quoteObject.LobType) = False OrElse quoteObject.LobType = QuickQuoteObject.QuickQuoteLobType.None) AndAlso System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobToUse) = True AndAlso lobToUse <> QuickQuoteObject.QuickQuoteLobType.None Then
                                quoteObject.LobType = lobToUse
                            End If
                            If (System.Enum.IsDefined(GetType(QuickQuoteCompany), quoteObject.Company) = False OrElse quoteObject.Company = QuickQuoteCompany.None) AndAlso System.Enum.IsDefined(GetType(QuickQuoteCompany), companyToUse) = True AndAlso companyToUse <> QuickQuoteCompany.None Then
                                quoteObject.Company = companyToUse
                            End If
                            qqo = quoteObject
                        Else
                            'at least one state already on quote; will need to add this one to list... and possibly add what's at the quote level to the list too
                            Dim multiStateQuoteStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(quoteObject.MultiStateQuotes)
                            Dim multiStateQuoteStateCount As Integer = 0
                            If multiStateQuoteStates IsNot Nothing Then
                                multiStateQuoteStateCount = multiStateQuoteStates.Count
                            End If
                            If multiStateQuoteStateCount > 0 Then
                                'already has state(s) at multi-state level; just add new one (below this IF)
                            Else
                                'must just have state set at quote level; copy existing one from quote level to multi-state level and then add new to multi-state level (new one added below IF)
                                If System.Enum.IsDefined(GetType(QuickQuoteState), quoteObject.QuickQuoteState) = True AndAlso quoteObject.QuickQuoteState <> QuickQuoteState.None Then 'should be valid since state(s) was/were found but nothing at multi-state level
                                    'Dim qqoForMultiStateLevel As QuickQuoteObject = CloneObject(quoteObject)
                                    'If qqoForMultiStateLevel IsNot Nothing Then
                                    '    DisposeQuickQuoteObjects(qqoForMultiStateLevel.MultiStateQuotes) 'clear out any multi-state quotes on this one before adding it to multi-state list for main quote
                                    '    If quoteObject.MultiStateQuotes Is Nothing Then
                                    '        quoteObject.MultiStateQuotes = New List(Of QuickQuoteObject)
                                    '    End If
                                    '    quoteObject.MultiStateQuotes.Add(qqoForMultiStateLevel)
                                    'End If
                                    'updated 7/28/2018
                                    Dim qqoForMultiStateLevel As New QuickQuoteObject
                                    CopyInformationFromOneQuoteToAnother(quoteObject, qqoForMultiStateLevel, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.BetweenQuoteAndMultiStateLevels) 'note: this copy will exclude packageParts and multiStateQuotes
                                    AddNewQuickQuoteObjectToList(quoteObject.MultiStateQuotes, qqo:=qqoForMultiStateLevel, level:=QuoteLevel.StateLevel) 'could pass in lobType and qqState, but they should already come over w/ CopyInfo call (, lobType:=quoteObject.LobType, qqState:=quoteObject.QuickQuoteState)
                                End If
                            End If
                            qqo = QuickQuoteObjectForState_WithCompany(quoteObject.MultiStateQuotes, qqState, addToListIfNeeded:=True, lobToUse:=lobToUse, companyToUse:=companyToUse, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom, quoteLevelToUseWhenAdding:=QuoteLevel.StateLevel) '7/28/2018 - updated with optional params to copy base information from one stateQuote to another; also quoteLevel
                        End If
                    End If
                End If
            End If

            Return qqo
        End Function
        Public Shared Function QuoteHasState(ByVal qqo As QuickQuoteObject, ByVal qqState As QuickQuoteState, Optional ByRef atQuoteLevel As Boolean = False, Optional ByRef atMultiStateLevel As Boolean = False) As Boolean
            Dim hasState As Boolean = False
            atQuoteLevel = False
            atMultiStateLevel = False

            If qqo IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(qqo, usedStateFromQuoteLevel:=atQuoteLevel, usedStateFromMultiStateLevel:=atMultiStateLevel)
                If qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                    If qqStates.Contains(qqState) = True Then
                        hasState = True

                        If atQuoteLevel = False Then
                            If qqo.QuickQuoteState = qqState Then
                                atQuoteLevel = True
                            End If
                        End If
                        If atMultiStateLevel = False Then
                            If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                                For Each msq As QuickQuoteObject In qqo.MultiStateQuotes
                                    If QuoteHasState(msq, qqState) = True Then
                                        atMultiStateLevel = True
                                        Exit For
                                    End If
                                Next
                            End If
                        End If
                    End If
                End If
            End If

            Return hasState
        End Function
        Public Shared Function QuickQuoteStatesForQuotes(ByVal qqos As List(Of QuickQuoteObject)) As List(Of QuickQuoteState)
            Dim qqStates As List(Of QuickQuoteState) = Nothing

            If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
                For Each qqo As QuickQuoteObject In qqos
                    'AddQuickQuoteStateToList(QuickQuoteStateForQuote(qqo), qqStates, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    'calling new method so it can add all states for quote if there happened to be any MultiStateQuotes on QuickQuoteObject
                    AddQuickQuoteStatesToList(QuickQuoteStatesForQuote(qqo), qqStates, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                Next
            End If

            Return qqStates
        End Function
        Public Shared Sub AddQuickQuoteStatesToList(ByVal qqStatesToAdd As List(Of QuickQuoteState), ByRef qqStatesExisting As List(Of QuickQuoteState), Optional ByVal onlyAddIfValid As Boolean = True, Optional ByVal onlyAddIfUnique As Boolean = True, Optional ByRef numberAdded As Integer = 0)
            If qqStatesToAdd IsNot Nothing AndAlso qqStatesToAdd.Count > 0 Then
                For Each qqState As QuickQuoteState In qqStatesToAdd
                    Dim added As Boolean = False
                    AddQuickQuoteStateToList(qqState, qqStatesExisting, onlyAddIfValid:=onlyAddIfValid, onlyAddIfUnique:=onlyAddIfUnique, added:=added)
                    If added = True Then
                        numberAdded += 1
                    End If
                Next
            End If
        End Sub
        Public Sub DisposeList(Of T)(qqList As List(Of T))
            If qqList IsNot Nothing AndAlso qqList.Count > 0 Then
                For Each si As Object In qqList
                    si.Dispose()
                    si = Nothing
                Next
                qqList.Clear()
                qqList = Nothing
            End If
        End Sub
        Public Sub DisposeQuickQuoteObjects(ByRef qqos As List(Of QuickQuoteObject))
            If qqos IsNot Nothing Then
                If qqos.Count > 0 Then
                    For Each qqo As QuickQuoteObject In qqos
                        If qqo IsNot Nothing Then
                            qqo.Dispose()
                            qqo = Nothing
                        End If
                    Next
                    qqos.Clear()
                End If
                qqos = Nothing
            End If
        End Sub
        Public Sub RemoveQuickQuoteStateFromQuote(ByRef qqo As QuickQuoteObject, ByVal qqState As QuickQuoteState, Optional ByRef removed As Boolean = False, Optional ByRef multiStateError As QuickQuoteMultiStateError = QuickQuoteMultiStateError.None)
            removed = False
            multiStateError = QuickQuoteMultiStateError.None
            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If qqo IsNot Nothing Then
                    Dim quoteHasStateAtQuoteLevel As Boolean = False
                    Dim quoteHasStateAtMultiStateLevel As Boolean = False
                    If QuoteHasState(qqo, qqState, atQuoteLevel:=quoteHasStateAtQuoteLevel, atMultiStateLevel:=quoteHasStateAtMultiStateLevel) = True Then
                        'quote has state
                        Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(qqo)
                        If qqStates IsNot Nothing AndAlso qqStates.Count > 1 Then
                            If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                                Dim removedCount As Integer = 0
                                RemoveQuickQuoteObjectsForState(qqo.MultiStateQuotes, qqState, removedCount:=removedCount)
                                If removedCount > 0 Then
                                    removed = True
                                End If
                                Dim multiStateQuoteStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(qqo.MultiStateQuotes)
                                Dim multiStateQuoteStateCount As Integer = 0
                                'Dim initialMultiStateQuoteState As QuickQuoteState = QuickQuoteStateForQuotes(qqo.MultiStateQuotes)
                                Dim initialMultiStateQuoteState As QuickQuoteState = QuickQuoteState.None
                                If multiStateQuoteStates IsNot Nothing AndAlso multiStateQuoteStates.Count > 0 Then
                                    multiStateQuoteStateCount = multiStateQuoteStates.Count
                                    initialMultiStateQuoteState = multiStateQuoteStates.Item(0)
                                End If
                                If multiStateQuoteStateCount = 1 Then
                                    If ShouldRevertSingleStateQuotesToSingleStateFormat(qqo.LobType) = True Then 'added IF 9/20/2018; previously happening every time
                                        'need to move multi-state quote back to root level; need to maintain stuff that always stays at root level... not sure if it's easier to clone objects from root level to maintain or just manually move over all specified objects from multi-state level
                                        'VersionAndLobInfo object has everything that isn't at the root level, as well as VersionId (which gives us Lob and State); may also need to maintain Version/Lob info at top level since multi-state versionIds are different than single-state versionIds, and we may always be using multi-state versionIds at top level

                                        'added 9/19/2018
                                        Dim topLevelLocs As List(Of QuickQuoteLocation) = Nothing
                                        Dim topLevelVehs As List(Of QuickQuoteVehicle) = Nothing
                                        Dim topLevelGlCls As List(Of QuickQuoteGLClassification) = Nothing
                                        Dim topLevelAIs As List(Of QuickQuoteAdditionalInsured) = Nothing
                                        Dim topLevelAIsBkp As List(Of QuickQuoteAdditionalInsured) = Nothing
                                        Dim topLevelAIsCkbBop As List(Of QuickQuoteAdditionalInsured) = Nothing
                                        Dim topLevelAIsCount As Integer = 0
                                        Dim topLevelHasAIsCkbBop As Boolean = False
                                        'Dim topLevelAIsCkbBopPrem As String = "" 'ReadOnly; will return based on list
                                        Dim topLevelAIsManChg As String = ""
                                        Dim topLevelAIsPrem As String = ""
                                        Dim topLevelAddInts As List(Of QuickQuoteAdditionalInterest) = Nothing
                                        If CopyLocationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            topLevelLocs = qqo.VersionAndLobInfo.Locations
                                        End If
                                        If CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            topLevelVehs = qqo.VersionAndLobInfo.Vehicles
                                        End If
                                        If CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            topLevelGlCls = qqo.VersionAndLobInfo.GLClassifications
                                        End If
                                        If CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            topLevelAIs = qqo.VersionAndLobInfo.AdditionalInsureds
                                            topLevelAIsBkp = qqo.VersionAndLobInfo.AdditionalInsuredsBackup
                                            topLevelAIsCkbBop = qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP
                                            topLevelAIsCount = qqo.VersionAndLobInfo.Get_AdditionalInsuredsCount_Variable()
                                            topLevelHasAIsCkbBop = qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP
                                            'topLevelAIsCkbBopPrem = qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium 'ReadOnly; will return based on list
                                            topLevelAIsManChg = qqo.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable()
                                            topLevelAIsPrem = qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium
                                        End If
                                        'If CopyAdditionalInterestsBetweenGoverningStateAndTopLevelAsNeededForMultiState(qqo.LobType) = True Then
                                        topLevelAddInts = qqo.VersionAndLobInfo.AdditionalInterests
                                        'End If

                                        qqo.VersionAndLobInfo = CloneObject(qqo.MultiStateQuotes.Item(0).VersionAndLobInfo)

                                        'added 9/19/2018
                                        If CopyLocationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            qqo.VersionAndLobInfo.Locations = topLevelLocs
                                        End If
                                        If CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            qqo.VersionAndLobInfo.Vehicles = topLevelVehs
                                        End If
                                        If CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            qqo.VersionAndLobInfo.GLClassifications = topLevelGlCls
                                        End If
                                        If CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                            qqo.VersionAndLobInfo.AdditionalInsureds = topLevelAIs
                                            qqo.VersionAndLobInfo.Set_AdditionalInsuredsBackup_Variable(topLevelAIsBkp)
                                            qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP = topLevelAIsCkbBop
                                            qqo.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(topLevelAIsCount)
                                            qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = topLevelHasAIsCkbBop
                                            'qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = topLevelAIsCkbBopPrem 'ReadOnly; will return based on list
                                            qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(topLevelAIsManChg)
                                            qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = topLevelAIsPrem
                                        End If
                                        'If CopyAdditionalInterestsBetweenGoverningStateAndTopLevelAsNeededForMultiState(qqo.LobType) = True Then
                                        qqo.AdditionalInterests = topLevelAddInts
                                        'End If

                                        RemoveQuickQuoteObjectByIndex(qqo.MultiStateQuotes, 0)
                                    End If
                                End If
                                If (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None OrElse qqo.QuickQuoteState = qqState) AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), initialMultiStateQuoteState) = True AndAlso initialMultiStateQuoteState <> QuickQuoteState.None Then
                                    qqo.QuickQuoteState = initialMultiStateQuoteState
                                End If

                                'added 8/10/2018
                                If CopyLocationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                    RemoveLocationsForQuickQuoteState(qqo.Locations, qqState)
                                End If
                                If CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                                    RemoveVehiclesForQuickQuoteState(qqo.Vehicles, qqState)
                                End If
                                If CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then 'added 8/19/2018
                                    RemoveGLClassificationsForQuickQuoteState(qqo.GLClassifications, qqState)
                                End If
                                If CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then 'added 8/24/2018
                                    'note: don't need to necessarily do anything here since Save logic will drop any invalid states; will call method, but it may not do anything
                                    RemoveAdditionalInsuredInfoForQuickQuoteState(qqo, qqState)
                                End If
                            Else
                                multiStateError = QuickQuoteMultiStateError.NoOtherStatesAvailable 'shouldn't ever happen since it was just validated (qqStates.Count > 1)
                            End If
                        Else
                            multiStateError = QuickQuoteMultiStateError.NoOtherStatesAvailable
                        End If
                    Else
                        'quote doesn't have state
                        multiStateError = QuickQuoteMultiStateError.StateNotFound
                    End If
                Else
                    'invalid quoteObject
                    multiStateError = QuickQuoteMultiStateError.InvalidQuote
                End If
            Else
                'invalid state
                multiStateError = QuickQuoteMultiStateError.InvalidState
            End If
        End Sub
        Public Enum QuickQuoteMultiStateError
            None = 0
            InvalidState = 1
            InvalidQuote = 2
            StateNotFound = 3
            NoOtherStatesAvailable = 4
            StateAlreadyExists = 5
        End Enum
        Public Shared Function QuickQuoteStateForQuotes(ByVal qqos As List(Of QuickQuoteObject)) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None

            Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(qqos)
            If qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                qqState = qqStates.Item(0)
            End If

            Return qqState
        End Function
        Public Shared Function QuickQuoteObjectsForIndexes(ByRef qqos As List(Of QuickQuoteObject), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteObject)
            Dim qqosToReturn As List(Of QuickQuoteObject) = Nothing

            If qqos IsNot Nothing AndAlso qqos.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    If i >= 0 AndAlso qqos.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If qqosToReturn Is Nothing Then
                            qqosToReturn = New List(Of QuickQuoteObject)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            qqosToReturn.Add(qqHelper.CloneObject(qqos.Item(i)))
                        Else
                            qqosToReturn.Add(qqos.Item(i))
                        End If
                    End If
                Next
            End If

            Return qqosToReturn
        End Function
        'Public Shared Function QuickQuoteObjectsForState(ByRef qqos As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteObject)
        '    Dim qqosToReturn As List(Of QuickQuoteObject) = Nothing

        '    If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
        '        Dim indexes As List(Of Integer) = QuickQuoteObjectIndexesForState(qqos, qqState)
        '        qqosToReturn = QuickQuoteObjectsForIndexes(qqos, indexes, cloneList:=cloneList)
        '    End If

        '    Return qqosToReturn
        'End Function
        'Public Shared Function QuickQuoteObjectForState(ByRef qqos As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState, Optional ByVal cloneQQO As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last, Optional ByVal returnNewIfNothing As Boolean = True) As QuickQuoteObject
        '    Dim qqo As QuickQuoteObject = Nothing

        '    Dim qqosToReturn As List(Of QuickQuoteObject) = QuickQuoteObjectsForState(qqos, qqState, cloneList:=cloneQQO)
        '    If qqosToReturn IsNot Nothing AndAlso qqosToReturn.Count > 0 Then
        '        If firstOrLastItem = FirstOrLast.First Then
        '            qqo = qqosToReturn(0)
        '        Else
        '            'last
        '            qqo = qqosToReturn(qqosToReturn.Count - 1)
        '        End If
        '    End If

        '    If returnNewIfNothing = True AndAlso qqo Is Nothing Then
        '        AddNewQuickQuoteObjectToList(qqos, qqo:=qqo, qqState:=qqState)
        '    End If

        '    Return qqo
        'End Function
        Public Shared Function QuickQuoteObjectIndexesForState(ByRef qqos As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
                Dim counter As Integer = 0
                For Each qqo As QuickQuoteObject In qqos
                    counter += 1
                    If qqo IsNot Nothing AndAlso qqo.QuickQuoteState = qqState Then
                        If indexes Is Nothing Then
                            indexes = New List(Of Integer)
                        End If
                        indexes.Add(counter - 1)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Shared Sub AddNewQuickQuoteObjectToList(ByRef qqos As List(Of QuickQuoteObject), Optional ByRef qqo As QuickQuoteObject = Nothing, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal level As QuoteLevel = QuoteLevel.None) '7/28/2018 - new optional param for level
            'If qqo Is Nothing Then
            '    qqo = New QuickQuoteObject
            'End If
            'With qqo
            '    If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
            '        .LobType = lobType
            '    End If
            '    If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
            '        .QuickQuoteState = qqState
            '    End If
            '    If System.Enum.IsDefined(GetType(QuoteLevel), level) = True AndAlso level <> QuoteLevel.None Then 'added 7/28/2018
            '        .Set_QuoteLevel(level)
            '    End If
            'End With
            'If qqos Is Nothing Then
            '    qqos = New List(Of QuickQuoteObject)
            'End If
            'qqos.Add(qqo)

            'updated 11/28/2022
            AddNewQuickQuoteObjectToList_WithCompany(qqos, qqo:=qqo, lobType:=lobType, qqState:=qqState, level:=level)
        End Sub
        Public Shared Sub AddNewQuickQuoteObjectToList_WithCompany(ByRef qqos As List(Of QuickQuoteObject), Optional ByRef qqo As QuickQuoteObject = Nothing, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal level As QuoteLevel = QuoteLevel.None) 'added 11/28/2022
            If qqo Is Nothing Then
                qqo = New QuickQuoteObject
            End If
            With qqo
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    .LobType = lobType
                End If
                If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                    .QuickQuoteState = qqState
                End If
                If System.Enum.IsDefined(GetType(QuickQuoteCompany), qqCompany) = True AndAlso qqCompany <> QuickQuoteCompany.None Then
                    .Company = qqCompany
                End If
                If System.Enum.IsDefined(GetType(QuoteLevel), level) = True AndAlso level <> QuoteLevel.None Then 'added 7/28/2018
                    .Set_QuoteLevel(level)
                End If
            End With
            If qqos Is Nothing Then
                qqos = New List(Of QuickQuoteObject)
            End If
            qqos.Add(qqo)
        End Sub
        Public Shared Sub RemoveQuickQuoteObjectsForState(ByRef qqos As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState, Optional ByRef removedCount As Integer = 0)
            removedCount = 0 'could also comment this out in case calling code would need to call it multiple times without resetting
            If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteObjectIndexesForState(qqos, qqState)
                RemoveQuickQuoteObjectsByIndex(qqos, indexes, removedCount:=removedCount)
            End If
        End Sub
        Public Shared Sub RemoveQuickQuoteObjectsByIndex(ByRef qqos As List(Of QuickQuoteObject), ByVal qqoIndexList As List(Of Integer), Optional ByRef removedCount As Integer = 0)
            removedCount = 0 'could also comment this out in case calling code would need to call it multiple times without resetting
            If qqos IsNot Nothing AndAlso qqos.Count > 0 AndAlso qqoIndexList IsNot Nothing AndAlso qqoIndexList.Count > 0 Then
                qqoIndexList.Sort() 'put them in order 1st
                qqoIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In qqoIndexList
                    Dim removed As Boolean = False
                    RemoveQuickQuoteObjectByIndex(qqos, i, removed:=removed)
                    If removed = True Then
                        removedCount += 1
                    End If
                Next
            End If
        End Sub
        Public Shared Sub RemoveQuickQuoteObjectByIndex(ByRef qqos As List(Of QuickQuoteObject), ByVal qqoIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqos IsNot Nothing AndAlso qqoIndex >= 0 AndAlso qqos.Count >= CInt(qqoIndex + 1) Then
                qqos.RemoveAt(qqoIndex)
                removed = True
            End If
        End Sub
        Public Sub UpdateQuickQuoteStatesForQuote(ByRef qqo As QuickQuoteObject, ByVal qqStates As List(Of QuickQuoteState), Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None) '7/28/2018 - added optional params to copy base information from one stateQuote to another
            If qqo IsNot Nothing Then
                Dim currentStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(qqo)

                Dim currentStateCount As Integer = 0
                If currentStates IsNot Nothing Then
                    currentStateCount = currentStates.Count
                End If

                Dim newStateCount As Integer = 0
                If qqStates IsNot Nothing Then
                    newStateCount = qqStates.Count
                End If

                Dim statesToAdd As List(Of QuickQuoteState) = Nothing
                Dim statesToRemove As List(Of QuickQuoteState) = Nothing

                If currentStateCount > 0 AndAlso newStateCount = 0 Then
                    'need to remove all current
                    AddQuickQuoteStatesToList(currentStates, statesToRemove, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                ElseIf newStateCount > 0 AndAlso currentStateCount = 0 Then
                    'need to add all new
                    AddQuickQuoteStatesToList(qqStates, statesToAdd, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                ElseIf newStateCount = 0 AndAlso currentStateCount = 0 Then
                    'no states in either list; do nothing
                Else
                    'states in both lists; check lists... may need to add and/or remove or possibly nothing if both lists contain the same states
                    '1st loop through current states to see if any need to be removed
                    For Each currState As QuickQuoteState In currentStates
                        If qqStates.Contains(currState) = False Then
                            AddQuickQuoteStateToList(currState, statesToRemove, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                        End If
                    Next
                    'now loop through new states to see if any need to be added
                    For Each newState As QuickQuoteState In qqStates
                        If currentStates.Contains(newState) = False Then
                            AddQuickQuoteStateToList(newState, statesToAdd, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                        End If
                    Next
                End If

                'add states as needed; should ADD before REMOVE because of REMOVE validation that won't let you remove the only state
                If statesToAdd IsNot Nothing AndAlso statesToAdd.Count > 0 Then
                    Dim addedCount As Integer = 0
                    Dim multiStateAdditionErrors As List(Of QuickQuoteMultiStateError) = Nothing
                    AddQuickQuoteStatesToQuote(qqo, statesToAdd, addedCount:=addedCount, multiStateErrors:=multiStateAdditionErrors, copyQuoteInformationFromOneStateToAnother:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom) '7/28/2018 - updated with optional params to copy base information from one stateQuote to another
                End If
                'remove states as needed; should ADD before REMOVE because of REMOVE validation that won't let you remove the only state
                If statesToRemove IsNot Nothing AndAlso statesToRemove.Count > 0 Then
                    Dim removedCount As Integer = 0
                    Dim multiStateRemovalErrors As List(Of QuickQuoteMultiStateError) = Nothing
                    RemoveQuickQuoteStatesFromQuote(qqo, statesToRemove, removedCount:=removedCount, multiStateErrors:=multiStateRemovalErrors)
                End If
            End If
        End Sub
        'added 7/26/2018
        Public Sub RemoveQuickQuoteStatesFromQuote(ByRef qqo As QuickQuoteObject, ByVal qqStates As List(Of QuickQuoteState), Optional ByRef removedCount As Integer = 0, Optional ByRef multiStateErrors As List(Of QuickQuoteMultiStateError) = Nothing)
            removedCount = 0
            multiStateErrors = Nothing
            If qqo IsNot Nothing AndAlso qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                For Each qqState As QuickQuoteState In qqStates
                    Dim removed As Boolean = False
                    Dim multiStateError As QuickQuoteMultiStateError = QuickQuoteMultiStateError.None
                    RemoveQuickQuoteStateFromQuote(qqo, qqState, removed:=removed, multiStateError:=multiStateError)
                    If removed = True Then
                        removedCount += 1
                    Else
                        If multiStateError <> QuickQuoteMultiStateError.None Then
                            AddMultiStateErrorToList(multiStateError, multiStateErrors, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub AddQuickQuoteStatesToQuote(ByRef qqo As QuickQuoteObject, ByVal qqStates As List(Of QuickQuoteState), Optional ByRef addedCount As Integer = 0, Optional ByRef multiStateErrors As List(Of QuickQuoteMultiStateError) = Nothing, Optional ByVal copyQuoteInformationFromOneStateToAnother As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None) '7/28/2018 - added optional params to copy base information from one stateQuote to another
            addedCount = 0
            multiStateErrors = Nothing
            If qqo IsNot Nothing AndAlso qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                For Each qqState As QuickQuoteState In qqStates
                    Dim added As Boolean = False
                    Dim multiStateError As QuickQuoteMultiStateError = QuickQuoteMultiStateError.None
                    AddQuickQuoteStateToQuote(qqo, qqState, added:=added, multiStateError:=multiStateError, copyQuoteInformationFromOneStateToAnother:=copyQuoteInformationFromOneStateToAnother, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom) '7/28/2018 - updated with optional params to copy base information from one stateQuote to another
                    If added = True Then
                        addedCount += 1
                    Else
                        If multiStateError <> QuickQuoteMultiStateError.None Then
                            AddMultiStateErrorToList(multiStateError, multiStateErrors, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                        End If
                    End If
                Next
            End If
        End Sub
        Public Shared Sub AddMultiStateErrorToList(ByRef multiStateError As QuickQuoteMultiStateError, ByRef multiStateErrors As List(Of QuickQuoteMultiStateError), Optional ByVal onlyAddIfValid As Boolean = True, Optional ByVal onlyAddIfUnique As Boolean = True, Optional ByRef added As Boolean = False)
            If onlyAddIfValid = False OrElse (System.Enum.IsDefined(GetType(QuickQuoteMultiStateError), multiStateError) = True AndAlso multiStateError <> QuickQuoteMultiStateError.None) Then
                If multiStateErrors Is Nothing Then
                    multiStateErrors = New List(Of QuickQuoteMultiStateError)
                End If
                If onlyAddIfUnique = False OrElse multiStateErrors.Count = 0 OrElse multiStateErrors.Contains(multiStateError) = False Then
                    multiStateErrors.Add(multiStateError)
                    added = True
                End If
            End If
        End Sub
        Public Sub AddQuickQuoteStateToQuote(ByRef qqo As QuickQuoteObject, ByVal qqState As QuickQuoteState, Optional ByRef added As Boolean = False, Optional ByRef multiStateError As QuickQuoteMultiStateError = QuickQuoteMultiStateError.None, Optional ByVal copyQuoteInformationFromOneStateToAnother As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As QuickQuoteState = QuickQuoteState.None) '7/28/2018 - added optional params to copy base information from one stateQuote to another
            '7/26/2018 note: some logic duplicated between this method and QuickQuoteObjectForState
            added = False
            multiStateError = QuickQuoteMultiStateError.None
            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If qqo IsNot Nothing Then
                    If QuoteHasState(qqo, qqState) = False Then
                        'quote doesn't have state
                        Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(qqo)
                        Dim qqStateCount As Integer = 0
                        If qqStates IsNot Nothing Then
                            qqStateCount = qqStates.Count
                        End If
                        If qqStateCount >= 1 Then
                            Dim lobType As QuickQuoteObject.QuickQuoteLobType = LobTypeForQuickQuoteObject(qqo)
                            Dim qqCompany As QuickQuoteCompany = QuickQuoteCompanyForQuote(qqo)
                            If qqStateCount = 1 Then
                                'see if state at quote level needs to be added to multi-state level 1st
                                If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                                    'existing state at quote level already exists at multi-state level
                                Else
                                    'added existing state to multi-state level
                                    'Dim qqoForMultiStateLevel As QuickQuoteObject = CloneObject(qqo)
                                    'If qqoForMultiStateLevel IsNot Nothing Then
                                    '    DisposeQuickQuoteObjects(qqoForMultiStateLevel.MultiStateQuotes) 'clear out any multi-state quotes on this one before adding it to multi-state list for main quote
                                    '    If qqo.MultiStateQuotes Is Nothing Then 'should already be something but just in case
                                    '        qqo.MultiStateQuotes = New List(Of QuickQuoteObject)
                                    '    End If
                                    '    qqo.MultiStateQuotes.Add(qqoForMultiStateLevel)
                                    'End If
                                    'updated 7/28/2018
                                    Dim qqoForMultiStateLevel As New QuickQuoteObject
                                    CopyInformationFromOneQuoteToAnother(qqo, qqoForMultiStateLevel, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.BetweenQuoteAndMultiStateLevels) 'note: this copy will exclude packageParts and multiStateQuotes
                                    AddNewQuickQuoteObjectToList(qqo.MultiStateQuotes, qqo:=qqoForMultiStateLevel, level:=QuoteLevel.StateLevel) 'could pass in lobType and qqState, but they should already come over w/ CopyInfo call (, lobType:=qqo.LobType, qqState:=qqo.QuickQuoteState)
                                End If
                            Else
                                'stateCount > 1; should already have quotes at multi-state level; just add another
                            End If
                            'AddNewQuickQuoteObjectToList(qqo.MultiStateQuotes, lobType:=lobType, qqState:=qqState)
                            'updated 7/28/2018
                            Dim quoteToAdd As New QuickQuoteObject
                            If copyQuoteInformationFromOneStateToAnother = True Then
                                Dim quoteToCopyFrom As QuickQuoteObject = GetStateQuoteForCopy(qqo, quoteStateToCopyInformationFrom)
                                If quoteToCopyFrom IsNot Nothing Then
                                    CopyInformationFromOneQuoteToAnother(quoteToCopyFrom, quoteToAdd, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.StateToState)
                                End If
                            End If
                            'AddNewQuickQuoteObjectToList(qqo.MultiStateQuotes, qqo:=quoteToAdd, lobType:=lobType, qqState:=qqState, level:=QuoteLevel.StateLevel)
                            'updated 11/28/2022
                            AddNewQuickQuoteObjectToList_WithCompany(qqo.MultiStateQuotes, qqo:=quoteToAdd, lobType:=lobType, qqState:=qqState, qqCompany:=qqCompany, level:=QuoteLevel.StateLevel)
                        Else
                            '0 states; just set at quote level
                            qqo.QuickQuoteState = qqState
                        End If
                        added = True
                    Else
                        'quote already has state
                        multiStateError = QuickQuoteMultiStateError.StateAlreadyExists
                    End If
                Else
                    'invalid quoteObject
                    multiStateError = QuickQuoteMultiStateError.InvalidQuote
                End If
            Else
                'invalid state
                multiStateError = QuickQuoteMultiStateError.InvalidState
            End If
        End Sub
        Public Shared Function QuickQuoteStatesForPackageParts(ByVal pps As List(Of QuickQuotePackagePart)) As List(Of QuickQuoteState)
            Dim qqStates As List(Of QuickQuoteState) = Nothing

            If pps IsNot Nothing AndAlso pps.Count > 0 Then
                For Each pp As QuickQuotePackagePart In pps
                    AddQuickQuoteStateToList(QuickQuoteStateForPackagePart(pp), qqStates, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                Next
            End If

            Return qqStates
        End Function
        Public Shared Function QuickQuoteStateForPackagePart(ByVal pp As QuickQuotePackagePart) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None

            If pp IsNot Nothing AndAlso pp.VersionAndLobInfo IsNot Nothing Then
                If System.Enum.IsDefined(GetType(QuickQuoteState), pp.VersionAndLobInfo.State) = True AndAlso pp.VersionAndLobInfo.State <> QuickQuoteState.None Then
                    qqState = pp.VersionAndLobInfo.State
                Else
                    'maybe try to drill up to parent QuickQuoteObject, but probably wouldn't make sense to do that here
                End If
            End If

            Return qqState
        End Function
        Public Function PackagePartsForQuickQuoteState(ByRef pps As List(Of QuickQuotePackagePart), ByVal qqState As QuickQuoteState, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuotePackagePart)
            Dim stateParts As List(Of QuickQuotePackagePart) = Nothing

            If pps IsNot Nothing AndAlso pps.Count > 0 AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                For Each pp As QuickQuotePackagePart In pps
                    If QuickQuoteStateForPackagePart(pp) = qqState Then
                        If stateParts Is Nothing Then
                            stateParts = New List(Of QuickQuotePackagePart)
                        End If
                        If cloneList = True Then
                            stateParts.Add(CloneObject(pp))
                        Else
                            stateParts.Add(pp)
                        End If
                    End If
                Next
            End If

            Return stateParts
        End Function
        'Public Enum QuickQuoteInformationCopyType
        '    None = 0
        '    All = 1
        '    Selected = 2
        'End Enum
        'Public Sub CopyInformationFromOneQuoteToAnother(ByVal fromQuote As QuickQuoteObject, ByRef toQuote As QuickQuoteObject, Optional ByVal copyType As QuickQuoteInformationCopyType = QuickQuoteInformationCopyType.Selected)
        Public Sub CopyInformationFromOneQuoteToAnother(ByVal fromQuote As QuickQuoteObject, ByRef toQuote As QuickQuoteObject, Optional ByVal copyParams As QuickQuote_Copy_Parameters = Nothing, Optional ByVal copyTypeForDefaultParams As QuickQuote_Copy_Parameters.QuoteCopyType = QuickQuote_Copy_Parameters.QuoteCopyType.None)
            'If fromQuote IsNot Nothing AndAlso toQuote IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteInformationCopyType), copyType) = True AndAlso copyType <> QuickQuoteInformationCopyType.None Then
            If fromQuote IsNot Nothing AndAlso toQuote IsNot Nothing AndAlso (copyParams IsNot Nothing OrElse (System.Enum.IsDefined(GetType(QuickQuote_Copy_Parameters.QuoteCopyType), copyTypeForDefaultParams) = True AndAlso copyTypeForDefaultParams <> QuickQuote_Copy_Parameters.QuoteCopyType.None)) Then
                If copyParams Is Nothing Then
                    copyParams = New QuickQuote_Copy_Parameters
                    copyParams.CopyType = copyTypeForDefaultParams
                End If

                With copyParams
                    'top level
                    If .CopyAllTopLevelQuoteInfo = True Then
                        toQuote.TopLevelQuoteInfo = CloneObject(fromQuote.TopLevelQuoteInfo)
                    Else
                        If .CopyTopLevelBaseInfo = True Then
                            toQuote.TopLevelQuoteInfo.QuoteBase = CloneObject(fromQuote.TopLevelQuoteInfo.QuoteBase)
                        Else 'added 8/18/2018
                            If .CopyTopLevelBaseDatabaseInfo = True Then
                                toQuote.TopLevelQuoteInfo.QuoteBase.DatabaseInfo = CloneObject(fromQuote.TopLevelQuoteInfo.QuoteBase.DatabaseInfo)
                            End If
                            If .CopyTopLevelBaseCommonInfo = True Then
                                toQuote.TopLevelQuoteInfo.QuoteBase.CommonInfo = CloneObject(fromQuote.TopLevelQuoteInfo.QuoteBase.CommonInfo)
                            End If
                        End If
                        If .CopyTopLevelPremiums = True Then
                            toQuote.TopLevelQuoteInfo.QuotePremiums = CloneObject(fromQuote.TopLevelQuoteInfo.QuotePremiums)
                        End If
                        If .CopyTopLevelStateAndLobParts = True Then
                            toQuote.TopLevelQuoteInfo.StateAndLobParts = CloneObject(fromQuote.TopLevelQuoteInfo.StateAndLobParts)
                        End If
                    End If

                    'version/lob info
                    If .CopyAllVersionAndLobInfo = True Then
                        toQuote.VersionAndLobInfo = CloneObject(fromQuote.VersionAndLobInfo)
                    Else
                        'policyLevel
                        If .CopyAllLobPolicyLevelInfo = True Then
                            toQuote.VersionAndLobInfo.PolicyLevelInfoExtended = CloneObject(fromQuote.VersionAndLobInfo.PolicyLevelInfoExtended)
                        Else 'added 8/18/2018
                            If .CopyLobPolicyLevelGoverningStateInfo = True Then
                                toQuote.VersionAndLobInfo.PolicyLevelInfoExtended.AppliedToGoverningState = CloneObject(fromQuote.VersionAndLobInfo.PolicyLevelInfoExtended.AppliedToGoverningState)
                            End If
                            If .CopyLobPolicyLevelAllStatesInfo = True Then
                                toQuote.VersionAndLobInfo.PolicyLevelInfoExtended.AppliedToAllStates = CloneObject(fromQuote.VersionAndLobInfo.PolicyLevelInfoExtended.AppliedToAllStates)
                            End If
                            If .CopyLobPolicyLevelIndividualStateInfo = True Then
                                toQuote.VersionAndLobInfo.PolicyLevelInfoExtended.AppliedToIndividualState = CloneObject(fromQuote.VersionAndLobInfo.PolicyLevelInfoExtended.AppliedToIndividualState)
                            End If
                        End If

                        'riskLevel
                        If .CopyAllLobRiskLevelInfo = True Then
                            toQuote.VersionAndLobInfo.RiskLevelInfoExtended = CloneObject(fromQuote.VersionAndLobInfo.RiskLevelInfoExtended)
                        Else
                            If .CopyApplicants = True Then
                                toQuote.VersionAndLobInfo.RiskLevelInfoExtended.Applicants = CloneObject(fromQuote.VersionAndLobInfo.RiskLevelInfoExtended.Applicants)
                            End If
                            If .CopyDrivers = True Then
                                toQuote.VersionAndLobInfo.RiskLevelInfoExtended.Drivers = CloneObject(fromQuote.VersionAndLobInfo.RiskLevelInfoExtended.Drivers)
                            End If
                            If .CopyLocations = True Then
                                toQuote.VersionAndLobInfo.RiskLevelInfoExtended.Locations = CloneObject(fromQuote.VersionAndLobInfo.RiskLevelInfoExtended.Locations)
                            End If
                            If .CopyOperators = True Then
                                toQuote.VersionAndLobInfo.RiskLevelInfoExtended.Operators = CloneObject(fromQuote.VersionAndLobInfo.RiskLevelInfoExtended.Operators)
                            End If
                            If .CopyVehicles = True Then
                                toQuote.VersionAndLobInfo.RiskLevelInfoExtended.Vehicles = CloneObject(fromQuote.VersionAndLobInfo.RiskLevelInfoExtended.Vehicles)
                            End If
                        End If
                    End If
                End With
            End If
        End Sub
        'added 8/19/2018
        Public Sub ClearOutGoverningStateInfo(ByRef qqo As QuickQuoteObject, Optional ByVal dispose As Boolean = False)
            'note: see CopyInformationFromOneQuoteToAnother above and QuickQuote_Copy_Parameters class for things that are specific to GoverningState
            If qqo IsNot Nothing Then
                With qqo
                    If .VersionAndLobInfo IsNot Nothing Then
                        With .VersionAndLobInfo
                            If .PolicyLevelInfoExtended IsNot Nothing Then
                                With .PolicyLevelInfoExtended
                                    If .AppliedToGoverningState IsNot Nothing Then
                                        If dispose = True Then
                                            .AppliedToGoverningState.Dispose()
                                        Else
                                            .AppliedToGoverningState = New QuickQuoteLobPolicyLevelInfoExtended_AppliedToGoverningState
                                        End If
                                    End If
                                End With
                            End If
                            If .RiskLevelInfoExtended IsNot Nothing Then
                                With .RiskLevelInfoExtended
                                    If .Applicants IsNot Nothing Then
                                        If .Applicants.Count > 0 Then
                                            If dispose = True Then
                                                For Each a As QuickQuoteApplicant In .Applicants
                                                    If a IsNot Nothing Then
                                                        a.Dispose()
                                                        a = Nothing
                                                    End If
                                                Next
                                            End If
                                            .Applicants.Clear()
                                        End If
                                        If dispose = True Then
                                            .Applicants = Nothing
                                        End If
                                    End If
                                    If .Drivers IsNot Nothing Then
                                        If .Drivers.Count > 0 Then
                                            If dispose = True Then
                                                For Each d As QuickQuoteDriver In .Drivers
                                                    If d IsNot Nothing Then
                                                        d.Dispose()
                                                        d = Nothing
                                                    End If
                                                Next
                                            End If
                                            .Drivers.Clear()
                                        End If
                                        If dispose = True Then
                                            .Drivers = Nothing
                                        End If
                                    End If
                                    If .Operators IsNot Nothing Then
                                        If .Operators.Count > 0 Then
                                            If dispose = True Then
                                                For Each o As QuickQuoteOperator In .Operators
                                                    If o IsNot Nothing Then
                                                        o.Dispose()
                                                        o = Nothing
                                                    End If
                                                Next
                                            End If
                                            .Operators.Clear()
                                        End If
                                        If dispose = True Then
                                            .Operators = Nothing
                                        End If
                                    End If
                                End With
                            End If
                        End With
                    End If
                End With

                '------as-of 8/19/2018-----
                'Case QuoteCopyType.GoverningStateSwitch
                '_CopyAllTopLevelQuoteInfo = False 'no parent
                '_CopyTopLevelBaseInfo = False 'Parent: CopyAllTopLevelQuoteInfo
                '_CopyTopLevelBaseDatabaseInfo = False 'added 8/18/2018; Parent: CopyAllTopLevelQuoteInfo/CopyTopLevelBaseInfo
                '_CopyTopLevelBaseCommonInfo = False 'added 8/18/2018; Parent: CopyAllTopLevelQuoteInfo/CopyTopLevelBaseInfo
                '_CopyTopLevelPremiums = False 'Parent: CopyAllTopLevelQuoteInfo
                '_CopyTopLevelStateAndLobParts = False 'Parent: CopyAllTopLevelQuoteInfo
                '_CopyAllVersionAndLobInfo = False 'no parent
                '_CopyAllLobPolicyLevelInfo = False 'Parent: CopyAllVersionAndLobInfo
                '_CopyLobPolicyLevelGoverningStateInfo = True 'Parent: CopyAllVersionAndLobInfo/CopyAllLobPolicyLevelInfo
                '_CopyLobPolicyLevelAllStatesInfo = False 'Parent: CopyAllVersionAndLobInfo/CopyAllLobPolicyLevelInfo
                '_CopyLobPolicyLevelIndividualStateInfo = False 'Parent: CopyAllVersionAndLobInfo/CopyAllLobPolicyLevelInfo
                '_CopyAllLobRiskLevelInfo = False 'Parent: CopyAllVersionAndLobInfo
                '_CopyApplicants = True 'Parents: CopyAllVersionAndLobInfo/CopyAllLobRiskLevelInfo
                '_CopyDrivers = True 'Parents: CopyAllVersionAndLobInfo/CopyAllLobRiskLevelInfo
                '_CopyLocations = False 'Parents: CopyAllVersionAndLobInfo/CopyAllLobRiskLevelInfo
                '_CopyVehicles = False 'Parents: CopyAllVersionAndLobInfo/CopyAllLobRiskLevelInfo
                '_CopyOperators = True 'Parents: CopyAllVersionAndLobInfo/CopyAllLobRiskLevelInfo
            End If
        End Sub
        'added 7/28/2018
        Public Function GetStateQuoteForCopy(ByRef qqo As QuickQuoteObject, ByVal quoteStateToCopyInformationFrom As QuickQuoteState) As QuickQuoteObject
            Dim qqoForCopy As QuickQuoteObject = Nothing

            If qqo IsNot Nothing Then
                qqoForCopy = QuickQuoteObjectForState(qqo, quoteStateToCopyInformationFrom, addToListIfNeeded:=False)

                'just return 1st stateQuote if none are found
                If qqoForCopy Is Nothing Then
                    If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                        qqoForCopy = qqo.MultiStateQuotes.Item(0)
                    Else
                        qqoForCopy = qqo
                    End If
                End If
            End If

            Return qqoForCopy
        End Function
        Public Function GetStateQuoteForCopy(ByRef qqos As List(Of QuickQuoteObject), ByVal quoteStateToCopyInformationFrom As QuickQuoteState) As QuickQuoteObject
            Dim qqoForCopy As QuickQuoteObject = Nothing

            If qqos IsNot Nothing AndAlso qqos.Count > 0 Then
                qqoForCopy = QuickQuoteObjectForState(qqos, quoteStateToCopyInformationFrom, addToListIfNeeded:=False)

                'just return 1st stateQuote if none are found
                If qqoForCopy Is Nothing Then
                    qqoForCopy = qqos.Item(0)
                End If
            End If

            Return qqoForCopy
        End Function
        'Public Shared Function OkayToUseMultiStateQuoteFormatForLob(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
        'updated 9/7/2018 w/ optional params
        'Public Shared Function OkayToUseMultiStateQuoteFormatForLob(ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal effDate As String = "", Optional ByVal transType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote) As Boolean
        'updated 12/23/2018 w/ more optional params
        Public Shared Function OkayToUseMultiStateQuoteFormatForLob(ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal effDate As String = "", Optional ByVal transType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal dateToUseWithMissingEffectiveDate As MissingEffectiveDateDateToUseType = MissingEffectiveDateDateToUseType.None, Optional ByVal considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass As Boolean = True) As Boolean
            'Dim isOkay As Boolean = False

            ''9/7/2018 - added placeholder for effDate stuff; can CDate verified effDate string or just use dtEffDate below
            ''Dim qqHelper As New QuickQuoteHelperClass
            ''If qqHelper.IsDateString(effDate) = False Then
            ''    effDate = Date.Today.ToShortDateString
            ''End If
            ''Dim dtEffDate As Date = qqHelper.DateForString(effDate, defaultDate:=Date.Today)

            ''updated 9/21/2018
            'If transType = QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote Then 'added IF 10/4/2018 to make sure we only force the multi-state format for new business quotes and not endorsements
            '    If IsMultiStateFormatLob(lobType) = True Then
            '        'Dim qqHelper As New QuickQuoteHelperClass
            '        'Dim dtEffDate As Date = qqHelper.DateForString(effDate, defaultDate:=Date.Today)
            '        'Dim multiStateDate As String = MultiState_EffectiveDate()
            '        'If qqHelper.IsDateString(multiStateDate) = True Then
            '        '    If dtEffDate >= CDate(multiStateDate) = True Then
            '        '        isOkay = True
            '        '    End If
            '        'End If
            '        'updated 12/23/2018
            '        If considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None AndAlso qqState <> QuickQuoteState.Indiana Then
            '            isOkay = True
            '        End If
            '        If isOkay = False Then
            '            If System.Enum.IsDefined(GetType(MissingEffectiveDateDateToUseType), dateToUseWithMissingEffectiveDate) = False OrElse dateToUseWithMissingEffectiveDate = MissingEffectiveDateDateToUseType.None Then
            '                dateToUseWithMissingEffectiveDate = DefaultDateToUseWithMissingEffectiveDate() 'default is UsCurrentDate
            '            End If
            '            Dim defaultDate As Date = Nothing
            '            Select Case dateToUseWithMissingEffectiveDate
            '                Case MissingEffectiveDateDateToUseType.UseCurrentDate
            '                    defaultDate = Date.Today
            '                Case MissingEffectiveDateDateToUseType.UseCurrentDateMinus30
            '                    defaultDate = DateAdd(DateInterval.Day, -30, Date.Today)
            '            End Select
            '            Dim qqHelper As New QuickQuoteHelperClass
            '            Dim dtEffDate As Date = qqHelper.DateForString(effDate, defaultDate:=defaultDate)
            '            If dtEffDate <> Nothing Then
            '                Dim multiStateDate As String = MultiState_EffectiveDate()
            '                If qqHelper.IsDateString(multiStateDate) = True Then
            '                    If dtEffDate >= CDate(multiStateDate) = True Then
            '                        isOkay = True
            '                    End If
            '                End If
            '            End If
            '        End If
            '    End If
            'End If

            'Return isOkay
            'updated 2/8/2023 to handle for newCo
            Return OkayToUseMultiStateQuoteFormatForLob_WithCompanyParam(lobType, effDate:=effDate, transType:=transType, qqState:=qqState, dateToUseWithMissingEffectiveDate:=dateToUseWithMissingEffectiveDate, considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass, qqCompany:=QuickQuoteCompany.IndianaFarmersMutual, considerAnyValidNonIfmCompanyAsMultiStateWhenNonDateParamsPass:=True)
        End Function
        'added 2/8/2023 to handle for newCo
        Public Shared Function OkayToUseMultiStateQuoteFormatForLob_WithCompanyParam(ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal effDate As String = "", Optional ByVal transType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal dateToUseWithMissingEffectiveDate As MissingEffectiveDateDateToUseType = MissingEffectiveDateDateToUseType.None, Optional ByVal considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass As Boolean = True, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal considerAnyValidNonIfmCompanyAsMultiStateWhenNonDateParamsPass As Boolean = True) As Boolean
            Dim isOkay As Boolean = False

            If transType = QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote Then 'added IF 10/4/2018 to make sure we only force the multi-state format for new business quotes and not endorsements
                If IsMultiStateFormatLob(lobType) = True Then
                    If considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None AndAlso qqState <> QuickQuoteState.Indiana Then
                        isOkay = True
                    ElseIf considerAnyValidNonIfmCompanyAsMultiStateWhenNonDateParamsPass = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteCompany), qqCompany) = True AndAlso qqCompany <> QuickQuoteCompany.None AndAlso qqCompany <> QuickQuoteCompany.IndianaFarmersMutual Then
                        isOkay = True
                    Else
                        If System.Enum.IsDefined(GetType(MissingEffectiveDateDateToUseType), dateToUseWithMissingEffectiveDate) = False OrElse dateToUseWithMissingEffectiveDate = MissingEffectiveDateDateToUseType.None Then
                            dateToUseWithMissingEffectiveDate = DefaultDateToUseWithMissingEffectiveDate() 'default is UsCurrentDate
                        End If
                        Dim defaultDate As Date = Nothing
                        Select Case dateToUseWithMissingEffectiveDate
                            Case MissingEffectiveDateDateToUseType.UseCurrentDate
                                defaultDate = Date.Today
                            Case MissingEffectiveDateDateToUseType.UseCurrentDateMinus30
                                defaultDate = DateAdd(DateInterval.Day, -30, Date.Today)
                        End Select
                        Dim qqHelper As New QuickQuoteHelperClass
                        Dim dtEffDate As Date = qqHelper.DateForString(effDate, defaultDate:=defaultDate)
                        If dtEffDate <> Nothing Then
                            Dim multiStateDate As String = MultiState_EffectiveDate()
                            If qqHelper.IsDateString(multiStateDate) = True Then
                                If dtEffDate >= CDate(multiStateDate) = True Then
                                    isOkay = True
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Enum MissingEffectiveDateDateToUseType 'added 12/23/2018
            None = 0
            UseCurrentDate = 1
            UseCurrentDateMinus30 = 2
            TreatDateAsMissing = 3
        End Enum
        Public Shared Function DefaultDateToUseWithMissingEffectiveDate() As MissingEffectiveDateDateToUseType 'added 12/23/2018
            Dim dateToUse As MissingEffectiveDateDateToUseType = MissingEffectiveDateDateToUseType.UseCurrentDate 'default

            Dim strDateToUse As String = configAppSettingValueAsString("QuickQuote_DefaultDateToUseWithMissingEffectiveDate")
            If String.IsNullOrWhiteSpace(strDateToUse) = False Then
                Select Case UCase(strDateToUse)
                    Case "NONE"
                        dateToUse = MissingEffectiveDateDateToUseType.None
                    Case UCase("UseCurrentDate")
                        dateToUse = MissingEffectiveDateDateToUseType.UseCurrentDate
                    Case UCase("UseCurrentDateMinus30")
                        dateToUse = MissingEffectiveDateDateToUseType.UseCurrentDateMinus30
                    Case UCase("PartialCopyOverwriteAll")
                        dateToUse = MissingEffectiveDateDateToUseType.TreatDateAsMissing
                    Case Else
                        If System.Enum.TryParse(Of MissingEffectiveDateDateToUseType)(strDateToUse, dateToUse) = False Then
                            dateToUse = Nothing
                        End If
                End Select
            End If

            If System.Enum.IsDefined(GetType(MissingEffectiveDateDateToUseType), dateToUse) = False OrElse dateToUse = MissingEffectiveDateDateToUseType.None Then
                dateToUse = MissingEffectiveDateDateToUseType.UseCurrentDate
            End If

            Return dateToUse
        End Function
        Public Enum PremiumType
            None = 0
            EntireQuote = 1
            StateOnly = 2
        End Enum
        Public Enum QuoteLevel
            None = 0
            TopLevel = 1
            StateLevel = 2
        End Enum
        'added 7/30/2018
        Public Shared Function GetPackagePartTypeId(ByVal masterState As QuickQuoteState, ByVal masterLob As QuickQuoteObject.QuickQuoteLobType, ByVal packagePartState As QuickQuoteState, ByVal packagePartLob As QuickQuoteObject.QuickQuoteLobType) As Integer
            Dim ppTypeId As Integer = 0

            'Dim goodMasterState As Boolean = False
            'Dim goodMasterLob As Boolean = False
            'Dim goodPackagePartState As Boolean = False
            'Dim goodPackagePartLob As Boolean = False

            'If System.Enum.IsDefined(GetType(QuickQuoteState), goodMasterState) = True AndAlso goodMasterState <> QuickQuoteState.None Then
            '    goodMasterState = True
            'End If
            'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), masterLob) = True AndAlso masterLob <> QuickQuoteObject.QuickQuoteLobType.None Then
            '    goodMasterLob = True
            'End If
            'If System.Enum.IsDefined(GetType(QuickQuoteState), packagePartState) = True AndAlso packagePartState <> QuickQuoteState.None Then
            '    goodPackagePartState = True
            'End If
            'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), packagePartLob) = True AndAlso packagePartLob <> QuickQuoteObject.QuickQuoteLobType.None Then
            '    goodPackagePartLob = True
            'End If

            ''originally just defaulting anything possible but updated to only default state/lob if the other is valid
            'If goodMasterState = False AndAlso goodPackagePartState = True AndAlso goodMasterLob = True Then
            '    masterState = packagePartState
            'ElseIf goodPackagePartState = False AndAlso goodMasterState = True AndAlso goodPackagePartLob = True Then
            '    packagePartState = masterState
            'End If

            'If goodMasterLob = False AndAlso goodPackagePartLob = True AndAlso goodMasterState = True Then
            '    masterLob = packagePartLob
            'ElseIf goodPackagePartLob = False AndAlso goodMasterLob = True AndAlso goodPackagePartState = True Then
            '    packagePartLob = masterLob
            'End If

            'Dim masterStateId As Integer = DiamondStateIdForQuickQuoteState(masterState)
            'Dim masterLobId As Integer = MasterLobIdForLobType(masterLob)
            'Dim packagePartStateId As Integer = DiamondStateIdForQuickQuoteState(packagePartState)
            'Dim packagePartLobId As Integer = LobIdForLobType(packagePartLob)

            ''note: probably need isMaster flag as Master would need to do lookup on companystatelob_id w/o parent_packageparttype_id, but state-level would need both... logic above defaults if one or the other is bad... may need to remove defaulting logic

            'ppTypeId = GetPackagePartTypeId(masterStateId, masterLobId, packagePartStateId, packagePartLobId)

            'updated 11/23/2022
            'ppTypeId = GetPackagePartTypeId_WithCompany(masterState, masterLob, masterCompany:=QuickQuoteCompany.None, packagePartState, packagePartLob, packagePartCompany:=QuickQuoteCompany.None)
            ppTypeId = GetPackagePartTypeId_WithCompany(masterState, masterLob, QuickQuoteCompany.None, packagePartState, packagePartLob, QuickQuoteCompany.None)

            Return ppTypeId
        End Function
        Public Shared Function GetPackagePartTypeId_WithCompany(ByVal masterState As QuickQuoteState, ByVal masterLob As QuickQuoteObject.QuickQuoteLobType, ByVal masterCompany As QuickQuoteCompany, ByVal packagePartState As QuickQuoteState, ByVal packagePartLob As QuickQuoteObject.QuickQuoteLobType, ByVal packagePartCompany As QuickQuoteCompany) As Integer
            Dim ppTypeId As Integer = 0

            Dim goodMasterState As Boolean = False
            Dim goodMasterLob As Boolean = False
            Dim goodPackagePartState As Boolean = False
            Dim goodPackagePartLob As Boolean = False
            Dim goodMasterCompany As Boolean = False
            Dim goodPackagePartCompany As Boolean = False

            If System.Enum.IsDefined(GetType(QuickQuoteState), goodMasterState) = True AndAlso goodMasterState <> QuickQuoteState.None Then
                goodMasterState = True
            End If
            If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), masterLob) = True AndAlso masterLob <> QuickQuoteObject.QuickQuoteLobType.None Then
                goodMasterLob = True
            End If
            If System.Enum.IsDefined(GetType(QuickQuoteState), packagePartState) = True AndAlso packagePartState <> QuickQuoteState.None Then
                goodPackagePartState = True
            End If
            If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), packagePartLob) = True AndAlso packagePartLob <> QuickQuoteObject.QuickQuoteLobType.None Then
                goodPackagePartLob = True
            End If
            If System.Enum.IsDefined(GetType(QuickQuoteCompany), masterCompany) = True AndAlso masterCompany <> QuickQuoteCompany.None Then
                goodMasterCompany = True
            End If
            If System.Enum.IsDefined(GetType(QuickQuoteCompany), packagePartCompany) = True AndAlso packagePartCompany <> QuickQuoteCompany.None Then
                goodPackagePartCompany = True
            End If

            'originally just defaulting anything possible but updated to only default state/lob if the other is valid
            If goodMasterState = False AndAlso goodPackagePartState = True AndAlso goodMasterLob = True Then
                masterState = packagePartState
            ElseIf goodPackagePartState = False AndAlso goodMasterState = True AndAlso goodPackagePartLob = True Then
                packagePartState = masterState
            End If

            If goodMasterLob = False AndAlso goodPackagePartLob = True AndAlso goodMasterState = True Then
                masterLob = packagePartLob
            ElseIf goodPackagePartLob = False AndAlso goodMasterLob = True AndAlso goodPackagePartState = True Then
                packagePartLob = masterLob
            End If

            If goodMasterCompany = False AndAlso goodPackagePartCompany = True AndAlso (goodMasterLob = True OrElse goodMasterState = True) Then
                masterCompany = packagePartCompany
            ElseIf goodPackagePartCompany = False AndAlso goodMasterCompany = True AndAlso (goodPackagePartLob = True OrElse goodPackagePartState = True) Then
                packagePartCompany = masterCompany
            End If

            Dim masterStateId As Integer = DiamondStateIdForQuickQuoteState(masterState)
            Dim masterLobId As Integer = MasterLobIdForLobType(masterLob)
            Dim packagePartStateId As Integer = DiamondStateIdForQuickQuoteState(packagePartState)
            Dim packagePartLobId As Integer = LobIdForLobType(packagePartLob)
            Dim masterCompanyId As Integer = DiamondCompanyIdForQuickQuoteCompany(masterCompany)
            Dim packagePartCompanyId As Integer = DiamondCompanyIdForQuickQuoteCompany(packagePartCompany)

            'note: probably need isMaster flag as Master would need to do lookup on companystatelob_id w/o parent_packageparttype_id, but state-level would need both... logic above defaults if one or the other is bad... may need to remove defaulting logic

            ppTypeId = GetPackagePartTypeId_WithCompanyId(masterStateId, masterLobId, packagePartStateId, packagePartLobId, masterCompanyId:=masterCompanyId, packagePartCompanyId:=packagePartCompanyId)

            Return ppTypeId
        End Function
        Public Shared Function GetPackagePartTypeId(ByVal masterStateId As Integer, ByVal masterLobId As Integer, ByVal packagePartStateId As Integer, ByVal packagePartLobId As Integer, Optional ByRef errorOnLookup As Boolean = False) As Integer '7/31/2018 - added optional byref param for errorOnLookup
            'Dim ppTypeId As Integer = 0

            ''added query logic 7/31/2018
            'errorOnLookup = False

            'If masterStateId = 0 AndAlso packagePartStateId > 0 Then
            '    masterStateId = packagePartStateId
            'ElseIf packagePartStateId = 0 AndAlso masterStateId > 0 Then
            '    packagePartStateId = masterStateId
            'End If

            'If masterLobId = 0 AndAlso packagePartLobId > 0 Then
            '    masterLobId = packagePartLobId
            'ElseIf packagePartLobId = 0 AndAlso masterLobId > 0 Then
            '    packagePartLobId = masterLobId
            'End If

            'If packagePartStateId > 0 AndAlso packagePartLobId > 0 Then
            '    If masterStateId = packagePartStateId AndAlso masterLobId = packagePartLobId Then
            '        masterStateId = 0
            '        masterLobId = 0
            '    End If

            '    Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
            '        With sso
            '            'note: should probably update to stored procedure
            '            .queryOrStoredProc = "SELECT TOP 1 PPT.packageparttype_id FROM PackagePartType as PPT WITH (NOLOCK)"
            '            .queryOrStoredProc &= " INNER JOIN CompanyStateLOB as CSL WITH (NOLOCK) on CSL.companystatelob_id = PPT.companystatelob_id"
            '            .queryOrStoredProc &= " INNER JOIN CompanyLOB as CL WITH (NOLOCK) on CL.companylob_id = CSL.companylob_id"
            '            .queryOrStoredProc &= " INNER JOIN CompanyState as CS WITH (NOLOCK) on CS.companystate_id = CSL.companystate_id"
            '            .queryOrStoredProc &= " LEFT JOIN PackagePartType as PPT_Parent WITH (NOLOCK) on PPT_Parent.packageparttype_id = PPT.parent_packageparttype_id"
            '            .queryOrStoredProc &= " LEFT JOIN CompanyStateLOB as CSL_Parent WITH (NOLOCK) on CSL_Parent.companystatelob_id = PPT_Parent.companystatelob_id"
            '            .queryOrStoredProc &= " LEFT JOIN CompanyLOB as CL_Parent WITH (NOLOCK) on CL_Parent.companylob_id = CSL_Parent.companylob_id"
            '            .queryOrStoredProc &= " LEFT JOIN CompanyState as CS_Parent WITH (NOLOCK) on CS_Parent.companystate_id = CSL_Parent.companystate_id"
            '            .queryOrStoredProc &= " WHERE CS.state_id = " & packagePartStateId & " and CL.lob_id = " & packagePartLobId
            '            .queryOrStoredProc &= " and ((" & masterStateId & " = 0 and " & masterLobId & " = 0) or (CS_Parent.state_id = " & masterStateId & " and CL_Parent.lob_id = " & masterLobId & "))"
            '            .queryOrStoredProc &= " ORDER BY PPT.packageparttype_id DESC"

            '            Using dr As SqlClient.SqlDataReader = .GetDataReader
            '                If dr IsNot Nothing AndAlso dr.HasRows = True Then
            '                    With dr
            '                        .Read()
            '                        ppTypeId = .Item("packageparttype_id")
            '                    End With
            '                ElseIf .hasError = True Then
            '                    'database error
            '                    errorOnLookup = True
            '                Else
            '                    'nothing found
            '                End If
            '            End Using
            '        End With
            '    End Using

            'End If

            'Return ppTypeId

            Return GetPackagePartTypeId_WithCompanyId(masterStateId, masterLobId, packagePartStateId, packagePartLobId, errorOnLookup:=errorOnLookup)
        End Function

        Public Shared Function GetPackagePartTypeId_WithCompanyId(ByVal masterStateId As Integer, ByVal masterLobId As Integer, ByVal packagePartStateId As Integer, ByVal packagePartLobId As Integer, Optional ByRef masterCompanyId As Integer = 0, Optional ByRef packagePartCompanyId As Integer = 0, Optional ByRef errorOnLookup As Boolean = False) As Integer '7/31/2018 - added optional byref param for errorOnLookup
            Dim ppTypeId As Integer = 0

            'added query logic 7/31/2018
            errorOnLookup = False

            If masterStateId = 0 AndAlso packagePartStateId > 0 Then
                masterStateId = packagePartStateId
            ElseIf packagePartStateId = 0 AndAlso masterStateId > 0 Then
                packagePartStateId = masterStateId
            End If

            If masterLobId = 0 AndAlso packagePartLobId > 0 Then
                masterLobId = packagePartLobId
            ElseIf packagePartLobId = 0 AndAlso masterLobId > 0 Then
                packagePartLobId = masterLobId
            End If

            If masterCompanyId = 0 AndAlso packagePartCompanyId > 0 Then
                masterCompanyId = packagePartCompanyId
            ElseIf packagePartCompanyId = 0 AndAlso masterCompanyId > 0 Then
                packagePartCompanyId = masterCompanyId
            End If

            If masterCompanyId <= 0 Then
                masterCompanyId = 1
            End If

            If packagePartCompanyId <= 0 Then
                packagePartCompanyId = 1
            End If

            If packagePartStateId > 0 AndAlso packagePartLobId > 0 Then
                If masterStateId = packagePartStateId AndAlso masterLobId = packagePartLobId Then
                    masterStateId = 0
                    masterLobId = 0
                End If

                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        'note: should probably update to stored procedure
                        .queryOrStoredProc = "SELECT TOP 1 PPT.packageparttype_id FROM PackagePartType as PPT WITH (NOLOCK)"
                        .queryOrStoredProc &= " INNER JOIN CompanyStateLOB as CSL WITH (NOLOCK) on CSL.companystatelob_id = PPT.companystatelob_id"
                        .queryOrStoredProc &= " INNER JOIN CompanyLOB as CL WITH (NOLOCK) on CL.companylob_id = CSL.companylob_id"
                        .queryOrStoredProc &= " INNER JOIN CompanyState as CS WITH (NOLOCK) on CS.companystate_id = CSL.companystate_id"
                        .queryOrStoredProc &= " LEFT JOIN PackagePartType as PPT_Parent WITH (NOLOCK) on PPT_Parent.packageparttype_id = PPT.parent_packageparttype_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyStateLOB as CSL_Parent WITH (NOLOCK) on CSL_Parent.companystatelob_id = PPT_Parent.companystatelob_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyLOB as CL_Parent WITH (NOLOCK) on CL_Parent.companylob_id = CSL_Parent.companylob_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyState as CS_Parent WITH (NOLOCK) on CS_Parent.companystate_id = CSL_Parent.companystate_id"
                        .queryOrStoredProc &= " WHERE CS.state_id = " & packagePartStateId & " and CS.company_id = " & packagePartCompanyId & " and CL.lob_id = " & packagePartLobId & " and CL.company_id = " & packagePartCompanyId
                        .queryOrStoredProc &= " and ((" & masterStateId & " = 0 and " & masterLobId & " = 0) or (CS_Parent.state_id = " & masterStateId & " and CS_Parent.company_id = " & masterCompanyId & " and CL_Parent.lob_id = " & masterLobId & " and CL_Parent.company_id = " & masterCompanyId & "))"
                        .queryOrStoredProc &= " ORDER BY PPT.packageparttype_id DESC"

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    ppTypeId = .Item("packageparttype_id")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                errorOnLookup = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using

            End If

            Return ppTypeId
        End Function

        Public Shared Function MasterLobIdForLobId(ByVal lobId As Integer) As Integer
            Dim mLobId As Integer = 0

            Select Case lobId
                Case 1 'Auto Personal; added 9/12/2018
                    mLobId = 51 'Multi-State Auto Personal
                Case 9 'Commercial General Liability
                    mLobId = 43 'Multi-State Commercial General Liability
                Case 17 'Farm; added 9/12/2018
                    mLobId = 52 'Multi-State Farm
                Case 20 'Commercial Auto
                    mLobId = 44 'Multi-State Commercial Auto
                Case 28 'Commercial Property
                    mLobId = 45 'Multi-State Commercial Property
                Case 29 'Commercial Inland Marine
                    mLobId = 46 'Multi-State Commercial Inland Marine
                Case 26 'Commercial Crime
                    mLobId = 47 'Multi-State Commercial Crime
                Case 25 'Commercial BOP
                    mLobId = 48 'Multi-State Commercial BOP
                Case 21 'Workers Comp
                    mLobId = 49 'Multi-State Workers Comp
                Case 14 'Umbrella Personal; added 4/22/2020
                    mLobId = 53 'Multi-State Umbrella Personal
                Case 27 'Commercial Umbrella; added 4/22/2020
                    mLobId = 50 'Multi-State Commercial Umbrella
                Case Else
                    'note: masterLobId and lobId are the same for Commercial Package (23)
                    mLobId = lobId
            End Select

            Return mLobId
        End Function
        Public Shared Function LobIdForMasterLobId(ByVal masterLobId As Integer) As Integer
            Dim lobId As Integer = 0

            Select Case masterLobId
                Case 43 'Multi-State Commercial General Liability
                    lobId = 9 'Commercial General Liability
                Case 44 'Multi-State Commercial Auto
                    lobId = 20 'Commercial Auto
                Case 45 'Multi-State Commercial Property
                    lobId = 28 'Commercial Property
                Case 46 'Multi-State Commercial Inland Marine
                    lobId = 29 'Commercial Inland Marine
                Case 47 'Multi-State Commercial Crime
                    lobId = 26 'Commercial Crime
                Case 48 'Multi-State Commercial BOP
                    lobId = 25 'Commercial BOP
                Case 49 'Multi-State Workers Comp
                    lobId = 21 'Workers Comp
                Case 51 'Multi-State Auto Personal; added 9/12/2018
                    lobId = 1 'Auto Personal
                Case 52 'Multi-State Farm; added 9/12/2018
                    lobId = 17 'Farm
                Case 53 'Multi-State Umbrella Personal; added 4/22/2020
                    lobId = 14 'Umbrella Personal
                Case 50 'Multi-State Commercial Umbrella; added 4/22/2020
                    lobId = 27 'Commercial Umbrella
                Case Else
                    'note: masterLobId and lobId are the same for Commercial Package (23)
                    lobId = masterLobId
            End Select

            Return lobId
        End Function
        Public Shared Function LobIdForLobType(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Integer
            Dim lobId As Integer = 0

            Dim qqHelper As New QuickQuoteHelperClass
            lobId = qqHelper.IntegerForString(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteObject.QuickQuoteLobType), lobType), QuickQuotePropertyName.LobId))

            Return lobId
        End Function
        Public Shared Function LobTypeForLobId(ByVal lobId As Integer) As QuickQuoteObject.QuickQuoteLobType
            Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

            Dim qqHelper As New QuickQuoteHelperClass
            If System.Enum.TryParse(Of QuickQuoteObject.QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.LobId, lobId.ToString, QuickQuotePropertyName.LobType), lobType) = False Then
                lobType = QuickQuoteObject.QuickQuoteLobType.None
            End If

            Return lobType
        End Function
        Public Shared Function MasterLobIdForLobType(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Integer
            Dim mLobId As Integer = 0

            Dim lobId As Integer = LobIdForLobType(lobType)
            mLobId = MasterLobIdForLobId(lobId)

            Return mLobId
        End Function
        Public Shared Function LobTypeForMasterLobId(ByVal masterLobId As Integer) As QuickQuoteObject.QuickQuoteLobType
            Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

            Dim lobId As Integer = LobIdForMasterLobId(masterLobId)
            lobType = LobTypeForLobId(lobId)

            Return lobType
        End Function
        'added 7/31/2018
        Public Shared Sub SetMasterAndPartStateAndLobCombosForPackagePartTypeId(ByVal packagePartTypeId As Integer, ByRef masterStateId As Integer, ByRef masterLobId As Integer, ByRef packagePartStateId As Integer, ByRef packagePartLobId As Integer, Optional ByRef errorOnLookup As Boolean = False)
            masterStateId = 0
            masterLobId = 0
            packagePartStateId = 0
            packagePartLobId = 0

            errorOnLookup = False

            If packagePartTypeId > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        'note: should probably update to stored procedure
                        .queryOrStoredProc = "SELECT COALESCE(CS_Parent.state_id, 0) as parentStateId, COALESCE(CL_Parent.lob_id, 0) as parentLobId, COALESCE(CS.state_id, 0) as partStateId, COALESCE(CL.lob_id, 0) as partLobId"
                        .queryOrStoredProc &= " FROM PackagePartType as PPT WITH (NOLOCK)"
                        .queryOrStoredProc &= " INNER JOIN CompanyStateLOB as CSL WITH (NOLOCK) on CSL.companystatelob_id = PPT.companystatelob_id"
                        .queryOrStoredProc &= " INNER JOIN CompanyLOB as CL WITH (NOLOCK) on CL.companylob_id = CSL.companylob_id"
                        .queryOrStoredProc &= " INNER JOIN CompanyState as CS WITH (NOLOCK) on CS.companystate_id = CSL.companystate_id"
                        .queryOrStoredProc &= " LEFT JOIN PackagePartType as PPT_Parent WITH (NOLOCK) on PPT_Parent.packageparttype_id = PPT.parent_packageparttype_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyStateLOB as CSL_Parent WITH (NOLOCK) on CSL_Parent.companystatelob_id = PPT_Parent.companystatelob_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyLOB as CL_Parent WITH (NOLOCK) on CL_Parent.companylob_id = CSL_Parent.companylob_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyState as CS_Parent WITH (NOLOCK) on CS_Parent.companystate_id = CSL_Parent.companystate_id"
                        .queryOrStoredProc &= " WHERE PPT.packageparttype_id = " & packagePartTypeId

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    masterStateId = .Item("parentStateId")
                                    masterLobId = .Item("parentLobId")
                                    packagePartStateId = .Item("partStateId")
                                    packagePartLobId = .Item("partLobId")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                errorOnLookup = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If
        End Sub
        Public Shared Function IsMasterLobId(ByVal lobId As Integer) As Boolean
            Dim isMaster As Boolean = False

            If lobId > 0 Then
                Select Case lobId
                    Case 43 'Multi-State Commercial General Liability
                        isMaster = True
                    Case 44 'Multi-State Commercial Auto
                        isMaster = True
                    Case 45 'Multi-State Commercial Property
                        isMaster = True
                    Case 46 'Multi-State Commercial Inland Marine
                        isMaster = True
                    Case 47 'Multi-State Commercial Crime
                        isMaster = True
                    Case 48 'Multi-State Commercial BOP
                        isMaster = True
                    Case 49 'Multi-State Workers Comp
                        isMaster = True
                    Case 23 'Commercial Package
                        isMaster = True
                    Case 53 'Multi-State Umbrella Personal; added 4/22/2020
                        isMaster = True
                    Case 50 'Multi-State Commercial Umbrella; added 4/22/2020
                        isMaster = True
                    Case Else
                        isMaster = False
                End Select
            End If

            Return isMaster
        End Function
        Public Sub UpdatePackagePartsWithOriginalPackagePartTypes(ByRef pps As List(Of QuickQuotePackagePart))
            If pps IsNot Nothing AndAlso pps.Count > 0 Then
                For Each pp As QuickQuotePackagePart In pps
                    If String.IsNullOrWhiteSpace(pp.PackagePartType) = True Then
                        If pp.IsMasterPackagePart = True Then
                            pp.Set_PackagePartTypeId_Variable("6") 'Package
                        Else
                            If pp.VersionAndLobInfo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse pp.PackagePartTypeLob = QuickQuoteObject.QuickQuoteLobType.CommercialProperty Then
                                pp.Set_PackagePartTypeId_Variable("1") 'Property
                            ElseIf pp.VersionAndLobInfo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability OrElse pp.PackagePartTypeLob = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability Then
                                pp.Set_PackagePartTypeId_Variable("2") 'General Liability
                            ElseIf pp.VersionAndLobInfo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine OrElse pp.PackagePartTypeLob = QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine Then
                                pp.Set_PackagePartTypeId_Variable("3") 'Inland Marine
                            ElseIf pp.VersionAndLobInfo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialCrime OrElse pp.PackagePartTypeLob = QuickQuoteObject.QuickQuoteLobType.CommercialCrime Then
                                pp.Set_PackagePartTypeId_Variable("4") 'Crime
                            ElseIf pp.VersionAndLobInfo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGarage OrElse pp.PackagePartTypeLob = QuickQuoteObject.QuickQuoteLobType.CommercialGarage Then
                                pp.Set_PackagePartTypeId_Variable("5") 'Garage
                            ElseIf pp.VersionAndLobInfo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage OrElse pp.PackagePartTypeLob = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                                pp.Set_PackagePartTypeId_Variable("6") 'Package; should already be updated w/ IsMasterPackagePart check above
                            Else
                                'could set to N/A
                                'pp.Set_PackagePartTypeId_Variable("0") 'N/A
                            End If
                        End If
                    End If
                Next
            End If
        End Sub
        Public Function GetMasterPackagePart(ByRef pps As List(Of QuickQuotePackagePart), Optional ByVal clonePart As Boolean = False) As QuickQuotePackagePart
            Dim pp As QuickQuotePackagePart = Nothing

            If pps IsNot Nothing AndAlso pps.Count > 0 Then
                For Each p As QuickQuotePackagePart In pps
                    If p.IsMasterPackagePart = True Then
                        If clonePart = True Then
                            pp = CloneObject(p)
                        Else
                            pp = p
                        End If
                        Exit For
                    End If
                Next
            End If

            Return pp
        End Function
        Public Function GetNonMasterPackageParts(ByRef pps As List(Of QuickQuotePackagePart), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuotePackagePart)
            Dim parts As List(Of QuickQuotePackagePart) = Nothing

            If pps IsNot Nothing AndAlso pps.Count > 0 Then
                For Each pp As QuickQuotePackagePart In pps
                    If pp.IsMasterPackagePart = False Then
                        If parts Is Nothing Then
                            parts = New List(Of QuickQuotePackagePart)
                        End If
                        If cloneList = True Then
                            parts.Add(CloneObject(pp))
                        Else
                            parts.Add(pp)
                        End If
                    End If
                Next
            End If

            Return parts
        End Function
        Public Sub DisposePackageParts(ByRef pps As List(Of QuickQuotePackagePart))
            If pps IsNot Nothing Then
                If pps.Count > 0 Then
                    For Each pp As QuickQuotePackagePart In pps
                        pp.Dispose()
                        pp = Nothing
                    Next
                    pps.Clear()
                End If
                pps = Nothing
            End If
        End Sub
        'added 8/1/2018
        Public Function PackagePartForLobType(ByRef pps As List(Of QuickQuotePackagePart), ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal clonePart As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuotePackagePart
            Dim pp As QuickQuotePackagePart = Nothing

            'If pps IsNot Nothing AndAlso pps.Count > 0 Then
            '    For Each p As QuickQuotePackagePart In pps
            '        If p.VersionAndLobInfo.LobType = lobType OrElse p.PackagePartTypeLob = lobType Then
            '            If clonePart = True Then
            '                pp = CloneObject(p)
            '            Else
            '                pp = p
            '            End If
            '            Exit For
            '        End If
            '    Next
            'End If
            Dim lobParts As List(Of QuickQuotePackagePart) = PackagePartsForLobType(pps, lobType, cloneList:=clonePart)
            If lobParts IsNot Nothing AndAlso lobParts.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    pp = lobParts(0)
                Else
                    'last
                    pp = lobParts(lobParts.Count - 1)
                End If
            End If

            Return pp
        End Function
        Public Function PackagePartsForLobType(ByRef pps As List(Of QuickQuotePackagePart), ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuotePackagePart)
            Dim lobParts As List(Of QuickQuotePackagePart) = Nothing

            If pps IsNot Nothing AndAlso pps.Count > 0 Then
                For Each pp As QuickQuotePackagePart In pps
                    If pp.VersionAndLobInfo.LobType = lobType OrElse pp.PackagePartTypeLob = lobType Then
                        If lobParts Is Nothing Then
                            lobParts = New List(Of QuickQuotePackagePart)
                        End If
                        If cloneList = True Then
                            lobParts.Add(CloneObject(pp))
                        Else
                            lobParts.Add(pp)
                        End If
                    End If
                Next
            End If

            Return lobParts
        End Function
        Public Function PackagePartForQuickQuoteStateAndLobType(ByRef pps As List(Of QuickQuotePackagePart), ByVal qqState As QuickQuoteState, ByVal lobType As QuickQuoteObject.QuickQuoteLobType, Optional ByVal clonePart As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.Last) As QuickQuotePackagePart
            Dim pp As QuickQuotePackagePart = Nothing

            Dim stateParts As List(Of QuickQuotePackagePart) = PackagePartsForQuickQuoteState(pps, qqState, cloneList:=clonePart)
            pp = PackagePartForLobType(stateParts, lobType, clonePart:=False, firstOrLastItem:=firstOrLastItem) 'setting clonePart to False here since the cloning would have already been done by PackagePartsForQuickQuoteState above if needed

            Return pp
        End Function

        'added 8/2/2018
        Public Sub CopyLocationsFromStateLevelToTopLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListAtTopLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListAtTopLevel = True AndAlso qqo.VersionAndLobInfo.Locations IsNot Nothing AndAlso qqo.VersionAndLobInfo.Locations.Count > 0 Then
                        qqo.VersionAndLobInfo.Locations.Clear()
                    End If
                    For Each s As QuickQuoteState In quoteStates
                        Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                        If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Locations IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Locations.Count > 0 Then
                            For Each stateLoc As QuickQuoteLocation In stateQuote.VersionAndLobInfo.Locations
                                If stateLoc IsNot Nothing Then
                                    If qqo.VersionAndLobInfo.Locations Is Nothing Then
                                        qqo.VersionAndLobInfo.Locations = New List(Of QuickQuoteLocation)
                                    End If
                                    stateLoc.Set_QuoteStateTakenFrom(s)
                                    If cloneList = True Then
                                        qqo.VersionAndLobInfo.Locations.Add(CloneObject(stateLoc))
                                    Else
                                        qqo.VersionAndLobInfo.Locations.Add(stateLoc)
                                    End If
                                End If
                            Next
                        End If
                    Next
                    OrderQuickQuoteLocations(qqo.VersionAndLobInfo.Locations, qqo.TopLevelQuoteInfo.MasterPackageLocations) 'added 9/18/2018
                End If
            End If
        End Sub
        Public Sub CopyLocationsFromTopLevelToStateLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListsAtStateLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListsAtStateLevel = True Then
                        For Each s As QuickQuoteState In quoteStates
                            Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                            If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Locations IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Locations.Count > 0 Then
                                stateQuote.VersionAndLobInfo.Locations.Clear()
                            End If
                        Next
                    End If
                    If qqo.VersionAndLobInfo.Locations IsNot Nothing AndAlso qqo.VersionAndLobInfo.Locations.Count > 0 Then
                        'Dim somethingCopied As Boolean = False 'added 10/11/2018; removed 10/18/2018 since we not have packagePart diamondNums for reconciliation
                        Dim locCount As Integer = 0 'added 1/16/2019
                        Dim okayToSetDisplayNum As WhenToSetType = WhenToSetMultiStateLocationDisplayNums() 'added 1/16/2019
                        For Each topLevelLoc As QuickQuoteLocation In qqo.VersionAndLobInfo.Locations
                            If topLevelLoc IsNot Nothing Then
                                locCount += 1 'added 1/16/2019
                                topLevelLoc.Set_OkayToUseDisplayNum(okayToSetDisplayNum) 'added 1/16/2019
                                topLevelLoc.Set_DisplayNum(locCount) 'added 1/16/2019
                                Dim stateQuote As QuickQuoteObject = Nothing
                                If topLevelLoc.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), topLevelLoc.Address.QuickQuoteState) = True AndAlso topLevelLoc.Address.QuickQuoteState <> QuickQuoteState.None AndAlso quoteStates.Contains(topLevelLoc.Address.QuickQuoteState) = True Then
                                    'put on defined state; clear diamondNum if needed
                                    If topLevelLoc.Address.QuickQuoteState <> topLevelLoc.QuoteStateTakenFrom Then
                                        topLevelLoc.LocationNum = ""
                                    End If
                                    stateQuote = QuickQuoteObjectForState(qqo, topLevelLoc.Address.QuickQuoteState, addToListIfNeeded:=False)
                                ElseIf System.Enum.IsDefined(GetType(QuickQuoteState), topLevelLoc.QuoteStateTakenFrom) = True AndAlso topLevelLoc.QuoteStateTakenFrom <> QuickQuoteState.None AndAlso quoteStates.Contains(topLevelLoc.QuoteStateTakenFrom) = True Then
                                    'put back on state it was taken from
                                    stateQuote = QuickQuoteObjectForState(qqo, topLevelLoc.QuoteStateTakenFrom, addToListIfNeeded:=False)
                                Else
                                    'just put on 1st state
                                    topLevelLoc.LocationNum = "" 'may not be needed
                                    stateQuote = QuickQuoteObjectForState(qqo, quoteStates.Item(0), addToListIfNeeded:=False)
                                End If
                                If stateQuote IsNot Nothing Then
                                    If stateQuote.VersionAndLobInfo.Locations Is Nothing Then
                                        stateQuote.VersionAndLobInfo.Locations = New List(Of QuickQuoteLocation)
                                    End If
                                    If cloneList = True Then
                                        stateQuote.VersionAndLobInfo.Locations.Add(CloneObject(topLevelLoc))
                                    Else
                                        stateQuote.VersionAndLobInfo.Locations.Add(topLevelLoc)
                                    End If
                                    'somethingCopied = True 'added 10/11/2018; removed 10/18/2018 since we not have packagePart diamondNums for reconciliation
                                End If
                            End If
                        Next
                        'If somethingCopied = True Then 'added 10/11/2018; don't want to try to use the same diamondNums for top-level that state-level uses for reconciliation; removed 10/18/2018 since we not have packagePart diamondNums for reconciliation
                        '    'qqo.CanUseLocationNumForLocationReconciliation = False
                        '    'updated 10/17/2018 since the above basically does nothing since it will still return True if child quote has it as True
                        '    qqo.CanUseLocationNumForMasterPartLocationReconciliation = False
                        'End If
                    End If
                End If
            End If
        End Sub
        'added 8/3/2018
        Public Sub CopyVehiclesFromStateLevelToTopLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListAtTopLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListAtTopLevel = True AndAlso qqo.VersionAndLobInfo.Vehicles IsNot Nothing AndAlso qqo.VersionAndLobInfo.Vehicles.Count > 0 Then
                        qqo.VersionAndLobInfo.Vehicles.Clear()
                    End If
                    For Each s As QuickQuoteState In quoteStates
                        Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                        If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Vehicles IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Vehicles.Count > 0 Then
                            For Each stateVeh As QuickQuoteVehicle In stateQuote.VersionAndLobInfo.Vehicles
                                If stateVeh IsNot Nothing Then
                                    If qqo.VersionAndLobInfo.Vehicles Is Nothing Then
                                        qqo.VersionAndLobInfo.Vehicles = New List(Of QuickQuoteVehicle)
                                    End If
                                    stateVeh.Set_QuoteStateTakenFrom(s)
                                    If cloneList = True Then
                                        qqo.VersionAndLobInfo.Vehicles.Add(CloneObject(stateVeh))
                                    Else
                                        qqo.VersionAndLobInfo.Vehicles.Add(stateVeh)
                                    End If
                                End If
                            Next
                        End If
                    Next
                    OrderQuickQuoteVehicles(qqo.VersionAndLobInfo.Vehicles, qqo.TopLevelQuoteInfo.MasterPackageVehicles) 'added 9/18/2018
                End If
            End If
        End Sub
        Public Sub CopyVehiclesFromTopLevelToStateLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListsAtStateLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListsAtStateLevel = True Then
                        For Each s As QuickQuoteState In quoteStates
                            Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                            If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Vehicles IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.Vehicles.Count > 0 Then
                                stateQuote.VersionAndLobInfo.Vehicles.Clear()
                            End If
                        Next
                    End If
                    If qqo.VersionAndLobInfo.Vehicles IsNot Nothing AndAlso qqo.VersionAndLobInfo.Vehicles.Count > 0 Then
                        'Dim somethingCopied As Boolean = False 'added 10/11/2018; removed 10/18/2018 since we not have packagePart diamondNums for reconciliation
                        Dim vehCount As Integer = 0 'added 1/16/2019
                        Dim okayToSetDisplayNum As WhenToSetType = WhenToSetMultiStateVehicleDisplayNums() 'added 1/16/2019
                        For Each topLevelVeh As QuickQuoteVehicle In qqo.VersionAndLobInfo.Vehicles
                            If topLevelVeh IsNot Nothing Then
                                vehCount += 1 'added 1/16/2019
                                topLevelVeh.Set_OkayToUseDisplayNum(okayToSetDisplayNum) 'added 1/16/2019
                                topLevelVeh.Set_DisplayNum(vehCount) 'added 1/16/2019
                                Dim stateQuote As QuickQuoteObject = Nothing
                                If topLevelVeh.GaragingAddress IsNot Nothing AndAlso topLevelVeh.GaragingAddress.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), topLevelVeh.GaragingAddress.Address.QuickQuoteState) = True AndAlso topLevelVeh.GaragingAddress.Address.QuickQuoteState <> QuickQuoteState.None AndAlso quoteStates.Contains(topLevelVeh.GaragingAddress.Address.QuickQuoteState) = True Then
                                    'put on defined state; clear diamondNum if needed
                                    If topLevelVeh.GaragingAddress.Address.QuickQuoteState <> topLevelVeh.QuoteStateTakenFrom Then
                                        topLevelVeh.VehicleNum = ""
                                    End If
                                    stateQuote = QuickQuoteObjectForState(qqo, topLevelVeh.GaragingAddress.Address.QuickQuoteState, addToListIfNeeded:=False)
                                ElseIf System.Enum.IsDefined(GetType(QuickQuoteState), topLevelVeh.QuoteStateTakenFrom) = True AndAlso topLevelVeh.QuoteStateTakenFrom <> QuickQuoteState.None AndAlso quoteStates.Contains(topLevelVeh.QuoteStateTakenFrom) = True Then
                                    'put back on state it was taken from
                                    stateQuote = QuickQuoteObjectForState(qqo, topLevelVeh.QuoteStateTakenFrom, addToListIfNeeded:=False)
                                Else
                                    'just put on 1st state
                                    topLevelVeh.VehicleNum = "" 'may not be needed
                                    stateQuote = QuickQuoteObjectForState(qqo, quoteStates.Item(0), addToListIfNeeded:=False)
                                End If
                                If stateQuote IsNot Nothing Then
                                    If stateQuote.VersionAndLobInfo.Vehicles Is Nothing Then
                                        stateQuote.VersionAndLobInfo.Vehicles = New List(Of QuickQuoteVehicle)
                                    End If
                                    If cloneList = True Then
                                        stateQuote.VersionAndLobInfo.Vehicles.Add(CloneObject(topLevelVeh))
                                    Else
                                        stateQuote.VersionAndLobInfo.Vehicles.Add(topLevelVeh)
                                    End If
                                    'somethingCopied = True 'added 10/11/2018; removed 10/18/2018 since we not have packagePart diamondNums for reconciliation
                                End If
                            End If
                        Next
                        'If somethingCopied = True Then 'added 10/11/2018; don't want to try to use the same diamondNums for top-level that state-level uses for reconciliation; removed 10/18/2018 since we not have packagePart diamondNums for reconciliation
                        '    'qqo.CanUseVehicleNumForVehicleReconciliation = False
                        '    'updated 10/17/2018 since the above basically does nothing since it will still return True if child quote has it as True
                        '    qqo.CanUseVehicleNumForMasterPartVehicleReconciliation = False
                        'End If
                    End If
                End If
            End If
        End Sub
        'added 8/6/2018
        Public Function LocationsForQuickQuoteState(ByRef locs As List(Of QuickQuoteLocation), ByVal qqState As QuickQuoteState) As List(Of QuickQuoteLocation)
            Dim stateLocs As List(Of QuickQuoteLocation) = Nothing

            'If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
            '    If locs IsNot Nothing AndAlso locs.Count > 0 Then
            '        For Each l As QuickQuoteLocation In locs
            '            Dim useLoc As Boolean = False
            '            If l IsNot Nothing AndAlso l.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), l.Address.QuickQuoteState) = True AndAlso l.Address.QuickQuoteState <> QuickQuoteState.None Then
            '                'has a valid value for address' QuickQuoteState, so use it
            '                If l.Address.QuickQuoteState = qqState Then
            '                    useLoc = True
            '                End If
            '            Else
            '                'use quote state taken from if available
            '                If l.QuoteStateTakenFrom = qqState Then
            '                    useLoc = True
            '                End If
            '            End If
            '            If useLoc = True Then
            '                If stateLocs Is Nothing Then
            '                    stateLocs = New List(Of QuickQuoteLocation)
            '                End If
            '                stateLocs.Add(l)
            '            End If
            '        Next
            '    End If
            'End If
            'updated 8/10/2018
            Dim locIndexes As List(Of Integer) = LocationIndexesForQuickQuoteState(locs, qqState)
            stateLocs = QuickQuoteLocationsForIndexes(locs, locIndexes, cloneList:=False)

            Return stateLocs
        End Function
        Public Function LocationForQuickQuoteState(ByRef locs As List(Of QuickQuoteLocation), ByVal qqState As QuickQuoteState, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteLocation
            Dim stateLoc As QuickQuoteLocation = Nothing

            Dim stateLocs As List(Of QuickQuoteLocation) = LocationsForQuickQuoteState(locs, qqState)
            If stateLocs IsNot Nothing AndAlso stateLocs.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    stateLoc = stateLocs(0)
                Else
                    stateLoc = stateLocs(stateLocs.Count - 1)
                End If
            End If

            Return stateLoc
        End Function
        'added 8/7/2018
        Public Function MultiStateQuickQuoteObjects(ByRef qqo As QuickQuoteObject) As List(Of QuickQuoteObject)
            Dim msQQOs As List(Of QuickQuoteObject) = Nothing

            If qqo IsNot Nothing Then
                msQQOs = New List(Of QuickQuoteObject)

                Dim qqStates As List(Of QuickQuoteHelperClass.QuickQuoteState) = qqo.QuoteStates
                If qqStates Is Nothing OrElse qqStates.Count = 0 Then 'may not do this, but will leave here for the time being just in case
                    Dim defaultStates As New List(Of QuickQuoteState)
                    defaultStates.Add(QuickQuoteState.Indiana)
                    qqo.Set_QuoteStates(defaultStates)
                End If

                If qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                    For Each s As QuickQuoteHelperClass.QuickQuoteState In qqStates
                        Dim multiStateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                        If multiStateQuote IsNot Nothing Then
                            msQQOs.Add(multiStateQuote)
                        End If
                    Next
                Else
                    'just add current state
                    msQQOs.Add(qqo)
                End If
            End If

            Return msQQOs
        End Function
        'added 8/10/2018
        Public Shared Function CopyLocationsBetweenStateLevelAndTopLevelForMultiState(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            Return True
        End Function
        Public Shared Function CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            Return True
        End Function
        Public Function LocationIndexesForQuickQuoteState(ByRef locs As List(Of QuickQuoteLocation), ByVal qqState As QuickQuoteState) As List(Of Integer)
            Dim locIndexes As List(Of Integer) = Nothing

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If locs IsNot Nothing AndAlso locs.Count > 0 Then
                    Dim lNum As Integer = 0
                    For Each l As QuickQuoteLocation In locs
                        lNum += 1
                        Dim useLoc As Boolean = False
                        If l IsNot Nothing AndAlso l.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), l.Address.QuickQuoteState) = True AndAlso l.Address.QuickQuoteState <> QuickQuoteState.None Then
                            'has a valid value for address' QuickQuoteState, so use it
                            If l.Address.QuickQuoteState = qqState Then
                                useLoc = True
                            End If
                        Else
                            'use quote state taken from if available
                            If l.QuoteStateTakenFrom = qqState Then
                                useLoc = True
                            End If
                        End If
                        If useLoc = True Then
                            AddIntegerToIntegerList(lNum - 1, locIndexes, positiveOnly:=False)
                        End If
                    Next
                End If
            End If

            Return locIndexes
        End Function
        Public Function VehicleIndexesForQuickQuoteState(ByRef vehs As List(Of QuickQuoteVehicle), ByVal qqState As QuickQuoteState) As List(Of Integer)
            Dim vehIndexes As List(Of Integer) = Nothing

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If vehs IsNot Nothing AndAlso vehs.Count > 0 Then
                    Dim vNum As Integer = 0
                    For Each v As QuickQuoteVehicle In vehs
                        vNum += 1
                        Dim useVeh As Boolean = False
                        If v IsNot Nothing AndAlso v.GaragingAddress IsNot Nothing AndAlso v.GaragingAddress.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), v.GaragingAddress.Address.QuickQuoteState) = True AndAlso v.GaragingAddress.Address.QuickQuoteState <> QuickQuoteState.None Then
                            'has a valid value for address' QuickQuoteState, so use it
                            If v.GaragingAddress.Address.QuickQuoteState = qqState Then
                                useVeh = True
                            End If
                        Else
                            'use quote state taken from if available
                            If v.QuoteStateTakenFrom = qqState Then
                                useVeh = True
                            End If
                        End If
                        If useVeh = True Then
                            AddIntegerToIntegerList(vNum - 1, vehIndexes, positiveOnly:=False)
                        End If
                    Next
                End If
            End If

            Return vehIndexes
        End Function
        Public Sub RemoveQuickQuoteLocationsByIndex(ByRef qqLocations As List(Of QuickQuoteLocation), ByVal locationIndexList As List(Of Integer))
            If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 AndAlso locationIndexList IsNot Nothing AndAlso locationIndexList.Count > 0 Then
                locationIndexList.Sort() 'put them in order 1st
                locationIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each li As Integer In locationIndexList
                    If qqLocations.Count >= CInt(li + 1) Then
                        qqLocations.RemoveAt(li)
                    End If
                Next
            End If
            '8/10/2018 note: could update to use new RemoveQuickQuoteLocationByIndex method and also return removedCount as optional byref param
        End Sub
        Public Sub RemoveQuickQuoteLocationByIndex(ByRef qqLocations As List(Of QuickQuoteLocation), ByVal locationIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqLocations IsNot Nothing AndAlso locationIndex >= 0 AndAlso qqLocations.Count >= CInt(locationIndex + 1) Then
                qqLocations.RemoveAt(locationIndex)
                removed = True
            End If
        End Sub
        Public Shared Function QuickQuoteLocationsForIndexes(ByRef qqLocs As List(Of QuickQuoteLocation), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteLocation)
            Dim locs As List(Of QuickQuoteLocation) = Nothing

            If qqLocs IsNot Nothing AndAlso qqLocs.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    If i >= 0 AndAlso qqLocs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If locs Is Nothing Then
                            locs = New List(Of QuickQuoteLocation)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            locs.Add(qqHelper.CloneObject(qqLocs.Item(i)))
                        Else
                            locs.Add(qqLocs.Item(i))
                        End If
                    End If
                Next
            End If

            Return locs
        End Function
        Public Shared Function QuickQuoteVehiclesForIndexes(ByRef qqVehs As List(Of QuickQuoteVehicle), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteVehicle)
            Dim vehs As List(Of QuickQuoteVehicle) = Nothing

            If qqVehs IsNot Nothing AndAlso qqVehs.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    If i >= 0 AndAlso qqVehs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If vehs Is Nothing Then
                            vehs = New List(Of QuickQuoteVehicle)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            vehs.Add(qqHelper.CloneObject(qqVehs.Item(i)))
                        Else
                            vehs.Add(qqVehs.Item(i))
                        End If
                    End If
                Next
            End If

            Return vehs
        End Function
        Public Sub RemoveLocationsForQuickQuoteState(ByRef locs As List(Of QuickQuoteLocation), ByVal qqState As QuickQuoteState)
            Dim locIndexes As List(Of Integer) = LocationIndexesForQuickQuoteState(locs, qqState)
            RemoveQuickQuoteLocationsByIndex(locs, locIndexes)
        End Sub
        Public Sub RemoveVehiclesForQuickQuoteState(ByRef vehs As List(Of QuickQuoteVehicle), ByVal qqState As QuickQuoteState)
            Dim vehIndexes As List(Of Integer) = VehicleIndexesForQuickQuoteState(vehs, qqState)
            RemoveQuickQuoteVehiclesByIndex(vehs, vehIndexes)
        End Sub
        'added 8/11/2018
        Public Function StateQuoteForLocation(ByRef qqo As QuickQuoteObject, ByVal loc As QuickQuoteLocation, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If qqo IsNot Nothing Then
                Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should at least contain qqo
                stateQuote = StateQuoteForLocation(multiStateQuotes, loc, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function StateQuoteForVehicle(ByRef qqo As QuickQuoteObject, ByVal veh As QuickQuoteVehicle, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If qqo IsNot Nothing Then
                Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should at least contain qqo
                stateQuote = StateQuoteForVehicle(multiStateQuotes, veh, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function StateQuoteForLocation(ByRef multiStateQuotes As List(Of QuickQuoteObject), ByVal loc As QuickQuoteLocation, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                'Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(multiStateQuotes)
                'If qqStates IsNot Nothing AndAlso qqStates.Count > 0 AndAlso loc IsNot Nothing Then
                '    Dim locState As QuickQuoteState = QuickQuoteState.None
                '    Dim locAssignedState As QuickQuoteState = QuickQuoteState.None
                '    Dim locPrevAssignedState As QuickQuoteState = QuickQuoteState.None
                '    locState = QuickQuoteStateForLocation(loc, assignedState:=locAssignedState, previouslyAssignedState:=locPrevAssignedState)

                '    If locState <> QuickQuoteState.None AndAlso qqStates.Contains(locState) = True Then
                '        stateQuote = QuickQuoteObjectForState(multiStateQuotes, locState, addToListIfNeeded:=False)
                '    ElseIf locAssignedState <> QuickQuoteState.None AndAlso qqStates.Contains(locAssignedState) = True Then
                '        stateQuote = QuickQuoteObjectForState(multiStateQuotes, locAssignedState, addToListIfNeeded:=False)
                '    ElseIf locPrevAssignedState <> QuickQuoteState.None AndAlso qqStates.Contains(locPrevAssignedState) = True Then
                '        stateQuote = QuickQuoteObjectForState(multiStateQuotes, locPrevAssignedState, addToListIfNeeded:=False)
                '    End If
                'End If

                'If stateQuote Is Nothing AndAlso alwaysReturnQuoteIfPossibleOnNoMatch = True Then
                '    stateQuote = multiStateQuotes.Item(0)
                'End If
                'updated to use new method
                Dim statesToMatch As List(Of QuickQuoteState) = Nothing
                If loc IsNot Nothing Then
                    Dim locState As QuickQuoteState = QuickQuoteState.None
                    Dim locAssignedState As QuickQuoteState = QuickQuoteState.None
                    Dim locPrevAssignedState As QuickQuoteState = QuickQuoteState.None
                    locState = QuickQuoteStateForLocation(loc, assignedState:=locAssignedState, previouslyAssignedState:=locPrevAssignedState)
                    AddQuickQuoteStateToList(locState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    AddQuickQuoteStateToList(locAssignedState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    AddQuickQuoteStateToList(locPrevAssignedState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                End If
                stateQuote = FirstStateQuoteWithMatch(multiStateQuotes, statesToMatch, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function StateQuoteForVehicle(ByRef multiStateQuotes As List(Of QuickQuoteObject), ByVal veh As QuickQuoteVehicle, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                'Dim qqStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(multiStateQuotes)
                'If qqStates IsNot Nothing AndAlso qqStates.Count > 0 AndAlso veh IsNot Nothing Then
                '    Dim vehState As QuickQuoteState = QuickQuoteState.None
                '    Dim vehAssignedState As QuickQuoteState = QuickQuoteState.None
                '    Dim vehPrevAssignedState As QuickQuoteState = QuickQuoteState.None
                '    vehState = QuickQuoteStateForVehicle(veh, assignedState:=vehAssignedState, previouslyAssignedState:=vehPrevAssignedState)

                '    If vehState <> QuickQuoteState.None AndAlso qqStates.Contains(vehState) = True Then
                '        stateQuote = QuickQuoteObjectForState(multiStateQuotes, vehState, addToListIfNeeded:=False)
                '    ElseIf vehAssignedState <> QuickQuoteState.None AndAlso qqStates.Contains(vehAssignedState) = True Then
                '        stateQuote = QuickQuoteObjectForState(multiStateQuotes, vehAssignedState, addToListIfNeeded:=False)
                '    ElseIf vehPrevAssignedState <> QuickQuoteState.None AndAlso qqStates.Contains(vehPrevAssignedState) = True Then
                '        stateQuote = QuickQuoteObjectForState(multiStateQuotes, vehPrevAssignedState, addToListIfNeeded:=False)
                '    End If
                'End If

                'If stateQuote Is Nothing AndAlso alwaysReturnQuoteIfPossibleOnNoMatch = True Then
                '    stateQuote = multiStateQuotes.Item(0)
                'End If
                'updated to use new method
                Dim statesToMatch As List(Of QuickQuoteState) = Nothing
                If veh IsNot Nothing Then
                    Dim vehState As QuickQuoteState = QuickQuoteState.None
                    Dim vehAssignedState As QuickQuoteState = QuickQuoteState.None
                    Dim vehPrevAssignedState As QuickQuoteState = QuickQuoteState.None
                    vehState = QuickQuoteStateForVehicle(veh, assignedState:=vehAssignedState, previouslyAssignedState:=vehPrevAssignedState)
                    AddQuickQuoteStateToList(vehState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    AddQuickQuoteStateToList(vehAssignedState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    AddQuickQuoteStateToList(vehPrevAssignedState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                End If
                stateQuote = FirstStateQuoteWithMatch(multiStateQuotes, statesToMatch, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function QuickQuoteStateForLocation(ByVal loc As QuickQuoteLocation, Optional ByRef assignedState As QuickQuoteState = QuickQuoteState.None, Optional ByRef previouslyAssignedState As QuickQuoteState = QuickQuoteState.None) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None
            assignedState = QuickQuoteState.None
            previouslyAssignedState = QuickQuoteState.None

            If loc IsNot Nothing Then
                If loc.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), loc.Address.QuickQuoteState) = True AndAlso loc.Address.QuickQuoteState <> QuickQuoteState.None Then
                    assignedState = loc.Address.QuickQuoteState
                End If
                If System.Enum.IsDefined(GetType(QuickQuoteState), loc.QuoteStateTakenFrom) = True AndAlso loc.QuoteStateTakenFrom <> QuickQuoteState.None Then
                    previouslyAssignedState = loc.QuoteStateTakenFrom
                End If
                If assignedState <> QuickQuoteState.None Then
                    qqState = assignedState
                ElseIf previouslyAssignedState <> QuickQuoteState.None Then
                    qqState = previouslyAssignedState
                End If
            End If

            Return qqState
        End Function
        Public Function QuickQuoteStateForVehicle(ByVal veh As QuickQuoteVehicle, Optional ByRef assignedState As QuickQuoteState = QuickQuoteState.None, Optional ByRef previouslyAssignedState As QuickQuoteState = QuickQuoteState.None) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None
            assignedState = QuickQuoteState.None
            previouslyAssignedState = QuickQuoteState.None

            If veh IsNot Nothing Then
                If veh.GaragingAddress IsNot Nothing AndAlso veh.GaragingAddress.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), veh.GaragingAddress.Address.QuickQuoteState) = True AndAlso veh.GaragingAddress.Address.QuickQuoteState <> QuickQuoteState.None Then
                    assignedState = veh.GaragingAddress.Address.QuickQuoteState
                End If
                If System.Enum.IsDefined(GetType(QuickQuoteState), veh.QuoteStateTakenFrom) = True AndAlso veh.QuoteStateTakenFrom <> QuickQuoteState.None Then
                    previouslyAssignedState = veh.QuoteStateTakenFrom
                End If
                If assignedState <> QuickQuoteState.None Then
                    qqState = assignedState
                ElseIf previouslyAssignedState <> QuickQuoteState.None Then
                    qqState = previouslyAssignedState
                End If
            End If

            Return qqState
        End Function
        Public Function FirstStateQuoteWithMatch(ByRef multiStateQuotes As List(Of QuickQuoteObject), ByVal qqStates As List(Of QuickQuoteState), Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                Dim stateCount As Integer = qqStates.Count
                Dim stateNum As Integer = 0
                For Each qqState As QuickQuoteState In qqStates
                    stateNum += 1
                    Dim alwaysReturnFlag As Boolean = False
                    If stateNum = stateCount Then
                        alwaysReturnFlag = alwaysReturnQuoteIfPossibleOnNoMatch
                    End If
                    stateQuote = StateQuoteWithMatch(multiStateQuotes, qqState, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnFlag)
                    If stateQuote IsNot Nothing Then
                        Exit For
                    End If
                Next
            Else
                stateQuote = StateQuoteWithMatch(multiStateQuotes, QuickQuoteState.None, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function StateQuoteWithMatch(ByRef multiStateQuotes As List(Of QuickQuoteObject), ByVal qqState As QuickQuoteState, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                    Dim quoteStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuotes(multiStateQuotes)
                    If quoteStates IsNot Nothing AndAlso quoteStates.Count > 0 AndAlso quoteStates.Contains(qqState) = True Then
                        stateQuote = QuickQuoteObjectForState(multiStateQuotes, qqState, addToListIfNeeded:=False)
                    End If
                End If

                If stateQuote Is Nothing AndAlso alwaysReturnQuoteIfPossibleOnNoMatch = True Then
                    stateQuote = multiStateQuotes.Item(0)
                End If
            End If

            Return stateQuote
        End Function
        'added 8/15/2018
        Public Function GoverningStateQuote(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing) As QuickQuoteObject
            Dim gsq As QuickQuote.CommonObjects.QuickQuoteObject = Nothing

            If qqo IsNot Nothing Then
                If subQuotes Is Nothing Then
                    subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                End If
                If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                    If System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = True AndAlso qqo.QuickQuoteState <> QuickQuoteState.None Then
                        gsq = QuickQuoteObjectForState(subQuotes, qqo.QuickQuoteState, addToListIfNeeded:=False) 'should always return something
                    End If
                    If gsq Is Nothing Then
                        gsq = subQuotes.Item(0)
                    End If
                End If
            End If

            Return gsq
        End Function
        'added 8/19/2018
        Public Sub CopyGLClassificationsFromStateLevelToTopLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListAtTopLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListAtTopLevel = True AndAlso qqo.VersionAndLobInfo.GLClassifications IsNot Nothing AndAlso qqo.VersionAndLobInfo.GLClassifications.Count > 0 Then
                        qqo.VersionAndLobInfo.GLClassifications.Clear()
                    End If
                    For Each s As QuickQuoteState In quoteStates
                        Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                        If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.GLClassifications IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.GLClassifications.Count > 0 Then
                            For Each stateClass As QuickQuoteGLClassification In stateQuote.VersionAndLobInfo.GLClassifications
                                If stateClass IsNot Nothing Then
                                    If qqo.VersionAndLobInfo.GLClassifications Is Nothing Then
                                        qqo.VersionAndLobInfo.GLClassifications = New List(Of QuickQuoteGLClassification)
                                    End If
                                    stateClass.Set_QuoteStateTakenFrom(s)
                                    If cloneList = True Then
                                        qqo.VersionAndLobInfo.GLClassifications.Add(CloneObject(stateClass))
                                    Else
                                        qqo.VersionAndLobInfo.GLClassifications.Add(stateClass)
                                    End If
                                End If
                            Next
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub CopyGLClassificationsFromTopLevelToStateLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListsAtStateLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListsAtStateLevel = True Then
                        For Each s As QuickQuoteState In quoteStates
                            Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                            If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.GLClassifications IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.GLClassifications.Count > 0 Then
                                stateQuote.VersionAndLobInfo.GLClassifications.Clear()
                            End If
                        Next
                    End If
                    If qqo.VersionAndLobInfo.GLClassifications IsNot Nothing AndAlso qqo.VersionAndLobInfo.GLClassifications.Count > 0 Then
                        For Each topLevelClass As QuickQuoteGLClassification In qqo.VersionAndLobInfo.GLClassifications
                            If topLevelClass IsNot Nothing Then
                                Dim stateQuote As QuickQuoteObject = Nothing
                                If System.Enum.IsDefined(GetType(QuickQuoteState), topLevelClass.QuickQuoteState) = True AndAlso topLevelClass.QuickQuoteState <> QuickQuoteState.None AndAlso quoteStates.Contains(topLevelClass.QuickQuoteState) = True Then
                                    'put on defined state; clear diamondNum if needed
                                    If topLevelClass.QuickQuoteState <> topLevelClass.QuoteStateTakenFrom Then
                                        topLevelClass.GLClassificationNum = ""
                                    End If
                                    stateQuote = QuickQuoteObjectForState(qqo, topLevelClass.QuickQuoteState, addToListIfNeeded:=False)
                                ElseIf System.Enum.IsDefined(GetType(QuickQuoteState), topLevelClass.QuoteStateTakenFrom) = True AndAlso topLevelClass.QuoteStateTakenFrom <> QuickQuoteState.None AndAlso quoteStates.Contains(topLevelClass.QuoteStateTakenFrom) = True Then
                                    'put back on state it was taken from
                                    stateQuote = QuickQuoteObjectForState(qqo, topLevelClass.QuoteStateTakenFrom, addToListIfNeeded:=False)
                                Else
                                    'just put on 1st state
                                    topLevelClass.GLClassificationNum = "" 'may not be needed
                                    stateQuote = QuickQuoteObjectForState(qqo, quoteStates.Item(0), addToListIfNeeded:=False)
                                End If
                                If stateQuote IsNot Nothing Then
                                    If stateQuote.VersionAndLobInfo.GLClassifications Is Nothing Then
                                        stateQuote.VersionAndLobInfo.GLClassifications = New List(Of QuickQuoteGLClassification)
                                    End If
                                    If cloneList = True Then
                                        stateQuote.VersionAndLobInfo.GLClassifications.Add(CloneObject(topLevelClass))
                                    Else
                                        stateQuote.VersionAndLobInfo.GLClassifications.Add(topLevelClass)
                                    End If
                                End If
                            End If
                        Next
                        '10/15/2018 note: no need to clear out canUse diamondNum flag like is done in similar methods for Locations/Vehicles since GLClassifications aren't ever set on Master Package Part
                    End If
                End If
            End If
        End Sub
        Public Function GLClassificationsForQuickQuoteState(ByRef classes As List(Of QuickQuoteGLClassification), ByVal qqState As QuickQuoteState) As List(Of QuickQuoteGLClassification)
            Dim stateClasses As List(Of QuickQuoteGLClassification) = Nothing

            Dim classIndexes As List(Of Integer) = GLClassificationIndexesForQuickQuoteState(classes, qqState)
            stateClasses = QuickQuoteGLClassificationsForIndexes(classes, classIndexes, cloneList:=False)

            Return stateClasses
        End Function
        Public Function GLClassificationForQuickQuoteState(ByRef classes As List(Of QuickQuoteGLClassification), ByVal qqState As QuickQuoteState, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteGLClassification
            Dim stateClass As QuickQuoteGLClassification = Nothing

            Dim stateClasses As List(Of QuickQuoteGLClassification) = GLClassificationsForQuickQuoteState(classes, qqState)
            If stateClasses IsNot Nothing AndAlso stateClasses.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    stateClass = stateClasses(0)
                Else
                    stateClass = stateClasses(stateClasses.Count - 1)
                End If
            End If

            Return stateClass
        End Function
        Public Shared Function CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            Return True
        End Function
        Public Function GLClassificationIndexesForQuickQuoteState(ByRef classes As List(Of QuickQuoteGLClassification), ByVal qqState As QuickQuoteState) As List(Of Integer)
            Dim classIndexes As List(Of Integer) = Nothing

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If classes IsNot Nothing AndAlso classes.Count > 0 Then
                    Dim cNum As Integer = 0
                    For Each c As QuickQuoteGLClassification In classes
                        cNum += 1
                        Dim useClass As Boolean = False
                        If c IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), c.QuickQuoteState) = True AndAlso c.QuickQuoteState <> QuickQuoteState.None Then
                            'has a valid value for address' QuickQuoteState, so use it
                            If c.QuickQuoteState = qqState Then
                                useClass = True
                            End If
                        Else
                            'use quote state taken from if available
                            If c.QuoteStateTakenFrom = qqState Then
                                useClass = True
                            End If
                        End If
                        If useClass = True Then
                            AddIntegerToIntegerList(cNum - 1, classIndexes, positiveOnly:=False)
                        End If
                    Next
                End If
            End If

            Return classIndexes
        End Function
        Public Sub RemoveQuickQuoteGLClassificationsByIndex(ByRef qqGLClassifications As List(Of QuickQuoteGLClassification), ByVal glClassificationIndexList As List(Of Integer))
            If qqGLClassifications IsNot Nothing AndAlso qqGLClassifications.Count > 0 AndAlso glClassificationIndexList IsNot Nothing AndAlso glClassificationIndexList.Count > 0 Then
                glClassificationIndexList.Sort() 'put them in order 1st
                glClassificationIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In glClassificationIndexList
                    If qqGLClassifications.Count >= CInt(i + 1) Then
                        qqGLClassifications.RemoveAt(i)
                    End If
                Next
            End If
            'note: could update to use new RemoveQuickQuoteGLClassificationByIndex method and also return removedCount as optional byref param
        End Sub
        Public Sub RemoveQuickQuoteGLClassificationByIndex(ByRef qqGLClassifications As List(Of QuickQuoteGLClassification), ByVal glClassificationIndex As Integer, Optional ByRef removed As Boolean = False)
            removed = False
            If qqGLClassifications IsNot Nothing AndAlso glClassificationIndex >= 0 AndAlso qqGLClassifications.Count >= CInt(glClassificationIndex + 1) Then
                qqGLClassifications.RemoveAt(glClassificationIndex)
                removed = True
            End If
        End Sub
        Public Shared Function QuickQuoteGLClassificationsForIndexes(ByRef qqClasses As List(Of QuickQuoteGLClassification), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteGLClassification)
            Dim classes As List(Of QuickQuoteGLClassification) = Nothing

            If qqClasses IsNot Nothing AndAlso qqClasses.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    If i >= 0 AndAlso qqClasses.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If classes Is Nothing Then
                            classes = New List(Of QuickQuoteGLClassification)
                        End If
                        If cloneList = True Then
                            Dim qqHelper As New QuickQuoteHelperClass
                            classes.Add(qqHelper.CloneObject(qqClasses.Item(i)))
                        Else
                            classes.Add(qqClasses.Item(i))
                        End If
                    End If
                Next
            End If

            Return classes
        End Function
        Public Sub RemoveGLClassificationsForQuickQuoteState(ByRef classes As List(Of QuickQuoteGLClassification), ByVal qqState As QuickQuoteState)
            Dim classIndexes As List(Of Integer) = GLClassificationIndexesForQuickQuoteState(classes, qqState)
            RemoveQuickQuoteGLClassificationsByIndex(classes, classIndexes)
        End Sub
        Public Function StateQuoteForGLClassification(ByRef qqo As QuickQuoteObject, ByVal glClass As QuickQuoteGLClassification, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If qqo IsNot Nothing Then
                Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should at least contain qqo
                stateQuote = StateQuoteForGLClassification(multiStateQuotes, glClass, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function StateQuoteForGLClassification(ByRef multiStateQuotes As List(Of QuickQuoteObject), ByVal glClass As QuickQuoteGLClassification, Optional ByVal alwaysReturnQuoteIfPossibleOnNoMatch As Boolean = True) As QuickQuoteObject
            Dim stateQuote As QuickQuoteObject = Nothing

            If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                Dim statesToMatch As List(Of QuickQuoteState) = Nothing
                If glClass IsNot Nothing Then
                    Dim classState As QuickQuoteState = QuickQuoteState.None
                    Dim classAssignedState As QuickQuoteState = QuickQuoteState.None
                    Dim classPrevAssignedState As QuickQuoteState = QuickQuoteState.None
                    classState = QuickQuoteStateForGLClassification(glClass, assignedState:=classAssignedState, previouslyAssignedState:=classPrevAssignedState)
                    AddQuickQuoteStateToList(classState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    AddQuickQuoteStateToList(classAssignedState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                    AddQuickQuoteStateToList(classPrevAssignedState, statesToMatch, onlyAddIfValid:=True, onlyAddIfUnique:=True)
                End If
                stateQuote = FirstStateQuoteWithMatch(multiStateQuotes, statesToMatch, alwaysReturnQuoteIfPossibleOnNoMatch:=alwaysReturnQuoteIfPossibleOnNoMatch)
            End If

            Return stateQuote
        End Function
        Public Function QuickQuoteStateForGLClassification(ByVal glClass As QuickQuoteGLClassification, Optional ByRef assignedState As QuickQuoteState = QuickQuoteState.None, Optional ByRef previouslyAssignedState As QuickQuoteState = QuickQuoteState.None) As QuickQuoteState
            Dim qqState As QuickQuoteState = QuickQuoteState.None
            assignedState = QuickQuoteState.None
            previouslyAssignedState = QuickQuoteState.None

            If glClass IsNot Nothing Then
                If System.Enum.IsDefined(GetType(QuickQuoteState), glClass.QuickQuoteState) = True AndAlso glClass.QuickQuoteState <> QuickQuoteState.None Then
                    assignedState = glClass.QuickQuoteState
                End If
                If System.Enum.IsDefined(GetType(QuickQuoteState), glClass.QuoteStateTakenFrom) = True AndAlso glClass.QuoteStateTakenFrom <> QuickQuoteState.None Then
                    previouslyAssignedState = glClass.QuoteStateTakenFrom
                End If
                If assignedState <> QuickQuoteState.None Then
                    qqState = assignedState
                ElseIf previouslyAssignedState <> QuickQuoteState.None Then
                    qqState = previouslyAssignedState
                End If
            End If

            Return qqState
        End Function
        'added 8/22/2018
        Public Shared Function CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            Return True
        End Function
        Public Sub AddAdditionalInsuredToList(ByVal ai As QuickQuoteAdditionalInsured, ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured))
            If ai IsNot Nothing Then
                If additionalInsureds Is Nothing Then
                    additionalInsureds = New List(Of QuickQuoteAdditionalInsured)
                End If
                additionalInsureds.Add(ai)
            End If
        End Sub
        Public Shared Function QuickQuoteAdditionalInsuredIndexesForSpecificState(ByVal additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal qqState As QuickQuoteState) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                    Dim counter As Integer = 0
                    For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                        counter += 1
                        If ai IsNot Nothing AndAlso ai.SpecificQuickQuoteState() = qqState Then
                            AddIntegerToIntegerList(counter - 1, indexes, positiveOnly:=False)
                        End If
                    Next
                End If
            End If

            Return indexes
        End Function
        Public Shared Function QuickQuoteAdditionalInsuredIndexesForOnesNotSpecificToState(ByVal additionalInsureds As List(Of QuickQuoteAdditionalInsured)) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                Dim counter As Integer = 0
                For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                    counter += 1
                    If ai IsNot Nothing AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), ai.SpecificQuickQuoteState()) = False OrElse ai.SpecificQuickQuoteState() = QuickQuoteState.None) Then
                        AddIntegerToIntegerList(counter - 1, indexes, positiveOnly:=False)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteAdditionalInsuredsForState(ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal qqState As QuickQuoteState, Optional ByRef removedCount As Integer = 0, Optional ByVal resetRemovedCount As Boolean = True)
            If resetRemovedCount = True Then
                removedCount = 0
            End If
            If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteAdditionalInsuredIndexesForSpecificState(additionalInsureds, qqState)
                RemoveQuickQuoteAdditionalInsuredsByIndex(additionalInsureds, indexes, removedCount)
            End If
        End Sub
        Public Sub RemoveQuickQuoteAdditionalInsuredsByIndex(ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal aiIndexList As List(Of Integer), ByRef removedCount As Integer, Optional ByVal resetRemovedCount As Boolean = True)
            If resetRemovedCount = True Then
                removedCount = 0
            End If

            If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 AndAlso aiIndexList IsNot Nothing AndAlso aiIndexList.Count > 0 Then
                aiIndexList.Sort() 'put them in order 1st
                aiIndexList.Reverse() 'now reverse the order so it's reading the last 1 1st... so we can remove w/o changing indexes
                For Each i As Integer In aiIndexList
                    Dim removed As Boolean = False
                    RemoveQuickQuoteAdditionalInsuredByIndex(additionalInsureds, i, removed:=removed)
                    If removed = True Then
                        removedCount += 1
                    End If
                Next
            End If
        End Sub
        Public Function QuickQuoteAdditionalInsuredsForIndexes(ByRef additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal indexes As List(Of Integer), Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteAdditionalInsured)
            Dim AIs As List(Of QuickQuoteAdditionalInsured) = Nothing

            If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 AndAlso indexes IsNot Nothing AndAlso indexes.Count > 0 Then
                'put them in order 1st
                indexes.Sort()
                For Each i As Integer In indexes
                    If i >= 0 AndAlso additionalInsureds.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If cloneList = True Then
                            AddAdditionalInsuredToList(CloneObject(additionalInsureds.Item(i)), AIs)
                        Else
                            AddAdditionalInsuredToList(additionalInsureds.Item(i), AIs)
                        End If
                    End If
                Next
            End If

            Return AIs
        End Function
        Public Sub CopyAdditionalInsuredsFromStateLevelToTopLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListAtTopLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListAtTopLevel = True Then
                        If qqo.VersionAndLobInfo.AdditionalInsureds IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsureds.Count > 0 Then
                            qqo.VersionAndLobInfo.AdditionalInsureds.Clear()
                        End If
                        If qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Count > 0 Then
                            qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Clear()
                        End If
                        If qqo.VersionAndLobInfo.AdditionalInsuredsBackup IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsuredsBackup.Count > 0 Then
                            qqo.VersionAndLobInfo.AdditionalInsuredsBackup.Clear()
                        End If
                        qqo.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(0)
                        qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = False
                        'qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = "" 'ReadOnly; will return based on list
                        qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable("")
                        qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = ""
                    End If
                    Dim _OnlyRetrieveAdditionalInsuredsFromStatePartsUsedForSave As Boolean = OnlyRetrieveAdditionalInsuredsFromStatePartsUsedForSave() 'added 1/29/2019
                    Dim premiumWasReset As Boolean = False 'added 1/29/2019
                    For Each s As QuickQuoteState In quoteStates
                        Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                        If stateQuote IsNot Nothing Then
                            'added 1/29/2019
                            Dim stateIsOkay As Boolean = True
                            If _OnlyRetrieveAdditionalInsuredsFromStatePartsUsedForSave = True Then
                                If quoteStates.Count > 1 AndAlso qqo.QuickQuoteState <> stateQuote.QuickQuoteState Then
                                    'not governing state
                                    stateIsOkay = False
                                End If
                            End If
                            Dim nonOkayStateAdditionalInsureds As List(Of QuickQuoteAdditionalInsured) = Nothing
                            Dim nonOkayStateAdditionalInsuredsCheckboxBOP As List(Of QuickQuoteAdditionalInsured) = Nothing
                            'Dim nonOkayStateAdditionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) = Nothing

                            If stateQuote.VersionAndLobInfo.AdditionalInsureds IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsureds.Count > 0 Then
                                For Each stateAI As QuickQuoteAdditionalInsured In stateQuote.VersionAndLobInfo.AdditionalInsureds
                                    If stateAI IsNot Nothing Then
                                        'added 1/29/2019
                                        Dim isAIokay As Boolean = stateIsOkay
                                        If isAIokay = False Then
                                            If stateAI.SpecificQuickQuoteState() = stateQuote.QuickQuoteState Then
                                                isAIokay = True
                                            End If
                                        End If

                                        If isAIokay = True Then 'added IF 1/29/2019
                                            'stateAI.Set_QuoteStateTakenFrom(s)
                                            If cloneList = True Then
                                                AddAdditionalInsuredToList(CloneObject(stateAI), qqo.VersionAndLobInfo.AdditionalInsureds)
                                            Else
                                                AddAdditionalInsuredToList(stateAI, qqo.VersionAndLobInfo.AdditionalInsureds)
                                            End If

                                            'added 1/29/2019
                                            If stateIsOkay = False Then
                                                AddAdditionalInsuredToList(CloneObject(stateAI), nonOkayStateAdditionalInsureds)
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                            If stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Count > 0 Then
                                For Each stateAI As QuickQuoteAdditionalInsured In stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP
                                    If stateAI IsNot Nothing Then
                                        'added 1/29/2019
                                        Dim isAIokay As Boolean = stateIsOkay
                                        If isAIokay = False Then
                                            If stateAI.SpecificQuickQuoteState() = stateQuote.QuickQuoteState Then
                                                isAIokay = True
                                            End If
                                        End If

                                        If isAIokay = True Then 'added IF 1/29/2019
                                            'stateAI.Set_QuoteStateTakenFrom(s)
                                            If cloneList = True Then
                                                AddAdditionalInsuredToList(CloneObject(stateAI), qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP)
                                            Else
                                                AddAdditionalInsuredToList(stateAI, qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP)
                                            End If

                                            'added 1/29/2019
                                            If stateIsOkay = False Then
                                                AddAdditionalInsuredToList(CloneObject(stateAI), nonOkayStateAdditionalInsuredsCheckboxBOP)
                                            End If
                                        End If
                                    End If
                                Next
                            End If
                            If stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup.Count > 0 Then
                                For Each stateAI As QuickQuoteAdditionalInsured In stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup
                                    If stateAI IsNot Nothing Then
                                        'added 1/29/2019
                                        Dim isAIokay As Boolean = stateIsOkay
                                        If isAIokay = False Then
                                            If stateAI.SpecificQuickQuoteState() = stateQuote.QuickQuoteState Then
                                                isAIokay = True
                                            End If
                                        End If

                                        If isAIokay = True Then 'added IF 1/29/2019
                                            'stateAI.Set_QuoteStateTakenFrom(s)
                                            'not using normal AddAdditionalInsuredToList method since AdditionalInsuredsBackup is ReadOnly and can't be instantiated
                                            If qqo.VersionAndLobInfo.AdditionalInsuredsBackup Is Nothing Then
                                                qqo.VersionAndLobInfo.Set_AdditionalInsuredsBackup_Variable(New List(Of QuickQuoteAdditionalInsured))
                                            End If
                                            If cloneList = True Then
                                                qqo.VersionAndLobInfo.AdditionalInsuredsBackup.Add(CloneObject(stateAI))
                                            Else
                                                qqo.VersionAndLobInfo.AdditionalInsuredsBackup.Add(stateAI)
                                            End If

                                            'added 1/29/2019
                                            'If stateIsOkay = False Then
                                            '    AddAdditionalInsuredToList(CloneObject(stateAI), nonOkayStateAdditionalInsuredsBackup)
                                            'End If
                                        End If
                                    End If
                                Next
                            End If
                            If stateIsOkay = True Then 'added IF 1/29/2019
                                qqo.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(qqo.VersionAndLobInfo.Get_AdditionalInsuredsCount_Variable() + stateQuote.VersionAndLobInfo.Get_AdditionalInsuredsCount_Variable())
                                If stateQuote.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = True Then
                                    qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = True
                                End If
                                'qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = "" 'ReadOnly; will return based on list
                                qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(getSum(qqo.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable(), stateQuote.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable()))
                                If IsZeroAmount(qqo.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable()) = True Then
                                    qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable("")
                                End If
                                If premiumWasReset = False Then 'added IF 1/29/2019
                                    qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = ""
                                    premiumWasReset = True 'added 1/29/2019
                                End If
                                qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = getSum(qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium, stateQuote.VersionAndLobInfo.AdditionalInsuredsQuotedPremium)
                            Else 'added 1/29/2019 for non-governing state
                                'If (nonOkayStateAdditionalInsureds IsNot Nothing AndAlso nonOkayStateAdditionalInsureds.Count > 0) OrElse (nonOkayStateAdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso nonOkayStateAdditionalInsuredsCheckboxBOP.Count > 0) OrElse (nonOkayStateAdditionalInsuredsBackup IsNot Nothing AndAlso nonOkayStateAdditionalInsuredsBackup.Count > 0) Then
                                If (nonOkayStateAdditionalInsureds IsNot Nothing AndAlso nonOkayStateAdditionalInsureds.Count > 0) OrElse (nonOkayStateAdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso nonOkayStateAdditionalInsuredsCheckboxBOP.Count > 0) Then
                                    qqo.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(qqo.VersionAndLobInfo.Get_AdditionalInsuredsCount_Variable() + AdditionalInsuredsCountFromList(nonOkayStateAdditionalInsureds))
                                    If nonOkayStateAdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso nonOkayStateAdditionalInsuredsCheckboxBOP.Count > 0 Then
                                        qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = True
                                    End If
                                    'qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = "" 'ReadOnly; will return based on list
                                    qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(getSum(qqo.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable(), AdditionalInsuredsTotalManualChargeFromList(nonOkayStateAdditionalInsureds)))
                                    If IsZeroAmount(qqo.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable()) = True Then
                                        qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable("")
                                    End If
                                    If premiumWasReset = False Then 'added IF 1/29/2019
                                        qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = ""
                                        premiumWasReset = True 'added 1/29/2019
                                    End If
                                    qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = getSum(qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium, AdditionalInsuredsTotalQuotedPremiumFromList(nonOkayStateAdditionalInsureds))
                                End If
                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub CopyAdditionalInsuredsFromTopLevelToStateLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListsAtStateLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                'If quoteStates IsNot Nothing AndAlso quoteStates.Count > 1 Then
                'updated 9/7/2018
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListsAtStateLevel = True Then
                        For Each s As QuickQuoteState In quoteStates
                            Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                            If stateQuote IsNot Nothing Then
                                If stateQuote.VersionAndLobInfo.AdditionalInsureds IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsureds.Count > 0 Then
                                    stateQuote.VersionAndLobInfo.AdditionalInsureds.Clear()
                                End If
                                If stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Count > 0 Then
                                    stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Clear()
                                End If
                                If stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup.Count > 0 Then
                                    stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup.Clear()
                                End If
                                stateQuote.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(0)
                                stateQuote.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = False
                                'stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = "" 'ReadOnly; will return based on list
                                stateQuote.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable("")
                                stateQuote.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = ""
                            End If
                        Next
                    End If
                    Dim subQuotes As List(Of QuickQuoteObject) = Nothing 'will be used later as needed; having variable to hold the value should prevent it from having to be fetched multiple times
                    Dim govStateQuote As QuickQuoteObject = Nothing 'will be used later as needed; having variable to hold the value should prevent it from having to be fetched multiple times
                    If qqo.VersionAndLobInfo.AdditionalInsureds IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsureds.Count > 0 Then
                        For Each topLevelAI As QuickQuoteAdditionalInsured In qqo.VersionAndLobInfo.AdditionalInsureds
                            If topLevelAI IsNot Nothing Then
                                Dim stateQuote As QuickQuoteObject = Nothing
                                Dim specificState As QuickQuoteState = topLevelAI.SpecificQuickQuoteState()
                                'If System.Enum.IsDefined(GetType(QuickQuoteState), specificState) = True AndAlso specificState <> QuickQuoteState.None AndAlso quoteStates.Contains(specificState) = True Then
                                'updated to not verify that quote has specified state... so if we have an invalid coverage, it will drop off instead of going to governingState
                                If System.Enum.IsDefined(GetType(QuickQuoteState), specificState) = True AndAlso specificState <> QuickQuoteState.None Then
                                    stateQuote = QuickQuoteObjectForState(qqo, specificState, addToListIfNeeded:=False)
                                Else
                                    'put on Governing state
                                    If govStateQuote Is Nothing Then
                                        govStateQuote = GoverningStateQuote(qqo, subQuotes:=subQuotes)
                                    End If
                                    stateQuote = govStateQuote
                                End If
                                If stateQuote IsNot Nothing Then
                                    If cloneList = True Then
                                        AddAdditionalInsuredToList(CloneObject(topLevelAI), stateQuote.VersionAndLobInfo.AdditionalInsureds)
                                    Else
                                        AddAdditionalInsuredToList(topLevelAI, stateQuote.VersionAndLobInfo.AdditionalInsureds)
                                    End If
                                End If
                            End If
                        Next
                    End If
                    If qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Count > 0 Then
                        For Each topLevelAI As QuickQuoteAdditionalInsured In qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP
                            If topLevelAI IsNot Nothing Then
                                Dim stateQuote As QuickQuoteObject = Nothing
                                Dim specificState As QuickQuoteState = topLevelAI.SpecificQuickQuoteState()
                                'If System.Enum.IsDefined(GetType(QuickQuoteState), specificState) = True AndAlso specificState <> QuickQuoteState.None AndAlso quoteStates.Contains(specificState) = True Then
                                'updated to not verify that quote has specified state... so if we have an invalid coverage, it will drop off instead of going to governingState
                                If System.Enum.IsDefined(GetType(QuickQuoteState), specificState) = True AndAlso specificState <> QuickQuoteState.None Then
                                    stateQuote = QuickQuoteObjectForState(qqo, specificState, addToListIfNeeded:=False)
                                Else
                                    'put on Governing state
                                    If govStateQuote Is Nothing Then
                                        govStateQuote = GoverningStateQuote(qqo, subQuotes:=subQuotes)
                                    End If
                                    stateQuote = govStateQuote
                                End If
                                If stateQuote IsNot Nothing Then
                                    If cloneList = True Then
                                        AddAdditionalInsuredToList(CloneObject(topLevelAI), stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP)
                                    Else
                                        AddAdditionalInsuredToList(topLevelAI, stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP)
                                    End If
                                End If
                            End If
                        Next
                    End If
                    If qqo.VersionAndLobInfo.AdditionalInsuredsBackup IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsuredsBackup.Count > 0 Then
                        For Each topLevelAI As QuickQuoteAdditionalInsured In qqo.VersionAndLobInfo.AdditionalInsuredsBackup
                            If topLevelAI IsNot Nothing Then
                                Dim stateQuote As QuickQuoteObject = Nothing
                                Dim specificState As QuickQuoteState = topLevelAI.SpecificQuickQuoteState()
                                'If System.Enum.IsDefined(GetType(QuickQuoteState), specificState) = True AndAlso specificState <> QuickQuoteState.None AndAlso quoteStates.Contains(specificState) = True Then
                                'updated to not verify that quote has specified state... so if we have an invalid coverage, it will drop off instead of going to governingState
                                If System.Enum.IsDefined(GetType(QuickQuoteState), specificState) = True AndAlso specificState <> QuickQuoteState.None Then
                                    stateQuote = QuickQuoteObjectForState(qqo, specificState, addToListIfNeeded:=False)
                                Else
                                    'put on Governing state
                                    If govStateQuote Is Nothing Then
                                        govStateQuote = GoverningStateQuote(qqo, subQuotes:=subQuotes)
                                    End If
                                    stateQuote = govStateQuote
                                End If
                                If stateQuote IsNot Nothing Then
                                    'not using normal AddAdditionalInsuredToList method since AdditionalInsuredsBackup is ReadOnly and can't be instantiated
                                    If stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup Is Nothing Then
                                        stateQuote.VersionAndLobInfo.Set_AdditionalInsuredsBackup_Variable(New List(Of QuickQuoteAdditionalInsured))
                                    End If
                                    If cloneList = True Then
                                        stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup.Add(CloneObject(topLevelAI))
                                    Else
                                        stateQuote.VersionAndLobInfo.AdditionalInsuredsBackup.Add(topLevelAI)
                                    End If
                                End If
                            End If
                        Next
                    End If
                    'now set other properties as needed; 1/29/2019 note: not sure that IF/ELSE is needed as IF seems like the only accurate one and ELSE wouldn't account for state-specific AIs that would go to non-governing state quote
                    If UseComparativeRaterForLob(lob:=qqo.LobType, quoteTransactionType:=qqo.QuoteTransactionType) <> QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                        For Each s As QuickQuoteState In quoteStates
                            Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                            If stateQuote IsNot Nothing Then
                                stateQuote.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(AdditionalInsuredsCountFromList(stateQuote.VersionAndLobInfo.AdditionalInsureds))
                                If stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Count > 0 Then
                                    stateQuote.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = True
                                Else
                                    stateQuote.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = False
                                End If
                                'stateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = AdditionalInsuredsTotalQuotedPremiumFromList(stateQuote.AdditionalInsuredsCheckboxBOP) 'ReadOnly; will return based on list
                                Dim totalAddInsManChrg As String = AdditionalInsuredsTotalManualChargeFromList(stateQuote.VersionAndLobInfo.AdditionalInsureds)
                                If IsZeroAmount(totalAddInsManChrg) = True Then
                                    totalAddInsManChrg = ""
                                End If
                                stateQuote.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(totalAddInsManChrg)
                                stateQuote.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = AdditionalInsuredsTotalQuotedPremiumFromList(stateQuote.AdditionalInsureds) 'note: Parse code also adds prem for 80367 (or sets prem to that and then any subsequent prems would be added on top), but never adds it to any of the lists
                            End If
                        Next
                    Else
                        If govStateQuote Is Nothing Then
                            govStateQuote = GoverningStateQuote(qqo, subQuotes:=subQuotes)
                        End If
                        If govStateQuote IsNot Nothing Then
                            govStateQuote.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(qqo.VersionAndLobInfo.Get_AdditionalInsuredsCount_Variable())
                            govStateQuote.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP
                            'govStateQuote.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium 'ReadOnly; will return based on list
                            govStateQuote.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(qqo.VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable())
                            govStateQuote.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium
                        End If
                    End If
                End If
            End If
        End Sub
        'added 8/24/2018
        Public Function AdditionalInsuredsTotalQuotedPremiumFromList(ByVal addInsureds As List(Of QuickQuoteAdditionalInsured)) As String
            Dim addInsTotQuotedPrem As String = ""

            If addInsureds IsNot Nothing AndAlso addInsureds.Count > 0 Then
                For Each ai As QuickQuoteAdditionalInsured In addInsureds
                    If ai IsNot Nothing Then
                        addInsTotQuotedPrem = getSumAndOptionallyMaintainFormatting(addInsTotQuotedPrem, ai.FullTermPremium, maintainFormattingOrDefaultValue:=True)
                    End If
                Next
            End If

            Return addInsTotQuotedPrem
        End Function
        Public Function QuickQuoteAdditionalInsuredsForType(ByRef addInsureds As List(Of QuickQuoteAdditionalInsured), ByVal aiType As QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType, Optional ByVal cloneList As Boolean = False) As List(Of QuickQuoteAdditionalInsured)
            Dim ais As List(Of QuickQuoteAdditionalInsured) = Nothing

            Dim aiIndexes As List(Of Integer) = QuickQuoteAdditionalInsuredIndexesForType(addInsureds, aiType)
            If aiIndexes IsNot Nothing AndAlso aiIndexes.Count > 0 Then
                ais = QuickQuoteAdditionalInsuredsForIndexes(addInsureds, aiIndexes, cloneList:=cloneList)
            End If

            Return ais
        End Function
        Public Shared Function QuickQuoteAdditionalInsuredIndexesForType(ByVal additionalInsureds As List(Of QuickQuoteAdditionalInsured), ByVal aiType As QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            'If System.Enum.IsDefined(GetType(QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType), aiType) = True AndAlso aiType <> QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.None Then 'commented out so match can be made on anything
            If additionalInsureds IsNot Nothing AndAlso additionalInsureds.Count > 0 Then
                Dim counter As Integer = 0
                For Each ai As QuickQuoteAdditionalInsured In additionalInsureds
                    counter += 1
                    If ai IsNot Nothing AndAlso ai.AdditionalInsuredType = aiType Then
                        AddIntegerToIntegerList(counter - 1, indexes, positiveOnly:=False)
                    End If
                Next
            End If
            'End If

            Return indexes
        End Function
        Public Function QuickQuoteAdditionalInsuredForType(ByRef addInsureds As List(Of QuickQuoteAdditionalInsured), ByVal aiType As QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType, Optional ByVal cloneObject As Boolean = False, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As QuickQuoteAdditionalInsured
            Dim ai As QuickQuoteAdditionalInsured = Nothing

            Dim ais As List(Of QuickQuoteAdditionalInsured) = QuickQuoteAdditionalInsuredsForType(addInsureds, aiType, cloneList:=cloneObject)
            If ais IsNot Nothing AndAlso ais.Count > 0 Then
                If firstOrLastItem = FirstOrLast.First Then
                    ai = ais(0)
                Else
                    ai = ais(ais.Count - 1)
                End If
            End If

            Return ai
        End Function
        Public Sub RemoveAdditionalInsuredInfoForQuickQuoteState(ByRef qqo As QuickQuoteObject, ByVal qqState As QuickQuoteState)
            'note: don't need to necessarily do anything here since Save logic will drop any invalid states
            If qqo IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                If UseComparativeRaterForLob(lob:=qqo.LobType, quoteTransactionType:=qqo.QuoteTransactionType) <> QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                    Dim aiRemovedCount As Integer = 0
                    RemoveQuickQuoteAdditionalInsuredsForState(qqo.VersionAndLobInfo.AdditionalInsureds, qqState, removedCount:=aiRemovedCount)
                    Dim aiCbBopRemovedCount As Integer = 0
                    RemoveQuickQuoteAdditionalInsuredsForState(qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP, qqState, removedCount:=aiCbBopRemovedCount)
                    'now set other properties as needed
                    If aiRemovedCount > 0 Then
                        qqo.VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(AdditionalInsuredsCountFromList(qqo.VersionAndLobInfo.AdditionalInsureds))
                        Dim totalAddInsManChrg As String = AdditionalInsuredsTotalManualChargeFromList(qqo.VersionAndLobInfo.AdditionalInsureds)
                        If IsZeroAmount(totalAddInsManChrg) = True Then
                            totalAddInsManChrg = ""
                        End If
                        qqo.VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(totalAddInsManChrg)
                        qqo.VersionAndLobInfo.AdditionalInsuredsQuotedPremium = AdditionalInsuredsTotalQuotedPremiumFromList(qqo.AdditionalInsureds) 'note: Parse code also adds prem for 80367 (or sets prem to that and then any subsequent prems would be added on top), but never adds it to any of the lists
                    End If
                    If aiCbBopRemovedCount > 0 Then
                        If qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOP.Count > 0 Then
                            qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = True
                        Else
                            qqo.VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = False
                        End If
                        'qqo.VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium = AdditionalInsuredsTotalQuotedPremiumFromList(qqo.AdditionalInsuredsCheckboxBOP) 'ReadOnly; will return based on list
                    End If
                Else
                    'shouldn't have to do anything for old stuff as it shouldn't even have the lists populated
                End If
            End If
        End Sub
        Public Function DiamondPackagePartForTypeId(ByRef diaPackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart), ByVal ppTypeId As Integer, Optional ByVal addIfNeeded As Boolean = False, Optional ByVal okayToLookAtDeleted As Boolean = False, Optional ByVal setDetailStatusCodeToActive As Boolean = False, Optional ByRef addedNew As Boolean = False) As Diamond.Common.Objects.Policy.PackagePart
            Dim diaPP As Diamond.Common.Objects.Policy.PackagePart = Nothing
            addedNew = False

            'If ppTypeId > 0 Then
            If diaPackageParts IsNot Nothing AndAlso diaPackageParts.Count > 0 Then
                For Each dPP As Diamond.Common.Objects.Policy.PackagePart In diaPackageParts
                    If dPP IsNot Nothing AndAlso (okayToLookAtDeleted = True OrElse dPP.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted) Then
                        If dPP.PackagePartTypeId = ppTypeId Then
                            diaPP = dPP
                            Exit For
                        End If
                    End If
                Next
            End If
            'End If

            If diaPP Is Nothing AndAlso addIfNeeded = True Then
                If diaPackageParts Is Nothing Then
                    diaPackageParts = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart)
                End If
                diaPP = New Diamond.Common.Objects.Policy.PackagePart
                diaPP.PackagePartTypeId = ppTypeId
                diaPackageParts.Add(diaPP)
                addedNew = True
            End If

            If diaPP IsNot Nothing AndAlso setDetailStatusCodeToActive = True Then
                diaPP.DetailStatusCode = Diamond.Common.Enums.StatusCode.Active '1
            End If

            Return diaPP
        End Function
        Public Function TypeIdsForDiamondPackageParts(ByVal diaPackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart), Optional ByVal okayToLookAtDeleted As Boolean = False, Optional ByVal uniqueOnly As Boolean = True) As List(Of Integer)
            Dim ppTypeIds As List(Of Integer) = Nothing

            If diaPackageParts IsNot Nothing AndAlso diaPackageParts.Count > 0 Then
                For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaPackageParts
                    If pp IsNot Nothing AndAlso (okayToLookAtDeleted = True OrElse pp.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted) Then
                        If uniqueOnly = True Then
                            AddUniqueIntegerToIntegerList(pp.PackagePartTypeId, ppTypeIds)
                        Else
                            AddIntegerToIntegerList(pp.PackagePartTypeId, ppTypeIds)
                        End If
                    End If
                Next
            End If

            Return ppTypeIds
        End Function
        Public Sub FlagUnNeededDiamondPackagePartsForDeletion(ByRef diaPackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart), ByVal neededPackagePartTypeIds As List(Of Integer), Optional ByRef numberFlaggedForDeletion As Integer = 0)
            numberFlaggedForDeletion = 0
            If diaPackageParts IsNot Nothing AndAlso diaPackageParts.Count > 0 Then
                Dim currTypeIds As List(Of Integer) = TypeIdsForDiamondPackageParts(diaPackageParts)
                Dim typeIdsToRemove As List(Of Integer) = IntegersToRemove(currTypeIds, neededPackagePartTypeIds)

                If typeIdsToRemove IsNot Nothing AndAlso typeIdsToRemove.Count > 0 Then
                    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaPackageParts
                        If pp IsNot Nothing AndAlso pp.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted AndAlso typeIdsToRemove.Contains(pp.PackagePartTypeId) = True Then
                            numberFlaggedForDeletion += 1
                            pp.DetailStatusCode = Diamond.Common.Enums.StatusCode.Deleted '2
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function IntegersToRemove(ByVal allInts As List(Of Integer), ByVal intsToKeep As List(Of Integer)) As List(Of Integer)
            Dim intsToRemove As List(Of Integer) = Nothing

            If allInts IsNot Nothing AndAlso allInts.Count > 0 Then
                For Each i As Integer In allInts
                    If intsToKeep Is Nothing OrElse intsToKeep.Count = 0 OrElse intsToKeep.Contains(i) = False Then
                        AddUniqueIntegerToIntegerList(i, intsToRemove, positiveOnly:=False)
                    End If
                Next
            End If

            Return intsToRemove
        End Function
        'added 8/28/2018
        Public Shared Function IntegerListsMatch(ByVal intList1 As List(Of Integer), ByVal intList2 As List(Of Integer)) As Boolean
            Dim isMatch As Boolean = False

            Dim intList1Count As Integer = 0
            Dim intList2Count As Integer = 0

            If intList1 IsNot Nothing AndAlso intList1.Count > 0 Then
                intList1Count = intList1.Count
            End If
            If intList2 IsNot Nothing AndAlso intList2.Count > 0 Then
                intList2Count = intList2.Count
            End If

            If intList1Count = intList2Count Then
                'same count
                If intList1Count = 0 Then
                    isMatch = True
                Else
                    Dim qqHelper As New QuickQuoteHelperClass
                    Dim intsFromList1NotInList2 As List(Of Integer) = qqHelper.IntegersToRemove(intList1, intList2)
                    If intsFromList1NotInList2 Is Nothing OrElse intsFromList1NotInList2.Count = 0 Then
                        isMatch = True
                    End If
                End If
            End If

            Return isMatch
        End Function

        'added 9/5/2018
        Public Sub CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy(ByRef qqo As QuickQuoteObject, Optional ByVal useBuildingClassificationList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim stateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo)
                If stateQuotes IsNot Nothing AndAlso stateQuotes.Count > 0 Then
                    For Each sq As QuickQuoteObject In stateQuotes
                        sq.HasResidentialCleaning = False
                        sq.HasBarbersProfessionalLiability = False
                        sq.BarbersProfessionalLiabilityFullTimeEmpNum = ""
                        sq.BarbersProfessionalLiabilityPartTimeEmpNum = ""
                        sq.HasBeauticiansProfessionalLiability = False
                        sq.BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
                        sq.BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
                        sq.HasFuneralDirectorsProfessionalLiability = False
                        sq.FuneralDirectorsProfessionalLiabilityEmpNum = ""
                        sq.HasPrintersProfessionalLiability = False
                        sq.PrintersProfessionalLiabilityLocNum = ""
                        sq.HasSelfStorageFacility = False
                        sq.SelfStorageFacilityLimit = ""
                        sq.HasVeterinariansProfessionalLiability = False
                        sq.VeterinariansProfessionalLiabilityEmpNum = ""
                        sq.HasPharmacistProfessionalLiability = False
                        sq.PharmacistAnnualGrossSales = ""
                        sq.HasOpticalAndHearingAidProfessionalLiability = False
                        sq.OpticalAndHearingAidProfessionalLiabilityEmpNum = ""
                        sq.HasMotelCoverage = False
                        sq.MotelCoveragePerGuestLimitId = ""
                        sq.MotelCoverageSafeDepositDeductibleId = ""
                        sq.MotelCoverageSafeDepositLimitId = ""
                        sq.HasPhotographyCoverage = False
                        sq.HasPhotographyCoverageScheduledCoverages = False
                        sq.HasPhotographyMakeupAndHair = False
                        sq.PhotographyScheduledCoverages = Nothing
                        sq.LiquorLiabilityClassCodeTypeId = ""
                        sq.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
                        sq.LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
                        sq.HasLiquorLiability = False
                        sq.HasRestaurantEndorsement = False
                        sq.HasApartmentBuildings = False
                        sq.NumberOfLocationsWithApartments = ""
                    Next

                    Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                    'If qqo.VersionAndLobInfo.Locations IsNot Nothing AndAlso qqo.VersionAndLobInfo.Locations.Count > 0 Then
                    'updated 9/14/2018
                    If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                        'For Each l As QuickQuoteLocation In qqo.VersionAndLobInfo.Locations
                        'updated 9/14/2018
                        For Each l As QuickQuoteLocation In qqLocations
                            If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                                l.HasTenantAutoLegalLiability = False
                                l.TenantAutoLegalLiabilityDeductibleId = ""
                                l.TenantAutoLegalLiabilityLimitOfLiabilityId = ""
                                l.HasCustomerAutoLegalLiability = False
                                l.CustomerAutoLegalLiabilityDeductibleId = ""
                                l.CustomerAutoLegalLiabilityLimitOfLiabilityId = ""
                                l.HasFineArts = False

                                For Each b As QuickQuoteBuilding In l.Buildings
                                    Dim clsTypeIds As New List(Of String)
                                    If useBuildingClassificationList = True Then
                                        If b.BuildingClassifications IsNot Nothing AndAlso b.BuildingClassifications.Count > 0 Then
                                            For Each c As QuickQuoteClassification In b.BuildingClassifications
                                                clsTypeIds.Add(c.ClassificationTypeId)
                                            Next
                                        End If
                                    Else
                                        clsTypeIds.Add(b.ClassificationTypeId)
                                    End If

                                    If clsTypeIds IsNot Nothing AndAlso clsTypeIds.Count > 0 Then
                                        For Each ctId As String In clsTypeIds
                                            Dim stateQuoteCounter As Integer = 0
                                            For Each sq As QuickQuoteObject In stateQuotes
                                                stateQuoteCounter += 1
                                                Select Case ctId
                                                    Case "4875"     ' Barber shops (SERVICE)
                                                        If b.HasBarbersProfessionalLiability = True Then
                                                            sq.HasBarbersProfessionalLiability = True
                                                            sq.BarbersProfessionalLiabilityFullTimeEmpNum = b.BarbersProfessionalLiabilityFullTimeEmpNum
                                                            sq.BarbersProfessionalLiabilityPartTimeEmpNum = b.BarbersProfessionalLiabilityPartTimeEmpNum
                                                        End If
                                                        Exit Select
                                                    Case "4876", "5043"    ' Beauticians (SERVICE) 'Nail Salons (CAH 10/25/2021)
                                                        If b.HasBeauticiansProfessionalLiability = True Then
                                                            sq.HasBeauticiansProfessionalLiability = True
                                                            sq.BeauticiansProfessionalLiabilityFullTimeEmpNum = b.BeauticiansProfessionalLiabilityFullTimeEmpNum
                                                            sq.BeauticiansProfessionalLiabilityPartTimeEmpNum = b.BeauticiansProfessionalLiabilityPartTimeEmpNum
                                                        End If
                                                        Exit Select
                                                    Case "4961"     ' Funeral homes or chapels (SERVICE)
                                                        If b.HasFuneralDirectorsProfessionalLiability = True Then
                                                            sq.HasFuneralDirectorsProfessionalLiability = True
                                                            sq.FuneralDirectorsProfessionalLiabilityEmpNum = b.FuneralDirectorsProfessionalLiabilityEmpNum
                                                        End If
                                                        Exit Select
                                                    Case "5086"     ' Self-storage (SERVICE)
                                                        If b.HasSelfStorageFacility = True Then
                                                            sq.HasSelfStorageFacility = True
                                                            sq.SelfStorageFacilityLimit = b.SelfStorageFacilityLimit
                                                        End If
                                                        Exit Select
                                                    Case "2025", "2022", "2049", "2052", "4923"    ' printing, lithographing, photoengraving, engraving (SERVICE); added 4923 (Copying and Duplicating Stores) on 8/30/2012
                                                        If b.HasPrintersProfessionalLiability = True Then
                                                            sq.HasPrintersProfessionalLiability = True
                                                            sq.PrintersProfessionalLiabilityLocNum = b.PrintersProfessionalLiabilityLocNum
                                                        End If
                                                        Exit Select
                                                    Case "5127", "5125", "5372", "5373", "5374", "5375" ' Veterinarians office, veterinarians confo office (OFFICE)
                                                        If b.HasVeterinariansProfessionalLiability = True Then
                                                            sq.HasVeterinariansProfessionalLiability = True
                                                            sq.VeterinariansProfessionalLiabilityEmpNum = b.VeterinariansProfessionalLiabilityEmpNum
                                                        End If
                                                        Exit Select
                                                    Case "4981", "5052", "4980", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
                                                        If b.HasOpticalAndHearingAidProfessionalLiability = True Then
                                                            sq.HasOpticalAndHearingAidProfessionalLiability = True
                                                            sq.OpticalAndHearingAidProfessionalLiabilityEmpNum = b.OpticalAndHearingAidProfessionalLiabilityEmpNum
                                                        End If
                                                        Exit Select

                                                    Case "4934" ' Veterinarians office, veterinarians confo office (OFFICE)
                                                        If b.HasPharmacistProfessionalLiability = True Then
                                                            sq.HasPharmacistProfessionalLiability = True
                                                            sq.PharmacistAnnualGrossSales = b.PharmacistAnnualGrossSales
                                                        End If
                                                        Exit Select
                                                    Case "5440", "5441", "5438", "5439", "5155", "5156", "5177"
                                                        If b.HasApartmentBuildings = True Then
                                                            sq.HasApartmentBuildings = True
                                                            sq.NumberOfLocationsWithApartments = b.NumberOfLocationsWithApartments
                                                            If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                                If b.HasTenantAutoLegalLiability = True Then
                                                                    l.HasTenantAutoLegalLiability = True
                                                                    l.TenantAutoLegalLiabilityDeductibleId = b.TenantAutoLegalLiabilityDeductibleId
                                                                    l.TenantAutoLegalLiabilityLimitOfLiabilityId = b.TenantAutoLegalLiabilityLimitOfLiabilityId
                                                                End If
                                                            End If
                                                        End If
                                                        If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                            If b.HasFineArts = True Then
                                                                l.HasFineArts = True
                                                            End If
                                                        End If
                                                        Exit Select
                                                    Case "5264"
                                                        If b.HasMotelCoverage = True Then
                                                            sq.HasMotelCoverage = True
                                                            sq.MotelCoveragePerGuestLimitId = b.MotelCoveragePerGuestLimitId
                                                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositLimitId) Then
                                                                sq.MotelCoverageSafeDepositLimitId = b.MotelCoverageSafeDepositLimitId
                                                            End If
                                                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositDeductibleId) Then
                                                                sq.MotelCoverageSafeDepositDeductibleId = b.MotelCoverageSafeDepositDeductibleId
                                                            End If
                                                        End If
                                                        Exit Select
                                                    Case "5265", "5266"
                                                        If b.HasMotelCoverage = True Then
                                                            sq.HasMotelCoverage = True
                                                            sq.MotelCoveragePerGuestLimitId = b.MotelCoveragePerGuestLimitId
                                                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositLimitId) Then
                                                                sq.MotelCoverageSafeDepositLimitId = b.MotelCoverageSafeDepositLimitId
                                                            End If
                                                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositDeductibleId) Then
                                                                sq.MotelCoverageSafeDepositDeductibleId = b.MotelCoverageSafeDepositDeductibleId
                                                            End If
                                                        End If
                                                        If b.HasLiquorLiability = True Then
                                                            sq.HasLiquorLiability = True
                                                            sq.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                            sq.LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                            sq.LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId
                                                        End If

                                                        If b.HasRestaurantEndorsement = True Then
                                                            sq.HasRestaurantEndorsement = True
                                                            If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                                If b.HasCustomerAutoLegalLiability = True Then
                                                                    l.HasCustomerAutoLegalLiability = True
                                                                    l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
                                                                    l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
                                                                End If
                                                            End If
                                                        End If

                                                        Exit Select
                                                    Case "5392", "5412", "5393", "5394", "5413", "5395", "5414", "5396", "5415", "5397", "5416", "5398", "5417", "5399", "5418", "5400", "5401", "5419", "5402", "5403", "5404", "5420", "5405", "5421", "5406", "5407", "5422", "5408", "5410", "5411", "5383", "5385", "5386", "5388", "5389", "5391"
                                                        If b.HasRestaurantEndorsement = True Then
                                                            sq.HasRestaurantEndorsement = True
                                                            If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                                If b.HasCustomerAutoLegalLiability = True Then
                                                                    l.HasCustomerAutoLegalLiability = True
                                                                    l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
                                                                    l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
                                                                End If
                                                            End If
                                                        End If
                                                        If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                            If b.HasFineArts = True Then
                                                                l.HasFineArts = True
                                                            End If
                                                        End If
                                                        If b.HasLiquorLiability = True Then
                                                            sq.HasLiquorLiability = True
                                                            sq.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                            sq.LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                            sq.LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId
                                                        End If
                                                        Exit Select
                                                    Case "4920", "5179", "5180", "5181"
                                                        If b.HasRestaurantEndorsement = True Then
                                                            sq.HasRestaurantEndorsement = True
                                                            If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                                If b.HasCustomerAutoLegalLiability = True Then
                                                                    l.HasCustomerAutoLegalLiability = True
                                                                    l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
                                                                    l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
                                                                End If
                                                            End If
                                                        End If
                                                        If stateQuoteCounter = 1 Then 'here just so it's not setting the same location properties multiple times
                                                            If b.HasFineArts = True Then
                                                                l.HasFineArts = True
                                                            End If
                                                        End If
                                                        If b.HasLiquorLiability = True Then
                                                            sq.HasLiquorLiability = True
                                                            sq.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                            sq.LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                            sq.LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId
                                                        End If
                                                        Exit Select
                                                    Case "5066"
                                                        If b.HasPhotographyCoverage = True Then
                                                            sq.HasPhotographyCoverage = True
                                                            If b.HasPhotographyCoverageScheduledCoverages = True AndAlso b.PhotographyScheduledCoverages IsNot Nothing AndAlso b.PhotographyScheduledCoverages.Count > 0 Then
                                                                sq.HasPhotographyCoverageScheduledCoverages = True
                                                                sq.PhotographyScheduledCoverages = b.PhotographyScheduledCoverages
                                                            End If
                                                            If b.HasPhotographyMakeupAndHair = True Then
                                                                sq.HasPhotographyMakeupAndHair = True
                                                            End If
                                                        End If
                                                        Exit Select
                                                    Case "4919", "5178", "5429", "5430", "5431", "5432", "5241", "5242", "5243", "5244"
                                                        If b.HasLiquorLiability = True Then
                                                            sq.HasLiquorLiability = True
                                                            sq.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                            sq.LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                            sq.LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId
                                                        End If
                                                        Exit Select
                                                    Case "5222", "5223"
                                                        If b.HasResidentialCleaning = True Then
                                                            sq.HasResidentialCleaning = True
                                                        End If
                                                        Exit Select
                                                End Select
                                            Next
                                        Next
                                    End If
                                Next
                            End If
                        Next
                    End If
                End If
            End If
        End Sub
        Public Sub CopyProfessionalLiabilityCoveragesFromPolicyToBuildings(ByRef qqo As QuickQuoteObject, Optional ByVal useBuildingClassificationList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim stateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo)
                Dim firstStateQuote As QuickQuoteObject = Nothing
                If stateQuotes IsNot Nothing AndAlso stateQuotes.Count > 0 Then
                    firstStateQuote = stateQuotes.Item(0)
                End If
                Dim qqLocations As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates) 'added 9/14/2018
                'If qqo.VersionAndLobInfo.Locations IsNot Nothing AndAlso qqo.VersionAndLobInfo.Locations.Count > 0 Then
                'updated 9/14/2018
                If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                    'For Each l As QuickQuoteLocation In qqo.VersionAndLobInfo.Locations
                    'updated 9/14/2018
                    For Each l As QuickQuoteLocation In qqLocations
                        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                            For Each b As QuickQuoteBuilding In l.Buildings
                                b.HasResidentialCleaning = False
                                b.HasBarbersProfessionalLiability = False
                                b.BarbersProfessionalLiabilityFullTimeEmpNum = ""
                                b.BarbersProfessionalLiabilityPartTimeEmpNum = ""
                                b.HasBeauticiansProfessionalLiability = False
                                b.BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
                                b.BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
                                b.HasFuneralDirectorsProfessionalLiability = False
                                b.FuneralDirectorsProfessionalLiabilityEmpNum = ""
                                b.HasPrintersProfessionalLiability = False
                                b.PrintersProfessionalLiabilityLocNum = ""
                                b.HasSelfStorageFacility = False
                                b.SelfStorageFacilityLimit = ""
                                b.HasVeterinariansProfessionalLiability = False
                                b.VeterinariansProfessionalLiabilityEmpNum = ""
                                b.HasPharmacistProfessionalLiability = False
                                b.PharmacistAnnualGrossSales = ""
                                b.HasOpticalAndHearingAidProfessionalLiability = False
                                b.OpticalAndHearingAidProfessionalLiabilityEmpNum = ""
                                b.HasMotelCoverage = False
                                b.MotelCoveragePerGuestLimitId = ""
                                b.MotelCoverageSafeDepositDeductibleId = ""
                                b.MotelCoverageSafeDepositLimitId = ""
                                b.HasPhotographyCoverage = False
                                b.HasPhotographyMakeupAndHair = False
                                b.HasPhotographyCoverageScheduledCoverages = False
                                b.PhotographyScheduledCoverages = Nothing
                                b.HasApartmentBuildings = False
                                b.NumberOfLocationsWithApartments = ""
                                b.HasTenantAutoLegalLiability = False
                                b.TenantAutoLegalLiabilityLimitOfLiabilityId = ""
                                b.TenantAutoLegalLiabilityDeductibleId = ""
                                b.HasRestaurantEndorsement = False
                                b.HasCustomerAutoLegalLiability = False
                                b.CustomerAutoLegalLiabilityDeductibleId = ""
                                b.CustomerAutoLegalLiabilityLimitOfLiabilityId = ""
                                b.HasFineArts = False
                                b.HasLiquorLiability = False
                                b.LiquorLiabilityClassCodeTypeId = ""
                                b.LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
                                b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
                                b.LiquorLiabilityAggregateLimit = ""

                                If firstStateQuote IsNot Nothing Then
                                    Dim clsTypeIds As New List(Of String)
                                    If useBuildingClassificationList = True Then
                                        If b.BuildingClassifications IsNot Nothing AndAlso b.BuildingClassifications.Count > 0 Then
                                            For Each c As QuickQuoteClassification In b.BuildingClassifications
                                                clsTypeIds.Add(c.ClassificationTypeId)
                                            Next
                                        End If
                                    Else
                                        clsTypeIds.Add(b.ClassificationTypeId)
                                    End If

                                    If clsTypeIds IsNot Nothing AndAlso clsTypeIds.Count > 0 Then
                                        For Each ctId As String In clsTypeIds
                                            Select Case ctId
                                                Case "4875"     ' Barber shops (SERVICE)
                                                    If firstStateQuote.HasBarbersProfessionalLiability = True Then
                                                        b.HasBarbersProfessionalLiability = True
                                                        b.BarbersProfessionalLiabilityFullTimeEmpNum = firstStateQuote.BarbersProfessionalLiabilityFullTimeEmpNum
                                                        b.BarbersProfessionalLiabilityPartTimeEmpNum = firstStateQuote.BarbersProfessionalLiabilityPartTimeEmpNum
                                                    End If
                                                    Exit Select
                                                Case "4876", "5043"    ' Beauticians (SERVICE) 'Nail Salons (CAH 10/25/2021)
                                                    If firstStateQuote.HasBeauticiansProfessionalLiability = True Then
                                                        b.HasBeauticiansProfessionalLiability = True
                                                        b.BeauticiansProfessionalLiabilityFullTimeEmpNum = firstStateQuote.BeauticiansProfessionalLiabilityFullTimeEmpNum
                                                        b.BeauticiansProfessionalLiabilityPartTimeEmpNum = firstStateQuote.BeauticiansProfessionalLiabilityPartTimeEmpNum
                                                    End If
                                                    Exit Select
                                                Case "4961"     ' Funeral homes or chapels (SERVICE)
                                                    If firstStateQuote.HasFuneralDirectorsProfessionalLiability = True Then
                                                        b.HasFuneralDirectorsProfessionalLiability = True
                                                        b.FuneralDirectorsProfessionalLiabilityEmpNum = firstStateQuote.FuneralDirectorsProfessionalLiabilityEmpNum
                                                    End If
                                                    Exit Select
                                                Case "5086"     ' Self-storage (SERVICE)
                                                    If firstStateQuote.HasSelfStorageFacility = True Then
                                                        b.HasSelfStorageFacility = True
                                                        b.SelfStorageFacilityLimit = firstStateQuote.SelfStorageFacilityLimit
                                                    End If
                                                    Exit Select
                                                Case "5066" 'PhotographicEquipment
                                                    If firstStateQuote.HasPhotographyCoverage = True Then
                                                        b.HasPhotographyCoverage = True
                                                        If firstStateQuote.HasPhotographyCoverageScheduledCoverages = True AndAlso firstStateQuote.PhotographyScheduledCoverages IsNot Nothing AndAlso firstStateQuote.PhotographyScheduledCoverages.Count > 0 Then
                                                            b.HasPhotographyCoverageScheduledCoverages = True
                                                            b.PhotographyScheduledCoverages = firstStateQuote.PhotographyScheduledCoverages
                                                        End If
                                                        If firstStateQuote.HasPhotographyMakeupAndHair = True Then
                                                            b.HasPhotographyMakeupAndHair = True
                                                        End If
                                                    End If
                                                    Exit Select
                                                Case "2025", "2022", "2049", "2052", "4923"    ' printing, lithographing, photoengraving, engraving (SERVICE); added 4923 (Copying and Duplicating Stores) on 8/30/2012
                                                    If firstStateQuote.HasPrintersProfessionalLiability = True Then
                                                        b.HasPrintersProfessionalLiability = True
                                                        b.PrintersProfessionalLiabilityLocNum = firstStateQuote.PrintersProfessionalLiabilityLocNum
                                                    End If
                                                    Exit Select
                                                Case "5127", "5125", "5372", "5374", "5373", "5375" ' Veterinarians office, veterinarians confo office (OFFICE)
                                                    If firstStateQuote.HasVeterinariansProfessionalLiability = True Then
                                                        b.HasVeterinariansProfessionalLiability = True
                                                        b.VeterinariansProfessionalLiabilityEmpNum = firstStateQuote.VeterinariansProfessionalLiabilityEmpNum
                                                    End If
                                                    Exit Select
                                                Case "4981", "5052", "4980", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
                                                    If firstStateQuote.HasOpticalAndHearingAidProfessionalLiability = True Then
                                                        b.HasOpticalAndHearingAidProfessionalLiability = True
                                                        b.OpticalAndHearingAidProfessionalLiabilityEmpNum = firstStateQuote.OpticalAndHearingAidProfessionalLiabilityEmpNum
                                                    End If
                                                    Exit Select

                                                Case "5264"
                                                    If firstStateQuote.HasMotelCoverage = True Then
                                                        b.HasMotelCoverage = True
                                                        b.MotelCoveragePerGuestLimitId = firstStateQuote.MotelCoveragePerGuestLimitId
                                                        If Not String.IsNullOrWhiteSpace(firstStateQuote.MotelCoverageSafeDepositDeductibleId) Then
                                                            b.MotelCoverageSafeDepositDeductibleId = firstStateQuote.MotelCoverageSafeDepositDeductibleId
                                                        End If
                                                        If Not String.IsNullOrWhiteSpace(firstStateQuote.MotelCoverageSafeDepositLimitId) Then
                                                            b.MotelCoverageSafeDepositLimitId = firstStateQuote.MotelCoverageSafeDepositLimitId
                                                        End If
                                                    End If
                                                    Exit Select
                                                Case "5265", "5266"
                                                    If firstStateQuote.HasMotelCoverage = True Then
                                                        b.HasMotelCoverage = True
                                                        b.MotelCoveragePerGuestLimitId = firstStateQuote.MotelCoveragePerGuestLimitId
                                                        If Not String.IsNullOrWhiteSpace(firstStateQuote.MotelCoverageSafeDepositDeductibleId) Then
                                                            b.MotelCoverageSafeDepositDeductibleId = firstStateQuote.MotelCoverageSafeDepositDeductibleId
                                                        End If
                                                        If Not String.IsNullOrWhiteSpace(firstStateQuote.MotelCoverageSafeDepositLimitId) Then
                                                            b.MotelCoverageSafeDepositLimitId = firstStateQuote.MotelCoverageSafeDepositLimitId
                                                        End If
                                                    End If
                                                    If firstStateQuote.HasLiquorLiability Then
                                                        b.HasLiquorLiability = True
                                                        b.LiquorLiabilityAggregateLimit = firstStateQuote.LiquorLiabilityAggregateLimit
                                                        b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                        b.LiquorLiabilityAnnualGrossPackageSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                        b.LiquorLiabilityClassCodeTypeId = firstStateQuote.LiquorLiabilityClassCodeTypeId
                                                    End If

                                                    If firstStateQuote.HasRestaurantEndorsement = True Then
                                                        b.HasRestaurantEndorsement = True
                                                        If l.HasCustomerAutoLegalLiability = True Then
                                                            b.HasCustomerAutoLegalLiability = True
                                                            b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
                                                            b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
                                                        End If
                                                    End If

                                                    Exit Select
                                                Case "4934"
                                                    If firstStateQuote.HasPharmacistProfessionalLiability = True Then
                                                        b.HasPharmacistProfessionalLiability = True
                                                        b.PharmacistAnnualGrossSales = firstStateQuote.PharmacistAnnualGrossSales
                                                    End If
                                                    Exit Select
                                                Case "5440", "5441", "5438", "5439", "5155", "5156", "5177"
                                                    If firstStateQuote.HasApartmentBuildings = True Then
                                                        b.HasApartmentBuildings = True
                                                        b.NumberOfLocationsWithApartments = firstStateQuote.NumberOfLocationsWithApartments
                                                        If l.HasTenantAutoLegalLiability = True Then
                                                            b.HasTenantAutoLegalLiability = True
                                                            b.TenantAutoLegalLiabilityDeductibleId = l.TenantAutoLegalLiabilityDeductibleId
                                                            b.TenantAutoLegalLiabilityLimitOfLiabilityId = l.TenantAutoLegalLiabilityLimitOfLiabilityId
                                                        End If
                                                    End If
                                                    If l.HasFineArts = True Then
                                                        b.HasFineArts = True
                                                    End If
                                                    Exit Select
                                                Case "5392", "5412", "5393", "5394", "5413", "5395", "5414", "5396", "5415", "5397", "5416", "5398", "5417", "5399", "5418", "5400", "5401", "5419", "5402", "5403", "5404", "5420", "5405", "5421", "5406", "5407", "5422", "5408", "5410", "5411", "5383", "5385", "5386", "5388", "5389", "5391"
                                                    If firstStateQuote.HasRestaurantEndorsement = True Then
                                                        b.HasRestaurantEndorsement = True
                                                        If l.HasCustomerAutoLegalLiability = True Then
                                                            b.HasCustomerAutoLegalLiability = True
                                                            b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
                                                            b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
                                                        End If
                                                    End If
                                                    If l.HasFineArts = True Then
                                                        b.HasFineArts = True
                                                    End If
                                                    If firstStateQuote.HasLiquorLiability = True Then
                                                        b.HasLiquorLiability = True
                                                        b.LiquorLiabilityAggregateLimit = firstStateQuote.LiquorLiabilityAggregateLimit
                                                        b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                        b.LiquorLiabilityAnnualGrossPackageSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                        b.LiquorLiabilityClassCodeTypeId = firstStateQuote.LiquorLiabilityClassCodeTypeId
                                                    End If
                                                    Exit Select
                                                Case "4920", "5179", "5180", "5181"
                                                    If firstStateQuote.HasRestaurantEndorsement = True Then
                                                        b.HasRestaurantEndorsement = True
                                                        If l.HasCustomerAutoLegalLiability = True Then
                                                            b.HasCustomerAutoLegalLiability = True
                                                            b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
                                                            b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
                                                        End If
                                                    End If
                                                    If l.HasFineArts = True Then
                                                        b.HasFineArts = True
                                                    End If
                                                    If firstStateQuote.HasLiquorLiability = True Then
                                                        b.HasLiquorLiability = True
                                                        b.LiquorLiabilityAggregateLimit = firstStateQuote.LiquorLiabilityAggregateLimit
                                                        b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                        b.LiquorLiabilityAnnualGrossPackageSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                        b.LiquorLiabilityClassCodeTypeId = firstStateQuote.LiquorLiabilityClassCodeTypeId
                                                    End If
                                                    Exit Select
                                                Case "4919", "5178", "5429", "5430", "5431", "5432", "5241", "5242", "5243", "5244"
                                                    If firstStateQuote.HasLiquorLiability = True Then
                                                        b.HasLiquorLiability = True
                                                        b.LiquorLiabilityAggregateLimit = firstStateQuote.LiquorLiabilityAggregateLimit
                                                        b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                                                        b.LiquorLiabilityAnnualGrossPackageSalesReceipts = firstStateQuote.LiquorLiabilityAnnualGrossPackageSalesReceipts
                                                        b.LiquorLiabilityClassCodeTypeId = firstStateQuote.LiquorLiabilityClassCodeTypeId
                                                    End If
                                                    Exit Select
                                                Case "5222", "5223"
                                                    If firstStateQuote.HasResidentialCleaning = True Then
                                                        b.HasResidentialCleaning = True
                                                    End If
                                                    Exit Select
                                            End Select
                                        Next
                                    End If
                                End If
                            Next
                        End If
                    Next
                End If
            End If
        End Sub

        'added 9/7/2018
        Public Function AllDiamondDrivers(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of Diamond.Common.Objects.Policy.Driver) 'updated 9/13/2018 w/ optional param for multiStateLevel
            Dim diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver) = Nothing

            If diaImage IsNot Nothing Then
                ''1st check policy LOB
                'Dim riskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaImage.LOB)
                'If riskLevel IsNot Nothing AndAlso riskLevel.Drivers IsNot Nothing AndAlso riskLevel.Drivers.Count > 0 Then
                '    If diaDrivers Is Nothing Then
                '        diaDrivers = New List(Of Diamond.Common.Objects.Policy.Driver)
                '    End If
                '    For Each d As Diamond.Common.Objects.Policy.Driver In riskLevel.Drivers
                '        diaDrivers.Add(d)
                '    Next
                'End If

                ''next check packageParts
                'If diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                '    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                '        If pp IsNot Nothing Then
                '            Dim ppRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(pp.LOB)
                '            If ppRiskLevel IsNot Nothing AndAlso ppRiskLevel.Drivers IsNot Nothing AndAlso ppRiskLevel.Drivers.Count > 0 Then
                '                If diaDrivers Is Nothing Then
                '                    diaDrivers = New List(Of Diamond.Common.Objects.Policy.Driver)
                '                End If
                '                For Each d As Diamond.Common.Objects.Policy.Driver In ppRiskLevel.Drivers
                '                    diaDrivers.Add(d)
                '                Next
                '            End If
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageAndMultiStateLevel(diaImage, level, specificStateToGet:=specificStateToGet)
                If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        If diaLobExtended IsNot Nothing Then
                            Dim lobRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaLobExtended.DiamondLob)
                            If lobRiskLevel IsNot Nothing AndAlso lobRiskLevel.Drivers IsNot Nothing AndAlso lobRiskLevel.Drivers.Count > 0 Then
                                If diaDrivers Is Nothing Then
                                    diaDrivers = New List(Of Diamond.Common.Objects.Policy.Driver)
                                End If
                                For Each d As Diamond.Common.Objects.Policy.Driver In lobRiskLevel.Drivers
                                    diaDrivers.Add(d)
                                Next
                            End If
                        End If
                    Next
                End If
            End If

            Return diaDrivers
        End Function
        Public Function AllDiamondApplicants(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of Diamond.Common.Objects.Policy.Applicant) 'updated 9/13/2018 w/ optional param for multiStateLevel
            Dim diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant) = Nothing

            If diaImage IsNot Nothing Then
                ''1st check policy LOB
                'Dim riskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaImage.LOB)
                'If riskLevel IsNot Nothing AndAlso riskLevel.Applicants IsNot Nothing AndAlso riskLevel.Applicants.Count > 0 Then
                '    If diaApplicants Is Nothing Then
                '        diaApplicants = New List(Of Diamond.Common.Objects.Policy.Applicant)
                '    End If
                '    For Each a As Diamond.Common.Objects.Policy.Applicant In riskLevel.Applicants
                '        diaApplicants.Add(a)
                '    Next
                'End If

                ''next check packageParts
                'If diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                '    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                '        If pp IsNot Nothing Then
                '            Dim ppRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(pp.LOB)
                '            If ppRiskLevel IsNot Nothing AndAlso ppRiskLevel.Applicants IsNot Nothing AndAlso ppRiskLevel.Applicants.Count > 0 Then
                '                If diaApplicants Is Nothing Then
                '                    diaApplicants = New List(Of Diamond.Common.Objects.Policy.Applicant)
                '                End If
                '                For Each a As Diamond.Common.Objects.Policy.Applicant In ppRiskLevel.Applicants
                '                    diaApplicants.Add(a)
                '                Next
                '            End If
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageAndMultiStateLevel(diaImage, level, specificStateToGet:=specificStateToGet)
                If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        If diaLobExtended IsNot Nothing Then
                            Dim lobRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaLobExtended.DiamondLob)
                            If lobRiskLevel IsNot Nothing AndAlso lobRiskLevel.Applicants IsNot Nothing AndAlso lobRiskLevel.Applicants.Count > 0 Then
                                If diaApplicants Is Nothing Then
                                    diaApplicants = New List(Of Diamond.Common.Objects.Policy.Applicant)
                                End If
                                For Each a As Diamond.Common.Objects.Policy.Applicant In lobRiskLevel.Applicants
                                    diaApplicants.Add(a)
                                Next
                            End If
                        End If
                    Next
                End If
            End If

            Return diaApplicants
        End Function
        Public Function AllDiamondLocations(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of Diamond.Common.Objects.Policy.Location) 'updated 9/13/2018 w/ optional param for multiStateLevel
            Dim diaLocations As List(Of Diamond.Common.Objects.Policy.Location) = Nothing

            If diaImage IsNot Nothing Then
                ''1st check policy LOB
                'Dim riskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaImage.LOB)
                'If riskLevel IsNot Nothing AndAlso riskLevel.Locations IsNot Nothing AndAlso riskLevel.Locations.Count > 0 Then
                '    If diaLocations Is Nothing Then
                '        diaLocations = New List(Of Diamond.Common.Objects.Policy.Location)
                '    End If
                '    For Each l As Diamond.Common.Objects.Policy.Location In riskLevel.Locations
                '        diaLocations.Add(l)
                '    Next
                'End If

                ''next check packageParts
                'If diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                '    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                '        If pp IsNot Nothing Then
                '            Dim ppRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(pp.LOB)
                '            If ppRiskLevel IsNot Nothing AndAlso ppRiskLevel.Locations IsNot Nothing AndAlso ppRiskLevel.Locations.Count > 0 Then
                '                If diaLocations Is Nothing Then
                '                    diaLocations = New List(Of Diamond.Common.Objects.Policy.Location)
                '                End If
                '                For Each l As Diamond.Common.Objects.Policy.Location In ppRiskLevel.Locations
                '                    diaLocations.Add(l)
                '                Next
                '            End If
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageAndMultiStateLevel(diaImage, level, specificStateToGet:=specificStateToGet)
                If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        If diaLobExtended IsNot Nothing Then
                            Dim lobRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaLobExtended.DiamondLob)
                            If lobRiskLevel IsNot Nothing AndAlso lobRiskLevel.Locations IsNot Nothing AndAlso lobRiskLevel.Locations.Count > 0 Then
                                If diaLocations Is Nothing Then
                                    diaLocations = New List(Of Diamond.Common.Objects.Policy.Location)
                                End If
                                For Each l As Diamond.Common.Objects.Policy.Location In lobRiskLevel.Locations
                                    diaLocations.Add(l)
                                Next
                            End If
                        End If
                    Next
                End If
            End If

            Return diaLocations
        End Function
        Public Function AllDiamondOperators(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of Diamond.Common.Objects.Policy.Operator) 'added 9/10/2018; updated 9/13/2018 w/ optional param for multiStateLevel
            Dim diaOperators As List(Of Diamond.Common.Objects.Policy.Operator) = Nothing

            If diaImage IsNot Nothing Then
                ''1st check policy LOB
                'Dim riskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaImage.LOB)
                'If riskLevel IsNot Nothing AndAlso riskLevel.Operators IsNot Nothing AndAlso riskLevel.Operators.Count > 0 Then
                '    If diaOperators Is Nothing Then
                '        diaOperators = New List(Of Diamond.Common.Objects.Policy.Operator)
                '    End If
                '    For Each o As Diamond.Common.Objects.Policy.Operator In riskLevel.Operators
                '        diaOperators.Add(o)
                '    Next
                'End If

                ''next check packageParts
                'If diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                '    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                '        If pp IsNot Nothing Then
                '            Dim ppRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(pp.LOB)
                '            If ppRiskLevel IsNot Nothing AndAlso ppRiskLevel.Operators IsNot Nothing AndAlso ppRiskLevel.Operators.Count > 0 Then
                '                If diaOperators Is Nothing Then
                '                    diaOperators = New List(Of Diamond.Common.Objects.Policy.Operator)
                '                End If
                '                For Each o As Diamond.Common.Objects.Policy.Operator In ppRiskLevel.Operators
                '                    diaOperators.Add(o)
                '                Next
                '            End If
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageAndMultiStateLevel(diaImage, level, specificStateToGet:=specificStateToGet)
                If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        If diaLobExtended IsNot Nothing Then
                            Dim lobRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaLobExtended.DiamondLob)
                            If lobRiskLevel IsNot Nothing AndAlso lobRiskLevel.Operators IsNot Nothing AndAlso lobRiskLevel.Operators.Count > 0 Then
                                If diaOperators Is Nothing Then
                                    diaOperators = New List(Of Diamond.Common.Objects.Policy.Operator)
                                End If
                                For Each o As Diamond.Common.Objects.Policy.Operator In lobRiskLevel.Operators
                                    diaOperators.Add(o)
                                Next
                            End If
                        End If
                    Next
                End If
            End If

            Return diaOperators
        End Function
        Public Function AllDiamondVehicles(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of Diamond.Common.Objects.Policy.Vehicle)
            Dim diaVehicles As List(Of Diamond.Common.Objects.Policy.Vehicle) = Nothing

            If diaImage IsNot Nothing Then
                Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageAndMultiStateLevel(diaImage, level, specificStateToGet:=specificStateToGet)
                If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        If diaLobExtended IsNot Nothing Then
                            Dim lobRiskLevel As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(diaLobExtended.DiamondLob)
                            If lobRiskLevel IsNot Nothing AndAlso lobRiskLevel.Vehicles IsNot Nothing AndAlso lobRiskLevel.Vehicles.Count > 0 Then
                                If diaVehicles Is Nothing Then
                                    diaVehicles = New List(Of Diamond.Common.Objects.Policy.Vehicle)
                                End If
                                For Each d As Diamond.Common.Objects.Policy.Vehicle In lobRiskLevel.Vehicles
                                    diaVehicles.Add(d)
                                Next
                            End If
                        End If
                    Next
                End If
            End If

            Return diaVehicles
        End Function
        Public Function AllQuickQuoteDrivers(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteDriver) 'updated 9/13/2018 w/ optional param for multiStateLevel
            Dim qqDrivers As List(Of QuickQuoteDriver) = Nothing

            If qqo IsNot Nothing Then
                'If subQuotes Is Nothing Then
                '    subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                'End If
                'If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                '    For Each sq As QuickQuoteObject In subQuotes
                '        If sq IsNot Nothing AndAlso sq.Drivers IsNot Nothing AndAlso sq.Drivers.Count > 0 Then
                '            If qqDrivers Is Nothing Then
                '                qqDrivers = New List(Of QuickQuoteDriver)
                '            End If
                '            For Each d As QuickQuoteDriver In sq.Drivers
                '                qqDrivers.Add(d)
                '            Next
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.GoverningStateLevel AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None) Then
                    'level = MultiStateLevel.All
                    'level = MultiStateLevel.TopLevel
                    'updated 9/14/2018
                    level = MultiStateLevel.FirstStateQuote
                End If

                Dim includeTopLevel As Boolean = False
                Dim includeAllSubQuotes As Boolean = False
                Dim isStateSpecific As Boolean = False
                Dim exitAfterFirstSubQuote As Boolean = False 'added 9/14/2018

                Select Case level
                    Case MultiStateLevel.TopLevel
                        includeTopLevel = True
                    Case MultiStateLevel.MasterPartLevel
                        'not being used correctly yet
                        includeTopLevel = True
                    Case MultiStateLevel.PackagePartLevel
                        'not being used correctly yet
                        includeAllSubQuotes = True
                    Case MultiStateLevel.AllStates
                        includeAllSubQuotes = True
                    Case MultiStateLevel.GoverningStateLevel
                        isStateSpecific = True
                        specificStateToGet = qqo.QuickQuoteState
                    Case MultiStateLevel.StateSpecific
                        isStateSpecific = True
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If subQuotes Is Nothing Then
                            subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                        End If
                        If subQuotes Is Nothing OrElse subQuotes.Count < 1 OrElse subQuotes(0) Is Nothing Then
                            includeTopLevel = True
                        Else
                            includeAllSubQuotes = True
                            exitAfterFirstSubQuote = True
                        End If
                    Case Else 'All
                        includeTopLevel = True
                        includeAllSubQuotes = True
                End Select

                If includeTopLevel = True AndAlso includeAllSubQuotes = True Then
                    'check to make sure subQuotes wouldn't just return qqo, in which case the items would be duplicated
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count = 1 Then
                        includeTopLevel = False
                    End If
                End If

                If includeTopLevel = True Then
                    If qqo.Drivers IsNot Nothing AndAlso qqo.Drivers.Count > 0 Then
                        If qqDrivers Is Nothing Then
                            qqDrivers = New List(Of QuickQuoteDriver)
                        End If
                        For Each d As QuickQuoteDriver In qqo.Drivers
                            qqDrivers.Add(d)
                        Next
                    End If
                End If
                If includeAllSubQuotes = True Then
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                        For Each sq As QuickQuoteObject In subQuotes
                            If sq IsNot Nothing AndAlso sq.Drivers IsNot Nothing AndAlso sq.Drivers.Count > 0 Then
                                If qqDrivers Is Nothing Then
                                    qqDrivers = New List(Of QuickQuoteDriver)
                                End If
                                For Each d As QuickQuoteDriver In sq.Drivers
                                    qqDrivers.Add(d)
                                Next
                            End If
                            If exitAfterFirstSubQuote = True Then 'added 9/14/2018
                                Exit For
                            End If
                        Next
                    End If
                End If
                If isStateSpecific = True Then
                    Dim stateQuote As QuickQuoteObject = Nothing
                    If subQuotes IsNot Nothing Then
                        stateQuote = QuickQuoteObjectForState(subQuotes, specificStateToGet, addToListIfNeeded:=False)
                    Else
                        stateQuote = QuickQuoteObjectForState(qqo, specificStateToGet, addToListIfNeeded:=False)
                    End If
                    If stateQuote IsNot Nothing Then
                        If stateQuote.Drivers IsNot Nothing AndAlso stateQuote.Drivers.Count > 0 Then
                            If qqDrivers Is Nothing Then
                                qqDrivers = New List(Of QuickQuoteDriver)
                            End If
                            For Each d As QuickQuoteDriver In stateQuote.Drivers
                                qqDrivers.Add(d)
                            Next
                        End If
                    End If
                End If

            End If

            Return qqDrivers
        End Function
        Public Function AllQuickQuoteApplicants(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteApplicant) 'updated 9/13/2018 w/ optional param for multiStateLevel
            Dim qqApplicants As List(Of QuickQuoteApplicant) = Nothing

            If qqo IsNot Nothing Then
                'If subQuotes Is Nothing Then
                '    subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                'End If
                'If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                '    For Each sq As QuickQuoteObject In subQuotes
                '        If sq IsNot Nothing AndAlso sq.Applicants IsNot Nothing AndAlso sq.Applicants.Count > 0 Then
                '            If qqApplicants Is Nothing Then
                '                qqApplicants = New List(Of QuickQuoteApplicant)
                '            End If
                '            For Each a As QuickQuoteApplicant In sq.Applicants
                '                qqApplicants.Add(a)
                '            Next
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.GoverningStateLevel AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None) Then
                    'level = MultiStateLevel.All
                    'level = MultiStateLevel.TopLevel
                    'updated 9/14/2018
                    level = MultiStateLevel.FirstStateQuote
                End If

                Dim includeTopLevel As Boolean = False
                Dim includeAllSubQuotes As Boolean = False
                Dim isStateSpecific As Boolean = False
                Dim exitAfterFirstSubQuote As Boolean = False 'added 9/14/2018

                Select Case level
                    Case MultiStateLevel.TopLevel
                        includeTopLevel = True
                    Case MultiStateLevel.MasterPartLevel
                        'not being used correctly yet
                        includeTopLevel = True
                    Case MultiStateLevel.PackagePartLevel
                        'not being used correctly yet
                        includeAllSubQuotes = True
                    Case MultiStateLevel.AllStates
                        includeAllSubQuotes = True
                    Case MultiStateLevel.GoverningStateLevel
                        isStateSpecific = True
                        specificStateToGet = qqo.QuickQuoteState
                    Case MultiStateLevel.StateSpecific
                        isStateSpecific = True
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If subQuotes Is Nothing Then
                            subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                        End If
                        If subQuotes Is Nothing OrElse subQuotes.Count < 1 OrElse subQuotes(0) Is Nothing Then
                            includeTopLevel = True
                        Else
                            includeAllSubQuotes = True
                            exitAfterFirstSubQuote = True
                        End If
                    Case Else 'All
                        includeTopLevel = True
                        includeAllSubQuotes = True
                End Select

                If includeTopLevel = True AndAlso includeAllSubQuotes = True Then
                    'check to make sure subQuotes wouldn't just return qqo, in which case the items would be duplicated
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count = 1 Then
                        includeTopLevel = False
                    End If
                End If

                If includeTopLevel = True Then
                    If qqo.Applicants IsNot Nothing AndAlso qqo.Applicants.Count > 0 Then
                        If qqApplicants Is Nothing Then
                            qqApplicants = New List(Of QuickQuoteApplicant)
                        End If
                        For Each a As QuickQuoteApplicant In qqo.Applicants
                            qqApplicants.Add(a)
                        Next
                    End If
                End If
                If includeAllSubQuotes = True Then
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                        For Each sq As QuickQuoteObject In subQuotes
                            If sq IsNot Nothing AndAlso sq.Applicants IsNot Nothing AndAlso sq.Applicants.Count > 0 Then
                                If qqApplicants Is Nothing Then
                                    qqApplicants = New List(Of QuickQuoteApplicant)
                                End If
                                For Each a As QuickQuoteApplicant In sq.Applicants
                                    qqApplicants.Add(a)
                                Next
                            End If
                            If exitAfterFirstSubQuote = True Then 'added 9/14/2018
                                Exit For
                            End If
                        Next
                    End If
                End If
                If isStateSpecific = True Then
                    Dim stateQuote As QuickQuoteObject = Nothing
                    If subQuotes IsNot Nothing Then
                        stateQuote = QuickQuoteObjectForState(subQuotes, specificStateToGet, addToListIfNeeded:=False)
                    Else
                        stateQuote = QuickQuoteObjectForState(qqo, specificStateToGet, addToListIfNeeded:=False)
                    End If
                    If stateQuote IsNot Nothing Then
                        If stateQuote.Applicants IsNot Nothing AndAlso stateQuote.Applicants.Count > 0 Then
                            If qqApplicants Is Nothing Then
                                qqApplicants = New List(Of QuickQuoteApplicant)
                            End If
                            For Each a As QuickQuoteApplicant In stateQuote.Applicants
                                qqApplicants.Add(a)
                            Next
                        End If
                    End If
                End If

            End If

            Return qqApplicants
        End Function
        Public Function AllQuickQuoteLocations(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteLocation) 'updated 9/13/2018 w/ optional param for multiStateLevel
            Dim qqLocations As List(Of QuickQuoteLocation) = Nothing

            If qqo IsNot Nothing Then
                'If subQuotes Is Nothing Then
                '    subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                'End If
                'If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                '    For Each sq As QuickQuoteObject In subQuotes
                '        If sq IsNot Nothing AndAlso sq.Locations IsNot Nothing AndAlso sq.Locations.Count > 0 Then
                '            If qqLocations Is Nothing Then
                '                qqLocations = New List(Of QuickQuoteLocation)
                '            End If
                '            For Each l As QuickQuoteLocation In sq.Locations
                '                qqLocations.Add(l)
                '            Next
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.GoverningStateLevel AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None) Then
                    'level = MultiStateLevel.All
                    'level = MultiStateLevel.TopLevel
                    'updated 9/14/2018
                    level = MultiStateLevel.FirstStateQuote
                End If

                Dim includeTopLevel As Boolean = False
                Dim includeAllSubQuotes As Boolean = False
                Dim isStateSpecific As Boolean = False
                Dim exitAfterFirstSubQuote As Boolean = False 'added 9/14/2018

                Select Case level
                    Case MultiStateLevel.TopLevel
                        includeTopLevel = True
                    Case MultiStateLevel.MasterPartLevel
                        'not being used correctly yet
                        includeTopLevel = True
                    Case MultiStateLevel.PackagePartLevel
                        'not being used correctly yet
                        includeAllSubQuotes = True
                    Case MultiStateLevel.AllStates
                        includeAllSubQuotes = True
                    Case MultiStateLevel.GoverningStateLevel
                        isStateSpecific = True
                        specificStateToGet = qqo.QuickQuoteState
                    Case MultiStateLevel.StateSpecific
                        isStateSpecific = True
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If subQuotes Is Nothing Then
                            subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                        End If
                        If subQuotes Is Nothing OrElse subQuotes.Count < 1 OrElse subQuotes(0) Is Nothing Then
                            includeTopLevel = True
                        Else
                            includeAllSubQuotes = True
                            exitAfterFirstSubQuote = True
                        End If
                    Case Else 'All
                        includeTopLevel = True
                        includeAllSubQuotes = True
                End Select

                If includeAllSubQuotes = True AndAlso CopyLocationsBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                    'top level should already include all locations from subQuotes
                    includeAllSubQuotes = False
                    includeTopLevel = True
                End If

                If includeTopLevel = True AndAlso includeAllSubQuotes = True Then
                    'check to make sure subQuotes wouldn't just return qqo, in which case the items would be duplicated
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count = 1 Then
                        includeTopLevel = False
                    End If
                End If

                If includeTopLevel = True Then
                    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                        If qqLocations Is Nothing Then
                            qqLocations = New List(Of QuickQuoteLocation)
                        End If
                        For Each l As QuickQuoteLocation In qqo.Locations
                            qqLocations.Add(l)
                        Next
                    End If
                End If
                If includeAllSubQuotes = True Then
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                        For Each sq As QuickQuoteObject In subQuotes
                            If sq IsNot Nothing AndAlso sq.Locations IsNot Nothing AndAlso sq.Locations.Count > 0 Then
                                If qqLocations Is Nothing Then
                                    qqLocations = New List(Of QuickQuoteLocation)
                                End If
                                For Each l As QuickQuoteLocation In sq.Locations
                                    qqLocations.Add(l)
                                Next
                            End If
                            If exitAfterFirstSubQuote = True Then 'added 9/14/2018
                                Exit For
                            End If
                        Next
                    End If
                End If
                If isStateSpecific = True Then
                    Dim stateQuote As QuickQuoteObject = Nothing
                    If subQuotes IsNot Nothing Then
                        stateQuote = QuickQuoteObjectForState(subQuotes, specificStateToGet, addToListIfNeeded:=False)
                    Else
                        stateQuote = QuickQuoteObjectForState(qqo, specificStateToGet, addToListIfNeeded:=False)
                    End If
                    If stateQuote IsNot Nothing Then
                        If stateQuote.Locations IsNot Nothing AndAlso stateQuote.Locations.Count > 0 Then
                            If qqLocations Is Nothing Then
                                qqLocations = New List(Of QuickQuoteLocation)
                            End If
                            For Each l As QuickQuoteLocation In stateQuote.Locations
                                qqLocations.Add(l)
                            Next
                        End If
                    End If
                End If

            End If

            Return qqLocations
        End Function
        Public Function AllQuickQuoteOperators(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteOperator) 'added 9/10/2018; updated 9/13/2018 w/ optional param for multiStateLevel
            Dim qqOperators As List(Of QuickQuoteOperator) = Nothing

            If qqo IsNot Nothing Then
                'If subQuotes Is Nothing Then
                '    subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                'End If
                'If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                '    For Each sq As QuickQuoteObject In subQuotes
                '        If sq IsNot Nothing AndAlso sq.Operators IsNot Nothing AndAlso sq.Operators.Count > 0 Then
                '            If qqOperators Is Nothing Then
                '                qqOperators = New List(Of QuickQuoteOperator)
                '            End If
                '            For Each o As QuickQuoteOperator In sq.Operators
                '                qqOperators.Add(o)
                '            Next
                '        End If
                '    Next
                'End If

                'updated 9/13/2018
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.GoverningStateLevel AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None) Then
                    'level = MultiStateLevel.All
                    'level = MultiStateLevel.TopLevel
                    'updated 9/14/2018
                    level = MultiStateLevel.FirstStateQuote
                End If

                Dim includeTopLevel As Boolean = False
                Dim includeAllSubQuotes As Boolean = False
                Dim isStateSpecific As Boolean = False
                Dim exitAfterFirstSubQuote As Boolean = False 'added 9/14/2018

                Select Case level
                    Case MultiStateLevel.TopLevel
                        includeTopLevel = True
                    Case MultiStateLevel.MasterPartLevel
                        'not being used correctly yet
                        includeTopLevel = True
                    Case MultiStateLevel.PackagePartLevel
                        'not being used correctly yet
                        includeAllSubQuotes = True
                    Case MultiStateLevel.AllStates
                        includeAllSubQuotes = True
                    Case MultiStateLevel.GoverningStateLevel
                        isStateSpecific = True
                        specificStateToGet = qqo.QuickQuoteState
                    Case MultiStateLevel.StateSpecific
                        isStateSpecific = True
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If subQuotes Is Nothing Then
                            subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                        End If
                        If subQuotes Is Nothing OrElse subQuotes.Count < 1 OrElse subQuotes(0) Is Nothing Then
                            includeTopLevel = True
                        Else
                            includeAllSubQuotes = True
                            exitAfterFirstSubQuote = True
                        End If
                    Case Else 'All
                        includeTopLevel = True
                        includeAllSubQuotes = True
                End Select

                If includeTopLevel = True AndAlso includeAllSubQuotes = True Then
                    'check to make sure subQuotes wouldn't just return qqo, in which case the items would be duplicated
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count = 1 Then
                        includeTopLevel = False
                    End If
                End If

                If includeTopLevel = True Then
                    If qqo.Operators IsNot Nothing AndAlso qqo.Operators.Count > 0 Then
                        If qqOperators Is Nothing Then
                            qqOperators = New List(Of QuickQuoteOperator)
                        End If
                        For Each o As QuickQuoteOperator In qqo.Operators
                            qqOperators.Add(o)
                        Next
                    End If
                End If
                If includeAllSubQuotes = True Then
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                        For Each sq As QuickQuoteObject In subQuotes
                            If sq IsNot Nothing AndAlso sq.Operators IsNot Nothing AndAlso sq.Operators.Count > 0 Then
                                If qqOperators Is Nothing Then
                                    qqOperators = New List(Of QuickQuoteOperator)
                                End If
                                For Each o As QuickQuoteOperator In sq.Operators
                                    qqOperators.Add(o)
                                Next
                            End If
                            If exitAfterFirstSubQuote = True Then 'added 9/14/2018
                                Exit For
                            End If
                        Next
                    End If
                End If
                If isStateSpecific = True Then
                    Dim stateQuote As QuickQuoteObject = Nothing
                    If subQuotes IsNot Nothing Then
                        stateQuote = QuickQuoteObjectForState(subQuotes, specificStateToGet, addToListIfNeeded:=False)
                    Else
                        stateQuote = QuickQuoteObjectForState(qqo, specificStateToGet, addToListIfNeeded:=False)
                    End If
                    If stateQuote IsNot Nothing Then
                        If stateQuote.Operators IsNot Nothing AndAlso stateQuote.Operators.Count > 0 Then
                            If qqOperators Is Nothing Then
                                qqOperators = New List(Of QuickQuoteOperator)
                            End If
                            For Each o As QuickQuoteOperator In stateQuote.Operators
                                qqOperators.Add(o)
                            Next
                        End If
                    End If
                End If

            End If

            Return qqOperators
        End Function
        Public Function AllQuickQuoteVehicles(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteVehicle)
            Dim qqVehicles As List(Of QuickQuoteVehicle) = Nothing

            If qqo IsNot Nothing Then
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.GoverningStateLevel AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None) Then
                    'level = MultiStateLevel.All
                    'level = MultiStateLevel.TopLevel
                    'updated 9/14/2018
                    level = MultiStateLevel.FirstStateQuote
                End If

                Dim includeTopLevel As Boolean = False
                Dim includeAllSubQuotes As Boolean = False
                Dim isStateSpecific As Boolean = False
                Dim exitAfterFirstSubQuote As Boolean = False 'added 9/14/2018

                Select Case level
                    Case MultiStateLevel.TopLevel
                        includeTopLevel = True
                    Case MultiStateLevel.MasterPartLevel
                        'not being used correctly yet
                        includeTopLevel = True
                    Case MultiStateLevel.PackagePartLevel
                        'not being used correctly yet
                        includeAllSubQuotes = True
                    Case MultiStateLevel.AllStates
                        includeAllSubQuotes = True
                    Case MultiStateLevel.GoverningStateLevel
                        isStateSpecific = True
                        specificStateToGet = qqo.QuickQuoteState
                    Case MultiStateLevel.StateSpecific
                        isStateSpecific = True
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If subQuotes Is Nothing Then
                            subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                        End If
                        If subQuotes Is Nothing OrElse subQuotes.Count < 1 OrElse subQuotes(0) Is Nothing Then
                            includeTopLevel = True
                        Else
                            includeAllSubQuotes = True
                            exitAfterFirstSubQuote = True
                        End If
                    Case Else 'All
                        includeTopLevel = True
                        includeAllSubQuotes = True
                End Select

                If includeAllSubQuotes = True AndAlso CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(qqo.LobType) = True Then
                    'top level should already include all vehicles from subQuotes
                    includeAllSubQuotes = False
                    includeTopLevel = True
                End If

                If includeTopLevel = True AndAlso includeAllSubQuotes = True Then
                    'check to make sure subQuotes wouldn't just return qqo, in which case the items would be duplicated
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count = 1 Then
                        includeTopLevel = False
                    End If
                End If

                If includeTopLevel = True Then
                    If qqo.Vehicles IsNot Nothing AndAlso qqo.Vehicles.Count > 0 Then
                        If qqVehicles Is Nothing Then
                            qqVehicles = New List(Of QuickQuoteVehicle)
                        End If
                        For Each v As QuickQuoteVehicle In qqo.Vehicles
                            qqVehicles.Add(v)
                        Next
                    End If
                End If
                If includeAllSubQuotes = True Then
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                        For Each sq As QuickQuoteObject In subQuotes
                            If sq IsNot Nothing AndAlso sq.Vehicles IsNot Nothing AndAlso sq.Vehicles.Count > 0 Then
                                If qqVehicles Is Nothing Then
                                    qqVehicles = New List(Of QuickQuoteVehicle)
                                End If
                                For Each v As QuickQuoteVehicle In sq.Vehicles
                                    qqVehicles.Add(v)
                                Next
                            End If
                            If exitAfterFirstSubQuote = True Then 'added 9/14/2018
                                Exit For
                            End If
                        Next
                    End If
                End If
                If isStateSpecific = True Then
                    Dim stateQuote As QuickQuoteObject = Nothing
                    If subQuotes IsNot Nothing Then
                        stateQuote = QuickQuoteObjectForState(subQuotes, specificStateToGet, addToListIfNeeded:=False)
                    Else
                        stateQuote = QuickQuoteObjectForState(qqo, specificStateToGet, addToListIfNeeded:=False)
                    End If
                    If stateQuote IsNot Nothing Then
                        If stateQuote.Vehicles IsNot Nothing AndAlso stateQuote.Vehicles.Count > 0 Then
                            If qqVehicles Is Nothing Then
                                qqVehicles = New List(Of QuickQuoteVehicle)
                            End If
                            For Each v As QuickQuoteVehicle In stateQuote.Vehicles
                                qqVehicles.Add(v)
                            Next
                        End If
                    End If
                End If

            End If

            Return qqVehicles
        End Function

        'added 9/11/2018
        Private Function DiamondLobAndPropertiesForImage(ByRef diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal loadStateAndLobStuff As Boolean = False) As DiamondLobAndVariousProperties
            Dim diaLobExtended As DiamondLobAndVariousProperties = Nothing

            If diaImage IsNot Nothing Then
                diaLobExtended = New DiamondLobAndVariousProperties
                With diaLobExtended
                    .DiamondLob = diaImage.LOB
                    .VersionId = diaImage.VersionId
                End With
                If loadStateAndLobStuff = True Then
                    LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtended)
                End If
            End If

            Return diaLobExtended
        End Function
        Private Function DiamondLobAndPropertiesForPackagePart(ByRef diaPackagePart As Diamond.Common.Objects.Policy.PackagePart, Optional ByVal loadStateAndLobStuff As Boolean = False) As DiamondLobAndVariousProperties
            Dim diaLobExtended As DiamondLobAndVariousProperties = Nothing

            If diaPackagePart IsNot Nothing Then
                diaLobExtended = New DiamondLobAndVariousProperties
                With diaLobExtended
                    .DiamondLob = diaPackagePart.LOB
                    .VersionId = diaPackagePart.VersionId
                End With
                If loadStateAndLobStuff = True Then
                    LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtended)
                End If
            End If

            Return diaLobExtended
        End Function
        Public Function DiamondLobAndPropertiesListForImage(ByRef diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal loadStateAndLobStuff As Boolean = False) As List(Of DiamondLobAndVariousProperties)
            Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = Nothing

            If diaImage IsNot Nothing Then
                diaLobExtendedList = New List(Of DiamondLobAndVariousProperties)

                Dim diaLobExtendedImg As DiamondLobAndVariousProperties = DiamondLobAndPropertiesForImage(diaImage, loadStateAndLobStuff:=loadStateAndLobStuff)
                If diaLobExtendedImg IsNot Nothing Then
                    diaLobExtendedImg.Level = DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel
                    diaLobExtendedList.Add(diaLobExtendedImg)
                End If

                If diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                        If pp IsNot Nothing Then
                            Dim diaLobExtendedPP As DiamondLobAndVariousProperties = DiamondLobAndPropertiesForPackagePart(pp, loadStateAndLobStuff:=loadStateAndLobStuff)
                            If diaLobExtendedPP IsNot Nothing Then
                                diaLobExtendedPP.Level = DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel
                                diaLobExtendedList.Add(diaLobExtendedPP)
                            End If
                        End If
                    Next
                End If
            End If

            Return diaLobExtendedList
        End Function
        Public Sub LoadStateAndLobStuffForDiamondLobAndProperties(ByRef diaLobExtended As DiamondLobAndVariousProperties)
            If diaLobExtended IsNot Nothing AndAlso diaLobExtended.VersionId > 0 Then
                Dim strLobId As String = ""
                Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                Dim strStateId As String = ""
                Dim strActualLobId As String = ""
                SetLobAndStateStuffFromDiamondVersionId(diaLobExtended.VersionId.ToString, strLobId, lobType, strStateId, defaultStateToIndiana:=False, actualLobId:=strActualLobId)
                With diaLobExtended
                    .StateId = IntegerForString(strStateId)
                    .LobId = IntegerForString(strLobId)
                    .ActualLobId = IntegerForString(strActualLobId)
                    .LobType = lobType
                End With
            End If
        End Sub
        Public Sub LoadStateAndLobStuffForDiamondLobAndPropertiesList(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties))
            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count Then
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    If diaLobExtended IsNot Nothing Then
                        LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtended)
                    End If
                Next
            End If
        End Sub
        'added 9/12/2018
        Public Enum MultiStateLevel
            None = 0
            All = 1
            TopLevel = 2 'would be the same as AllStates and GoverningStateLevel for single-state
            MasterPartLevel = 3 'specific to multi-state format
            PackagePartLevel = 4
            AllStates = 5 'would be the same as TopLevel and GoverningStateLevel for single-state
            GoverningStateLevel = 6 'would be the same as TopLevel and AllStates for single-state
            StateSpecific = 7
            FirstStateQuote = 8 'added 9/14/2018; will be used for GoverningState when state is not determined at top level
        End Enum
        Public Function DiamondLobAndPropertiesListForMultiStateLevel(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), ByVal level As MultiStateLevel, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of DiamondLobAndVariousProperties)
            Dim filteredLobExtendedList As List(Of DiamondLobAndVariousProperties) = Nothing

            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If

                'Dim needsLoadedList As Boolean = False

                Dim diaLobExtendedTopLevel As DiamondLobAndVariousProperties = Nothing
                Dim diaLobExtendedTopLevelLoaded As Boolean = False
                Dim diaLobExtendedListPackageLevel As List(Of DiamondLobAndVariousProperties) = Nothing
                Dim diaLobExtendedListPackageLevelLoaded As Boolean = False
                'Dim diaLobExtendedGovState As DiamondLobAndVariousProperties = Nothing
                'Dim diaLobExtendedGovStateLoaded As Boolean = False

                Select Case level
                    Case MultiStateLevel.TopLevel
                        If diaLobExtendedTopLevelLoaded = False Then
                            diaLobExtendedTopLevel = DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel)
                            diaLobExtendedTopLevelLoaded = True
                        End If
                    Case MultiStateLevel.MasterPartLevel
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                    Case MultiStateLevel.PackagePartLevel
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                    Case MultiStateLevel.AllStates
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        If diaLobExtendedListPackageLevel Is Nothing OrElse diaLobExtendedListPackageLevel.Count = 0 Then
                            level = MultiStateLevel.TopLevel
                        Else
                            'needsLoadedList = True
                        End If
                    Case MultiStateLevel.GoverningStateLevel
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        If diaLobExtendedListPackageLevel Is Nothing OrElse diaLobExtendedListPackageLevel.Count = 0 Then
                            level = MultiStateLevel.TopLevel
                        Else
                            'needsLoadedList = True
                        End If
                    Case MultiStateLevel.StateSpecific
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        'needsLoadedList = True
                        If diaLobExtendedListPackageLevel Is Nothing OrElse diaLobExtendedListPackageLevel.Count = 0 Then
                            'validate against TopLevel
                        Else
                            'validate against PackageLevel
                        End If
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        If diaLobExtendedListPackageLevel Is Nothing OrElse diaLobExtendedListPackageLevel.Count = 0 Then
                            level = MultiStateLevel.TopLevel
                        End If
                    Case Else 'All

                End Select

                Select Case level
                    Case MultiStateLevel.TopLevel
                        If diaLobExtendedTopLevelLoaded = False Then
                            diaLobExtendedTopLevel = DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel)
                            diaLobExtendedTopLevelLoaded = True
                        End If
                        If diaLobExtendedTopLevel IsNot Nothing Then
                            If filteredLobExtendedList Is Nothing Then
                                filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                            End If
                            filteredLobExtendedList.Add(diaLobExtendedTopLevel)
                        End If
                    Case MultiStateLevel.MasterPartLevel
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        If diaLobExtendedListPackageLevel IsNot Nothing AndAlso diaLobExtendedListPackageLevel.Count > 0 Then
                            Dim diaLobExtendedMasterPackagePart As DiamondLobAndVariousProperties = Nothing
                            Dim diaLobExtendedListNonMasterPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing
                            Dim diaLobExtendedListNonPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing

                            SeparateDiamondLobAndPropertiesListBetweenMasterAndNonMasterPackageParts(diaLobExtendedListPackageLevel, diaLobExtendedMasterPackagePart, diaLobExtendedListNonMasterPackageParts, diaLobExtendedListNonPackageParts)
                            If diaLobExtendedMasterPackagePart IsNot Nothing Then
                                If filteredLobExtendedList Is Nothing Then
                                    filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                End If
                                filteredLobExtendedList.Add(diaLobExtendedMasterPackagePart)
                            End If
                        End If
                    Case MultiStateLevel.PackagePartLevel
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        filteredLobExtendedList = diaLobExtendedListPackageLevel
                    Case MultiStateLevel.AllStates
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        If diaLobExtendedListPackageLevel IsNot Nothing AndAlso diaLobExtendedListPackageLevel.Count > 0 Then
                            Dim diaLobExtendedMasterPackagePart As DiamondLobAndVariousProperties = Nothing
                            Dim diaLobExtendedListNonMasterPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing
                            Dim diaLobExtendedListNonPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing

                            SeparateDiamondLobAndPropertiesListBetweenMasterAndNonMasterPackageParts(diaLobExtendedListPackageLevel, diaLobExtendedMasterPackagePart, diaLobExtendedListNonMasterPackageParts, diaLobExtendedListNonPackageParts)
                            If diaLobExtendedListNonMasterPackageParts IsNot Nothing AndAlso diaLobExtendedListNonMasterPackageParts.Count > 0 Then
                                LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(diaLobExtendedListNonMasterPackageParts)
                                Dim stateIds As List(Of Integer) = StateIdsForDiamondLobAndPropertiesList(diaLobExtendedListNonMasterPackageParts)
                                If stateIds IsNot Nothing AndAlso stateIds.Count > 0 Then
                                    For Each sId As Integer In stateIds
                                        Dim diaLobExtendedState As DiamondLobAndVariousProperties = DiamondLobAndPropertiesObjectForStateId(diaLobExtendedListNonMasterPackageParts, sId)
                                        If diaLobExtendedState IsNot Nothing Then
                                            If filteredLobExtendedList Is Nothing Then
                                                filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                            End If
                                            filteredLobExtendedList.Add(diaLobExtendedState)
                                        End If
                                    Next
                                Else
                                    'no states in packageParts so just use TopLevel
                                    If diaLobExtendedTopLevelLoaded = False Then
                                        diaLobExtendedTopLevel = DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel)
                                        diaLobExtendedTopLevelLoaded = True
                                    End If
                                    If diaLobExtendedTopLevel IsNot Nothing Then
                                        If filteredLobExtendedList Is Nothing Then
                                            filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                        End If
                                        filteredLobExtendedList.Add(diaLobExtendedTopLevel)
                                    End If
                                End If
                            End If
                        End If
                    Case MultiStateLevel.GoverningStateLevel
                        If diaLobExtendedTopLevelLoaded = False Then
                            diaLobExtendedTopLevel = DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel)
                            diaLobExtendedTopLevelLoaded = True
                        End If
                        If diaLobExtendedTopLevel IsNot Nothing Then
                            If diaLobExtendedListPackageLevelLoaded = False Then
                                diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                                diaLobExtendedListPackageLevelLoaded = True
                            End If
                            Dim useTopLevel As Boolean = False
                            If diaLobExtendedListPackageLevel IsNot Nothing AndAlso diaLobExtendedListPackageLevel.Count > 0 Then
                                If DiamondLobAndPropertiesObjectIsLoaded(diaLobExtendedTopLevel) = False Then
                                    LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtendedTopLevel)
                                End If
                                If diaLobExtendedTopLevel.StateId > 0 Then
                                    Dim diaLobExtendedMasterPackagePart As DiamondLobAndVariousProperties = Nothing
                                    Dim diaLobExtendedListNonMasterPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing
                                    Dim diaLobExtendedListNonPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing

                                    SeparateDiamondLobAndPropertiesListBetweenMasterAndNonMasterPackageParts(diaLobExtendedListPackageLevel, diaLobExtendedMasterPackagePart, diaLobExtendedListNonMasterPackageParts, diaLobExtendedListNonPackageParts)
                                    If diaLobExtendedListNonMasterPackageParts IsNot Nothing AndAlso diaLobExtendedListNonMasterPackageParts.Count > 0 Then
                                        LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(diaLobExtendedListNonMasterPackageParts)
                                        Dim diaLobExtendedGovState As DiamondLobAndVariousProperties = DiamondLobAndPropertiesObjectForStateId(diaLobExtendedListNonMasterPackageParts, diaLobExtendedTopLevel.StateId)
                                        If diaLobExtendedGovState IsNot Nothing Then
                                            If filteredLobExtendedList Is Nothing Then
                                                filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                            End If
                                            filteredLobExtendedList.Add(diaLobExtendedGovState)
                                        Else
                                            useTopLevel = True
                                        End If
                                    Else
                                        useTopLevel = True
                                    End If
                                Else
                                    useTopLevel = True
                                End If
                            Else
                                useTopLevel = True
                            End If
                            If useTopLevel = True Then
                                If filteredLobExtendedList Is Nothing Then
                                    filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                End If
                                filteredLobExtendedList.Add(diaLobExtendedTopLevel)
                            End If
                        End If
                    Case MultiStateLevel.StateSpecific
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        'needsLoadedList = True
                        If diaLobExtendedListPackageLevel Is Nothing OrElse diaLobExtendedListPackageLevel.Count = 0 Then
                            'validate against TopLevel
                            If diaLobExtendedTopLevelLoaded = False Then
                                diaLobExtendedTopLevel = DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel)
                                diaLobExtendedTopLevelLoaded = True
                            End If
                            If diaLobExtendedTopLevel IsNot Nothing Then
                                If DiamondLobAndPropertiesObjectIsLoaded(diaLobExtendedTopLevel) = False Then
                                    LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtendedTopLevel)
                                End If
                                If diaLobExtendedTopLevel.QuickQuoteState = specificStateToGet Then
                                    If filteredLobExtendedList Is Nothing Then
                                        filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                    End If
                                    filteredLobExtendedList.Add(diaLobExtendedTopLevel)
                                End If
                            End If
                        Else
                            'validate against PackageLevel
                            Dim diaLobExtendedMasterPackagePart As DiamondLobAndVariousProperties = Nothing
                            Dim diaLobExtendedListNonMasterPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing
                            Dim diaLobExtendedListNonPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing

                            SeparateDiamondLobAndPropertiesListBetweenMasterAndNonMasterPackageParts(diaLobExtendedListPackageLevel, diaLobExtendedMasterPackagePart, diaLobExtendedListNonMasterPackageParts, diaLobExtendedListNonPackageParts)
                            If diaLobExtendedListNonMasterPackageParts IsNot Nothing AndAlso diaLobExtendedListNonMasterPackageParts.Count > 0 Then
                                LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(diaLobExtendedListNonMasterPackageParts)
                                Dim diaLobExtendedState As DiamondLobAndVariousProperties = DiamondLobAndPropertiesObjectForStateId(diaLobExtendedListNonMasterPackageParts, DiamondStateIdForQuickQuoteState(specificStateToGet))
                                If diaLobExtendedState IsNot Nothing Then
                                    If filteredLobExtendedList Is Nothing Then
                                        filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                    End If
                                    filteredLobExtendedList.Add(diaLobExtendedState)
                                End If
                            End If
                        End If
                    Case MultiStateLevel.FirstStateQuote 'added 9/14/2018
                        If diaLobExtendedListPackageLevelLoaded = False Then
                            diaLobExtendedListPackageLevel = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel)
                            diaLobExtendedListPackageLevelLoaded = True
                        End If
                        Dim useTopLevel As Boolean = False
                        If diaLobExtendedListPackageLevel IsNot Nothing AndAlso diaLobExtendedListPackageLevel.Count > 0 Then
                            Dim diaLobExtendedMasterPackagePart As DiamondLobAndVariousProperties = Nothing
                            Dim diaLobExtendedListNonMasterPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing
                            Dim diaLobExtendedListNonPackageParts As List(Of DiamondLobAndVariousProperties) = Nothing

                            SeparateDiamondLobAndPropertiesListBetweenMasterAndNonMasterPackageParts(diaLobExtendedListPackageLevel, diaLobExtendedMasterPackagePart, diaLobExtendedListNonMasterPackageParts, diaLobExtendedListNonPackageParts)
                            If diaLobExtendedListNonMasterPackageParts IsNot Nothing AndAlso diaLobExtendedListNonMasterPackageParts.Count > 0 Then
                                LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(diaLobExtendedListNonMasterPackageParts)
                                Dim stateIds As List(Of Integer) = StateIdsForDiamondLobAndPropertiesList(diaLobExtendedListNonMasterPackageParts)
                                If stateIds IsNot Nothing AndAlso stateIds.Count > 0 Then
                                    Dim addedOne As Boolean = False
                                    For Each sId As Integer In stateIds
                                        Dim diaLobExtendedState As DiamondLobAndVariousProperties = DiamondLobAndPropertiesObjectForStateId(diaLobExtendedListNonMasterPackageParts, sId)
                                        If diaLobExtendedState IsNot Nothing Then
                                            If filteredLobExtendedList Is Nothing Then
                                                filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                            End If
                                            filteredLobExtendedList.Add(diaLobExtendedState)
                                            addedOne = True
                                            Exit For
                                        End If
                                    Next
                                    If addedOne = False Then
                                        useTopLevel = True
                                    End If
                                Else
                                    'no states in packageParts so just use TopLevel
                                    useTopLevel = True
                                End If
                            Else
                                useTopLevel = True
                            End If
                        Else
                            useTopLevel = True
                        End If
                        If useTopLevel = True Then
                            If diaLobExtendedTopLevelLoaded = False Then
                                diaLobExtendedTopLevel = DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(diaLobExtendedList, DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel)
                                diaLobExtendedTopLevelLoaded = True
                            End If
                            If diaLobExtendedTopLevel IsNot Nothing Then
                                If filteredLobExtendedList Is Nothing Then
                                    filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                End If
                                filteredLobExtendedList.Add(diaLobExtendedTopLevel)
                            End If
                        End If
                    Case Else 'All
                        filteredLobExtendedList = diaLobExtendedList
                End Select



                'If needsLoadedList = True Then
                '    'Dim unLoadedPositions As List(Of Integer) = Nothing
                '    'Dim listAlreadyLoaded As Boolean = DiamondLobAndPropertiesListIsLoaded(diaLobExtendedList, unLoadedPositions:=unLoadedPositions)

                '    'If listAlreadyLoaded = False AndAlso unLoadedPositions IsNot Nothing AndAlso unLoadedPositions.Count > 0 Then
                '    '    If unLoadedPositions.Count = diaLobExtendedList.Count Then
                '    '        LoadStateAndLobStuffForDiamondLobAndPropertiesList(diaLobExtendedList)
                '    '    Else
                '    '        Dim listPosition As Integer = 0
                '    '        For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                '    '            listPosition += 1
                '    '            If unLoadedPositions.Contains(listPosition) = True Then
                '    '                LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtended)
                '    '            End If
                '    '        Next
                '    '    End If
                '    'End If
                '    'updated 9/13/2018 to use common method
                '    LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(diaLobExtendedList)
                'End If
            End If

            Return filteredLobExtendedList
        End Function
        Public Function DiamondLobAndPropertiesObjectIsLoaded(ByRef diaLobExtended As DiamondLobAndVariousProperties) As Boolean
            Dim isLoaded As Boolean = False

            If diaLobExtended IsNot Nothing AndAlso diaLobExtended.VersionId > 0 AndAlso diaLobExtended.StateId > 0 AndAlso diaLobExtended.LobId > 0 Then
                isLoaded = True
            End If

            Return isLoaded
        End Function
        Public Function DiamondLobAndPropertiesListIsLoaded(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), Optional ByRef loadedPositions As List(Of Integer) = Nothing, Optional ByRef unLoadedPositions As List(Of Integer) = Nothing) As Boolean
            Dim isLoaded As Boolean = False
            loadedPositions = Nothing
            unLoadedPositions = Nothing

            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                Dim lobPosition As Integer = 0
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    lobPosition += 1
                    If DiamondLobAndPropertiesObjectIsLoaded(diaLobExtended) = True Then
                        AddIntegerToIntegerList(lobPosition, loadedPositions)
                    Else
                        AddIntegerToIntegerList(lobPosition, unLoadedPositions)
                    End If
                Next
                If unLoadedPositions Is Nothing OrElse unLoadedPositions.Count = 0 Then
                    isLoaded = True
                End If
            End If

            Return isLoaded
        End Function
        Public Function DiamondLobAndPropertiesListForImageOrPackagePartLevel(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), ByVal level As DiamondLobAndVariousProperties.ImageOrPackagePartLevel) As List(Of DiamondLobAndVariousProperties)
            Dim filteredLobExtendedList As List(Of DiamondLobAndVariousProperties) = Nothing

            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    If diaLobExtended IsNot Nothing Then
                        If System.Enum.IsDefined(GetType(DiamondLobAndVariousProperties.ImageOrPackagePartLevel), level) = True AndAlso level <> DiamondLobAndVariousProperties.ImageOrPackagePartLevel.None Then
                            'find match
                            If diaLobExtended.Level = level Then
                                If filteredLobExtendedList Is Nothing Then
                                    filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                End If
                                filteredLobExtendedList.Add(diaLobExtended)
                            End If
                        Else
                            'include all
                            If filteredLobExtendedList Is Nothing Then
                                filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                            End If
                            filteredLobExtendedList.Add(diaLobExtended)
                        End If
                    End If
                Next
            End If

            Return filteredLobExtendedList
        End Function
        Public Function DiamondLobAndPropertiesObjectForImageOrPackagePartLevel(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), ByVal level As DiamondLobAndVariousProperties.ImageOrPackagePartLevel, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As DiamondLobAndVariousProperties
            Dim lobAndPropObj As DiamondLobAndVariousProperties = Nothing

            Dim filteredLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageOrPackagePartLevel(diaLobExtendedList, level)
            If filteredLobExtendedList IsNot Nothing AndAlso filteredLobExtendedList.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso filteredLobExtendedList.Count > 1 Then
                    lobAndPropObj = filteredLobExtendedList.Item(filteredLobExtendedList.Count - 1)
                Else
                    lobAndPropObj = filteredLobExtendedList.Item(0)
                End If
            End If

            Return lobAndPropObj
        End Function
        Public Function DiamondLobAndPropertiesListForStateId(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), ByVal stateId As Integer) As List(Of DiamondLobAndVariousProperties)
            Dim filteredLobExtendedList As List(Of DiamondLobAndVariousProperties) = Nothing

            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    If diaLobExtended IsNot Nothing Then
                        If stateId > 0 Then
                            'find match
                            If diaLobExtended.StateId = stateId Then
                                If filteredLobExtendedList Is Nothing Then
                                    filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                                End If
                                filteredLobExtendedList.Add(diaLobExtended)
                            End If
                        Else
                            'include all
                            If filteredLobExtendedList Is Nothing Then
                                filteredLobExtendedList = New List(Of DiamondLobAndVariousProperties)
                            End If
                            filteredLobExtendedList.Add(diaLobExtended)
                        End If
                    End If
                Next
            End If

            Return filteredLobExtendedList
        End Function
        Public Function DiamondLobAndPropertiesObjectForStateId(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), ByVal stateId As Integer, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First) As DiamondLobAndVariousProperties
            Dim lobAndPropObj As DiamondLobAndVariousProperties = Nothing

            Dim filteredLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForStateId(diaLobExtendedList, stateId)
            If filteredLobExtendedList IsNot Nothing AndAlso filteredLobExtendedList.Count > 0 Then
                If firstOrLastItem = FirstOrLast.Last AndAlso filteredLobExtendedList.Count > 1 Then
                    lobAndPropObj = filteredLobExtendedList.Item(filteredLobExtendedList.Count - 1)
                Else
                    lobAndPropObj = filteredLobExtendedList.Item(0)
                End If
            End If

            Return lobAndPropObj
        End Function
        Public Function StateIdsForDiamondLobAndPropertiesList(ByVal diaLobExtendedList As List(Of DiamondLobAndVariousProperties)) As List(Of Integer)
            Dim stateIds As List(Of Integer) = Nothing

            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    If diaLobExtended IsNot Nothing Then
                        AddUniqueIntegerToIntegerList(diaLobExtended.StateId, stateIds, positiveOnly:=True)
                    End If
                Next
            End If

            Return stateIds
        End Function
        Public Function DiamondLobAndPropertiesObjectIsMasterPackagePart(ByVal diaLobExtended As DiamondLobAndVariousProperties, Optional ByVal verifyUsingTopLevelVersionId As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal topLevelVersionIdToUse As Integer = 0) As Boolean
            Dim isMaster As Boolean = False

            If diaLobExtended IsNot Nothing Then
                Dim checkAppearsProperty As Boolean = False
                Dim checkVersionId As Boolean = False
                If verifyUsingTopLevelVersionId = QuickQuoteYesNoMaybeType.Yes OrElse verifyUsingTopLevelVersionId = QuickQuoteYesNoMaybeType.Maybe Then
                    If topLevelVersionIdToUse > 0 Then
                        checkVersionId = True
                    End If
                    If verifyUsingTopLevelVersionId = QuickQuoteYesNoMaybeType.Maybe Then
                        checkAppearsProperty = True
                    End If
                Else
                    checkAppearsProperty = True
                End If

                If isMaster = False AndAlso checkAppearsProperty = True Then
                    If diaLobExtended.AppearsToBeMasterLob = True Then
                        isMaster = True
                    End If
                End If
                If isMaster = False AndAlso checkVersionId = True Then
                    If diaLobExtended.VersionId = topLevelVersionIdToUse Then
                        isMaster = True
                    End If
                End If
            End If

            Return isMaster
        End Function
        'added 9/13/2018
        Public Sub SeparateDiamondLobAndPropertiesListBetweenMasterAndNonMasterPackageParts(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), ByRef diaLobExtendedMasterPackagePart As DiamondLobAndVariousProperties, ByRef diaLobExtendedListNonMasterPackageParts As List(Of DiamondLobAndVariousProperties), ByRef diaLobExtendedListNonPackageParts As List(Of DiamondLobAndVariousProperties), Optional ByVal topLevelVersionIdToUse As Integer = 0)
            diaLobExtendedMasterPackagePart = Nothing
            diaLobExtendedListNonMasterPackageParts = Nothing
            diaLobExtendedListNonPackageParts = Nothing
            Dim masterPartPosition As Integer = 0
            Dim masterPartPositions As List(Of Integer) = Nothing
            Dim partPositions As List(Of Integer) = Nothing
            'Dim nonMasterPartPositions As List(Of Integer) = Nothing
            'Dim nonPartPositions As List(Of Integer) = Nothing

            If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                Dim diaLobExtendedPosition As Integer = 0
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    diaLobExtendedPosition += 1
                    If diaLobExtended IsNot Nothing AndAlso diaLobExtended.Level = DiamondLobAndVariousProperties.ImageOrPackagePartLevel.PackagePartLevel Then
                        AddIntegerToIntegerList(diaLobExtendedPosition, partPositions)
                    Else
                        'AddIntegerToIntegerList(diaLobExtendedPosition, nonPartPositions)
                        If topLevelVersionIdToUse < 1 AndAlso diaLobExtended IsNot Nothing AndAlso diaLobExtended.Level = DiamondLobAndVariousProperties.ImageOrPackagePartLevel.ImageLevel Then
                            topLevelVersionIdToUse = diaLobExtended.VersionId
                        End If
                    End If
                Next

                If partPositions IsNot Nothing AndAlso partPositions.Count > 0 Then
                    diaLobExtendedPosition = 0
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        diaLobExtendedPosition += 1
                        If partPositions.Contains(diaLobExtendedPosition) = True Then
                            'is part
                            If DiamondLobAndPropertiesObjectIsMasterPackagePart(diaLobExtended, verifyUsingTopLevelVersionId:=QuickQuoteYesNoMaybeType.Maybe, topLevelVersionIdToUse:=topLevelVersionIdToUse) = True Then
                                AddIntegerToIntegerList(diaLobExtendedPosition, masterPartPositions)
                            End If
                        End If
                    Next
                    If masterPartPositions Is Nothing OrElse masterPartPositions.Count <> 1 Then
                        'need to try to load to see if we have better luck finding the master part
                        Dim anythingLoaded As Boolean = False
                        LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(diaLobExtendedList, anythingLoaded:=anythingLoaded)
                        If anythingLoaded = True Then
                            'clear out existing masterPart list if needed
                            DisposeIntegers(masterPartPositions)
                            diaLobExtendedPosition = 0
                            For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                                diaLobExtendedPosition += 1
                                If partPositions.Contains(diaLobExtendedPosition) = True Then
                                    'is part
                                    If DiamondLobAndPropertiesObjectIsMasterPackagePart(diaLobExtended, verifyUsingTopLevelVersionId:=QuickQuoteYesNoMaybeType.Maybe, topLevelVersionIdToUse:=topLevelVersionIdToUse) = True Then
                                        AddIntegerToIntegerList(diaLobExtendedPosition, masterPartPositions)
                                    End If
                                End If
                            Next
                            If masterPartPositions IsNot Nothing AndAlso masterPartPositions.Count = 1 Then
                                masterPartPosition = masterPartPositions.Item(0)
                            End If
                        End If
                    Else
                        'already found the master part
                        masterPartPosition = masterPartPositions.Item(0)
                    End If
                End If

                diaLobExtendedPosition = 0
                For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                    diaLobExtendedPosition += 1
                    If partPositions.Contains(diaLobExtendedPosition) = True Then
                        'is part
                        If diaLobExtendedPosition = masterPartPosition Then
                            diaLobExtendedMasterPackagePart = diaLobExtended
                        Else
                            If diaLobExtendedListNonMasterPackageParts Is Nothing Then
                                diaLobExtendedListNonMasterPackageParts = New List(Of DiamondLobAndVariousProperties)
                            End If
                            diaLobExtendedListNonMasterPackageParts.Add(diaLobExtended)
                        End If
                    Else
                        'not part
                        If diaLobExtendedListNonPackageParts IsNot Nothing Then
                            diaLobExtendedListNonPackageParts = New List(Of DiamondLobAndVariousProperties)
                        End If
                        diaLobExtendedListNonPackageParts.Add(diaLobExtended)
                    End If
                Next
            End If
        End Sub
        Public Sub LoadStateAndLobStuffForUnloadedDiamondLobAndPropertiesList(ByRef diaLobExtendedList As List(Of DiamondLobAndVariousProperties), Optional ByRef anythingLoaded As Boolean = False)
            Dim unLoadedPositions As List(Of Integer) = Nothing
            Dim listAlreadyLoaded As Boolean = DiamondLobAndPropertiesListIsLoaded(diaLobExtendedList, unLoadedPositions:=unLoadedPositions)
            anythingLoaded = False

            If listAlreadyLoaded = False AndAlso unLoadedPositions IsNot Nothing AndAlso unLoadedPositions.Count > 0 Then
                anythingLoaded = True
                If unLoadedPositions.Count = diaLobExtendedList.Count Then
                    LoadStateAndLobStuffForDiamondLobAndPropertiesList(diaLobExtendedList)
                Else
                    Dim listPosition As Integer = 0
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        listPosition += 1
                        If unLoadedPositions.Contains(listPosition) = True Then
                            LoadStateAndLobStuffForDiamondLobAndProperties(diaLobExtended)
                        End If
                    Next
                End If
            End If
        End Sub
        Public Function DiamondLobAndPropertiesListForImageAndMultiStateLevel(ByRef diaImage As Diamond.Common.Objects.Policy.Image, ByVal level As MultiStateLevel, Optional ByVal loadStateAndLobStuff As Boolean = False, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of DiamondLobAndVariousProperties)
            Dim filteredLobExtendedList As List(Of DiamondLobAndVariousProperties) = Nothing

            Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImage(diaImage, loadStateAndLobStuff:=loadStateAndLobStuff)

            filteredLobExtendedList = DiamondLobAndPropertiesListForMultiStateLevel(diaLobExtendedList, level, specificStateToGet:=specificStateToGet)

            Return filteredLobExtendedList
        End Function

        'added 9/17/2018
        Public Sub DisposeLocations(ByRef qqLocs As List(Of QuickQuoteLocation))
            If qqLocs IsNot Nothing Then
                If qqLocs.Count > 0 Then
                    For Each qqLoc As QuickQuoteLocation In qqLocs
                        DisposeLocation(qqLoc)
                    Next
                    qqLocs.Clear()
                End If
                qqLocs = Nothing
            End If
        End Sub
        Public Sub DisposeLocation(ByRef qqLoc As QuickQuoteLocation)
            If qqLoc IsNot Nothing Then
                qqLoc.Dispose()
                qqLoc = Nothing
            End If
        End Sub
        Public Sub DisposeVehicles(ByRef qqVehs As List(Of QuickQuoteVehicle))
            If qqVehs IsNot Nothing Then
                If qqVehs.Count > 0 Then
                    For Each qqVeh As QuickQuoteVehicle In qqVehs
                        DisposeVehicle(qqVeh)
                    Next
                    qqVehs.Clear()
                End If
                qqVehs = Nothing
            End If
        End Sub
        Public Sub DisposeVehicle(ByRef qqVeh As QuickQuoteVehicle)
            If qqVeh IsNot Nothing Then
                qqVeh.Dispose()
                qqVeh = Nothing
            End If
        End Sub
        Public Function OneLineStreetAddressForQuickQuoteLocation(ByVal qqLoc As QuickQuoteLocation, Optional useApartmentNumber As Boolean = True) As String
            Dim strAdd As String = ""
            If qqLoc IsNot Nothing AndAlso qqLoc.Address IsNot Nothing Then
                strAdd = qqLoc.Address.OneLineStreetAddress(useApartmentNumber:=useApartmentNumber)
            End If
            Return strAdd
        End Function
        Public Function OneLineStreetAddressForQuickQuoteVehicle(ByVal qqVeh As QuickQuoteVehicle, Optional useApartmentNumber As Boolean = True) As String
            Dim strAdd As String = ""
            If qqVeh IsNot Nothing AndAlso qqVeh.GaragingAddress IsNot Nothing AndAlso qqVeh.GaragingAddress.Address IsNot Nothing Then
                strAdd = qqVeh.GaragingAddress.Address.OneLineStreetAddress(useApartmentNumber:=useApartmentNumber)
            End If
            Return strAdd
        End Function
        Public Function OneLineYearMakeModelForQuickQuoteVehicle(ByVal qqVeh As QuickQuoteVehicle) As String
            Dim strYearMakeModel As String = ""
            If qqVeh IsNot Nothing Then
                strYearMakeModel = qqVeh.OneLineYearMakeAndModel
            End If
            Return strYearMakeModel
        End Function
        Public Sub OrderQuickQuoteLocations(ByRef qqLocationsToOrder As List(Of QuickQuoteLocation), ByVal qqLocationsToReference As List(Of QuickQuoteLocation))
            'If qqLocationsToOrder IsNot Nothing AndAlso qqLocationsToReference IsNot Nothing AndAlso qqLocationsToOrder.Count > 0 AndAlso qqLocationsToOrder.Count = qqLocationsToReference.Count Then
            '    Dim locationAndOrderingPropsList As New List(Of QuickQuoteLocationAndOrderingProperties)
            '    Dim allPositionMatches As List(Of Integer) = Nothing
            '    Dim locCounter As Integer = 0
            '    For Each qqLoc As QuickQuoteLocation In qqLocationsToOrder
            '        locCounter += 1
            '        Dim locAndOrderingProps As New QuickQuoteLocationAndOrderingProperties
            '        With locAndOrderingProps
            '            .QQLocation = qqLoc
            '            .OriginalOrder = locCounter
            '            .AddressPositionMatches = MatchingQuickQuoteLocationAddressPositions(qqLoc, qqLocationsToReference)

            '            AddUniqueIntegersToIntegerList(.AddressPositionMatches, allPositionMatches)
            '        End With
            '        locationAndOrderingPropsList.Add(locAndOrderingProps)
            '    Next

            '    If allPositionMatches IsNot Nothing AndAlso allPositionMatches.Count > 0 AndAlso locationAndOrderingPropsList IsNot Nothing AndAlso locationAndOrderingPropsList.Count > 0 Then
            '        Dim continueWithSortAttempt As Boolean = True

            '        'For i As Integer = 1 To qqLocationsToOrder.Count
            '        '    If allPositionMatches.Contains(i) = False Then
            '        '        continueWithSortAttempt = False
            '        '        Exit For
            '        '    End If
            '        'Next
            '        'both of these should work, but the 2nd should be the easiest since there should only be unique #s in the list
            '        If allPositionMatches.Count = locationAndOrderingPropsList.Count Then
            '            allPositionMatches.Sort()
            '            Dim usedPositionMatches As New List(Of Integer)
            '            Dim locAndOrderingPropsListPositionsSet As New List(Of Integer)
            '            For Each pos As Integer In allPositionMatches
            '                'If usedPositionMatches.Contains(pos) = False Then 'not needed here
            '                Dim locAndOrderingPropCounter As Integer = 0
            '                For Each locAndOrderingProps As QuickQuoteLocationAndOrderingProperties In locationAndOrderingPropsList
            '                    locAndOrderingPropCounter += 1
            '                    If locAndOrderingPropsListPositionsSet.Contains(locAndOrderingPropCounter) = False Then
            '                        If locAndOrderingProps IsNot Nothing AndAlso locAndOrderingProps.AddressPositionMatches IsNot Nothing AndAlso locAndOrderingProps.AddressPositionMatches.Count > 0 Then
            '                            For Each posMatch As Integer In locAndOrderingProps.AddressPositionMatches
            '                                If usedPositionMatches.Contains(posMatch) = False Then
            '                                    locAndOrderingProps.NewOrder = posMatch
            '                                    usedPositionMatches.Add(posMatch)
            '                                    locAndOrderingPropsListPositionsSet.Add(locAndOrderingPropCounter)
            '                                    Exit For
            '                                End If
            '                            Next
            '                        Else
            '                            continueWithSortAttempt = False
            '                            Exit For
            '                        End If
            '                    End If
            '                Next
            '                If continueWithSortAttempt = False Then
            '                    Exit For
            '                End If
            '                'End If
            '            Next
            '            If usedPositionMatches.Count <> allPositionMatches.Count OrElse locAndOrderingPropsListPositionsSet.Count <> locationAndOrderingPropsList.Count Then
            '                continueWithSortAttempt = False
            '            End If
            '        Else
            '            continueWithSortAttempt = False
            '        End If

            '        If continueWithSortAttempt = True Then
            '            'locationAndOrderingPropsList.Sort() 'would use the CompareTo method on the object; may not work as well when one or both are nothing
            '            locationAndOrderingPropsList.Sort(New QuickQuoteLocationAndOrderingPropertiesComparer)

            '            If qqLocationsToOrder.Count = locationAndOrderingPropsList.Count Then
            '                qqLocationsToOrder.Clear()

            '                For Each locAndOrderingProps As QuickQuoteLocationAndOrderingProperties In locationAndOrderingPropsList
            '                    qqLocationsToOrder.Add(locAndOrderingProps.QQLocation)
            '                Next
            '            End If
            '        End If
            '    End If
            'End If
            'updated 1/16/2019
            If qqLocationsToOrder IsNot Nothing AndAlso qqLocationsToOrder.Count > 0 Then
                If qqLocationsToReference IsNot Nothing AndAlso qqLocationsToReference.Count = qqLocationsToOrder.Count Then
                    OrderQuickQuoteLocationsUsingMasterListForComparison(qqLocationsToOrder, qqLocationsToReference)
                Else
                    OrderQuickQuoteLocationsByDisplayNum(qqLocationsToOrder)
                End If
            End If
        End Sub
        'added additional methods 1/16/2019
        Public Sub OrderQuickQuoteLocationsUsingMasterListForComparison(ByRef qqLocationsToOrder As List(Of QuickQuoteLocation), ByVal qqLocationsToReference As List(Of QuickQuoteLocation))
            If qqLocationsToOrder IsNot Nothing AndAlso qqLocationsToReference IsNot Nothing AndAlso qqLocationsToOrder.Count > 0 AndAlso qqLocationsToOrder.Count = qqLocationsToReference.Count Then
                Dim locationAndOrderingPropsList As New List(Of QuickQuoteLocationAndOrderingProperties)
                Dim allPositionMatches As List(Of Integer) = Nothing
                Dim locCounter As Integer = 0
                For Each qqLoc As QuickQuoteLocation In qqLocationsToOrder
                    locCounter += 1
                    Dim locAndOrderingProps As New QuickQuoteLocationAndOrderingProperties
                    With locAndOrderingProps
                        .QQLocation = qqLoc
                        .OriginalOrder = locCounter
                        .AddressPositionMatches = MatchingQuickQuoteLocationAddressPositions(qqLoc, qqLocationsToReference)

                        AddUniqueIntegersToIntegerList(.AddressPositionMatches, allPositionMatches)
                    End With
                    locationAndOrderingPropsList.Add(locAndOrderingProps)
                Next

                If allPositionMatches IsNot Nothing AndAlso allPositionMatches.Count > 0 AndAlso locationAndOrderingPropsList IsNot Nothing AndAlso locationAndOrderingPropsList.Count > 0 Then
                    Dim continueWithSortAttempt As Boolean = True

                    'For i As Integer = 1 To qqLocationsToOrder.Count
                    '    If allPositionMatches.Contains(i) = False Then
                    '        continueWithSortAttempt = False
                    '        Exit For
                    '    End If
                    'Next
                    'both of these should work, but the 2nd should be the easiest since there should only be unique #s in the list
                    If allPositionMatches.Count = locationAndOrderingPropsList.Count Then
                        allPositionMatches.Sort()
                        Dim usedPositionMatches As New List(Of Integer)
                        Dim locAndOrderingPropsListPositionsSet As New List(Of Integer)
                        For Each pos As Integer In allPositionMatches
                            'If usedPositionMatches.Contains(pos) = False Then 'not needed here
                            Dim locAndOrderingPropCounter As Integer = 0
                            For Each locAndOrderingProps As QuickQuoteLocationAndOrderingProperties In locationAndOrderingPropsList
                                locAndOrderingPropCounter += 1
                                If locAndOrderingPropsListPositionsSet.Contains(locAndOrderingPropCounter) = False Then
                                    If locAndOrderingProps IsNot Nothing AndAlso locAndOrderingProps.AddressPositionMatches IsNot Nothing AndAlso locAndOrderingProps.AddressPositionMatches.Count > 0 Then
                                        For Each posMatch As Integer In locAndOrderingProps.AddressPositionMatches
                                            If usedPositionMatches.Contains(posMatch) = False Then
                                                locAndOrderingProps.NewOrder = posMatch
                                                usedPositionMatches.Add(posMatch)
                                                locAndOrderingPropsListPositionsSet.Add(locAndOrderingPropCounter)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        continueWithSortAttempt = False
                                        Exit For
                                    End If
                                End If
                            Next
                            If continueWithSortAttempt = False Then
                                Exit For
                            End If
                            'End If
                        Next
                        If usedPositionMatches.Count <> allPositionMatches.Count OrElse locAndOrderingPropsListPositionsSet.Count <> locationAndOrderingPropsList.Count Then
                            continueWithSortAttempt = False
                        End If
                    Else
                        continueWithSortAttempt = False
                    End If

                    If continueWithSortAttempt = True Then
                        'locationAndOrderingPropsList.Sort() 'would use the CompareTo method on the object; may not work as well when one or both are nothing
                        locationAndOrderingPropsList.Sort(New QuickQuoteLocationAndOrderingPropertiesComparer)

                        If qqLocationsToOrder.Count = locationAndOrderingPropsList.Count Then
                            qqLocationsToOrder.Clear()

                            For Each locAndOrderingProps As QuickQuoteLocationAndOrderingProperties In locationAndOrderingPropsList
                                qqLocationsToOrder.Add(locAndOrderingProps.QQLocation)
                            Next
                        End If
                    End If
                End If
            End If
        End Sub
        Public Sub OrderQuickQuoteLocationsByDisplayNum(ByRef qqLocationsToOrder As List(Of QuickQuoteLocation))
            If qqLocationsToOrder IsNot Nothing AndAlso qqLocationsToOrder.Count > 0 Then
                Dim locationAndOrderingPropsList As New List(Of QuickQuoteLocationAndOrderingProperties)
                Dim nonZeroDisplayNums As List(Of Integer) = Nothing
                Dim locCounter As Integer = 0
                For Each qqLoc As QuickQuoteLocation In qqLocationsToOrder
                    locCounter += 1
                    If qqLoc IsNot Nothing AndAlso qqLoc.DisplayNum > 0 Then
                        'keep going
                        Dim locAndOrderingProps As New QuickQuoteLocationAndOrderingProperties
                        With locAndOrderingProps
                            .QQLocation = qqLoc
                            .OriginalOrder = locCounter
                            .NewOrder = qqLoc.DisplayNum
                            AddUniqueIntegerToIntegerList(qqLoc.DisplayNum, nonZeroDisplayNums, positiveOnly:=True)
                        End With
                        locationAndOrderingPropsList.Add(locAndOrderingProps)
                    Else
                        Exit For 'no sense continuing
                    End If
                Next

                If nonZeroDisplayNums IsNot Nothing AndAlso nonZeroDisplayNums.Count > 0 AndAlso locationAndOrderingPropsList IsNot Nothing AndAlso locationAndOrderingPropsList.Count = nonZeroDisplayNums.Count Then
                    'locationAndOrderingPropsList.Sort() 'would use the CompareTo method on the object; may not work as well when one or both are nothing
                    locationAndOrderingPropsList.Sort(New QuickQuoteLocationAndOrderingPropertiesComparer)

                    If qqLocationsToOrder.Count = locationAndOrderingPropsList.Count Then
                        qqLocationsToOrder.Clear()

                        For Each locAndOrderingProps As QuickQuoteLocationAndOrderingProperties In locationAndOrderingPropsList
                            qqLocationsToOrder.Add(locAndOrderingProps.QQLocation)
                        Next
                    End If
                End If
            End If
        End Sub
        Public Sub OrderQuickQuoteVehicles(ByRef qqVehiclesToOrder As List(Of QuickQuoteVehicle), ByVal qqVehiclesToReference As List(Of QuickQuoteVehicle))
            'If qqVehiclesToOrder IsNot Nothing AndAlso qqVehiclesToReference IsNot Nothing AndAlso qqVehiclesToOrder.Count > 0 AndAlso qqVehiclesToOrder.Count = qqVehiclesToReference.Count Then
            '    Dim vehicleAndOrderingPropsList As New List(Of QuickQuoteVehicleAndOrderingProperties)
            '    Dim allPositionMatches As List(Of Integer) = Nothing
            '    Dim vehCounter As Integer = 0
            '    For Each qqVeh As QuickQuoteVehicle In qqVehiclesToOrder
            '        vehCounter += 1
            '        Dim vehAndOrderingProps As New QuickQuoteVehicleAndOrderingProperties
            '        With vehAndOrderingProps
            '            .QQVehicle = qqVeh
            '            .OriginalOrder = vehCounter
            '            .AddressPositionMatches = MatchingQuickQuoteVehicleAddressPositions(qqVeh, qqVehiclesToReference)
            '            .YearMakeModelPositionMatches = MatchingQuickQuoteVehicleYearMakeModelPositions(qqVeh, qqVehiclesToReference)

            '            If .AddressPositionMatches IsNot Nothing AndAlso .AddressPositionMatches.Count > 0 AndAlso .YearMakeModelPositionMatches IsNot Nothing AndAlso .YearMakeModelPositionMatches.Count > 0 Then
            '                For Each addPosMatch As Integer In .AddressPositionMatches
            '                    If .YearMakeModelPositionMatches.Contains(addPosMatch) = True Then
            '                        AddIntegerToIntegerList(addPosMatch, .FullPositionMatches)
            '                    End If
            '                Next
            '                AddUniqueIntegersToIntegerList(.FullPositionMatches, allPositionMatches)
            '            End If
            '        End With
            '        vehicleAndOrderingPropsList.Add(vehAndOrderingProps)
            '    Next

            '    If allPositionMatches IsNot Nothing AndAlso allPositionMatches.Count > 0 AndAlso vehicleAndOrderingPropsList IsNot Nothing AndAlso vehicleAndOrderingPropsList.Count > 0 Then
            '        Dim continueWithSortAttempt As Boolean = True

            '        'For i As Integer = 1 To qqVehiclesToOrder.Count
            '        '    If allPositionMatches.Contains(i) = False Then
            '        '        continueWithSortAttempt = False
            '        '        Exit For
            '        '    End If
            '        'Next
            '        'both of these should work, but the 2nd should be the easiest since there should only be unique #s in the list
            '        If allPositionMatches.Count = vehicleAndOrderingPropsList.Count Then
            '            allPositionMatches.Sort()
            '            Dim usedPositionMatches As New List(Of Integer)
            '            Dim vehAndOrderingPropsListPositionsSet As New List(Of Integer)
            '            For Each pos As Integer In allPositionMatches
            '                'If usedPositionMatches.Contains(pos) = False Then 'not needed here
            '                Dim vehAndOrderingPropCounter As Integer = 0
            '                For Each vehAndOrderingProps As QuickQuoteVehicleAndOrderingProperties In vehicleAndOrderingPropsList
            '                    vehAndOrderingPropCounter += 1
            '                    If vehAndOrderingPropsListPositionsSet.Contains(vehAndOrderingPropCounter) = False Then
            '                        If vehAndOrderingProps IsNot Nothing AndAlso vehAndOrderingProps.FullPositionMatches IsNot Nothing AndAlso vehAndOrderingProps.FullPositionMatches.Count > 0 Then
            '                            For Each posMatch As Integer In vehAndOrderingProps.FullPositionMatches
            '                                If usedPositionMatches.Contains(posMatch) = False Then
            '                                    vehAndOrderingProps.NewOrder = posMatch
            '                                    usedPositionMatches.Add(posMatch)
            '                                    vehAndOrderingPropsListPositionsSet.Add(vehAndOrderingPropCounter)
            '                                    Exit For
            '                                End If
            '                            Next
            '                        Else
            '                            continueWithSortAttempt = False
            '                            Exit For
            '                        End If
            '                    End If
            '                Next
            '                If continueWithSortAttempt = False Then
            '                    Exit For
            '                End If
            '                'End If
            '            Next
            '            If usedPositionMatches.Count <> allPositionMatches.Count OrElse vehAndOrderingPropsListPositionsSet.Count <> vehicleAndOrderingPropsList.Count Then
            '                continueWithSortAttempt = False
            '            End If
            '        Else
            '            continueWithSortAttempt = False
            '        End If

            '        If continueWithSortAttempt = True Then
            '            'vehicleAndOrderingPropsList.Sort() 'would use the CompareTo method on the object; may not work as well when one or both are nothing
            '            vehicleAndOrderingPropsList.Sort(New QuickQuoteVehicleAndOrderingPropertiesComparer)

            '            If qqVehiclesToOrder.Count = vehicleAndOrderingPropsList.Count Then
            '                qqVehiclesToOrder.Clear()

            '                For Each vehAndOrderingProps As QuickQuoteVehicleAndOrderingProperties In vehicleAndOrderingPropsList
            '                    qqVehiclesToOrder.Add(vehAndOrderingProps.QQVehicle)
            '                Next
            '            End If
            '        End If
            '    End If
            'End If
            'updated 1/16/2019
            If qqVehiclesToOrder IsNot Nothing AndAlso qqVehiclesToOrder.Count > 0 Then
                If qqVehiclesToReference IsNot Nothing AndAlso qqVehiclesToReference.Count = qqVehiclesToOrder.Count Then
                    OrderQuickQuoteVehiclesUsingMasterListForComparison(qqVehiclesToOrder, qqVehiclesToReference)
                Else
                    OrderQuickQuoteVehiclesByDisplayNum(qqVehiclesToOrder)
                End If
            End If
        End Sub
        'added additional methods 1/16/2019
        Public Sub OrderQuickQuoteVehiclesUsingMasterListForComparison(ByRef qqVehiclesToOrder As List(Of QuickQuoteVehicle), ByVal qqVehiclesToReference As List(Of QuickQuoteVehicle))
            If qqVehiclesToOrder IsNot Nothing AndAlso qqVehiclesToReference IsNot Nothing AndAlso qqVehiclesToOrder.Count > 0 AndAlso qqVehiclesToOrder.Count = qqVehiclesToReference.Count Then
                Dim vehicleAndOrderingPropsList As New List(Of QuickQuoteVehicleAndOrderingProperties)
                Dim allPositionMatches As List(Of Integer) = Nothing
                Dim vehCounter As Integer = 0
                For Each qqVeh As QuickQuoteVehicle In qqVehiclesToOrder
                    vehCounter += 1
                    Dim vehAndOrderingProps As New QuickQuoteVehicleAndOrderingProperties
                    With vehAndOrderingProps
                        .QQVehicle = qqVeh
                        .OriginalOrder = vehCounter
                        .AddressPositionMatches = MatchingQuickQuoteVehicleAddressPositions(qqVeh, qqVehiclesToReference)
                        .YearMakeModelPositionMatches = MatchingQuickQuoteVehicleYearMakeModelPositions(qqVeh, qqVehiclesToReference)

                        If .AddressPositionMatches IsNot Nothing AndAlso .AddressPositionMatches.Count > 0 AndAlso .YearMakeModelPositionMatches IsNot Nothing AndAlso .YearMakeModelPositionMatches.Count > 0 Then
                            For Each addPosMatch As Integer In .AddressPositionMatches
                                If .YearMakeModelPositionMatches.Contains(addPosMatch) = True Then
                                    AddIntegerToIntegerList(addPosMatch, .FullPositionMatches)
                                End If
                            Next
                            AddUniqueIntegersToIntegerList(.FullPositionMatches, allPositionMatches)
                        End If
                    End With
                    vehicleAndOrderingPropsList.Add(vehAndOrderingProps)
                Next

                If allPositionMatches IsNot Nothing AndAlso allPositionMatches.Count > 0 AndAlso vehicleAndOrderingPropsList IsNot Nothing AndAlso vehicleAndOrderingPropsList.Count > 0 Then
                    Dim continueWithSortAttempt As Boolean = True

                    'For i As Integer = 1 To qqVehiclesToOrder.Count
                    '    If allPositionMatches.Contains(i) = False Then
                    '        continueWithSortAttempt = False
                    '        Exit For
                    '    End If
                    'Next
                    'both of these should work, but the 2nd should be the easiest since there should only be unique #s in the list
                    If allPositionMatches.Count = vehicleAndOrderingPropsList.Count Then
                        allPositionMatches.Sort()
                        Dim usedPositionMatches As New List(Of Integer)
                        Dim vehAndOrderingPropsListPositionsSet As New List(Of Integer)
                        For Each pos As Integer In allPositionMatches
                            'If usedPositionMatches.Contains(pos) = False Then 'not needed here
                            Dim vehAndOrderingPropCounter As Integer = 0
                            For Each vehAndOrderingProps As QuickQuoteVehicleAndOrderingProperties In vehicleAndOrderingPropsList
                                vehAndOrderingPropCounter += 1
                                If vehAndOrderingPropsListPositionsSet.Contains(vehAndOrderingPropCounter) = False Then
                                    If vehAndOrderingProps IsNot Nothing AndAlso vehAndOrderingProps.FullPositionMatches IsNot Nothing AndAlso vehAndOrderingProps.FullPositionMatches.Count > 0 Then
                                        For Each posMatch As Integer In vehAndOrderingProps.FullPositionMatches
                                            If usedPositionMatches.Contains(posMatch) = False Then
                                                vehAndOrderingProps.NewOrder = posMatch
                                                usedPositionMatches.Add(posMatch)
                                                vehAndOrderingPropsListPositionsSet.Add(vehAndOrderingPropCounter)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        continueWithSortAttempt = False
                                        Exit For
                                    End If
                                End If
                            Next
                            If continueWithSortAttempt = False Then
                                Exit For
                            End If
                            'End If
                        Next
                        If usedPositionMatches.Count <> allPositionMatches.Count OrElse vehAndOrderingPropsListPositionsSet.Count <> vehicleAndOrderingPropsList.Count Then
                            continueWithSortAttempt = False
                        End If
                    Else
                        continueWithSortAttempt = False
                    End If

                    If continueWithSortAttempt = True Then
                        'vehicleAndOrderingPropsList.Sort() 'would use the CompareTo method on the object; may not work as well when one or both are nothing
                        vehicleAndOrderingPropsList.Sort(New QuickQuoteVehicleAndOrderingPropertiesComparer)

                        If qqVehiclesToOrder.Count = vehicleAndOrderingPropsList.Count Then
                            qqVehiclesToOrder.Clear()

                            For Each vehAndOrderingProps As QuickQuoteVehicleAndOrderingProperties In vehicleAndOrderingPropsList
                                qqVehiclesToOrder.Add(vehAndOrderingProps.QQVehicle)
                            Next
                        End If
                    End If
                End If
            End If
        End Sub
        Public Sub OrderQuickQuoteVehiclesByDisplayNum(ByRef qqVehiclesToOrder As List(Of QuickQuoteVehicle))
            If qqVehiclesToOrder IsNot Nothing AndAlso qqVehiclesToOrder.Count > 0 Then
                Dim vehicleAndOrderingPropsList As New List(Of QuickQuoteVehicleAndOrderingProperties)
                Dim nonZeroDisplayNums As List(Of Integer) = Nothing
                Dim vehCounter As Integer = 0
                For Each qqVeh As QuickQuoteVehicle In qqVehiclesToOrder
                    vehCounter += 1
                    If qqVeh IsNot Nothing AndAlso qqVeh.DisplayNum > 0 Then
                        'keep going
                        Dim vehAndOrderingProps As New QuickQuoteVehicleAndOrderingProperties
                        With vehAndOrderingProps
                            .QQVehicle = qqVeh
                            .OriginalOrder = vehCounter
                            .NewOrder = qqVeh.DisplayNum
                            AddUniqueIntegerToIntegerList(qqVeh.DisplayNum, nonZeroDisplayNums, positiveOnly:=True)
                        End With
                        vehicleAndOrderingPropsList.Add(vehAndOrderingProps)
                    Else
                        Exit For 'no sense continuing
                    End If
                Next

                If nonZeroDisplayNums IsNot Nothing AndAlso nonZeroDisplayNums.Count > 0 AndAlso vehicleAndOrderingPropsList IsNot Nothing AndAlso vehicleAndOrderingPropsList.Count = nonZeroDisplayNums.Count Then
                    'vehicleAndOrderingPropsList.Sort() 'would use the CompareTo method on the object; may not work as well when one or both are nothing
                    vehicleAndOrderingPropsList.Sort(New QuickQuoteVehicleAndOrderingPropertiesComparer)

                    If qqVehiclesToOrder.Count = vehicleAndOrderingPropsList.Count Then
                        qqVehiclesToOrder.Clear()

                        For Each vehAndOrderingProps As QuickQuoteVehicleAndOrderingProperties In vehicleAndOrderingPropsList
                            qqVehiclesToOrder.Add(vehAndOrderingProps.QQVehicle)
                        Next
                    End If
                End If
            End If
        End Sub
        Public Function MatchingQuickQuoteLocationAddressPositions(ByVal loc As QuickQuoteLocation, ByVal locs As List(Of QuickQuoteLocation)) As List(Of Integer)
            Dim ints As List(Of Integer) = Nothing

            If locs IsNot Nothing AndAlso locs.Count > 0 Then
                Dim pos As Integer = 0
                For Each l As QuickQuoteLocation In locs
                    pos += 1
                    If isTextMatch(OneLineStreetAddressForQuickQuoteLocation(loc), OneLineStreetAddressForQuickQuoteLocation(l), matchType:=TextMatchType.TextOnly_IgnoreCasing) = True Then
                        AddIntegerToIntegerList(pos, ints)
                    End If
                Next
            End If

            Return ints
        End Function
        Public Function MatchingQuickQuoteVehicleAddressPositions(ByVal veh As QuickQuoteVehicle, ByVal vehs As List(Of QuickQuoteVehicle)) As List(Of Integer)
            Dim ints As List(Of Integer) = Nothing

            If vehs IsNot Nothing AndAlso vehs.Count > 0 Then
                Dim pos As Integer = 0
                For Each v As QuickQuoteVehicle In vehs
                    pos += 1
                    If isTextMatch(OneLineStreetAddressForQuickQuoteVehicle(veh), OneLineStreetAddressForQuickQuoteVehicle(v), matchType:=TextMatchType.TextOnly_IgnoreCasing) = True Then
                        AddIntegerToIntegerList(pos, ints)
                    End If
                Next
            End If

            Return ints
        End Function
        Public Function MatchingQuickQuoteVehicleYearMakeModelPositions(ByVal veh As QuickQuoteVehicle, ByVal vehs As List(Of QuickQuoteVehicle)) As List(Of Integer)
            Dim ints As List(Of Integer) = Nothing

            If vehs IsNot Nothing AndAlso vehs.Count > 0 Then
                Dim pos As Integer = 0
                For Each v As QuickQuoteVehicle In vehs
                    pos += 1
                    If isTextMatch(OneLineYearMakeModelForQuickQuoteVehicle(veh), OneLineYearMakeModelForQuickQuoteVehicle(v), matchType:=TextMatchType.TextOnly_IgnoreCasing) = True Then
                        AddIntegerToIntegerList(pos, ints)
                    End If
                Next
            End If

            Return ints
        End Function

        'added 9/19/2018
        Public Shared Function CopyAdditionalInterestsBetweenGoverningStateAndTopLevelAsNeededForMultiState(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            If lobType = QuickQuoteObject.QuickQuoteLobType.Farm Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Sub CopyAdditionalInterestsFromStateLevelToTopLevel(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListAtTopLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    If clearExistingListAtTopLevel = True AndAlso qqo.VersionAndLobInfo.AdditionalInterests IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInterests.Count > 0 Then
                        qqo.VersionAndLobInfo.AdditionalInterests.Clear()
                    End If
                    For Each s As QuickQuoteState In quoteStates
                        Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                        If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInterests IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInterests.Count > 0 Then
                            For Each stateAI As QuickQuoteAdditionalInterest In stateQuote.VersionAndLobInfo.AdditionalInterests
                                If stateAI IsNot Nothing Then
                                    If qqo.VersionAndLobInfo.AdditionalInterests Is Nothing Then
                                        qqo.VersionAndLobInfo.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                                    End If
                                    'stateAI.Set_QuoteStateTakenFrom(s)
                                    If cloneList = True Then
                                        qqo.VersionAndLobInfo.AdditionalInterests.Add(CloneObject(stateAI))
                                    Else
                                        qqo.VersionAndLobInfo.AdditionalInterests.Add(stateAI)
                                    End If
                                End If
                            Next
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub CopyAdditionalInterestsFromTopLevelToGoverningState(ByRef qqo As QuickQuoteObject, Optional ByVal clearExistingListsAtStateLevel As Boolean = True, Optional ByVal cloneList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue

                    Dim govStateQuote As QuickQuoteObject = GoverningStateQuote(qqo)
                    If govStateQuote IsNot Nothing Then
                        'only wipe out info if govStateQuote and continue is present; should always be there
                        If clearExistingListsAtStateLevel = True Then
                            For Each s As QuickQuoteState In quoteStates
                                Dim stateQuote As QuickQuoteObject = QuickQuoteObjectForState(qqo, s, addToListIfNeeded:=False)
                                If stateQuote IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInterests IsNot Nothing AndAlso stateQuote.VersionAndLobInfo.AdditionalInterests.Count > 0 Then
                                    stateQuote.VersionAndLobInfo.AdditionalInterests.Clear()
                                End If
                            Next
                        End If
                        If qqo.VersionAndLobInfo.AdditionalInterests IsNot Nothing AndAlso qqo.VersionAndLobInfo.AdditionalInterests.Count > 0 Then
                            For Each topLevelAI As QuickQuoteAdditionalInterest In qqo.VersionAndLobInfo.AdditionalInterests
                                If topLevelAI IsNot Nothing Then
                                    If govStateQuote.VersionAndLobInfo.AdditionalInterests Is Nothing Then
                                        govStateQuote.VersionAndLobInfo.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                                    End If
                                    If cloneList = True Then
                                        govStateQuote.VersionAndLobInfo.AdditionalInterests.Add(CloneObject(topLevelAI))
                                    Else
                                        govStateQuote.VersionAndLobInfo.AdditionalInterests.Add(topLevelAI)
                                    End If
                                End If
                            Next
                        End If
                    End If
                End If
            End If
        End Sub

        'added 9/20/2018
        Public Shared Function ShouldRevertSingleStateQuotesToSingleStateFormat(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            Return False
        End Function
        'added 9/21/2018
        Public Shared Function IsMultiStateFormatLob(ByVal lobType As QuickQuoteObject.QuickQuoteLobType) As Boolean
            Select Case lobType
                'Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto, QuickQuoteObject.QuickQuoteLobType.CommercialBOP, QuickQuoteObject.QuickQuoteLobType.CommercialCrime, QuickQuoteObject.QuickQuoteLobType.CommercialGarage, QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability, QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine, QuickQuoteObject.QuickQuoteLobType.CommercialPackage, QuickQuoteObject.QuickQuoteLobType.CommercialProperty, QuickQuoteObject.QuickQuoteLobType.CommercialUmbrella, QuickQuoteObject.QuickQuoteLobType.Farm, QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                'updated 4/20/2020 for Umbrella Personal
                Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto, QuickQuoteObject.QuickQuoteLobType.CommercialBOP, QuickQuoteObject.QuickQuoteLobType.CommercialCrime, QuickQuoteObject.QuickQuoteLobType.CommercialGarage, QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability, QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine, QuickQuoteObject.QuickQuoteLobType.CommercialPackage, QuickQuoteObject.QuickQuoteLobType.CommercialProperty, QuickQuoteObject.QuickQuoteLobType.CommercialUmbrella, QuickQuoteObject.QuickQuoteLobType.Farm, QuickQuoteObject.QuickQuoteLobType.WorkersCompensation, QuickQuoteObject.QuickQuoteLobType.UmbrellaPersonal
                    Return True
                Case QuickQuoteObject.QuickQuoteLobType.AutoPersonal, QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, QuickQuoteObject.QuickQuoteLobType.HomePersonal
                    Return False
                Case Else
                    Return False
            End Select
        End Function
        Public Shared Function MultiState_EffectiveDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("VR_MultiState_EffectiveDate")
            'If String.IsNullOrWhiteSpace(dt) = False OrElse IsDate(dt) = False Then
            'corrected 10/1/2018
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                dt = CDate("1/1/2019").ToShortDateString
            End If

            Return dt
        End Function

        'added 10/1/2018; similar function may exist elsewhere
        Public Shared Function StringForListOfInteger(ByVal ints As List(Of Integer), Optional ByVal delimiter As String = " ", Optional ByVal positiveOnly As Boolean = False) As String
            Dim str As String = ""

            If ints IsNot Nothing AndAlso ints.Count > 0 Then
                Dim qqHelper As New QuickQuoteHelperClass
                For Each i As Integer In ints
                    str = qqHelper.appendText(str, i.ToString, splitter:=delimiter)
                Next
            End If

            Return str
        End Function

        'added 10/4/2018
        Public Shared Function QuoteHasAnyStateFromList(ByVal qqo As QuickQuoteObject, ByVal qqStates As List(Of QuickQuoteState)) As Boolean
            Dim hasState As Boolean = False

            If qqo IsNot Nothing AndAlso qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                Dim quoteStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(qqo)
                If quoteStates IsNot Nothing AndAlso quoteStates.Count > 0 Then
                    For Each s As QuickQuoteState In qqStates
                        If System.Enum.IsDefined(GetType(QuickQuoteState), s) = True AndAlso s <> QuickQuoteState.None AndAlso quoteStates.Contains(s) = True Then
                            hasState = True
                            Exit For
                        End If
                    Next
                End If
            End If

            Return hasState
        End Function
        Public Shared Function QuoteHasAnyStateFromList_ReturnSpecifics(ByVal qqo As QuickQuoteObject, ByVal qqStates As List(Of QuickQuoteState), ByRef qqStatesPresent As List(Of QuickQuoteState), ByRef qqStatesMissing As List(Of QuickQuoteState)) As Boolean
            Dim hasState As Boolean = False
            qqStatesPresent = Nothing
            qqStatesMissing = Nothing

            If qqo IsNot Nothing AndAlso qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                Dim quoteStates As List(Of QuickQuoteState) = QuickQuoteStatesForQuote(qqo)
                For Each s As QuickQuoteState In qqStates
                    If System.Enum.IsDefined(GetType(QuickQuoteState), s) = True AndAlso s <> QuickQuoteState.None Then
                        Dim hasIt As Boolean = False
                        If quoteStates IsNot Nothing AndAlso quoteStates.Count > 0 Then
                            If quoteStates.Contains(s) = True Then
                                hasState = True
                                hasIt = True
                            End If
                        End If
                        If hasIt = True Then
                            AddQuickQuoteStateToList(s, qqStatesPresent)
                        Else
                            AddQuickQuoteStateToList(s, qqStatesMissing)
                        End If
                    End If
                Next
                If quoteStates IsNot Nothing AndAlso quoteStates.Count > 0 Then

                End If
            End If

            Return hasState
        End Function

        'added 10/11/2018
        Public Shared Function OkayToCopyUWQuestionsFromStatePartToMasterPartForMultiState() As Boolean
            Dim isOkay As Boolean = False

            Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToCopyUWQuestionsFromStatePartToMasterPartForMultiState")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then
                    isOkay = True
                End If
            End If

            Return isOkay
        End Function
        Public Sub CopyMultiStateUWQuestionsToMasterPartIfNeeded(ByRef qqo As QuickQuoteObject)
            If qqo IsNot Nothing AndAlso OkayToCopyUWQuestionsFromStatePartToMasterPartForMultiState() = True Then
                Dim quoteStates As List(Of QuickQuoteState) = qqo.QuoteStates
                If quoteStates IsNot Nothing AndAlso (quoteStates.Count > 1 OrElse (quoteStates.Count = 1 AndAlso qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count = 1 AndAlso qqo.QuickQuoteState = qqo.MultiStateQuotes(0).QuickQuoteState)) Then
                    'has multiple states (or is single-state in multi-state format); continue
                    Dim stateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo)
                    If stateQuotes IsNot Nothing AndAlso stateQuotes.Count > 0 Then
                        For Each sq As QuickQuoteObject In stateQuotes
                            If sq IsNot Nothing AndAlso sq.PolicyUnderwritings IsNot Nothing AndAlso sq.PolicyUnderwritings.Count > 0 Then
                                qqo.PolicyUnderwritings = CloneObject(sq.PolicyUnderwritings)
                                qqo.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = False
                                Exit For
                            End If
                        Next
                    End If
                End If
            End If
        End Sub

        'added 10/17/2018
        'Public Sub SetDiamondNumsForPackagePartLocations(ByRef qqLocations As List(Of QuickQuoteLocation), ByVal packagePartLocations As List(Of QuickQuoteLocation), ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal setMainDiamondNumPropertyIfNoPackagePartTypeSpecified As Boolean = False)
        '    If setMainDiamondNumPropertyIfNoPackagePartTypeSpecified = True OrElse (System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuotePackagePartType), packagePartType) = True AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None) Then
        '        If qqLocations IsNot Nothing AndAlso packagePartLocations IsNot Nothing AndAlso qqLocations.Count > 0 AndAlso qqLocations.Count = packagePartLocations.Count Then
        '            Dim locCounter As Integer = 0
        '            For Each qLoc As QuickQuoteLocation In qqLocations
        '                locCounter += 1
        '                If qLoc IsNot Nothing Then
        '                    Dim pLoc As QuickQuoteLocation = packagePartLocations.Item(locCounter - 1)
        '                    If pLoc IsNot Nothing Then
        '                        If pLoc.HasValidLocationNum(packagePartType) = True AndAlso qLoc.HasValidLocationNum(packagePartType) = False Then
        '                            qLoc.SetLocationNumForPackagePartType(pLoc.LocationNumForPackagePartType(packagePartType), packagePartType)
        '                        End If

        '                        If qLoc.Buildings IsNot Nothing AndAlso pLoc.Buildings IsNot Nothing AndAlso qLoc.Buildings.Count > 0 AndAlso qLoc.Buildings.Count = pLoc.Buildings.Count Then
        '                            Dim bCounter As Integer = 0
        '                            For Each qB As QuickQuoteBuilding In qLoc.Buildings
        '                                bCounter += 1
        '                                If qB IsNot Nothing Then
        '                                    Dim pB As QuickQuoteBuilding = pLoc.Buildings.Item(bCounter - 1)
        '                                    If pB IsNot Nothing Then
        '                                        If pB.HasValidFarmBarnBuildingNum(packagePartType) = True AndAlso qB.HasValidFarmBarnBuildingNum(packagePartType) = False Then
        '                                            qB.SetFarmBarnBuildingNumForPackagePartType(pB.FarmBarnBuildingNumForPackagePartType(packagePartType), packagePartType)
        '                                        End If
        '                                    End If
        '                                End If
        '                            Next
        '                        End If
        '                    End If
        '                End If
        '            Next
        '        End If
        '    End If
        'End Sub
        Public Sub SetPackagePartDiamondNumsForLocations(ByRef qqo As QuickQuoteObject, ByVal packagePartLocations As List(Of QuickQuoteLocation), ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal setMainDiamondNumPropertyIfNoPackagePartTypeSpecified As Boolean = False, Optional ByVal useMainDiamondNumPropertyFromPackagePartItem As Boolean = True) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
            If qqo IsNot Nothing AndAlso (setMainDiamondNumPropertyIfNoPackagePartTypeSpecified = True OrElse (System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuotePackagePartType), packagePartType) = True AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None)) Then
                If qqo.VersionAndLobInfo.Locations IsNot Nothing AndAlso packagePartLocations IsNot Nothing AndAlso qqo.VersionAndLobInfo.Locations.Count > 0 AndAlso qqo.VersionAndLobInfo.Locations.Count = packagePartLocations.Count Then
                    'added 1/28/2019
                    Dim packagePartTypeToUseFromPackagePartItem As QuickQuoteXML.QuickQuotePackagePartType = packagePartType
                    If useMainDiamondNumPropertyFromPackagePartItem = True Then
                        packagePartTypeToUseFromPackagePartItem = QuickQuoteXML.QuickQuotePackagePartType.None
                    End If

                    Dim locCounter As Integer = 0
                    For Each qLoc As QuickQuoteLocation In qqo.VersionAndLobInfo.Locations
                        locCounter += 1
                        If qLoc IsNot Nothing Then
                            Dim pLoc As QuickQuoteLocation = packagePartLocations.Item(locCounter - 1)
                            If pLoc IsNot Nothing Then
                                'If pLoc.HasValidLocationNum(packagePartType) = True AndAlso qLoc.HasValidLocationNum(packagePartType) = False Then
                                '    qLoc.SetLocationNumForPackagePartType(pLoc.LocationNumForPackagePartType(packagePartType), packagePartType)
                                '    qqo.SetCanUseLocationNumFlagForPackagePartType(True, packagePartType)
                                'End If
                                'updated 1/28/2019
                                If pLoc.HasValidLocationNum(packagePartTypeToUseFromPackagePartItem) = True AndAlso qLoc.HasValidLocationNum(packagePartType) = False Then
                                    qLoc.SetLocationNumForPackagePartType(pLoc.LocationNumForPackagePartType(packagePartTypeToUseFromPackagePartItem), packagePartType)
                                    qqo.SetCanUseLocationNumFlagForPackagePartType(True, packagePartType)
                                End If

                                If qLoc.Buildings IsNot Nothing AndAlso pLoc.Buildings IsNot Nothing AndAlso qLoc.Buildings.Count > 0 AndAlso qLoc.Buildings.Count = pLoc.Buildings.Count Then
                                    Dim bCounter As Integer = 0
                                    For Each qB As QuickQuoteBuilding In qLoc.Buildings
                                        bCounter += 1
                                        If qB IsNot Nothing Then
                                            Dim pB As QuickQuoteBuilding = pLoc.Buildings.Item(bCounter - 1)
                                            If pB IsNot Nothing Then
                                                'If pB.HasValidFarmBarnBuildingNum(packagePartType) = True AndAlso qB.HasValidFarmBarnBuildingNum(packagePartType) = False Then
                                                '    qB.SetFarmBarnBuildingNumForPackagePartType(pB.FarmBarnBuildingNumForPackagePartType(packagePartType), packagePartType)
                                                '    qLoc.SetCanUseFarmBarnBuildingNumFlagForPackagePartType(True, packagePartType)
                                                'End If
                                                'updated 1/28/2019
                                                If pB.HasValidFarmBarnBuildingNum(packagePartTypeToUseFromPackagePartItem) = True AndAlso qB.HasValidFarmBarnBuildingNum(packagePartType) = False Then
                                                    qB.SetFarmBarnBuildingNumForPackagePartType(pB.FarmBarnBuildingNumForPackagePartType(packagePartTypeToUseFromPackagePartItem), packagePartType)
                                                    qLoc.SetCanUseFarmBarnBuildingNumFlagForPackagePartType(True, packagePartType)
                                                End If

                                                'added 10/19/2018
                                                If qB.Modifiers IsNot Nothing AndAlso pB.Modifiers IsNot Nothing AndAlso qB.Modifiers.Count > 0 AndAlso qB.Modifiers.Count = pB.Modifiers.Count Then
                                                    SetPackagePartDiamondNumsForModifiers(qB.Modifiers, pB.Modifiers, packagePartType, useMainDiamondNumPropertyFromPackagePartItem:=useMainDiamondNumPropertyFromPackagePartItem) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
                                                End If
                                            End If
                                        End If
                                    Next
                                End If

                                'added 10/19/2018
                                If qLoc.Modifiers IsNot Nothing AndAlso pLoc.Modifiers IsNot Nothing AndAlso qLoc.Modifiers.Count > 0 AndAlso qLoc.Modifiers.Count = pLoc.Modifiers.Count Then
                                    SetPackagePartDiamondNumsForModifiers(qLoc.Modifiers, pLoc.Modifiers, packagePartType, useMainDiamondNumPropertyFromPackagePartItem:=useMainDiamondNumPropertyFromPackagePartItem) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
                                End If

                                'added 10/29/2018
                                If qLoc.SectionICoverages IsNot Nothing AndAlso pLoc.SectionICoverages IsNot Nothing AndAlso qLoc.SectionICoverages.Count > 0 AndAlso pLoc.SectionICoverages.Count >= qLoc.SectionICoverages.Count Then
                                    'added logic 10/30/2018
                                    Dim pSectCovMatchNums As New List(Of Integer)
                                    For Each qSc As QuickQuoteSectionICoverage In qLoc.SectionICoverages
                                        Dim hasMatch As Boolean = False
                                        Dim pSectCovCounter As Integer = 0
                                        For Each pSc As QuickQuoteSectionICoverage In pLoc.SectionICoverages
                                            pSectCovCounter += 1
                                            If pSectCovMatchNums.Contains(pSectCovCounter) = False Then
                                                hasMatch = IsQuickQuoteObjectMatch_SectionICoverage(qSc, pSc) 'note from QQXml.CopyRatedQuoteInfo... method: rated object should be compare object as it could have additional objects / list objects that Diamond has automatically added
                                                If hasMatch = True Then
                                                    pSectCovMatchNums.Add(pSectCovCounter)
                                                    UpdateDiamondNumAndCanUseFlagGroupsIfPossible(qSc.SectionCoverageNumGroup, pSc.SectionCoverageNumGroup, qLoc.CanUseDiamondNumForSectionCoverageReconciliationGroup, packagePartType:=packagePartType, useMainDiamondNumPropertyFromPackagePartItem:=useMainDiamondNumPropertyFromPackagePartItem) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
                                                    Exit For
                                                End If
                                            End If
                                        Next
                                    Next
                                End If
                                'added logic 10/30/2018
                                If qLoc.SectionIICoverages IsNot Nothing AndAlso pLoc.SectionIICoverages IsNot Nothing AndAlso qLoc.SectionIICoverages.Count > 0 AndAlso pLoc.SectionIICoverages.Count >= qLoc.SectionIICoverages.Count Then
                                    Dim pSectCovMatchNums As New List(Of Integer)
                                    For Each qSc As QuickQuoteSectionIICoverage In qLoc.SectionIICoverages
                                        Dim hasMatch As Boolean = False
                                        Dim pSectCovCounter As Integer = 0
                                        For Each pSc As QuickQuoteSectionIICoverage In pLoc.SectionIICoverages
                                            pSectCovCounter += 1
                                            If pSectCovMatchNums.Contains(pSectCovCounter) = False Then
                                                hasMatch = IsQuickQuoteObjectMatch_SectionIICoverage(qSc, pSc) 'note from QQXml.CopyRatedQuoteInfo... method: rated object should be compare object as it could have additional objects / list objects that Diamond has automatically added
                                                If hasMatch = True Then
                                                    pSectCovMatchNums.Add(pSectCovCounter)
                                                    UpdateDiamondNumAndCanUseFlagGroupsIfPossible(qSc.SectionCoverageNumGroup, pSc.SectionCoverageNumGroup, qLoc.CanUseDiamondNumForSectionCoverageReconciliationGroup, packagePartType:=packagePartType, useMainDiamondNumPropertyFromPackagePartItem:=useMainDiamondNumPropertyFromPackagePartItem) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
                                                    Exit For
                                                End If
                                            End If
                                        Next
                                    Next
                                End If
                                If qLoc.SectionIAndIICoverages IsNot Nothing AndAlso pLoc.SectionIAndIICoverages IsNot Nothing AndAlso qLoc.SectionIAndIICoverages.Count > 0 AndAlso pLoc.SectionIAndIICoverages.Count >= qLoc.SectionIAndIICoverages.Count Then
                                    Dim pSectCovMatchNums As New List(Of Integer)
                                    For Each qSc As QuickQuoteSectionIAndIICoverage In qLoc.SectionIAndIICoverages
                                        Dim hasMatch As Boolean = False
                                        Dim pSectCovCounter As Integer = 0
                                        For Each pSc As QuickQuoteSectionIAndIICoverage In pLoc.SectionIAndIICoverages
                                            pSectCovCounter += 1
                                            If pSectCovMatchNums.Contains(pSectCovCounter) = False Then
                                                hasMatch = IsQuickQuoteObjectMatch_SectionIandIICoverage(qSc, pSc) 'note from QQXml.CopyRatedQuoteInfo... method: rated object should be compare object as it could have additional objects / list objects that Diamond has automatically added
                                                If hasMatch = True Then
                                                    pSectCovMatchNums.Add(pSectCovCounter)
                                                    UpdateDiamondNumAndCanUseFlagGroupsIfPossible(qSc.SectionCoverageNumGroup, pSc.SectionCoverageNumGroup, qLoc.CanUseDiamondNumForSectionCoverageReconciliationGroup, packagePartType:=packagePartType, useMainDiamondNumPropertyFromPackagePartItem:=useMainDiamondNumPropertyFromPackagePartItem) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
                                                    Exit For
                                                End If
                                            End If
                                        Next
                                    Next
                                End If

                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub SetPackagePartDiamondNumsForVehicles(ByRef qqo As QuickQuoteObject, ByVal packagePartVehicles As List(Of QuickQuoteVehicle), ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal setMainDiamondNumPropertyIfNoPackagePartTypeSpecified As Boolean = False, Optional ByVal useMainDiamondNumPropertyFromPackagePartItem As Boolean = True) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
            If qqo IsNot Nothing AndAlso (setMainDiamondNumPropertyIfNoPackagePartTypeSpecified = True OrElse (System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuotePackagePartType), packagePartType) = True AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None)) Then
                If qqo.VersionAndLobInfo.Vehicles IsNot Nothing AndAlso packagePartVehicles IsNot Nothing AndAlso qqo.VersionAndLobInfo.Vehicles.Count > 0 AndAlso qqo.VersionAndLobInfo.Vehicles.Count = packagePartVehicles.Count Then
                    'added 1/28/2019
                    Dim packagePartTypeToUseFromPackagePartItem As QuickQuoteXML.QuickQuotePackagePartType = packagePartType
                    If useMainDiamondNumPropertyFromPackagePartItem = True Then
                        packagePartTypeToUseFromPackagePartItem = QuickQuoteXML.QuickQuotePackagePartType.None
                    End If

                    Dim vehCounter As Integer = 0
                    For Each qVeh As QuickQuoteVehicle In qqo.VersionAndLobInfo.Vehicles
                        vehCounter += 1
                        If qVeh IsNot Nothing Then
                            Dim pVeh As QuickQuoteVehicle = packagePartVehicles.Item(vehCounter - 1)
                            If pVeh IsNot Nothing Then
                                'If pVeh.HasValidVehicleNum(packagePartType) = True AndAlso qVeh.HasValidVehicleNum(packagePartType) = False Then
                                '    qVeh.SetVehicleNumForPackagePartType(pVeh.VehicleNumForPackagePartType(packagePartType), packagePartType)
                                '    qqo.SetCanUseVehicleNumFlagForPackagePartType(True, packagePartType)
                                'End If
                                'updated 1/28/2019
                                If pVeh.HasValidVehicleNum(packagePartTypeToUseFromPackagePartItem) = True AndAlso qVeh.HasValidVehicleNum(packagePartType) = False Then
                                    qVeh.SetVehicleNumForPackagePartType(pVeh.VehicleNumForPackagePartType(packagePartTypeToUseFromPackagePartItem), packagePartType)
                                    qqo.SetCanUseVehicleNumFlagForPackagePartType(True, packagePartType)
                                End If
                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub SetPackagePartDiamondNums(ByRef qqo As QuickQuoteObject)
            If qqo IsNot Nothing Then
                If qqo.VersionAndLobInfo.Locations IsNot Nothing AndAlso qqo.VersionAndLobInfo.Locations.Count > 0 Then
                    SetPackagePartDiamondNumsForLocations(qqo, qqo.TopLevelQuoteInfo.MasterPackageLocations, QuickQuoteXML.QuickQuotePackagePartType.Package)
                    SetPackagePartDiamondNumsForLocations(qqo, qqo.TopLevelQuoteInfo.CGLPackageLocations, QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
                    SetPackagePartDiamondNumsForLocations(qqo, qqo.TopLevelQuoteInfo.CPRPackageLocations, QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
                    SetPackagePartDiamondNumsForLocations(qqo, qqo.TopLevelQuoteInfo.CIMPackageLocations, QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
                    SetPackagePartDiamondNumsForLocations(qqo, qqo.TopLevelQuoteInfo.CRMPackageLocations, QuickQuoteXML.QuickQuotePackagePartType.Crime)
                    SetPackagePartDiamondNumsForLocations(qqo, qqo.TopLevelQuoteInfo.GARPackageLocations, QuickQuoteXML.QuickQuotePackagePartType.Garage)
                End If
                If qqo.VersionAndLobInfo.Vehicles IsNot Nothing AndAlso qqo.VersionAndLobInfo.Vehicles.Count > 0 Then
                    SetPackagePartDiamondNumsForVehicles(qqo, qqo.TopLevelQuoteInfo.MasterPackageVehicles, QuickQuoteXML.QuickQuotePackagePartType.Package)
                    SetPackagePartDiamondNumsForVehicles(qqo, qqo.TopLevelQuoteInfo.CGLPackageVehicles, QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
                    SetPackagePartDiamondNumsForVehicles(qqo, qqo.TopLevelQuoteInfo.CPRPackageVehicles, QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
                    SetPackagePartDiamondNumsForVehicles(qqo, qqo.TopLevelQuoteInfo.CIMPackageVehicles, QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
                    SetPackagePartDiamondNumsForVehicles(qqo, qqo.TopLevelQuoteInfo.CRMPackageVehicles, QuickQuoteXML.QuickQuotePackagePartType.Crime)
                    SetPackagePartDiamondNumsForVehicles(qqo, qqo.TopLevelQuoteInfo.GARPackageVehicles, QuickQuoteXML.QuickQuotePackagePartType.Garage)
                End If
                'added 10/19/2018
                If qqo.VersionAndLobInfo.Modifiers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Modifiers.Count > 0 Then
                    SetPackagePartDiamondNumsForModifiers(qqo.VersionAndLobInfo.Modifiers, qqo.TopLevelQuoteInfo.MasterPackageModifiers, QuickQuoteXML.QuickQuotePackagePartType.Package)
                    SetPackagePartDiamondNumsForModifiers(qqo.VersionAndLobInfo.Modifiers, qqo.TopLevelQuoteInfo.CGLPackageModifiers, QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
                    SetPackagePartDiamondNumsForModifiers(qqo.VersionAndLobInfo.Modifiers, qqo.TopLevelQuoteInfo.CPRPackageModifiers, QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
                    SetPackagePartDiamondNumsForModifiers(qqo.VersionAndLobInfo.Modifiers, qqo.TopLevelQuoteInfo.CIMPackageModifiers, QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
                    SetPackagePartDiamondNumsForModifiers(qqo.VersionAndLobInfo.Modifiers, qqo.TopLevelQuoteInfo.CRMPackageModifiers, QuickQuoteXML.QuickQuotePackagePartType.Crime)
                    SetPackagePartDiamondNumsForModifiers(qqo.VersionAndLobInfo.Modifiers, qqo.TopLevelQuoteInfo.GARPackageModifiers, QuickQuoteXML.QuickQuotePackagePartType.Garage)
                End If
            End If
        End Sub

        'added 10/19/2018
        Public Function QuickQuoteModifierForTypeIds(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modTypeId As Integer, ByVal parentModTypeId As Integer) As QuickQuoteModifier
            Dim qqMod As QuickQuoteModifier = Nothing

            If qqModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 Then
                For Each m As QuickQuoteModifier In qqModifiers
                    If m IsNot Nothing Then
                        If IntegerForString(m.ModifierTypeId) = modTypeId AndAlso IntegerForString(m.ParentModifierTypeId) = parentModTypeId Then
                            qqMod = m
                            Exit For
                        End If
                    End If
                Next
            End If

            Return qqMod
        End Function
        'added 1/9/2020
        Public Function QuickQuoteModifierForTypeIds_AddIfNeeded(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modTypeId As Integer, ByVal parentModTypeId As Integer, Optional ByVal checkListForExistingModifierFirst As Boolean = True, Optional ByRef itemAlreadyExistedOrAddedNew As AlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.None) As QuickQuoteModifier
            itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.None
            Dim qqMod As QuickQuoteModifier = Nothing

            If checkListForExistingModifierFirst = True Then
                qqMod = QuickQuoteModifierForTypeIds(qqModifiers, modTypeId, parentModTypeId)
            End If

            If qqMod Is Nothing Then
                qqMod = New QuickQuoteModifier
                qqMod.ModifierTypeId = modTypeId.ToString
                qqMod.ParentModifierTypeId = parentModTypeId.ToString
                If qqModifiers Is Nothing Then
                    qqModifiers = New List(Of QuickQuoteModifier)
                End If
                qqModifiers.Add(qqMod)
                itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AddedNew
            Else
                itemAlreadyExistedOrAddedNew = AlreadyExistedOrAddedNew.AlreadyExisted
            End If

            Return qqMod
        End Function
        Public Function QuickQuoteModifierIndexesForTypeIds(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modTypeId As Integer, ByVal parentModTypeId As Integer) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If qqModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 Then
                Dim counter As Integer = 0
                For Each m As QuickQuoteModifier In qqModifiers
                    counter += 1
                    If IntegerForString(m.ModifierTypeId) = modTypeId AndAlso IntegerForString(m.ParentModifierTypeId) = parentModTypeId Then
                        AddIntegerToIntegerList(counter - 1, indexes)
                    End If
                Next
            End If

            Return indexes
        End Function
        Public Function QuickQuoteModifierIndexesForTypeIdCombos(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal typeIdCombos As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If qqModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 AndAlso typeIdCombos IsNot Nothing AndAlso typeIdCombos.Count > 0 Then
                Dim counter As Integer = 0
                For Each m As QuickQuoteModifier In qqModifiers
                    counter += 1
                    For Each combo As QuickQuoteGenericObjectWithTwoIntegerProperties In typeIdCombos
                        If combo IsNot Nothing AndAlso IntegerForString(m.ModifierTypeId) = combo.Property1 AndAlso IntegerForString(m.ParentModifierTypeId) = combo.Property2 Then
                            AddIntegerToIntegerList(counter - 1, indexes)
                            Exit For 'no need to keep looking in typeIdCombos until next iteration for mods
                        End If
                    Next
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteModifiersForTypeIds(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modTypeId As Integer, ByVal parentModTypeId As Integer, Optional ByRef numberOfModifiersRemoved As Integer = 0)
            numberOfModifiersRemoved = 0
            If qqModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteModifierIndexesForTypeIds(qqModifiers, modTypeId, parentModTypeId)
                RemoveQuickQuoteModifiersByIndexes(qqModifiers, indexes, numberOfModifiersRemoved)
            End If
        End Sub
        Public Sub RemoveQuickQuoteModifiersForTypeIdCombos(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal typeIdCombos As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties), Optional ByRef numberOfModifiersRemoved As Integer = 0)
            numberOfModifiersRemoved = 0
            If qqModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 AndAlso typeIdCombos IsNot Nothing AndAlso typeIdCombos.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteModifierIndexesForTypeIdCombos(qqModifiers, typeIdCombos)
                RemoveQuickQuoteModifiersByIndexes(qqModifiers, indexes, numberOfModifiersRemoved)
            End If
        End Sub
        Public Sub RemoveQuickQuoteModifiersByIndexes(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modIndexes As List(Of Integer), Optional ByRef numberOfModifiersRemoved As Integer = 0)
            numberOfModifiersRemoved = 0

            If qqModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 AndAlso modIndexes IsNot Nothing AndAlso modIndexes.Count > 0 Then
                'put them in order 1st
                modIndexes.Sort()
                'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                modIndexes.Reverse()
                For Each i As Integer In modIndexes
                    If qqModifiers.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        qqModifiers.RemoveAt(i)
                        numberOfModifiersRemoved += 1
                    End If
                Next
            End If
        End Sub
        Public Function QuickQuoteModifierNumForTypeIds(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modTypeId As Integer, ByVal parentModTypeId As Integer, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) As String
            Dim modNum As String = ""

            Dim qqMod As QuickQuoteModifier = QuickQuoteModifierForTypeIds(qqModifiers, modTypeId, parentModTypeId)
            If qqMod IsNot Nothing Then
                modNum = qqMod.ModifierNumForPackagePartType(packagePartType)
            End If

            Return modNum
        End Function
        Public Sub WriteModiferNumIfNeeded(ByVal qqModifier As QuickQuoteModifier, ByRef writer As XmlWriter, ByVal okayToWriteDiamondNums As Boolean, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            'If qqModifier IsNot Nothing AndAlso writer IsNot Nothing AndAlso okayToWriteDiamondNums = True Then
            '    If qqModifier.HasValidModifierNum(packagePartType) = True Then
            '        With writer
            '            .WriteStartElement("ModifierNum")
            '            .WriteElementString("InternalValue", qqModifier.ModifierNumForPackagePartType(packagePartType))
            '            .WriteEndElement() 'ModifierNum
            '        End With
            '    End If
            'End If
            'updated 11/16/2020 (Interoperability)
            WriteModiferNumIfNeeded_maybeUseExistingModifierNum(qqModifier, writer, okayToWriteDiamondNums, packagePartType:=packagePartType, okayToUseExisting:=False)
        End Sub
        'added 11/16/2020 (Interoperability)
        Public Sub WriteModiferNumIfNeeded_maybeUseExistingModifierNum(ByVal qqModifier As QuickQuoteModifier, ByRef writer As XmlWriter, ByVal okayToWriteDiamondNums As Boolean, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None, Optional ByVal okayToUseExisting As Boolean = False)
            If qqModifier IsNot Nothing AndAlso writer IsNot Nothing AndAlso okayToWriteDiamondNums = True Then
                If okayToUseExisting = True AndAlso qqModifier.HasValidModifierNum() = True Then
                    WriteModiferNumIfValid(qqModifier.ModifierNum, writer)
                ElseIf qqModifier.HasValidModifierNum(packagePartType:=packagePartType) = True Then
                    WriteModiferNumIfValid(qqModifier.ModifierNumForPackagePartType(packagePartType), writer)
                End If
            End If
        End Sub
        Public Sub WriteModiferNumIfValid(ByVal modifierNum As String, ByRef writer As XmlWriter)
            If IsValidQuickQuoteIdOrNum(modifierNum) = True AndAlso writer IsNot Nothing Then
                With writer
                    .WriteStartElement("ModifierNum")
                    .WriteElementString("InternalValue", modifierNum)
                    .WriteEndElement() 'ModifierNum
                End With
            End If
        End Sub
        Public Sub WriteModiferNumIfNeeded(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal modTypeId As Integer, ByVal parentModTypeId As Integer, ByRef writer As XmlWriter, ByVal okayToWriteDiamondNums As Boolean, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None)
            If writer IsNot Nothing AndAlso okayToWriteDiamondNums = True Then
                Dim qqMod As QuickQuoteModifier = QuickQuoteModifierForTypeIds(qqModifiers, modTypeId, parentModTypeId)
                If qqMod IsNot Nothing Then
                    WriteModiferNumIfNeeded(qqMod, writer, okayToWriteDiamondNums, packagePartType:=packagePartType)
                End If
            End If
        End Sub
        Public Sub SetPackagePartDiamondNumsForModifiers(ByRef qqModifiers As List(Of QuickQuoteModifier), ByVal packagePartModifiers As List(Of QuickQuoteModifier), ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, Optional ByVal setMainDiamondNumPropertyIfNoPackagePartTypeSpecified As Boolean = False, Optional ByRef canUseModifierNumFlag As Boolean = False, Optional ByVal useMainDiamondNumPropertyFromPackagePartItem As Boolean = True) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem
            If setMainDiamondNumPropertyIfNoPackagePartTypeSpecified = True OrElse (System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuotePackagePartType), packagePartType) = True AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None) Then
                If qqModifiers IsNot Nothing AndAlso packagePartModifiers IsNot Nothing AndAlso qqModifiers.Count > 0 AndAlso qqModifiers.Count = packagePartModifiers.Count Then
                    'added 1/28/2019
                    Dim packagePartTypeToUseFromPackagePartItem As QuickQuoteXML.QuickQuotePackagePartType = packagePartType
                    If useMainDiamondNumPropertyFromPackagePartItem = True Then
                        packagePartTypeToUseFromPackagePartItem = QuickQuoteXML.QuickQuotePackagePartType.None
                    End If

                    Dim modCounter As Integer = 0
                    For Each qMod As QuickQuoteModifier In qqModifiers
                        modCounter += 1
                        If qMod IsNot Nothing Then
                            Dim pMod As QuickQuoteModifier = packagePartModifiers.Item(modCounter - 1)
                            If pMod IsNot Nothing Then
                                'If pMod.HasValidModifierNum(packagePartType) = True AndAlso qMod.HasValidModifierNum(packagePartType) = False Then
                                '    qMod.SetModifierNumForPackagePartType(pMod.ModifierNumForPackagePartType(packagePartType), packagePartType)
                                '    canUseModifierNumFlag = True
                                'End If
                                'updated 1/28/2019
                                If pMod.HasValidModifierNum(packagePartTypeToUseFromPackagePartItem) = True AndAlso qMod.HasValidModifierNum(packagePartType) = False Then
                                    qMod.SetModifierNumForPackagePartType(pMod.ModifierNumForPackagePartType(packagePartTypeToUseFromPackagePartItem), packagePartType)
                                    canUseModifierNumFlag = True
                                End If
                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub DisposeModifiers(ByRef qqMods As List(Of QuickQuoteModifier))
            If qqMods IsNot Nothing Then
                If qqMods.Count > 0 Then
                    For Each qqMod As QuickQuoteModifier In qqMods
                        DisposeModifier(qqMod)
                    Next
                    qqMods.Clear()
                End If
                qqMods = Nothing
            End If
        End Sub
        Public Sub DisposeModifier(ByRef qqMod As QuickQuoteModifier)
            If qqMod IsNot Nothing Then
                qqMod.Dispose()
                qqMod = Nothing
            End If
        End Sub
        Public Function GetDiamondModifierNumForPolicyAndType(ByVal policyId As Integer, ByVal policyImageNum As Integer, ByVal packagePartNum As Integer, ByVal modifierTypeId As Integer, ByVal parentModifierTypeId As Integer, ByVal modifierLevelId As Integer) As Integer
            Dim modNum As Integer = 0

            If policyId > 0 AndAlso policyImageNum > 0 AndAlso modifierTypeId > 0 AndAlso parentModifierTypeId > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "select M.modifier_num from Modifier as M with (nolock)"
                        .queryOrStoredProc &= " where M.policy_id = " & policyId.ToString & " and M.policyimage_num = " & policyImageNum.ToString
                        .queryOrStoredProc &= " and M.packagepart_num = " & packagePartNum.ToString
                        .queryOrStoredProc &= " and M.modifiertype_id = " & modifierTypeId.ToString & " and M.parent_modifiertype_id = " & parentModifierTypeId.ToString
                        .queryOrStoredProc &= " and M.modifierlevel_id = " & modifierLevelId.ToString 'added 10/22/2018

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    modNum = .Item("modifier_num")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return modNum
        End Function

        'added 10/22/2018
        Public Shared Function OkayToLookupDiamondModifierNumForReconciliation(Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) As Boolean
            Dim isOkay As Boolean = False

            Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToLookupDiamondModifierNumForReconciliation")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then
                    isOkay = True
                Else
                    Dim strPackagePartType As String = ""
                    If System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuotePackagePartType), packagePartType) = True Then
                        strPackagePartType = System.Enum.GetName(GetType(QuickQuoteXML.QuickQuotePackagePartType), packagePartType)
                    End If
                    If String.IsNullOrWhiteSpace(strPackagePartType) = False Then
                        If UCase(strIsOkay).Contains(UCase(strPackagePartType)) = True Then
                            isOkay = True
                        End If
                    End If
                End If
            End If

            Return isOkay
        End Function

        'added 10/29/2018
        Public Sub DisposeQuickQuoteDiamondNumGroup(ByRef qqDiaNum As QuickQuoteDiamondNumGroup)
            If qqDiaNum IsNot Nothing Then
                qqDiaNum.Dispose()
                qqDiaNum = Nothing
            End If
        End Sub
        Public Sub DisposeQuickQuoteCanUseDiamondNumFlagGroup(ByRef qqCanUseDiaNumFlagGroup As QuickQuoteCanUseDiamondNumFlagGroup)
            If qqCanUseDiaNumFlagGroup IsNot Nothing Then
                qqCanUseDiaNumFlagGroup.Dispose()
                qqCanUseDiaNumFlagGroup = Nothing
            End If
        End Sub
        'added 10/30/2018
        Public Sub UpdateDiamondNumAndCanUseFlagGroupsIfPossible(ByRef diaNumGroupToUpdate As QuickQuoteDiamondNumGroup, ByVal diaNumGroupToUse As QuickQuoteDiamondNumGroup, ByRef parentCanUseDiaNumFlagGroup As QuickQuoteCanUseDiamondNumFlagGroup, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None, Optional ByVal useMainDiamondNumPropertyFromPackagePartItem As Boolean = False) 'updated 1/28/2019 w/ optional param for useMainDiamondNumPropertyFromPackagePartItem (defaulted to False here unlike Locations/Vehicles/Modifiers routines where default is True)
            'added 1/28/2019
            Dim packagePartTypeToUseFromPackagePartItem As QuickQuoteXML.QuickQuotePackagePartType = packagePartType
            If useMainDiamondNumPropertyFromPackagePartItem = True Then
                packagePartTypeToUseFromPackagePartItem = QuickQuoteXML.QuickQuotePackagePartType.None
            End If

            'If diaNumGroupToUse IsNot Nothing AndAlso diaNumGroupToUse.HasValidDiamondNum(packagePartType:=packagePartType) = True Then
            'updated 1/28/2019
            If diaNumGroupToUse IsNot Nothing AndAlso diaNumGroupToUse.HasValidDiamondNum(packagePartType:=packagePartTypeToUseFromPackagePartItem) = True Then
                If diaNumGroupToUpdate Is Nothing Then
                    diaNumGroupToUpdate = New QuickQuoteDiamondNumGroup
                End If
                If diaNumGroupToUpdate.HasValidDiamondNum(packagePartType:=packagePartType) = False Then
                    'diaNumGroupToUpdate.SetDiamondNumForPackagePartType(diaNumGroupToUse.DiamondNumForPackagePartType(packagePartType), packagePartType)
                    'updated 1/28/2019
                    diaNumGroupToUpdate.SetDiamondNumForPackagePartType(diaNumGroupToUse.DiamondNumForPackagePartType(packagePartTypeToUseFromPackagePartItem), packagePartType)
                    If parentCanUseDiaNumFlagGroup Is Nothing Then
                        parentCanUseDiaNumFlagGroup = New QuickQuoteCanUseDiamondNumFlagGroup
                    End If
                    parentCanUseDiaNumFlagGroup.SetCanUseDiamondNumFlagForPackagePartType(True, packagePartType)
                End If
            End If
        End Sub

        'added 11/6/2018
        Public Function IsCondominiumRiskGrade(ByVal riskGradeLookupId As Integer) As Boolean
            Dim isCondo As Boolean = False

            If riskGradeLookupId > 0 Then
                'could perform db lookup 1st and then use hard-coded logic if error is encountered
                Select Case riskGradeLookupId
                    Case 271, 272, 273, 274, 1061
                        isCondo = True
                End Select
            End If
            'riskgradelookup_id  glclasscode	dscr
            '271 62000	Condominiums - commercial - bank Or mercantile, manufacturing Or office(assoc. risk only)
            '272 62001	Condominiums - commercial shopping centers - assoc. risk only
            '273 62002	Condominiums - commercial warehouses - manufacturing Or private - assoc. risk only
            '274 62003	Condominiums - residential - assoc. risk only
            '1061    68500	Townhouses Or Similar Associations (association risk only)

            Return isCondo
        End Function
        Public Function QuoteHasCondominiumRiskGrade(ByVal qqo As QuickQuoteObject) As Boolean
            Dim hasCondo As Boolean = False

            If qqo IsNot Nothing Then
                Dim govStateQuote As QuickQuoteObject = GoverningStateQuote(qqo)
                If govStateQuote IsNot Nothing Then
                    hasCondo = IsCondominiumRiskGrade(IntegerForString(govStateQuote.RiskGradeLookupId))
                Else
                    hasCondo = IsCondominiumRiskGrade(IntegerForString(qqo.RiskGradeLookupId))
                End If
            End If

            Return hasCondo
        End Function
        Public Function CPR_QuoteHasCondominiumRiskGradeAndIllinois(ByVal qqo As QuickQuoteObject, Optional ByVal verifyLob As Boolean = True, Optional ByVal verifyIllinoisLocation As Boolean = False) As Boolean
            Dim hasCondoAndIllinois As Boolean = False

            If qqo IsNot Nothing AndAlso (verifyLob = False OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage) Then
                'note: could also check for qqo.CPP_Has_Property_PackagePart = True when CPP, but shouldn't be needed right now since all of our VR CPP quotes have CPR and CGL defaulted
                If QuoteHasCondominiumRiskGrade(qqo) = True Then
                    If QuoteHasState(qqo, QuickQuoteState.Illinois) = True Then
                        If verifyIllinoisLocation = True Then
                            Dim ilLocs As List(Of QuickQuoteLocation) = LocationsForQuickQuoteState(AllQuickQuoteLocations(qqo, level:=MultiStateLevel.AllStates), QuickQuoteState.Illinois)
                            If LocationCount(ilLocs) > 0 Then
                                hasCondoAndIllinois = True
                            End If
                        Else
                            hasCondoAndIllinois = True
                        End If
                    End If
                End If
            End If

            Return hasCondoAndIllinois
        End Function

        'added 11/19/2018
        Public Shared Function CreateDiamondXmlsForTesting() As QuickQuoteYesNoMaybeType
            Dim createXmls As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe

            Dim strCreateXmls As String = configAppSettingValueAsString("QuickQuote_CreateDiamondXmlsForTesting")
            If String.IsNullOrWhiteSpace(strCreateXmls) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strCreateXmls) = "YES" OrElse qqHelper.BitToBoolean(strCreateXmls) = True Then
                    createXmls = QuickQuoteYesNoMaybeType.Yes
                Else
                    createXmls = QuickQuoteYesNoMaybeType.No
                End If
            End If

            Return createXmls
        End Function
        Public Shared Function DiamondXmlsSaveDirectory() As String
            Dim saveDir As String = ""

            saveDir = AppendTrailingSlashIfNeeded(configAppSettingValueAsString("QuickQuote_DiamondXmlsSaveDirectory"))

            Return saveDir
        End Function
        Public Enum DiamondServiceXmlType 'added 12/18/2018
            None = 0
            FullXml = 1
            PartialXml = 2
        End Enum
        Public Shared Function DiamondServiceXmlTypeToSave() As DiamondServiceXmlType
            Dim xmlType As DiamondServiceXmlType = DiamondServiceXmlType.FullXml

            Dim strXmlType As String = configAppSettingValueAsString("QuickQuote_DiamondServiceXmlTypeToSave")
            If String.IsNullOrWhiteSpace(strXmlType) = False Then
                Select Case UCase(strXmlType)
                    Case "NONE"
                        xmlType = DiamondServiceXmlType.None
                    Case "FULLXML"
                        xmlType = DiamondServiceXmlType.FullXml
                    Case "PARTIALXML"
                        xmlType = DiamondServiceXmlType.PartialXml
                    Case Else
                        If System.Enum.TryParse(Of DiamondServiceXmlType)(strXmlType, xmlType) = False Then
                            xmlType = Nothing
                        End If
                End Select
            End If

            If System.Enum.IsDefined(GetType(DiamondServiceXmlType), xmlType) = False OrElse xmlType = DiamondServiceXmlType.None Then
                xmlType = DiamondServiceXmlType.FullXml
            End If

            Return xmlType
        End Function
        Public Shared Function AppendTrailingSlashIfNeeded(ByVal str As String) As String
            Dim strWithTrailingSlash As String = str

            If String.IsNullOrWhiteSpace(strWithTrailingSlash) = False Then
                Dim lastChar As String = Right(strWithTrailingSlash, 1)
                If lastChar <> "/" AndAlso lastChar <> "\" Then
                    'need to add
                    If strWithTrailingSlash.Contains("/") = True Then
                        strWithTrailingSlash &= "/"
                    Else
                        strWithTrailingSlash &= "\"
                    End If
                End If
            End If

            Return strWithTrailingSlash
        End Function

        'added 12/5/2018
        Public Sub CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy_StateByState(ByRef qqo As QuickQuoteObject, Optional ByVal useBuildingClassificationList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim stateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo)
                If stateQuotes IsNot Nothing AndAlso stateQuotes.Count > 0 Then
                    For Each sq As QuickQuoteObject In stateQuotes
                        If sq IsNot Nothing Then
                            CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy(sq, useBuildingClassificationList:=useBuildingClassificationList)
                        End If
                    Next
                Else
                    CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy(qqo, useBuildingClassificationList:=useBuildingClassificationList)
                End If
            End If
        End Sub
        Public Sub CopyProfessionalLiabilityCoveragesFromPolicyToBuildings_StateByState(ByRef qqo As QuickQuoteObject, Optional ByVal useBuildingClassificationList As Boolean = False)
            If qqo IsNot Nothing Then
                Dim stateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo)
                If stateQuotes IsNot Nothing AndAlso stateQuotes.Count > 0 Then
                    If qqo.IsClone = True Then 'added 10/21/2021 to accommodate syncing of top-level objects with those copied from the state-level
                        qqo.CopyApplicableLocationsFromStateLevelToTopLevel()
                    End If
                    For Each sq As QuickQuoteObject In stateQuotes
                        If sq IsNot Nothing Then
                            CopyProfessionalLiabilityCoveragesFromPolicyToBuildings(sq, useBuildingClassificationList:=useBuildingClassificationList)
                        End If
                    Next
                Else
                    CopyProfessionalLiabilityCoveragesFromPolicyToBuildings(qqo, useBuildingClassificationList:=useBuildingClassificationList)
                End If
            End If
        End Sub

        'added 12/5/2018
        Public Enum DiamondImageToPackagePartSyncType
            None = 0
            GoverningStatePart = 1
            AllParts = 2
            AllPartsExceptMaster = 3
            DummyPart = 4
        End Enum
        Public Function PackagePartTypeStateAndLobPropertiesForPackagePartTypeIds(ByVal ppTypeIds As List(Of Integer), Optional ByRef errorOnLookup As Boolean = False) As List(Of PackagePartTypeStateAndLobProperties)
            Dim pptProps As List(Of PackagePartTypeStateAndLobProperties) = Nothing
            errorOnLookup = False

            If ppTypeIds IsNot Nothing AndAlso ppTypeIds.Count > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        'note: should probably update to stored procedure
                        .queryOrStoredProc = "SELECT PPT.packageparttype_id as packagePartTypeId, COALESCE(CS_Parent.state_id, 0) as parentStateId, COALESCE(CL_Parent.lob_id, 0) as parentLobId, COALESCE(CS.state_id, 0) as partStateId, COALESCE(CL.lob_id, 0) as partLobId"
                        .queryOrStoredProc &= " FROM PackagePartType as PPT WITH (NOLOCK)"
                        .queryOrStoredProc &= " INNER JOIN CompanyStateLOB as CSL WITH (NOLOCK) on CSL.companystatelob_id = PPT.companystatelob_id"
                        .queryOrStoredProc &= " INNER JOIN CompanyLOB as CL WITH (NOLOCK) on CL.companylob_id = CSL.companylob_id"
                        .queryOrStoredProc &= " INNER JOIN CompanyState as CS WITH (NOLOCK) on CS.companystate_id = CSL.companystate_id"
                        .queryOrStoredProc &= " LEFT JOIN PackagePartType as PPT_Parent WITH (NOLOCK) on PPT_Parent.packageparttype_id = PPT.parent_packageparttype_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyStateLOB as CSL_Parent WITH (NOLOCK) on CSL_Parent.companystatelob_id = PPT_Parent.companystatelob_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyLOB as CL_Parent WITH (NOLOCK) on CL_Parent.companylob_id = CSL_Parent.companylob_id"
                        .queryOrStoredProc &= " LEFT JOIN CompanyState as CS_Parent WITH (NOLOCK) on CS_Parent.companystate_id = CSL_Parent.companystate_id"
                        .queryOrStoredProc &= " WHERE PPT.packageparttype_id in (" & StringForListOfInteger(ppTypeIds, delimiter:=", ") & ")"

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                pptProps = New List(Of PackagePartTypeStateAndLobProperties)
                                With dr
                                    While .Read()
                                        Dim p As New PackagePartTypeStateAndLobProperties
                                        p.PackagePartTypeId = .Item("packagePartTypeId")
                                        p.ParentStateId = .Item("parentStateId")
                                        p.ParentLobId = .Item("parentLobId")
                                        p.PartStateId = .Item("partStateId")
                                        p.PartLobId = .Item("partLobId")
                                        pptProps.Add(p)
                                    End While
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                errorOnLookup = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return pptProps
        End Function
        Public Function PackagePartTypeStateAndLobPropertiesForDiamondPackageParts(ByVal diaPackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart), Optional ByVal okayToLookAtDeleted As Boolean = False, Optional ByRef errorOnLookup As Boolean = False) As List(Of PackagePartTypeStateAndLobProperties)
            Dim pptProps As List(Of PackagePartTypeStateAndLobProperties) = Nothing
            errorOnLookup = False

            If diaPackageParts IsNot Nothing AndAlso diaPackageParts.Count > 0 Then
                Dim ppTypeIds As List(Of Integer) = TypeIdsForDiamondPackageParts(diaPackageParts, okayToLookAtDeleted:=okayToLookAtDeleted, uniqueOnly:=True)
                If ppTypeIds IsNot Nothing AndAlso ppTypeIds.Count > 0 Then
                    pptProps = PackagePartTypeStateAndLobPropertiesForPackagePartTypeIds(ppTypeIds, errorOnLookup:=errorOnLookup)
                End If
            End If

            Return pptProps
        End Function
        Public Function DiamondPackagePartsForTypeIds(ByRef diaPackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart), ByVal ppTypeIds As List(Of Integer), Optional ByVal addIfNeeded As Boolean = False, Optional ByVal okayToLookAtDeleted As Boolean = False, Optional ByVal setDetailStatusCodeToActive As Boolean = False, Optional ByRef addedNewCount As Integer = 0) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart)
            Dim diaPPs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart) = Nothing
            addedNewCount = 0

            If ppTypeIds IsNot Nothing AndAlso ppTypeIds.Count > 0 Then
                For Each ppTypeId As Integer In ppTypeIds
                    Dim addedNew As Boolean = False
                    Dim diaPP As Diamond.Common.Objects.Policy.PackagePart = DiamondPackagePartForTypeId(diaPackageParts, ppTypeId, addIfNeeded:=addIfNeeded, okayToLookAtDeleted:=okayToLookAtDeleted, setDetailStatusCodeToActive:=setDetailStatusCodeToActive, addedNew:=addedNew)
                    If diaPP IsNot Nothing Then
                        If diaPPs Is Nothing Then
                            diaPPs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart)
                        End If
                        diaPPs.Add(diaPP)
                        If addedNew = True Then
                            addedNewCount += 1
                        End If
                    End If
                Next
            End If

            Return diaPPs
        End Function
        Public Function DiamondPackagePartsForImageSyncType(ByVal img As Diamond.Common.Objects.Policy.Image, ByVal syncType As DiamondImageToPackagePartSyncType, Optional ByVal okayToLookAtDeleted As Boolean = False, Optional ByRef errorOnLookup As Boolean = False) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart)
            Dim diaPPs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart) = Nothing
            errorOnLookup = False

            'added logic 12/6/2018
            If System.Enum.IsDefined(GetType(DiamondImageToPackagePartSyncType), syncType) = True AndAlso syncType <> DiamondImageToPackagePartSyncType.None AndAlso img IsNot Nothing Then
                If syncType = DiamondImageToPackagePartSyncType.AllParts Then
                    diaPPs = img.PackageParts
                Else
                    Dim pptProps As List(Of PackagePartTypeStateAndLobProperties) = PackagePartTypeStateAndLobPropertiesForDiamondPackageParts(img.PackageParts, okayToLookAtDeleted:=okayToLookAtDeleted, errorOnLookup:=errorOnLookup)
                    If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                        If syncType = DiamondImageToPackagePartSyncType.AllPartsExceptMaster Then
                            Dim ppTypeIds As List(Of Integer) = PackagePartTypeIdsForNonMasterParts(pptProps)
                            diaPPs = DiamondPackagePartsForTypeIds(img.PackageParts, ppTypeIds, addIfNeeded:=False, okayToLookAtDeleted:=okayToLookAtDeleted, setDetailStatusCodeToActive:=False)
                        Else
                            Dim govStateId As Integer = StateIdForMasterPart(pptProps)
                            If govStateId > 0 Then
                                Dim pptPropsGovState As List(Of PackagePartTypeStateAndLobProperties) = NonMasterPackagePartTypeStateAndLobPropertiesForStateId(pptProps, govStateId)
                                If pptPropsGovState IsNot Nothing AndAlso pptPropsGovState.Count > 0 Then
                                    Dim ppTypeIds As List(Of Integer) = PackagePartTypeIdsForPackagePartTypeStateAndLobProperties(pptPropsGovState)
                                    If ppTypeIds IsNot Nothing AndAlso ppTypeIds.Count > 0 Then
                                        Dim govStatePackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart) = DiamondPackagePartsForTypeIds(img.PackageParts, ppTypeIds, addIfNeeded:=False, okayToLookAtDeleted:=okayToLookAtDeleted, setDetailStatusCodeToActive:=False)
                                        If syncType = DiamondImageToPackagePartSyncType.GoverningStatePart Then
                                            diaPPs = govStatePackageParts
                                        Else 'If syncType = DiamondImageToPackagePartSyncType.DummyPart Then
                                            If govStatePackageParts IsNot Nothing AndAlso govStatePackageParts.Count > 0 Then
                                                Dim apps As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Applicant) = Nothing
                                                Dim ppForApps As Diamond.Common.Objects.Policy.PackagePart = Nothing
                                                For Each gsPP As Diamond.Common.Objects.Policy.PackagePart In govStatePackageParts
                                                    If gsPP IsNot Nothing AndAlso gsPP.LOB IsNot Nothing AndAlso gsPP.LOB.RiskLevel IsNot Nothing AndAlso gsPP.LOB.RiskLevel.Applicants IsNot Nothing AndAlso gsPP.LOB.RiskLevel.Applicants.Count > 0 Then
                                                        apps = gsPP.LOB.RiskLevel.Applicants
                                                        ppForApps = gsPP
                                                        Exit For 'exit after we get what we need
                                                    End If
                                                Next
                                                If apps IsNot Nothing AndAlso ppForApps IsNot Nothing Then
                                                    'this is dummy packagePart w/ only what we need on there... currently just applicants
                                                    Dim dummyPP As New Diamond.Common.Objects.Policy.PackagePart
                                                    With dummyPP
                                                        '.PackagePartTypeId = ppForApps.PackagePartTypeId
                                                        .VersionId = ppForApps.VersionId 'appears to be the only additional piece required
                                                        '.PolicyId = ppForApps.PolicyId
                                                        '.PolicyImageNum = ppForApps.PolicyImageNum
                                                        If .LOB Is Nothing Then
                                                            .LOB = New Diamond.Common.Objects.Policy.LOB
                                                        End If
                                                        If .LOB.RiskLevel Is Nothing Then
                                                            .LOB.RiskLevel = New Diamond.Common.Objects.Policy.RiskLevel
                                                        End If
                                                        .LOB.RiskLevel.Applicants = apps
                                                    End With
                                                    diaPPs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart)
                                                    diaPPs.Add(dummyPP)
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            Return diaPPs
        End Function
        'added 12/6/2018
        Public Function PackagePartTypeIdForMasterPart(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties)) As Integer
            Dim ppTypeId As Integer = 0

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso pptProp.AppearsToBeMasterPart = True AndAlso pptProp.PackagePartTypeId > 0 Then
                        ppTypeId = pptProp.PackagePartTypeId
                        Exit For
                    End If
                Next
            End If

            Return ppTypeId
        End Function
        Public Function PackagePartTypeIdsForNonMasterParts(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties)) As List(Of Integer)
            Dim ppTypeIds As List(Of Integer) = Nothing

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso pptProp.AppearsToBeMasterPart = False AndAlso pptProp.PackagePartTypeId > 0 Then
                        AddUniqueIntegerToIntegerList(pptProp.PackagePartTypeId, ppTypeIds)
                    End If
                Next
            End If

            Return ppTypeIds
        End Function
        Public Function PackagePartTypeStateAndLobPropertiesObjectForPackagePartTypeId(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties), ByVal ppTypeId As Integer) As PackagePartTypeStateAndLobProperties
            Dim pptProp As PackagePartTypeStateAndLobProperties = Nothing

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each p As PackagePartTypeStateAndLobProperties In pptProps
                    If p IsNot Nothing AndAlso p.PackagePartTypeId = ppTypeId Then
                        pptProp = p
                        Exit For
                    End If
                Next
            End If

            Return pptProp
        End Function
        Public Function PackagePartTypeStateAndLobPropertiesForPackagePartTypeIds(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties), ByVal ppTypeIds As List(Of Integer)) As List(Of PackagePartTypeStateAndLobProperties)
            Dim pptPropsToReturn As List(Of PackagePartTypeStateAndLobProperties) = Nothing

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 AndAlso ppTypeIds IsNot Nothing AndAlso ppTypeIds.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso ppTypeIds.Contains(pptProp.PackagePartTypeId) Then
                        If pptPropsToReturn Is Nothing Then
                            pptPropsToReturn = New List(Of PackagePartTypeStateAndLobProperties)
                        End If
                        pptPropsToReturn.Add(pptProp)
                    End If
                Next
            End If

            Return pptPropsToReturn
        End Function
        Public Function StateIdForMasterPart(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties)) As Integer
            Dim stateId As Integer = 0

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso pptProp.AppearsToBeMasterPart = True AndAlso pptProp.PartStateId > 0 Then
                        stateId = pptProp.PartStateId
                        Exit For
                    End If
                Next
            End If

            Return stateId
        End Function
        Public Function PackagePartTypeStateAndLobPropertiesForStateId(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties), ByVal stateId As Integer) As List(Of PackagePartTypeStateAndLobProperties)
            Dim pptPropsToReturn As List(Of PackagePartTypeStateAndLobProperties) = Nothing

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso pptProp.PartStateId = stateId Then
                        If pptPropsToReturn Is Nothing Then
                            pptPropsToReturn = New List(Of PackagePartTypeStateAndLobProperties)
                        End If
                        pptPropsToReturn.Add(pptProp)
                    End If
                Next
            End If

            Return pptPropsToReturn
        End Function
        Public Function PackagePartTypeIdsForPackagePartTypeStateAndLobProperties(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties)) As List(Of Integer)
            Dim ppTypeIds As List(Of Integer) = Nothing

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso pptProp.PackagePartTypeId > 0 Then
                        AddUniqueIntegerToIntegerList(pptProp.PackagePartTypeId, ppTypeIds)
                    End If
                Next
            End If

            Return ppTypeIds
        End Function
        Public Function NonMasterPackagePartTypeStateAndLobPropertiesForStateId(ByVal pptProps As List(Of PackagePartTypeStateAndLobProperties), ByVal stateId As Integer) As List(Of PackagePartTypeStateAndLobProperties)
            Dim pptPropsToReturn As List(Of PackagePartTypeStateAndLobProperties) = Nothing

            If pptProps IsNot Nothing AndAlso pptProps.Count > 0 Then
                For Each pptProp As PackagePartTypeStateAndLobProperties In pptProps
                    If pptProp IsNot Nothing AndAlso pptProp.AppearsToBeMasterPart = False AndAlso pptProp.PartStateId = stateId Then
                        If pptPropsToReturn Is Nothing Then
                            pptPropsToReturn = New List(Of PackagePartTypeStateAndLobProperties)
                        End If
                        pptPropsToReturn.Add(pptProp)
                    End If
                Next
            End If

            Return pptPropsToReturn
        End Function
        Public Shared Function VR_DiamondImageToPackagePartSyncTypeToUse_With_SynchronizePackagePolicyService(Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As DiamondImageToPackagePartSyncType
            Dim syncType As DiamondImageToPackagePartSyncType = Nothing

            Dim baseSyncTypeKeyName As String = "VR_DiamondImageToPackagePartSyncTypeToUse_With_SynchronizePackagePolicyService"
            Dim snycTypeKeyName As String = baseSyncTypeKeyName
            If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lob) = True AndAlso lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lob)
                If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                    snycTypeKeyName &= "_" & lobAbbrev
                End If
            End If
            Dim strSyncType As String = configAppSettingValueAsString(snycTypeKeyName)
            If String.IsNullOrWhiteSpace(strSyncType) = True AndAlso snycTypeKeyName <> baseSyncTypeKeyName Then
                strSyncType = configAppSettingValueAsString(baseSyncTypeKeyName)
            End If
            If String.IsNullOrWhiteSpace(strSyncType) = False Then
                Select Case UCase(strSyncType)
                    Case "NONE"
                        syncType = DiamondImageToPackagePartSyncType.None
                    Case "GOVERNINGSTATEPART"
                        syncType = DiamondImageToPackagePartSyncType.GoverningStatePart
                    Case "ALLPARTS"
                        syncType = DiamondImageToPackagePartSyncType.AllParts
                    Case "ALLPARTSEXCEPTMASTER"
                        syncType = DiamondImageToPackagePartSyncType.AllPartsExceptMaster
                    Case Else
                        If System.Enum.TryParse(Of DiamondImageToPackagePartSyncType)(strSyncType, syncType) = False Then
                            syncType = Nothing
                        End If
                End Select
            End If

            Return syncType
        End Function
        Public Shared Function QuickQuote_ThreeLetterAbbreviation_ForLOB(ByVal lob As QuickQuoteObject.QuickQuoteLobType) As String
            Dim abbrev As String = ""

            If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lob) = True AndAlso lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                Select Case lob
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                        abbrev = "BOP"
                    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                        abbrev = "WCP"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                        abbrev = "CAP"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                        abbrev = "CGL"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                        abbrev = "CPR"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                        abbrev = "CPP"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
                        abbrev = "CIM"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialCrime
                        abbrev = "CRM"
                    Case QuickQuoteObject.QuickQuoteLobType.AutoPersonal
                        abbrev = "PPA"
                    Case QuickQuoteObject.QuickQuoteLobType.HomePersonal
                        abbrev = "HOM"
                    Case QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                        abbrev = "DFR"
                    Case QuickQuoteObject.QuickQuoteLobType.Farm
                        abbrev = "FAR"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGarage
                        abbrev = "GAR"
                    Case QuickQuoteObject.QuickQuoteLobType.UmbrellaPersonal 'added 4/20/2020
                        abbrev = "PUP"
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialUmbrella 'added 4/22/2020
                        abbrev = "CUP"
                End Select
            End If

            Return abbrev
        End Function
        'added 4/26/2022
        Public Shared Function QuickQuote_LOB_ForThreeLetterAbbreviation(ByVal abbrev As String) As QuickQuoteObject.QuickQuoteLobType
            Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

            If String.IsNullOrWhiteSpace(abbrev) = False AndAlso Len(Trim(abbrev)) = 3 Then
                Select Case UCase(Trim(abbrev))
                    Case "BOP"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                    Case "WCP"
                        lob = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                    Case "CAP"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                    Case "CGL"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                    Case "CPR"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                    Case "CPP"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                    Case "CIM"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
                    Case "CRM"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialCrime
                    Case "PPA"
                        lob = QuickQuoteObject.QuickQuoteLobType.AutoPersonal
                    Case "HOM"
                        lob = QuickQuoteObject.QuickQuoteLobType.HomePersonal
                    Case "DFR"
                        lob = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                    Case "FAR"
                        lob = QuickQuoteObject.QuickQuoteLobType.Farm
                    Case "GAR"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialGarage
                    Case "PUP"
                        lob = QuickQuoteObject.QuickQuoteLobType.UmbrellaPersonal
                    Case "CUP"
                        lob = QuickQuoteObject.QuickQuoteLobType.CommercialUmbrella
                End Select
            End If

            Return lob
        End Function
        'added 12/7/2018
        Public Enum DiamondImageToPackagePartSyncLogicExecutionSpot
            None = 0
            AtEndBeforeSave = 1
            ImmediatelyAfterPartUpdate = 2
            AtEndBeforeSaveOrSaveSyncAndSaveAgainForInitial = 3
        End Enum
        Public Shared Function VR_DiamondImageToPackagePartSyncLogicExecutionSpotToUse_With_SynchronizePackagePolicyService(Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As DiamondImageToPackagePartSyncLogicExecutionSpot
            Dim syncSpot As DiamondImageToPackagePartSyncLogicExecutionSpot = Nothing

            Dim baseSyncSpotKeyName As String = "VR_DiamondImageToPackagePartSyncLogicExecutionSpotToUse_With_SynchronizePackagePolicyService"
            Dim snycSpotKeyName As String = baseSyncSpotKeyName
            If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lob) = True AndAlso lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lob)
                If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                    snycSpotKeyName &= "_" & lobAbbrev
                End If
            End If
            Dim strSyncSpot As String = configAppSettingValueAsString(snycSpotKeyName)
            If String.IsNullOrWhiteSpace(strSyncSpot) = True AndAlso snycSpotKeyName <> baseSyncSpotKeyName Then
                strSyncSpot = configAppSettingValueAsString(baseSyncSpotKeyName)
            End If
            If String.IsNullOrWhiteSpace(strSyncSpot) = False Then
                Select Case UCase(strSyncSpot)
                    Case "NONE"
                        syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.None
                    Case "ATENDBEFORESAVE"
                        syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.AtEndBeforeSave
                    Case "IMMEDIATELYAFTERPARTUPDATE"
                        syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.ImmediatelyAfterPartUpdate
                    Case "ATENDBEFORESAVEORSAVESYNCANDSAVEAGAINFORINITIAL" 'added 12/10/2018
                        syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.AtEndBeforeSaveOrSaveSyncAndSaveAgainForInitial
                    Case Else
                        If System.Enum.TryParse(Of DiamondImageToPackagePartSyncLogicExecutionSpot)(strSyncSpot, syncSpot) = False Then
                            syncSpot = Nothing
                        End If
                End Select
            End If

            Return syncSpot
        End Function
        Public Shared Sub Set_VR_DiamondImageToPackagePartSyncTypeAndLogicExecutionSpotToUse_With_SynchronizePackagePolicyService(ByRef syncType As DiamondImageToPackagePartSyncType, ByRef syncSpot As DiamondImageToPackagePartSyncLogicExecutionSpot, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None)
            syncType = DiamondImageToPackagePartSyncType.None
            syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.None

            syncType = VR_DiamondImageToPackagePartSyncTypeToUse_With_SynchronizePackagePolicyService(lob:=lob)
            syncSpot = VR_DiamondImageToPackagePartSyncLogicExecutionSpotToUse_With_SynchronizePackagePolicyService(lob:=lob)
        End Sub
        Public Shared Function OkayToPerformDiamondImageToPackagePartSync(ByVal img As Diamond.Common.Objects.Policy.Image, ByRef syncType As DiamondImageToPackagePartSyncType, ByRef syncSpot As DiamondImageToPackagePartSyncLogicExecutionSpot, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal justPerformedDiamondPackageSync As Boolean = False) As Boolean
            Dim isOkay As Boolean = False
            syncType = DiamondImageToPackagePartSyncType.None
            syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.None

            If justPerformedDiamondPackageSync = False AndAlso img IsNot Nothing Then
                If qqo Is Nothing OrElse qqo.NeedsMultiStateFormat = True Then
                    Dim lobToCheck As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                    If qqo IsNot Nothing Then
                        lobToCheck = qqo.LobType
                    End If
                    Set_VR_DiamondImageToPackagePartSyncTypeAndLogicExecutionSpotToUse_With_SynchronizePackagePolicyService(syncType, syncSpot, lob:=lobToCheck)
                    If System.Enum.IsDefined(GetType(DiamondImageToPackagePartSyncType), syncType) = True AndAlso syncType <> DiamondImageToPackagePartSyncType.None AndAlso System.Enum.IsDefined(GetType(DiamondImageToPackagePartSyncLogicExecutionSpot), syncSpot) = True AndAlso syncSpot <> DiamondImageToPackagePartSyncLogicExecutionSpot.None Then
                        isOkay = True
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToPerformDiamondImageToPackagePartSyncAtEndBeforeSave(ByVal img As Diamond.Common.Objects.Policy.Image, ByRef syncType As DiamondImageToPackagePartSyncType, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal justPerformedDiamondPackageSync As Boolean = False, Optional ByRef wouldBeOkayWithExistingImage As Boolean = False, Optional ByVal okayToAttemptSyncWithInitialSaveIfOkayOtherwise As Boolean = False) As Boolean '12/10/2018 - added optional byref param for wouldBeOkayWithExistingImage; 12/11/2018 - added optional byval param for okayToAttemptSyncWithInitialSaveIfOkayOtherwise
            Dim isOkay As Boolean = False
            syncType = DiamondImageToPackagePartSyncType.None
            wouldBeOkayWithExistingImage = False

            Dim syncSpot As DiamondImageToPackagePartSyncLogicExecutionSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.None
            'If OkayToPerformDiamondImageToPackagePartSync(img, syncType, syncSpot, qqo:=qqo, justPerformedDiamondPackageSync:=justPerformedDiamondPackageSync) = True AndAlso syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.AtEndBeforeSave Then
            '    isOkay = True
            'End If
            'updated 12/10/2018
            If OkayToPerformDiamondImageToPackagePartSync(img, syncType, syncSpot, qqo:=qqo, justPerformedDiamondPackageSync:=justPerformedDiamondPackageSync) = True Then
                If syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.AtEndBeforeSave OrElse (syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.AtEndBeforeSaveOrSaveSyncAndSaveAgainForInitial AndAlso img IsNot Nothing AndAlso img.PolicyId > 0) Then
                    isOkay = True
                    wouldBeOkayWithExistingImage = True
                ElseIf syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.AtEndBeforeSaveOrSaveSyncAndSaveAgainForInitial Then
                    wouldBeOkayWithExistingImage = True
                    isOkay = okayToAttemptSyncWithInitialSaveIfOkayOtherwise 'added 12/11/2018
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToPerformDiamondImageToPackagePartSyncImmediatelyAfterPartUpdate(ByVal img As Diamond.Common.Objects.Policy.Image, ByRef syncType As DiamondImageToPackagePartSyncType, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal justPerformedDiamondPackageSync As Boolean = False) As Boolean
            Dim isOkay As Boolean = False
            syncType = DiamondImageToPackagePartSyncType.None

            Dim syncSpot As DiamondImageToPackagePartSyncLogicExecutionSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.None
            If OkayToPerformDiamondImageToPackagePartSync(img, syncType, syncSpot, qqo:=qqo, justPerformedDiamondPackageSync:=justPerformedDiamondPackageSync) = True AndAlso syncSpot = DiamondImageToPackagePartSyncLogicExecutionSpot.ImmediatelyAfterPartUpdate Then
                isOkay = True
            End If

            Return isOkay
        End Function

        'added 12/19/2018
        Public Enum TypeToVerify
            None = 0
            NumericType = 1
            DateType = 2
            PositiveIntegerType = 3
            PositiveDecimalType = 4
        End Enum
        'Public Sub SetValueIfNotSet(ByRef valueToSet As String, ByVal valueToUse As String, Optional ByVal onlyValidIfNumeric As Boolean = False, Optional ByVal okayToOverwrite As Boolean = False)
        '    Dim currentlyHasValue As Boolean = False
        '    Dim currentlyHasValidValue As Boolean = False
        '    Dim newHasValue As Boolean = False
        '    Dim newHasValidValue As Boolean = False
        '    If String.IsNullOrWhiteSpace(valueToSet) = False Then
        '        currentlyHasValue = True
        '        If onlyValidIfNumeric = False OrElse IsNumeric(valueToSet) = True Then
        '            currentlyHasValidValue = True
        '        End If
        '    End If
        '    If String.IsNullOrWhiteSpace(valueToUse) = False Then
        '        newHasValue = True
        '        If onlyValidIfNumeric = False OrElse IsNumeric(valueToUse) = True Then
        '            newHasValidValue = True
        '        End If
        '    End If

        '    If newHasValue = True Then
        '        'new has value
        '        If currentlyHasValue = False Then
        '            'current does not have value
        '            valueToSet = valueToUse
        '        Else
        '            'both have values
        '            If newHasValidValue = True Then
        '                'new has valid value
        '                If currentlyHasValidValue = False OrElse okayToOverwrite = True Then
        '                    'current does not have valid value or it's okay to overwrite
        '                    valueToSet = valueToUse
        '                End If
        '            Else
        '                'new does not have valid value
        '                If okayToOverwrite = True AndAlso currentlyHasValidValue = False Then
        '                    'it's okay to overwrite and new does not have valid value either
        '                    valueToSet = valueToUse
        '                End If
        '            End If
        '        End If
        '    Else 'may not need
        '        'new does not have value
        '        If currentlyHasValue = False AndAlso okayToOverwrite = True Then
        '            'current does not have value and it's okay to overwrite
        '            valueToSet = valueToUse
        '        End If
        '    End If
        'End Sub
        Public Sub SetValueIfNotSet(ByRef valueToSet As String, ByVal valueToUse As String, Optional ByVal onlyValidIfSpecifiedType As TypeToVerify = TypeToVerify.None, Optional ByVal okayToOverwrite As Boolean = False, Optional ByVal neverSetItNotValid As Boolean = False)
            Dim currentlyHasValue As Boolean = False
            Dim currentlyHasValidValue As Boolean = False
            Dim newHasValue As Boolean = False
            Dim newHasValidValue As Boolean = False
            If String.IsNullOrWhiteSpace(valueToSet) = False Then
                currentlyHasValue = True
                If System.Enum.IsDefined(GetType(TypeToVerify), onlyValidIfSpecifiedType) = False OrElse onlyValidIfSpecifiedType = TypeToVerify.None Then
                    'no type to verify
                    currentlyHasValidValue = True
                Else
                    'verify type
                    Select Case onlyValidIfSpecifiedType
                        Case TypeToVerify.NumericType
                            If IsNumeric(valueToSet) = True Then
                                currentlyHasValidValue = True
                            End If
                        Case TypeToVerify.DateType
                            If IsDate(valueToSet) = True Then
                                currentlyHasValidValue = True
                            End If
                        Case TypeToVerify.PositiveIntegerType
                            If IsPositiveIntegerString(valueToSet) = True Then
                                currentlyHasValidValue = True
                            End If
                        Case TypeToVerify.PositiveDecimalType
                            If IsPositiveDecimalString(valueToSet) = True Then
                                currentlyHasValidValue = True
                            End If
                    End Select
                End If
            End If
            If String.IsNullOrWhiteSpace(valueToUse) = False Then
                newHasValue = True
                If System.Enum.IsDefined(GetType(TypeToVerify), onlyValidIfSpecifiedType) = False OrElse onlyValidIfSpecifiedType = TypeToVerify.None Then
                    'no type to verify
                    newHasValidValue = True
                Else
                    'verify type
                    Select Case onlyValidIfSpecifiedType
                        Case TypeToVerify.NumericType
                            If IsNumeric(valueToUse) = True Then
                                newHasValidValue = True
                            End If
                        Case TypeToVerify.DateType
                            If IsDate(valueToUse) = True Then
                                newHasValidValue = True
                            End If
                    End Select
                End If
            End If

            If newHasValue = True Then
                'new has value
                If currentlyHasValue = False Then
                    'current does not have value
                    If neverSetItNotValid = False OrElse newHasValidValue = True Then
                        valueToSet = valueToUse
                    End If
                Else
                    'both have values
                    If newHasValidValue = True Then
                        'new has valid value
                        If currentlyHasValidValue = False OrElse okayToOverwrite = True Then
                            'current does not have valid value or it's okay to overwrite
                            valueToSet = valueToUse
                        End If
                    Else
                        'new does not have valid value
                        If okayToOverwrite = True AndAlso currentlyHasValidValue = False AndAlso neverSetItNotValid = False Then
                            'it's okay to overwrite and new does not have valid value either
                            valueToSet = valueToUse
                        End If
                    End If
                End If
            Else 'may not need
                'new does not have value
                If currentlyHasValue = False AndAlso okayToOverwrite = True AndAlso neverSetItNotValid = False Then
                    'current does not have value and it's okay to overwrite
                    valueToSet = valueToUse
                End If
            End If
        End Sub

        'added 12/20/2018
        Public Enum MasterPackagePartCopyType
            None = 0
            PartialCopyOverwriteAll_CPP_Only = 1
            PartialCopyOverwriteOnlyIfValid_CPP_Only = 2
            PartialCopyOverwriteAll = 3
            PartialCopyOverwriteOnlyIfValid = 4
            BasePolicyLevelInfoCopyOverwriteAll_CPP_Only = 5
            BasePolicyLevelInfoCopyOverwriteAll = 6
        End Enum
        Public Shared Function MasterPackagePartCopyTypeToUse() As MasterPackagePartCopyType
            Dim copyType As MasterPackagePartCopyType = MasterPackagePartCopyType.PartialCopyOverwriteAll_CPP_Only 'default

            Dim strCopyType As String = configAppSettingValueAsString("QuickQuote_MasterPackagePartCopyTypeToUse")
            If String.IsNullOrWhiteSpace(strCopyType) = False Then
                Select Case UCase(strCopyType)
                    Case "NONE"
                        copyType = MasterPackagePartCopyType.None
                    Case UCase("PartialCopyOverwriteAll_CPP_Only")
                        copyType = MasterPackagePartCopyType.PartialCopyOverwriteAll_CPP_Only
                    Case UCase("PartialCopyOverwriteOnlyIfValid_CPP_Only")
                        copyType = MasterPackagePartCopyType.PartialCopyOverwriteOnlyIfValid_CPP_Only
                    Case UCase("PartialCopyOverwriteAll")
                        copyType = MasterPackagePartCopyType.PartialCopyOverwriteAll
                    Case UCase("PartialCopyOverwriteOnlyIfValid")
                        copyType = MasterPackagePartCopyType.PartialCopyOverwriteOnlyIfValid
                    Case UCase("BasePolicyLevelInfoCopyOverwriteAll_CPP_Only")
                        copyType = MasterPackagePartCopyType.BasePolicyLevelInfoCopyOverwriteAll_CPP_Only
                    Case UCase("BasePolicyLevelInfoCopyOverwriteAll")
                        copyType = MasterPackagePartCopyType.BasePolicyLevelInfoCopyOverwriteAll
                    Case Else
                        If System.Enum.TryParse(Of MasterPackagePartCopyType)(strCopyType, copyType) = False Then
                            copyType = Nothing
                        End If
                End Select
            End If

            'removed 12/21/2018 as-to not default if overwritten by config key
            'If System.Enum.IsDefined(GetType(MasterPackagePartCopyType), copyType) = False OrElse copyType = MasterPackagePartCopyType.None Then
            '    copyType = MasterPackagePartCopyType.PartialCopyOverwriteAll_CPP_Only
            'End If

            Return copyType
        End Function

        'added 12/21/2018
        Public Shared Function OkayToLogStateChangesInSession() As Boolean
            Dim isOkay As Boolean = False

            Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToLogStateChangesInSession")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then
                    isOkay = True
                End If
            End If

            Return isOkay
        End Function
        Public Shared Sub LogStateChangeInSession(ByVal strChangeInfo As String)
            If String.IsNullOrWhiteSpace(strChangeInfo) = False Then
                Dim currentInfo As String = sessionVariableValueAsString("VR_StateChangeInfo")
                If String.IsNullOrWhiteSpace(currentInfo) = True Then
                    System.Web.HttpContext.Current?.Session.Add("VR_StateChangeInfo", strChangeInfo)
                Else
                    System.Web.HttpContext.Current?.Session.Add("VR_StateChangeInfo", currentInfo & vbCrLf & vbCrLf & strChangeInfo)
                End If
            End If
        End Sub
        Public Shared Function StringOfQuickQuoteStates(ByVal qqStates As List(Of QuickQuoteState), Optional ByVal splitter As String = ", ") As String
            Dim strStates As String = ""

            If qqStates IsNot Nothing AndAlso qqStates.Count > 0 Then
                For Each s As QuickQuoteState In qqStates
                    If System.Enum.IsDefined(GetType(QuickQuoteState), s) = True AndAlso s <> QuickQuoteState.None Then
                        Dim qqHelper As New QuickQuoteHelperClass
                        strStates = qqHelper.appendText(strStates, StringForQuickQuoteState(s), splitter:=splitter)
                    End If
                Next
            End If

            Return strStates
        End Function
        Public Shared Function StringForQuickQuoteState(ByVal qqState As QuickQuoteState, Optional ByVal allowNone As Boolean = False) As String
            Dim strState As String = ""

            If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso (allowNone = True OrElse qqState <> QuickQuoteState.None) Then
                strState = System.Enum.GetName(GetType(QuickQuoteState), qqState)
            End If

            Return strState
        End Function

        'added 12/29/2018; includes overloads of existing methods
        'Public Enum QuickQuoteStateMatchType
        '    None = 0
        '    ExactMatchOnCurrent = 1
        '    ExactValidMatchOnCurrent = 2
        '    ExactMatchOnUsed = 3
        '    ExactValidMatchOnUsed = 4
        '    ExactMatchOnCurrentOrUsedIfNoCurrent = 5
        '    ExactValidMatchOnCurrentOrUsedIfNoCurrent = 6
        'End Enum
        'Public Function LocationIndexesForQuickQuoteState(ByRef locs As List(Of QuickQuoteLocation), ByVal qqState As QuickQuoteState, ByVal matchType As QuickQuoteStateMatchType) As List(Of Integer)
        '    Dim locIndexes As List(Of Integer) = Nothing

        '    If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
        '        If locs IsNot Nothing AndAlso locs.Count > 0 Then
        '            Dim lNum As Integer = 0
        '            For Each l As QuickQuoteLocation In locs
        '                lNum += 1
        '                Dim useLoc As Boolean = False
        '                If l IsNot Nothing AndAlso l.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), l.Address.QuickQuoteState) = True AndAlso l.Address.QuickQuoteState <> QuickQuoteState.None Then
        '                    'has a valid value for address' QuickQuoteState, so use it
        '                    If l.Address.QuickQuoteState = qqState Then
        '                        useLoc = True
        '                    End If
        '                Else
        '                    'use quote state taken from if available
        '                    If l.QuoteStateTakenFrom = qqState Then
        '                        useLoc = True
        '                    End If
        '                End If
        '                If useLoc = True Then
        '                    AddIntegerToIntegerList(lNum - 1, locIndexes, positiveOnly:=False)
        '                End If
        '            Next
        '        End If
        '    End If

        '    Return locIndexes
        'End Function
        'Public Function VehicleIndexesForQuickQuoteState(ByRef vehs As List(Of QuickQuoteVehicle), ByVal qqState As QuickQuoteState, ByVal matchType As QuickQuoteStateMatchType) As List(Of Integer)
        '    Dim vehIndexes As List(Of Integer) = Nothing

        '    If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
        '        If vehs IsNot Nothing AndAlso vehs.Count > 0 Then
        '            Dim vNum As Integer = 0
        '            For Each v As QuickQuoteVehicle In vehs
        '                vNum += 1
        '                Dim useVeh As Boolean = False
        '                If v IsNot Nothing AndAlso v.GaragingAddress IsNot Nothing AndAlso v.GaragingAddress.Address IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), v.GaragingAddress.Address.QuickQuoteState) = True AndAlso v.GaragingAddress.Address.QuickQuoteState <> QuickQuoteState.None Then
        '                    'has a valid value for address' QuickQuoteState, so use it
        '                    If v.GaragingAddress.Address.QuickQuoteState = qqState Then
        '                        useVeh = True
        '                    End If
        '                Else
        '                    'use quote state taken from if available
        '                    If v.QuoteStateTakenFrom = qqState Then
        '                        useVeh = True
        '                    End If
        '                End If
        '                If useVeh = True Then
        '                    AddIntegerToIntegerList(vNum - 1, vehIndexes, positiveOnly:=False)
        '                End If
        '            Next
        '        End If
        '    End If

        '    Return vehIndexes
        'End Function

        'added 1/9/2019
        Public Shared Function OkayToUsePackagePartNumWhenApplicableOnThirdPartyReportOrdering() As Boolean
            'Dim isOkay As Boolean = True 'default to True; key required to turn to False

            'Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToUsePackagePartNumWhenApplicableOnThirdPartyReportOrdering")
            'If String.IsNullOrWhiteSpace(strIsOkay) = False Then
            '    Dim qqHelper As New QuickQuoteHelperClass
            '    If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
            '        isOkay = True
            '    Else
            '        isOkay = False
            '    End If
            'End If

            'Return isOkay
            'updated 5/13/2021 to use new method
            Return OkayToUsePackagePartNumWhenApplicableOnThirdPartyReportOrdering_WithOptionalReportTypeCategoryText()
        End Function

        'new methods 5/13/2021
        Public Shared Function OkayToUsePackagePartNumWhenApplicableOnThirdPartyReportOrdering_WithOptionalReportTypeCategoryText(Optional ByVal reportTypeCategory As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory.None) As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = ConfigAppSettingValueAsString_WithOptionalReportTypeCategoryText("VR_OkayToUsePackagePartNumWhenApplicableOnThirdPartyReportOrdering", reportTypeCategory:=reportTypeCategory)
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function ConfigAppSettingValueAsString_WithOptionalReportTypeCategoryText(ByVal keyName As String, Optional ByVal checkForNumeric As Boolean = False, Optional ByVal reportTypeCategory As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory.None) As String
            Dim val As String = ""

            If String.IsNullOrWhiteSpace(keyName) = False Then
                Dim keyNameToUse As String = keyName
                If System.Enum.IsDefined(GetType(QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory), reportTypeCategory) = True AndAlso reportTypeCategory <> QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory.None Then
                    Dim reportCat As String = QuickQuoteThirdPartyReportHelperClass.StringForThirdPartyReportTypeCategory(reportTypeCategory)
                    If String.IsNullOrWhiteSpace(reportCat) = False Then
                        keyNameToUse &= "_" & reportCat
                    End If
                End If
                val = configAppSettingValueAsString(keyNameToUse, checkForNumeric:=checkForNumeric)
                If String.IsNullOrWhiteSpace(val) = True AndAlso keyNameToUse <> keyName Then
                    val = configAppSettingValueAsString(keyName, checkForNumeric:=checkForNumeric)
                End If
            End If

            Return val
        End Function
        'added 5/18/2021
        Public Shared Function OkayToSetCurrentPackagePartIndexWhenUsingPackagePartNumOnThirdPartyReportOrder_WithOptionalReportTypeCategoryText(Optional ByVal reportTypeCategory As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory.None) As Boolean
            Dim isOkay As Boolean = False

            Dim strIsOkay As String = ConfigAppSettingValueAsString_WithOptionalReportTypeCategoryText("VR_OkayToSetCurrentPackagePartIndexWhenUsingPackagePartNumOnThirdPartyReportOrder", reportTypeCategory:=reportTypeCategory)
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then
                    isOkay = True
                Else
                    isOkay = False 'redundant
                End If
            End If

            Return isOkay
        End Function
        Public Function DiamondPackagePartForPackagePartNum(ByRef diaPackageParts As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.PackagePart), ByVal packagePartNum As Integer) As Diamond.Common.Objects.Policy.PackagePart
            Dim diaPP As Diamond.Common.Objects.Policy.PackagePart = Nothing

            If diaPackageParts IsNot Nothing AndAlso diaPackageParts.Count > 0 AndAlso packagePartNum > 0 Then
                For Each dPP As Diamond.Common.Objects.Policy.PackagePart In diaPackageParts
                    If dPP IsNot Nothing AndAlso IsValidDiamondNum(dPP.PackagePartNum) = True AndAlso dPP.PackagePartNum.Id = packagePartNum Then
                        diaPP = dPP
                        Exit For
                    End If
                Next
            End If

            Return diaPP
        End Function
        'added 6/8/2021
        Public Shared Function ForceSettingOfCurrentPackagePartIndexRegardlessOfUsingPackagePartNumOnThirdPartyReportOrder_WithOptionalReportTypeCategoryText(Optional ByVal reportTypeCategory As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory.None) As Boolean
            Dim forceIt As Boolean = False

            Dim strForceIt As String = ConfigAppSettingValueAsString_WithOptionalReportTypeCategoryText("VR_ForceSettingOfCurrentPackagePartIndexRegardlessOfUsingPackagePartNumOnThirdPartyReportOrder", reportTypeCategory:=reportTypeCategory)
            If String.IsNullOrWhiteSpace(strForceIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strForceIt) = "YES" OrElse qqHelper.BitToBoolean(strForceIt) = True Then
                    forceIt = True
                Else
                    forceIt = False 'redundant
                End If
            End If

            Return forceIt
        End Function

        'added 1/14/2019
        Public Enum StatusMatchType
            Any = 0
            ActiveOnly = 1
            NewOnly = 2
            InactiveOnly = 3
            DeletedOnly = 4
            ActiveOrNew = 5
            InactiveOrDeleted = 6
            NotActive = 7
            NotNew = 8
            NotInactive = 9
            NotDeleted = 10
            NotActiveOrNew = 11
            NotInactiveOrDeleted = 12
            ExactMatch = 13
        End Enum
        Public Function DiamondCoveragesForCoverageCodeId(ByRef diaCoverages As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage), ByVal covCodeId As Integer, Optional ByVal description As String = "", Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal covPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedCoveragePositions As List(Of Integer) = Nothing) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage)
            Dim diaCovs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage) = Nothing
            returnedCoveragePositions = Nothing

            If diaCoverages IsNot Nothing AndAlso diaCoverages.Count > 0 AndAlso covCodeId > 0 Then
                Dim covPosition As Integer = 0
                For Each diaC As Diamond.Common.Objects.Coverage In diaCoverages
                    covPosition += 1
                    If (covPositionsToIgnore Is Nothing OrElse covPositionsToIgnore.Count = 0 OrElse covPositionsToIgnore.Contains(covPosition) = False) AndAlso diaC IsNot Nothing AndAlso diaC.CoverageCodeId = covCodeId Then
                        If String.IsNullOrEmpty(description) = True OrElse UCase(diaC.Description) = UCase(description) Then
                            'Dim okayToAdd As Boolean = False
                            'If System.Enum.IsDefined(GetType(StatusMatchType), statusToFind) = True AndAlso statusToFind <> StatusMatchType.Any Then
                            '    Select Case statusToFind
                            '        Case StatusMatchType.ActiveOnly
                            '            If diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.Active Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NewOnly
                            '            If diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.New Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.InactiveOnly
                            '            If diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.InActive Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.DeletedOnly
                            '            If diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.Deleted Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.ActiveOrNew
                            '            If diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.Active OrElse diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.New Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.InactiveOrDeleted
                            '            If diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.InActive OrElse diaC.DetailStatusCode = Diamond.Common.Enums.StatusCode.Deleted Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NotActive
                            '            If diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Active Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NotNew
                            '            If diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.New Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NotInactive
                            '            If diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.InActive Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NotDeleted
                            '            If diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NotActiveOrNew
                            '            If diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Active AndAlso diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.New Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.NotInactiveOrDeleted
                            '            If diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.InActive AndAlso diaC.DetailStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                            '                okayToAdd = True
                            '            End If
                            '        Case StatusMatchType.ExactMatch
                            '            If diaC.DetailStatusCode = diaStatusToMatch Then
                            '                okayToAdd = True
                            '            End If
                            '    End Select
                            'Else
                            '    'allow any status
                            '    okayToAdd = True
                            'End If
                            'If okayToAdd = True Then
                            '    If diaCovs Is Nothing Then
                            '        diaCovs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage)
                            '    End If
                            '    diaCovs.Add(diaC)
                            '    AddIntegerToIntegerList(covPosition, returnedCoveragePositions)
                            'End If
                            'updated 2/1/2019 to use new common method
                            Dim statusIsOkay As Boolean = IsEligibleDiamondStatus(diaC.DetailStatusCode, statusToFind, diaStatusToMatch:=diaStatusToMatch)
                            If statusIsOkay = True Then
                                If diaCovs Is Nothing Then
                                    diaCovs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage)
                                End If
                                diaCovs.Add(diaC)
                                AddIntegerToIntegerList(covPosition, returnedCoveragePositions)
                            End If
                        End If
                    End If
                Next
            End If

            Return diaCovs
        End Function
        Public Function DiamondCoverageForCoverageCodeId(ByRef diaCoverages As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage), ByVal covCodeId As Integer, Optional ByVal description As String = "", Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByVal covPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedCoveragePosition As Integer = 0) As Diamond.Common.Objects.Coverage
            Dim diaCov As Diamond.Common.Objects.Coverage = Nothing
            returnedCoveragePosition = 0

            Dim returnedCoveragePositions As List(Of Integer) = Nothing
            Dim diaCovs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Coverage) = DiamondCoveragesForCoverageCodeId(diaCoverages, covCodeId, description:=description, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, covPositionsToIgnore:=covPositionsToIgnore, returnedCoveragePositions:=returnedCoveragePositions)
            If diaCovs IsNot Nothing AndAlso diaCovs.Count > 0 Then
                Dim indexToUse As Integer = 0
                If firstOrLastItem = FirstOrLast.Last AndAlso diaCovs.Count > 1 Then
                    indexToUse = diaCovs.Count - 1
                End If
                diaCov = diaCovs.Item(indexToUse)
                If returnedCoveragePositions IsNot Nothing AndAlso returnedCoveragePositions.Count = diaCovs.Count Then
                    returnedCoveragePosition = returnedCoveragePositions.Item(indexToUse)
                End If
            End If

            Return diaCov
        End Function
        Public Function QuickQuoteCoveragesForCoverageCodeIdInt(ByRef qqCoverages As List(Of QuickQuoteCoverage), ByVal covCodeId As Integer, Optional ByVal description As String = "", Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal covPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedCoveragePositions As List(Of Integer) = Nothing) As List(Of QuickQuoteCoverage)
            Dim qqCovs As List(Of QuickQuoteCoverage) = Nothing
            returnedCoveragePositions = Nothing

            If qqCoverages IsNot Nothing AndAlso qqCoverages.Count > 0 AndAlso covCodeId > 0 Then
                Dim covPosition As Integer = 0
                For Each qqC As QuickQuoteCoverage In qqCoverages
                    covPosition += 1
                    If (covPositionsToIgnore Is Nothing OrElse covPositionsToIgnore.Count = 0 OrElse covPositionsToIgnore.Contains(covPosition) = False) AndAlso qqC IsNot Nothing AndAlso IntegerForString(qqC.CoverageCodeId) = covCodeId Then
                        If String.IsNullOrEmpty(description) = True OrElse UCase(qqC.Description) = UCase(description) Then
                            Dim okayToAdd As Boolean = False
                            If System.Enum.IsDefined(GetType(StatusMatchType), statusToFind) = True AndAlso statusToFind <> StatusMatchType.Any Then
                                Dim qqcDetailStatusCodeInt As Integer = IntegerForString(qqC.DetailStatusCode)
                                Select Case statusToFind
                                    Case StatusMatchType.ActiveOnly
                                        If qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.Active Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NewOnly
                                        If qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.New Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.InactiveOnly
                                        If qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.InActive Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.DeletedOnly
                                        If qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.Deleted Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.ActiveOrNew
                                        If qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.Active OrElse qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.New Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.InactiveOrDeleted
                                        If qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.InActive OrElse qqcDetailStatusCodeInt = Diamond.Common.Enums.StatusCode.Deleted Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NotActive
                                        If qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.Active Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NotNew
                                        If qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.New Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NotInactive
                                        If qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.InActive Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NotDeleted
                                        If qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.Deleted Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NotActiveOrNew
                                        If qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.Active AndAlso qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.New Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.NotInactiveOrDeleted
                                        If qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.InActive AndAlso qqcDetailStatusCodeInt <> Diamond.Common.Enums.StatusCode.Deleted Then
                                            okayToAdd = True
                                        End If
                                    Case StatusMatchType.ExactMatch
                                        If qqC.DetailStatusCode = diaStatusToMatch Then
                                            okayToAdd = True
                                        End If
                                End Select
                            Else
                                'allow any status
                                okayToAdd = True
                            End If
                            If okayToAdd = True Then
                                If qqCovs Is Nothing Then
                                    qqCovs = New List(Of QuickQuoteCoverage)
                                End If
                                qqCovs.Add(qqC)
                                AddIntegerToIntegerList(covPosition, returnedCoveragePositions)
                            End If
                        End If
                    End If
                Next
            End If

            Return qqCovs
        End Function
        Public Function QuickQuoteCoverageForCoverageCodeIdInt(ByRef qqCoverages As List(Of QuickQuoteCoverage), ByVal covCodeId As Integer, Optional ByVal description As String = "", Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal firstOrLastItem As FirstOrLast = FirstOrLast.First, Optional ByVal covPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedCoveragePosition As Integer = 0) As QuickQuoteCoverage
            Dim qqCov As QuickQuoteCoverage = Nothing
            returnedCoveragePosition = 0

            Dim returnedCoveragePositions As List(Of Integer) = Nothing
            Dim qqCovs As List(Of QuickQuoteCoverage) = QuickQuoteCoveragesForCoverageCodeIdInt(qqCoverages, covCodeId, description:=description, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, covPositionsToIgnore:=covPositionsToIgnore, returnedCoveragePositions:=returnedCoveragePositions)
            If qqCovs IsNot Nothing AndAlso qqCovs.Count > 0 Then
                Dim indexToUse As Integer = 0
                If firstOrLastItem = FirstOrLast.Last AndAlso qqCovs.Count > 1 Then
                    indexToUse = qqCovs.Count - 1
                End If
                qqCov = qqCovs.Item(indexToUse)
                If returnedCoveragePositions IsNot Nothing AndAlso returnedCoveragePositions.Count = qqCovs.Count Then
                    returnedCoveragePosition = returnedCoveragePositions.Item(indexToUse)
                End If
            End If

            Return qqCov
        End Function

        'added 1/16/2019
        Public Enum WhenToSetType
            None = 0
            AlwaysSetWhenValid = 1
            AlwaysOverwriteAll = 2
            SetWhenValid_MasterPartOnly = 3
            OverwriteAll_MasterPartOnly = 4
            SetWhenValid_StatePartsOnly = 5
            OverwriteAll_StatePartsOnly = 6
        End Enum
        Public Shared Function OkayToUseInteger(ByVal okayToUseType As WhenToSetType, ByVal int As Integer, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) As Boolean
            If okayToUseType = WhenToSetType.AlwaysOverwriteAll OrElse (okayToUseType = WhenToSetType.OverwriteAll_MasterPartOnly AndAlso packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Package) OrElse (okayToUseType = WhenToSetType.OverwriteAll_StatePartsOnly AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.Package) OrElse ((okayToUseType = WhenToSetType.AlwaysSetWhenValid OrElse (okayToUseType = WhenToSetType.SetWhenValid_MasterPartOnly AndAlso packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Package) OrElse (okayToUseType = WhenToSetType.SetWhenValid_StatePartsOnly AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.Package)) AndAlso int > 0) Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Shared Function OkayToUseString(ByVal okayToUseType As WhenToSetType, ByVal str As String, Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) As Boolean
            If okayToUseType = WhenToSetType.AlwaysOverwriteAll OrElse (okayToUseType = WhenToSetType.OverwriteAll_MasterPartOnly AndAlso packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Package) OrElse (okayToUseType = WhenToSetType.OverwriteAll_StatePartsOnly AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.Package) OrElse ((okayToUseType = WhenToSetType.AlwaysSetWhenValid OrElse (okayToUseType = WhenToSetType.SetWhenValid_MasterPartOnly AndAlso packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Package) OrElse (okayToUseType = WhenToSetType.SetWhenValid_StatePartsOnly AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.Package)) AndAlso String.IsNullOrWhiteSpace(str) = False) Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Shared Function WhenToSetTypeForConfigKeyName(ByVal configKeyName As String, Optional ByVal defaultValueWhenKeyIsMissingOrInvalid As WhenToSetType = WhenToSetType.None) As WhenToSetType
            Dim setType As WhenToSetType = defaultValueWhenKeyIsMissingOrInvalid 'default

            If String.IsNullOrWhiteSpace(configKeyName) = False Then
                Dim strSetType As String = configAppSettingValueAsString(configKeyName)
                If String.IsNullOrWhiteSpace(strSetType) = False Then
                    Select Case UCase(strSetType)
                        Case "NONE"
                            setType = WhenToSetType.None
                        Case UCase("AlwaysSetWhenValid")
                            setType = WhenToSetType.AlwaysSetWhenValid
                        Case UCase("AlwaysOverwriteAll")
                            setType = WhenToSetType.AlwaysOverwriteAll
                        Case UCase("SetWhenValid_MasterPartOnly")
                            setType = WhenToSetType.SetWhenValid_MasterPartOnly
                        Case UCase("OverwriteAll_MasterPartOnly")
                            setType = WhenToSetType.OverwriteAll_MasterPartOnly
                        Case UCase("SetWhenValid_StatePartsOnly")
                            setType = WhenToSetType.SetWhenValid_StatePartsOnly
                        Case UCase("OverwriteAll_StatePartsOnly")
                            setType = WhenToSetType.OverwriteAll_StatePartsOnly
                        Case Else
                            If System.Enum.TryParse(Of WhenToSetType)(strSetType, setType) = False Then
                                setType = Nothing
                            End If
                    End Select
                End If

                If (System.Enum.IsDefined(GetType(WhenToSetType), setType) = False OrElse setType = WhenToSetType.None) AndAlso defaultValueWhenKeyIsMissingOrInvalid <> WhenToSetType.None Then
                    setType = defaultValueWhenKeyIsMissingOrInvalid
                End If
            End If

            Return setType
        End Function
        Public Shared Function WhenToSetMultiStateLocationDisplayNums() As WhenToSetType
            Return WhenToSetTypeForConfigKeyName("QuickQuote_WhenToSetMultiStateLocationDisplayNums", defaultValueWhenKeyIsMissingOrInvalid:=WhenToSetType.None)
        End Function
        Public Shared Function WhenToSetMultiStateVehicleDisplayNums() As WhenToSetType
            Return WhenToSetTypeForConfigKeyName("QuickQuote_WhenToSetMultiStateVehicleDisplayNums", defaultValueWhenKeyIsMissingOrInvalid:=WhenToSetType.None)
        End Function
        Public Enum MasterPackagePartObjectStorageType
            None = 0
            StoreOnlyShell = 1
            StoreEverything = 2
            StoreNothing = 3
        End Enum
        Public Shared Function MasterPackagePartObjectStorageTypeForConfigKeyName(ByVal configKeyName As String, Optional ByVal defaultValueWhenKeyIsMissingOrInvalid As MasterPackagePartObjectStorageType = MasterPackagePartObjectStorageType.None) As MasterPackagePartObjectStorageType
            Dim storageType As MasterPackagePartObjectStorageType = defaultValueWhenKeyIsMissingOrInvalid 'default

            If String.IsNullOrWhiteSpace(configKeyName) = False Then
                Dim strStorageType As String = configAppSettingValueAsString(configKeyName)
                If String.IsNullOrWhiteSpace(strStorageType) = False Then
                    Select Case UCase(strStorageType)
                        Case "NONE"
                            storageType = MasterPackagePartObjectStorageType.None
                        Case UCase("StoreOnlyShell")
                            storageType = MasterPackagePartObjectStorageType.StoreOnlyShell
                        Case UCase("StoreEverything")
                            storageType = MasterPackagePartObjectStorageType.StoreEverything
                        Case UCase("StoreNothing")
                            storageType = MasterPackagePartObjectStorageType.StoreNothing
                        Case Else
                            If System.Enum.TryParse(Of MasterPackagePartObjectStorageType)(strStorageType, storageType) = False Then
                                storageType = Nothing
                            End If
                    End Select
                End If

                If (System.Enum.IsDefined(GetType(MasterPackagePartObjectStorageType), storageType) = False OrElse storageType = MasterPackagePartObjectStorageType.None) AndAlso defaultValueWhenKeyIsMissingOrInvalid <> MasterPackagePartObjectStorageType.None Then
                    storageType = defaultValueWhenKeyIsMissingOrInvalid
                End If
            End If

            Return storageType
        End Function
        Public Shared Function MasterPackagePartObjectStorageTypeForLocations() As MasterPackagePartObjectStorageType
            Return MasterPackagePartObjectStorageTypeForConfigKeyName("QuickQuote_MasterPackagePartObjectStorageTypeForLocations", defaultValueWhenKeyIsMissingOrInvalid:=MasterPackagePartObjectStorageType.StoreOnlyShell)
        End Function
        Public Shared Function MasterPackagePartObjectStorageTypeForVehicles() As MasterPackagePartObjectStorageType
            Return MasterPackagePartObjectStorageTypeForConfigKeyName("QuickQuote_MasterPackagePartObjectStorageTypeForVehicles", defaultValueWhenKeyIsMissingOrInvalid:=MasterPackagePartObjectStorageType.StoreOnlyShell)
        End Function

        'added 1/21/2019
        Public Shared Function GetQuote_DatabaseCommandTimeout() As Integer
            Dim cmdTimeout As Integer = 0

            Dim strCmdTimeout As String = configAppSettingValueAsString("VR_GetQuote_DatabaseCommandTimeout")
            Dim qqHelper As New QuickQuoteHelperClass
            If qqHelper.IsPositiveIntegerString(strCmdTimeout) = True Then
                cmdTimeout = CInt(strCmdTimeout)
            End If

            Return cmdTimeout
        End Function

        'added 1/29/2019
        Public Shared Function FAR_OkayToDefaultLocationFormTypeIdFromFirstLocation() As Boolean
            Dim isOkay As Boolean = False 'default to False; key required to turn to True

            Dim strIsOkay As String = configAppSettingValueAsString("VR_FAR_OkayToDefaultLocationFormTypeIdFromFirstLocation")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    isOkay = True
                Else
                    isOkay = False 'redundant
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OnlyRetrieveAdditionalInsuredsFromStatePartsUsedForSave() As Boolean
            Dim onlyRetrieve As Boolean = True 'default to True; key required to turn to False

            Dim strOnlyRetrieve As String = configAppSettingValueAsString("VR_OnlyRetrieveAdditionalInsuredsFromStatePartsUsedForSave")
            If String.IsNullOrWhiteSpace(strOnlyRetrieve) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strOnlyRetrieve) = "YES" OrElse qqHelper.BitToBoolean(strOnlyRetrieve) = True Then 'key would just need any text value that doesn't equate to True to return False
                    onlyRetrieve = True
                Else
                    onlyRetrieve = False
                End If
            End If

            Return onlyRetrieve
        End Function

        'added 2/1/2019
        Public Shared Function ClearStateIdOnMasterPartLocRemovalForSyncLobsWhenNoStatePartLocsAreBeingRemoved() As Boolean
            Dim onlyRetrieve As Boolean = True 'default to True; key required to turn to False

            Dim strOnlyRetrieve As String = configAppSettingValueAsString("VR_ClearStateIdOnMasterPartLocRemovalForSyncLobsWhenNoStatePartLocsAreBeingRemoved")
            If String.IsNullOrWhiteSpace(strOnlyRetrieve) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strOnlyRetrieve) = "YES" OrElse qqHelper.BitToBoolean(strOnlyRetrieve) = True Then 'key would just need any text value that doesn't equate to True to return False
                    onlyRetrieve = True
                Else
                    onlyRetrieve = False
                End If
            End If

            Return onlyRetrieve
        End Function
        Public Function DiamondLocationsForStatusAndOrStateId(ByRef diaLocations As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location), Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal stateId As Integer = 0, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location)
            Dim diaLocs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location) = Nothing
            returnedLocPositions = Nothing

            If diaLocations IsNot Nothing AndAlso diaLocations.Count > 0 Then
                Dim locPosition As Integer = 0
                For Each diaL As Diamond.Common.Objects.Policy.Location In diaLocations
                    locPosition += 1
                    If (locPositionsToIgnore Is Nothing OrElse locPositionsToIgnore.Count = 0 OrElse locPositionsToIgnore.Contains(locPosition) = False) AndAlso diaL IsNot Nothing Then
                        'If (stateId < 1 AndAlso matchOnNonPositiveStateId = False) OrElse (diaL.Address IsNot Nothing AndAlso diaL.Address.StateId = stateId) OrElse (diaL.Address Is Nothing AndAlso stateIdDefaultForNullAddress = stateId) OrElse (considerNonPositiveStateIdSameAsNullAddress = True AndAlso diaL.Address IsNot Nothing AndAlso diaL.Address.StateId < 1 AndAlso stateIdDefaultForNullAddress = stateId) Then
                        'If (stateId < 1 AndAlso matchOnNonPositiveStateId = False) OrElse (diaL.Address IsNot Nothing AndAlso diaL.Address.StateId = stateId) OrElse ((diaL.Address Is Nothing OrElse (considerNonPositiveStateIdSameAsNullAddress = True AndAlso diaL.Address IsNot Nothing AndAlso diaL.Address.StateId < 1)) AndAlso stateIdDefaultForNullAddress = stateId) Then
                        If (stateId < 1 AndAlso matchOnNonPositiveStateId = False) OrElse (diaL.Address IsNot Nothing AndAlso diaL.Address.StateId = stateId) OrElse ((diaL.Address Is Nothing OrElse (considerNonPositiveStateIdSameAsNullAddress = True AndAlso diaL.Address IsNot Nothing AndAlso diaL.Address.StateId < 1) OrElse (considerNoAddressDataSameAsNullAddress = True AndAlso diaL.Address IsNot Nothing AndAlso DiamondAddressHasAnyData(diaL.Address) = False) OrElse (considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress = True AndAlso diaL.Address IsNot Nothing AndAlso DiamondAddressHasAnyDataAccordingToQuickQuoteRequirements(diaL.Address) = False) OrElse (considerNoAddressDataOtherThanStateIdSameAsNullAddress = True AndAlso diaL.Address IsNot Nothing AndAlso DiamondAddressHasAnyDataOtherThanState(diaL.Address) = False)) AndAlso stateIdDefaultForNullAddress = stateId) Then
                            Dim statusIsOkay As Boolean = IsEligibleDiamondStatus(diaL.DetailStatusCode, statusToFind, diaStatusToMatch:=diaStatusToMatch)
                            If statusIsOkay = True Then
                                If diaLocs Is Nothing Then
                                    diaLocs = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location)
                                End If
                                diaLocs.Add(diaL)
                                AddIntegerToIntegerList(locPosition, returnedLocPositions)
                            End If
                        End If
                    End If
                Next
            End If

            Return diaLocs
        End Function
        Public Function DiamondLocationsForStatusAndOrStateId(ByRef diaRiskLevel As Diamond.Common.Objects.Policy.RiskLevel, Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal stateId As Integer = 0, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location)
            Dim diaLocs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location) = Nothing
            returnedLocPositions = Nothing

            If diaRiskLevel IsNot Nothing Then
                diaLocs = DiamondLocationsForStatusAndOrStateId(diaRiskLevel.Locations, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, stateId:=stateId, matchOnNonPositiveStateId:=matchOnNonPositiveStateId, stateIdDefaultForNullAddress:=stateIdDefaultForNullAddress, considerNonPositiveStateIdSameAsNullAddress:=considerNonPositiveStateIdSameAsNullAddress, considerNoAddressDataSameAsNullAddress:=considerNoAddressDataSameAsNullAddress, considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress:=considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress, considerNoAddressDataOtherThanStateIdSameAsNullAddress:=considerNoAddressDataOtherThanStateIdSameAsNullAddress, locPositionsToIgnore:=locPositionsToIgnore, returnedLocPositions:=returnedLocPositions)
            End If

            Return diaLocs
        End Function
        Public Function DiamondLocationsForStatusAndOrStateId(ByRef diaLob As Diamond.Common.Objects.Policy.LOB, Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal stateId As Integer = 0, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location)
            Dim diaLocs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location) = Nothing
            returnedLocPositions = Nothing

            If diaLob IsNot Nothing Then
                diaLocs = DiamondLocationsForStatusAndOrStateId(diaLob.RiskLevel, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, stateId:=stateId, matchOnNonPositiveStateId:=matchOnNonPositiveStateId, stateIdDefaultForNullAddress:=stateIdDefaultForNullAddress, considerNonPositiveStateIdSameAsNullAddress:=considerNonPositiveStateIdSameAsNullAddress, considerNoAddressDataSameAsNullAddress:=considerNoAddressDataSameAsNullAddress, considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress:=considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress, considerNoAddressDataOtherThanStateIdSameAsNullAddress:=considerNoAddressDataOtherThanStateIdSameAsNullAddress, locPositionsToIgnore:=locPositionsToIgnore, returnedLocPositions:=returnedLocPositions)
            End If

            Return diaLocs
        End Function
        Public Function DiamondLocationCount(ByVal diaLocations As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location)) As Integer
            Dim locCount As Integer = 0

            If diaLocations IsNot Nothing AndAlso diaLocations.Count > 0 Then
                locCount = diaLocations.Count
            End If

            Return locCount
        End Function
        Public Function HasDiamondLocationsForStatusAndOrStateId(ByRef diaLocations As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location), Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal stateId As Integer = 0, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing, Optional ByRef diaLocsForStatus As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location) = Nothing) As Boolean
            Dim hasLocs As Boolean = False

            diaLocsForStatus = DiamondLocationsForStatusAndOrStateId(diaLocations, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, stateId:=stateId, matchOnNonPositiveStateId:=matchOnNonPositiveStateId, stateIdDefaultForNullAddress:=stateIdDefaultForNullAddress, considerNonPositiveStateIdSameAsNullAddress:=considerNonPositiveStateIdSameAsNullAddress, considerNoAddressDataSameAsNullAddress:=considerNoAddressDataSameAsNullAddress, considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress:=considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress, considerNoAddressDataOtherThanStateIdSameAsNullAddress:=considerNoAddressDataOtherThanStateIdSameAsNullAddress, locPositionsToIgnore:=locPositionsToIgnore, returnedLocPositions:=returnedLocPositions)
            If DiamondLocationCount(diaLocsForStatus) > 1 Then
                hasLocs = True
            End If

            Return hasLocs
        End Function
        Public Function HasDiamondLocationsForStatusAndOrStateId(ByRef diaRiskLevel As Diamond.Common.Objects.Policy.RiskLevel, Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal stateId As Integer = 0, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing, Optional ByRef diaLocsForStatus As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location) = Nothing) As Boolean
            Dim hasLocs As Boolean = False

            diaLocsForStatus = DiamondLocationsForStatusAndOrStateId(diaRiskLevel, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, stateId:=stateId, matchOnNonPositiveStateId:=matchOnNonPositiveStateId, stateIdDefaultForNullAddress:=stateIdDefaultForNullAddress, considerNonPositiveStateIdSameAsNullAddress:=considerNonPositiveStateIdSameAsNullAddress, considerNoAddressDataSameAsNullAddress:=considerNoAddressDataSameAsNullAddress, considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress:=considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress, considerNoAddressDataOtherThanStateIdSameAsNullAddress:=considerNoAddressDataOtherThanStateIdSameAsNullAddress, locPositionsToIgnore:=locPositionsToIgnore, returnedLocPositions:=returnedLocPositions)
            If DiamondLocationCount(diaLocsForStatus) > 1 Then
                hasLocs = True
            End If

            Return hasLocs
        End Function
        Public Function HasDiamondLocationsForStatusAndOrStateId(ByRef diaLob As Diamond.Common.Objects.Policy.LOB, Optional ByVal statusToFind As StatusMatchType = StatusMatchType.Any, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active, Optional ByVal stateId As Integer = 0, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing, Optional ByRef diaLocsForStatus As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Location) = Nothing) As Boolean
            Dim hasLocs As Boolean = False

            diaLocsForStatus = DiamondLocationsForStatusAndOrStateId(diaLob, statusToFind:=statusToFind, diaStatusToMatch:=diaStatusToMatch, stateId:=stateId, matchOnNonPositiveStateId:=matchOnNonPositiveStateId, stateIdDefaultForNullAddress:=stateIdDefaultForNullAddress, considerNonPositiveStateIdSameAsNullAddress:=considerNonPositiveStateIdSameAsNullAddress, considerNoAddressDataSameAsNullAddress:=considerNoAddressDataSameAsNullAddress, considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress:=considerNoAddressDataAccordingToQuickQuoteRequirementsSameAsNullAddress, considerNoAddressDataOtherThanStateIdSameAsNullAddress:=considerNoAddressDataOtherThanStateIdSameAsNullAddress, locPositionsToIgnore:=locPositionsToIgnore, returnedLocPositions:=returnedLocPositions)
            If DiamondLocationCount(diaLocsForStatus) > 1 Then
                hasLocs = True
            End If

            Return hasLocs
        End Function
        Public Function IsEligibleDiamondStatus(ByVal diaStatusCode As Integer, ByVal statusToFind As StatusMatchType, Optional ByVal diaStatusToMatch As Diamond.Common.Enums.StatusCode = Diamond.Common.Enums.StatusCode.Active) As Boolean
            Dim isOkay As Boolean = False

            If System.Enum.IsDefined(GetType(StatusMatchType), statusToFind) = True AndAlso statusToFind <> StatusMatchType.Any Then
                Select Case statusToFind
                    Case StatusMatchType.ActiveOnly
                        If diaStatusCode = Diamond.Common.Enums.StatusCode.Active Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NewOnly
                        If diaStatusCode = Diamond.Common.Enums.StatusCode.New Then
                            isOkay = True
                        End If
                    Case StatusMatchType.InactiveOnly
                        If diaStatusCode = Diamond.Common.Enums.StatusCode.InActive Then
                            isOkay = True
                        End If
                    Case StatusMatchType.DeletedOnly
                        If diaStatusCode = Diamond.Common.Enums.StatusCode.Deleted Then
                            isOkay = True
                        End If
                    Case StatusMatchType.ActiveOrNew
                        If diaStatusCode = Diamond.Common.Enums.StatusCode.Active OrElse diaStatusCode = Diamond.Common.Enums.StatusCode.New Then
                            isOkay = True
                        End If
                    Case StatusMatchType.InactiveOrDeleted
                        If diaStatusCode = Diamond.Common.Enums.StatusCode.InActive OrElse diaStatusCode = Diamond.Common.Enums.StatusCode.Deleted Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NotActive
                        If diaStatusCode <> Diamond.Common.Enums.StatusCode.Active Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NotNew
                        If diaStatusCode <> Diamond.Common.Enums.StatusCode.New Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NotInactive
                        If diaStatusCode <> Diamond.Common.Enums.StatusCode.InActive Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NotDeleted
                        If diaStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NotActiveOrNew
                        If diaStatusCode <> Diamond.Common.Enums.StatusCode.Active AndAlso diaStatusCode <> Diamond.Common.Enums.StatusCode.New Then
                            isOkay = True
                        End If
                    Case StatusMatchType.NotInactiveOrDeleted
                        If diaStatusCode <> Diamond.Common.Enums.StatusCode.InActive AndAlso diaStatusCode <> Diamond.Common.Enums.StatusCode.Deleted Then
                            isOkay = True
                        End If
                    Case StatusMatchType.ExactMatch
                        If diaStatusCode = diaStatusToMatch Then
                            isOkay = True
                        End If
                End Select
            Else
                'allow any status
                isOkay = True
            End If

            Return isOkay
        End Function
        'added 2/2/2019
        Public Function QuickQuoteLocationsForSpecificStateId(ByRef qqLocations As List(Of QuickQuoteLocation), ByVal stateId As Integer, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing) As List(Of QuickQuoteLocation)
            Dim qqLocs As List(Of QuickQuoteLocation) = Nothing
            returnedLocPositions = Nothing

            If qqLocations IsNot Nothing AndAlso qqLocations.Count > 0 Then
                Dim locPosition As Integer = 0
                For Each qqL As QuickQuoteLocation In qqLocations
                    locPosition += 1
                    If (locPositionsToIgnore Is Nothing OrElse locPositionsToIgnore.Count = 0 OrElse locPositionsToIgnore.Contains(locPosition) = False) AndAlso qqL IsNot Nothing Then
                        If (stateId < 1 AndAlso matchOnNonPositiveStateId = False) OrElse (qqL.Address IsNot Nothing AndAlso IntegerForString(qqL.Address.StateId) = stateId) OrElse ((qqL.Address Is Nothing OrElse (considerNonPositiveStateIdSameAsNullAddress = True AndAlso qqL.Address IsNot Nothing AndAlso IntegerForString(qqL.Address.StateId) < 1) OrElse (considerNoAddressDataSameAsNullAddress = True AndAlso qqL.Address IsNot Nothing AndAlso qqL.Address.HasData = False) OrElse (considerNoAddressDataOtherThanStateIdSameAsNullAddress = True AndAlso qqL.Address IsNot Nothing AndAlso qqL.Address.HasAnyDataOtherThanState = False)) AndAlso stateIdDefaultForNullAddress = stateId) Then
                            If qqLocs Is Nothing Then
                                qqLocs = New List(Of QuickQuoteLocation)
                            End If
                            qqLocs.Add(qqL)
                            AddIntegerToIntegerList(locPosition, returnedLocPositions)
                        End If
                    End If
                Next
            End If

            Return qqLocs
        End Function
        Public Function HasQuickQuoteLocationsForSpecificStateId(ByRef qqLocations As List(Of QuickQuoteLocation), ByVal stateId As Integer, Optional ByVal matchOnNonPositiveStateId As Boolean = False, Optional ByVal stateIdDefaultForNullAddress As Integer = -1, Optional ByVal considerNonPositiveStateIdSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataSameAsNullAddress As Boolean = False, Optional ByVal considerNoAddressDataOtherThanStateIdSameAsNullAddress As Boolean = False, Optional ByVal locPositionsToIgnore As List(Of Integer) = Nothing, Optional ByRef returnedLocPositions As List(Of Integer) = Nothing, Optional ByRef qqLocsForStatus As List(Of QuickQuoteLocation) = Nothing) As Boolean
            Dim hasLocs As Boolean = False

            qqLocsForStatus = QuickQuoteLocationsForSpecificStateId(qqLocations, stateId, matchOnNonPositiveStateId:=matchOnNonPositiveStateId, stateIdDefaultForNullAddress:=stateIdDefaultForNullAddress, considerNonPositiveStateIdSameAsNullAddress:=considerNonPositiveStateIdSameAsNullAddress, considerNoAddressDataSameAsNullAddress:=considerNoAddressDataSameAsNullAddress, considerNoAddressDataOtherThanStateIdSameAsNullAddress:=considerNoAddressDataOtherThanStateIdSameAsNullAddress, locPositionsToIgnore:=locPositionsToIgnore, returnedLocPositions:=returnedLocPositions)
            If LocationCount(qqLocsForStatus) > 1 Then
                hasLocs = True
            End If

            Return hasLocs
        End Function
        'added 2/3/2019; note: similar method in QuickQuoteAddress
        Public Shared Function DiamondAddressHasValidQuickQuoteState(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasValid As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    Dim qqState As QuickQuoteState = QuickQuoteStateForDiamondStateId(.StateId, defaultToIndiana:=False)
                    If System.Enum.IsDefined(GetType(QuickQuoteState), qqState) = True AndAlso qqState <> QuickQuoteState.None Then
                        hasValid = True
                    End If
                End With
            End If

            Return hasValid
        End Function
        'note: similar method in QuickQuoteAddress
        Public Shared Function DiamondAddressHasValidState(ByVal diaAdd As Diamond.Common.Objects.Address, Optional ByRef diaStateId As Integer = -1) As Boolean
            Dim hasValid As Boolean = False
            diaStateId = -1

            If diaAdd IsNot Nothing Then
                With diaAdd
                    diaStateId = .StateId
                    'If .StateId > 0 AndAlso String.IsNullOrWhiteSpace(.StateAbbreviation) = False Then 'may update to use static data if StateAbbreviation isn't set automatically
                    '    hasValid = True
                    'End If
                    If .StateId > 0 AndAlso String.IsNullOrWhiteSpace(StateAbbreviationForDiamondStateId(.StateId, defaultToIndiana:=False)) = False Then 'may update to use static data if StateAbbreviation isn't set automatically
                        hasValid = True
                    End If
                End With
            End If

            Return hasValid
        End Function
        'note: similar method in QuickQuoteAddress
        Public Shared Function DiamondAddressHasValidNonIndianaState(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasValid As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    Dim diaStateId As Integer = -1
                    If DiamondAddressHasValidState(diaAdd, diaStateId:=diaStateId) = True AndAlso QuickQuoteStateForDiamondStateId(diaStateId, defaultToIndiana:=False) <> QuickQuoteState.Indiana Then
                        hasValid = True
                    End If
                End With
            End If

            Return hasValid
        End Function
        'note: similar method in QuickQuoteAddress
        Public Shared Function DiamondAddressHasAnyDataOtherThanState(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasInfo As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    If String.IsNullOrWhiteSpace(.ApartmentNumber) = False OrElse String.IsNullOrWhiteSpace(.HouseNumber) = False OrElse String.IsNullOrWhiteSpace(.StreetName) = False OrElse String.IsNullOrWhiteSpace(.City) = False OrElse (String.IsNullOrWhiteSpace(.Zip) = False AndAlso String.IsNullOrWhiteSpace(Replace(Replace(.Zip, "0", ""), "-", "")) = False) OrElse String.IsNullOrWhiteSpace(.County) = False OrElse String.IsNullOrWhiteSpace(.Other) = False OrElse String.IsNullOrWhiteSpace(.POBox) = False OrElse String.IsNullOrWhiteSpace(.Township) = False OrElse (String.IsNullOrWhiteSpace(.TerritoryCode) = False AndAlso String.IsNullOrWhiteSpace(Replace(.TerritoryCode, "0", "")) = False) Then
                        hasInfo = True
                    End If
                End With
            End If

            Return hasInfo
        End Function
        'note: similar method in QuickQuoteAddress
        Public Shared Function DiamondAddressHasAnyData(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasInfo As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    If DiamondAddressHasValidState(diaAdd) = True OrElse DiamondAddressHasAnyDataOtherThanState(diaAdd) = True Then
                        Return True
                    Else
                        Return False
                    End If
                End With
            End If

            Return hasInfo
        End Function
        'note: uses same logic as used in QuickQuoteAddress for HasData
        Public Shared Function DiamondAddressHasAnyDataAccordingToQuickQuoteRequirements(ByVal diaAdd As Diamond.Common.Objects.Address) As Boolean
            Dim hasInfo As Boolean = False

            If diaAdd IsNot Nothing Then
                With diaAdd
                    If DiamondAddressHasValidNonIndianaState(diaAdd) = True OrElse DiamondAddressHasAnyDataOtherThanState(diaAdd) = True Then
                        Return True
                    Else
                        Return False
                    End If
                End With
            End If

            Return hasInfo
        End Function

        Public Shared Function GetAllGLClassificationCodes(quote As QuickQuote.CommonObjects.QuickQuoteObject) As List(Of String)
            Return QuickQuoteExtensions.GetAllGLClassificationCodes(quote)
        End Function

        'added 2/27/2019
        Public Shared Function PassesPendingDiamondImageValidationForPolicyId(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByVal tranTypeToValidate As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal validateUserAccess As Boolean = False) As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            Select Case tranTypeToValidate
                Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                    isValid = PendingDiamondEndorsementImageExistsForPolicyId(policyId, policyImageNum:=policyImageNum, policyResult:=policyResult, errorMessage:=errorMessage)'note: calls PendingDiamondImageExistsForPolicyId and also looks for TransTypeId = 3 (Endorsement)
                Case QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote
                    isValid = PendingDiamondNewBusinessImageExistsForPolicyId(policyId, policyImageNum:=policyImageNum, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=True) 'note: calls PendingDiamondImageExistsForPolicyId w/ allowQuote param (PolicyStatusCodeId 4 is Pending; 12 is Quote) and also looks for TransTypeId = 2 (New Business)
                Case Else
                    isValid = PendingDiamondImageExistsForPolicyId(policyId, policyImageNum:=policyImageNum, policyResult:=policyResult, errorMessage:=errorMessage) 'note: looks for PolicyStatusCodeId = 4 (Pending)
            End Select

            If isValid = True AndAlso validateUserAccess = True Then
                If policyResult IsNot Nothing Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    'If qqHelper.IsAgencyOkayForUser(policyResult.AgencyCode) = True Then
                    If qqHelper.IsAgencyOkayForUser_CodeOrId(policyResult.AgencyCode, policyResult.AgencyId) = True Then
                        'okay
                    Else
                        isValid = False
                        errorMessage = "you do not have access to this policy image"
                    End If
                Else
                    'shouldn't get here but just in case
                    isValid = False
                    If String.IsNullOrWhiteSpace(errorMessage) = True Then
                        errorMessage = "unable to validate user access to policy image"
                    End If
                End If
            End If

            If isValid = False AndAlso String.IsNullOrWhiteSpace(errorMessage) = True Then
                errorMessage = "unable to validate policy image"
            End If

            Return isValid
        End Function
        Public Shared Function PendingDiamondImageExistsForPolicyId(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal allowQuote As Boolean = False, Optional ByVal mustHavePendingPolicyStatusWhenAllowingQuote As Boolean = True) As Boolean 'updated 10/7/2019 w/ optional param for mustHavePendingPolicyStatusWhenAllowingQuote
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            If policyId > 0 Then
                Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
                With policyLookupInfo
                    .PolicyId = policyId
                    .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                    If policyImageNum > 0 Then
                        .PolicyImageNum = policyImageNum
                    Else
                        'AddIntegerToIntegerList(4, .PolicyStatusCodeIds) 'Pending
                        'If allowQuote = True Then
                        '    AddIntegerToIntegerList(12, .PolicyStatusCodeIds) 'Quote
                        'End If
                        'updated 10/11/2019
                        If allowQuote = True Then
                            .PolicyStatusCodeIds = PendingDiamondPolicyStatusCodeIds(considerQuoteStatusAsPending:=True)
                        Else
                            '.PolicyStatusCodeId = 4 'Pending
                            .PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending)
                        End If
                    End If
                End With
                Dim caughtDatabaseError As Boolean = False
                policyResult = PolicyResultForLookupInfo(policyLookupInfo, caughtDatabaseError:=caughtDatabaseError, firstOrLastItem:=FirstOrLast.Last)
                If policyResult IsNot Nothing Then
                    'mostly redundant check here (since it's already set in the policyLookupInfo) except for allowQuote part that also verifies PolicyCurrentStatusId; new Optional policyImageNum param makes below logic necessary
                    'If policyResult.PolicyStatusCodeId = 4 OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = 12 AndAlso policyResult.PolicyCurrentStatusId = 4) Then 'PolicyStatusCodeId Pending or (allowQuote True and PolicyStatusCodeId Quote and PolicyCurrentStatusId Pending)
                    'updated 10/7/2019
                    'If policyResult.PolicyStatusCodeId = 4 OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = 12 AndAlso (mustHavePendingPolicyStatusWhenAllowingQuote = False OrElse policyResult.PolicyCurrentStatusId = 4)) Then 'PolicyStatusCodeId Pending or (allowQuote True and PolicyStatusCodeId Quote and PolicyCurrentStatusId Pending)
                    If policyResult.PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending) OrElse (allowQuote = True AndAlso policyResult.PolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Quote) AndAlso (mustHavePendingPolicyStatusWhenAllowingQuote = False OrElse policyResult.PolicyCurrentStatusId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.Pending))) Then 'PolicyStatusCodeId Pending or (allowQuote True and PolicyStatusCodeId Quote and PolicyCurrentStatusId Pending)
                        isValid = True
                    Else
                        errorMessage = "policy image is no longer Pending"
                    End If
                Else
                    If caughtDatabaseError = True Then
                        'db error caught performing lookup
                        errorMessage = "exception caught when trying to locate pending policy image"
                    Else
                        'nothing found
                        errorMessage = "unable to locate pending policy image"
                    End If
                End If
            Else
                errorMessage = "invalid policyId"
            End If

            Return isValid
        End Function
        Public Shared Function PendingDiamondEndorsementImageExistsForPolicyId(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "") As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            'If PendingDiamondImageExistsForPolicyId(policyId, policyImageNum:=policyImageNum, policyResult:=policyResult, errorMessage:=errorMessage) = True Then
            'updated 10/7/2019
            If PendingDiamondImageExistsForPolicyId(policyId, policyImageNum:=policyImageNum, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=ConsiderEndorsementQuoteStatusAsPending(), mustHavePendingPolicyStatusWhenAllowingQuote:=False) = True Then
                If policyResult IsNot Nothing Then 'should always be something if IsValidPendingDiamondImage = True
                    If policyResult.TransTypeId = 3 Then 'Endorsement
                        isValid = True
                    Else
                        errorMessage = "policy image is not an Endorsement"
                    End If
                Else 'shouldn't ever get here
                    errorMessage = "unable to validate policy image type"
                End If
            End If

            Return isValid
        End Function
        Public Shared Function PendingDiamondNewBusinessImageExistsForPolicyId(ByVal policyId As Integer, Optional ByVal policyImageNum As Integer = 0, Optional ByRef policyResult As QuickQuotePolicyLookupInfo = Nothing, Optional ByRef errorMessage As String = "", Optional ByVal allowQuote As Boolean = False) As Boolean
            Dim isValid As Boolean = False
            policyResult = Nothing
            errorMessage = ""

            If PendingDiamondImageExistsForPolicyId(policyId, policyImageNum:=policyImageNum, policyResult:=policyResult, errorMessage:=errorMessage, allowQuote:=allowQuote) = True Then
                If policyResult IsNot Nothing Then 'should always be something if IsValidPendingDiamondImage = True
                    If policyResult.TransTypeId = 2 Then 'New Business
                        isValid = True
                    Else
                        errorMessage = "policy image is not New Business"
                    End If
                Else 'shouldn't ever get here
                    errorMessage = "unable to validate policy image type"
                End If
            End If

            Return isValid
        End Function
        Public Shared Function GetUserFriendlyErrorMessageForDiamondServiceFailure(Optional ByVal diaValidation As Diamond.Common.Objects.DiamondValidation = Nothing, Optional ByVal commonErrorMessage As String = "", Optional ByVal unhandledDiaServiceExceptionMessage As String = "", Optional ByVal defaultErrorMessage As String = "", Optional ByVal specificDiamondServiceName As String = "") As String
            Dim friendlyMsg As String = ""

            Dim validationItemCount As Integer = 0
            Dim firstValidationItemMessage As String = ""

            Dim strDiamondServiceText As String = specificDiamondServiceName
            If String.IsNullOrWhiteSpace(strDiamondServiceText) = True Then
                strDiamondServiceText = "Diamond"
            End If
            strDiamondServiceText &= " Service"

            If String.IsNullOrWhiteSpace(commonErrorMessage) = False Then
                friendlyMsg = commonErrorMessage
            ElseIf DiamondValidationHasItemsWithData(diaValidation, itemCount:=validationItemCount, firstMessage:=firstValidationItemMessage) = True AndAlso (validationItemCount > 1 OrElse String.IsNullOrWhiteSpace(unhandledDiaServiceExceptionMessage) = True OrElse (validationItemCount = 1 AndAlso isTextMatch(firstValidationItemMessage, unhandledDiaServiceExceptionMessage, matchType:=TextMatchType.TextOnly_IgnoreCasing) = False)) Then
                Dim qqHelper As New QuickQuoteHelperClass
                'friendlyMsg = "Validation Items:"
                'updated 9/30/2019
                friendlyMsg = "Validation Item" & If(validationItemCount = 1, "", "s") & ":"
                Dim valItemCounter As Integer = 0
                Dim strValItems As String = ""
                For Each vi As Diamond.Common.Objects.ValidationItem In diaValidation.ValidationItems
                    If DiamondValidationItemHasData(vi) = True Then
                        valItemCounter += 1
                        Dim strValItem As String = ""
                        Dim valSeverityType As String = qqHelper.GetStaticDataTextForValue(QuickQuoteClassName.QuickQuoteValidationItem, QuickQuotePropertyName.ValidationSeverityTypeId, vi.ValidationSeverityType.ToString)
                        If String.IsNullOrWhiteSpace(valSeverityType) = False Then
                            strValItem = valSeverityType
                        Else
                            If validationItemCount > 1 Then 'added IF 7/17/2019; original logic inside
                                strValItem = "# " & valItemCounter.ToString
                            End If
                        End If
                        'strValItem &= " - " & vi.Message
                        'strValItems = qqHelper.appendText(strValItems, strValItem, "; ")
                        'updated 7/17/2019
                        strValItem = qqHelper.appendText(strValItem, vi.Message, " - ")
                        Dim splitterText As String = " "
                        If String.IsNullOrWhiteSpace(strValItems) = True OrElse (Right(strValItems, 1) <> "." AndAlso Right(strValItems, 1) <> ";") Then
                            splitterText = ";" & splitterText
                        End If
                        strValItems = qqHelper.appendText(strValItems, strValItem, splitterText)
                    End If
                Next
                friendlyMsg = qqHelper.appendText(friendlyMsg, strValItems, " ")
            ElseIf String.IsNullOrWhiteSpace(unhandledDiaServiceExceptionMessage) = False Then 'this is typically already set on commonErrorMessage
                friendlyMsg = "unhandled exception caught when calling " & strDiamondServiceText
            Else
                friendlyMsg = defaultErrorMessage
            End If

            If String.IsNullOrWhiteSpace(friendlyMsg) = True Then
                friendlyMsg = "problem calling " & strDiamondServiceText
            End If

            Return friendlyMsg
        End Function
        Public Shared Function DiamondValidationHasItemsWithData(ByVal diaValidation As Diamond.Common.Objects.DiamondValidation, Optional ByRef itemCount As Integer = 0, Optional ByRef firstMessage As String = "") As Boolean
            Dim hasData As Boolean = False
            itemCount = 0
            firstMessage = ""

            If diaValidation IsNot Nothing AndAlso diaValidation.ValidationItems IsNot Nothing AndAlso diaValidation.ValidationItems.Count > 0 Then
                For Each vi As Diamond.Common.Objects.ValidationItem In diaValidation.ValidationItems
                    If DiamondValidationItemHasData(vi) = True Then
                        hasData = True
                        itemCount += 1
                        If itemCount = 1 Then
                            firstMessage = vi.Message
                        End If
                    End If
                Next
            End If

            Return hasData
        End Function
        Public Shared Function DiamondValidationItemHasData(ByVal diaValidationItem As Diamond.Common.Objects.ValidationItem) As Boolean
            Dim hasData As Boolean = False

            If diaValidationItem IsNot Nothing AndAlso (String.IsNullOrWhiteSpace(diaValidationItem.Message) = False OrElse diaValidationItem.ValidationSeverityType > 0) Then
                hasData = True
            End If

            Return hasData
        End Function

        'added 4/8/2019
        Public Shared Function OkayToOrderThirdPartyReport(ByVal orderFlag As QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag, Optional ByVal thirdPartyReportType As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.None, Optional ByVal thirdPartyReportTypeCategory As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportTypeCategory.None, Optional ByVal numberOfDaysSpecificReport As Integer = 0, Optional ByVal numberOfDaysAnyReport As Integer = 0, Optional ByRef yesIfCreditIsOrdered As Boolean = False, Optional ByRef yesIfMvrIsOrdered As Boolean = False, Optional ByRef yesIfClueIsOrdered As Boolean = False, Optional ByRef orderIfExistingReportIsOlderThanDaysNumber As Integer = -1) As QuickQuoteYesNoMaybeType
            Dim yesNoMaybe As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.No

            yesIfCreditIsOrdered = False
            yesIfMvrIsOrdered = False
            yesIfClueIsOrdered = False
            orderIfExistingReportIsOlderThanDaysNumber = -1

            If System.Enum.IsDefined(GetType(QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag), orderFlag) = True AndAlso orderFlag <> QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.No Then
                Select Case orderFlag
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.Yes
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Yes
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExists
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90Days
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDays
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenCreditIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfClueIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenCreditOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenCreditOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfClueIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenCreditMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrCreditIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrCreditOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrCreditOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrCreditMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 0
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrCreditIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrCreditOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrCreditOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThan90DaysOrCreditMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = 90
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrCreditIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrCreditOrMvrIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrCreditOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                    Case QuickQuoteThirdPartyReportSettingsAndResults.OrderReportFlag.YesWhenNoReportExistsOrReportIsOlderThanSpecifiedNumberOfDaysOrCreditMvrOrClueIsOrdered
                        yesNoMaybe = QuickQuoteYesNoMaybeType.Maybe
                        yesIfCreditIsOrdered = True
                        yesIfMvrIsOrdered = True
                        yesIfClueIsOrdered = True
                        orderIfExistingReportIsOlderThanDaysNumber = TopInteger(numberOfDaysSpecificReport, numberOfDaysAnyReport, minimumInt:=0)
                End Select
            End If

            Return yesNoMaybe
        End Function
        Public Shared Function TopInteger(ByVal int1 As Integer, ByVal int2 As Integer, Optional ByVal minimumInt As Integer = 0) As Integer
            Dim topInt As Integer = minimumInt

            If int1 > topInt Then
                topInt = int1
            End If

            If int2 > topInt Then
                topInt = int2
            End If

            Return topInt
        End Function
        'added 4/9/2019
        Public Shared Function QuickQuoteChoicePointTransmissionsFromDatareader(ByVal dr As SqlClient.SqlDataReader, Optional ByVal thirdPartyReportType As QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.None) As List(Of QuickQuoteChoicePointTransmission)
            Dim cpts As List(Of QuickQuoteChoicePointTransmission) = Nothing

            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                cpts = New List(Of QuickQuoteChoicePointTransmission)
                Dim qqHelper As New QuickQuoteHelperClass
                While dr.Read
                    Dim cpt As New QuickQuoteChoicePointTransmission
                    With cpt
                        .PolicyId = dr.Item("policy_id").ToString.Trim
                        .PolicyImageNum = dr.Item("policyimage_num").ToString.Trim
                        .UnitNum = dr.Item("unit_num").ToString.Trim
                        .ChoicePointTransmissionNum = dr.Item("choicepointtransmission_num").ToString.Trim
                        .ThirdPartyTypeId = dr.Item("thirdpartytype_id").ToString.Trim
                        .QuotebackGuid = dr.Item("quoteback_guid").ToString.Trim
                        .ChoicePointTransactionTypeId = dr.Item("choicepointtranstype_id").ToString.Trim
                        .UsersId = dr.Item("users_id").ToString.Trim
                        .ThirdPartyStatusId = dr.Item("thirdpartystatus_id").ToString.Trim
                        .DataChoicePointSent = dr.Item("data_choicepoint_sent").ToString.Trim
                        .DataChoicePointReceived = dr.Item("data_choicepoint_received").ToString.Trim
                        .DataWebserviceSent = dr.Item("data_webservice_sent").ToString.Trim
                        .DataWebserviceReceived = dr.Item("data_webservice_received").ToString.Trim
                        .ManualClueDate = dr.Item("manualclue_date").ToString.Trim
                        .AddedDate = dr.Item("added_date").ToString.Trim
                        .PcAddedDate = dr.Item("pcadded_date").ToString.Trim
                        .SentDate = dr.Item("sent_date").ToString.Trim
                        .ReceivedDate = dr.Item("received_date").ToString.Trim
                        .PortStateId = dr.Item("port_state_id").ToString.Trim
                        .LastModifiedDate = dr.Item("last_modified_date").ToString.Trim
                        .PackagePartNum = dr.Item("packagepart_num").ToString.Trim
                        .SystemGenerated = qqHelper.BitToBoolean(dr.Item("system_generated").ToString.Trim)
                        .RenewalPreProcess = qqHelper.BitToBoolean(dr.Item("renewal_preprocess").ToString.Trim)
                        .CustomQuoteback = dr.Item("custom_quoteback").ToString.Trim
                        .ReferenceNumber = dr.Item("reference_number").ToString.Trim
                        .ProcessingStatusCode = dr.Item("processing_status_code").ToString.Trim
                        .StfMessage = dr.Item("stf_message").ToString.Trim

                        If System.Enum.IsDefined(GetType(QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType), thirdPartyReportType) = True AndAlso thirdPartyReportType <> QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.None Then
                            If thirdPartyReportType = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.CreditProperty OrElse thirdPartyReportType = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.CLUEProperty Then
                                .NameAddressSourceId = dr.Item("nameaddresssource_id").ToString.Trim
                            End If
                            If thirdPartyReportType = QuickQuoteThirdPartyReportHelperClass.ThirdPartyReportType.MVR Then
                                .PredictedClearMVR = qqHelper.BitToBoolean(dr.Item("predicted_clear").ToString.Trim)
                                .BirthDate = dr.Item("birth_date").ToString.Trim
                                .DLN = dr.Item("dln").ToString.Trim
                                .DmvReturnedName = dr.Item("dmv_returned_name").ToString.Trim
                            End If
                        End If
                    End With
                    cpts.Add(cpt)
                End While
            End If

            Return cpts
        End Function

        ''added 4/18/2019; added optional param to not check specific types
        'Public Shared Function OkayToOrderThirdPartyReportsOnEndorsementRate(Optional ByVal alsoCheckForSpecificTypes As Boolean = True) As Boolean
        '    Dim isOkay As Boolean = True 'default to True; key required to turn to False

        '    Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderThirdPartyReportsOnEndorsementRate")
        '    If String.IsNullOrWhiteSpace(strIsOkay) = False Then
        '        Dim qqHelper As New QuickQuoteHelperClass
        '        If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
        '            isOkay = True
        '        Else
        '            isOkay = False
        '        End If
        '    End If

        '    'added 5/17/2019
        '    If isOkay = True AndAlso alsoCheckForSpecificTypes = True Then
        '        If OkayToOrderCreditReportOnEndorsementRate(checkBaseKeyFirst:=False) = False AndAlso OkayToOrderMvrReportOnEndorsementRate(checkBaseKeyFirst:=False) = False AndAlso OkayToOrderClueReportOnEndorsementRate(checkBaseKeyFirst:=False) = False Then
        '            isOkay = False
        '        End If
        '    End If

        '    Return isOkay
        'End Function
        ''5/17/2019 - added more specific Endorsement 3rd party report calls
        'Public Shared Function OkayToOrderCreditReportOnEndorsementRate(Optional ByVal checkBaseKeyFirst As Boolean = True) As Boolean
        '    Dim isOkay As Boolean = False 'default to False 1st; dependent on OkayToOrderThirdPartyReportsOnEndorsementRate being True

        '    If checkBaseKeyFirst = False OrElse OkayToOrderThirdPartyReportsOnEndorsementRate(alsoCheckForSpecificTypes:=False) = True Then
        '        'now default to True; key required to turn to False
        '        isOkay = True
        '        Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderCreditReportOnEndorsementRate")
        '        If String.IsNullOrWhiteSpace(strIsOkay) = False Then
        '            Dim qqHelper As New QuickQuoteHelperClass
        '            If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
        '                isOkay = True
        '            Else
        '                isOkay = False
        '            End If
        '        End If
        '    End If

        '    Return isOkay
        'End Function
        'Public Shared Function OkayToOrderMvrReportOnEndorsementRate(Optional ByVal checkBaseKeyFirst As Boolean = True) As Boolean
        '    Dim isOkay As Boolean = False 'default to False 1st; dependent on OkayToOrderThirdPartyReportsOnEndorsementRate being True

        '    If checkBaseKeyFirst = False OrElse OkayToOrderThirdPartyReportsOnEndorsementRate(alsoCheckForSpecificTypes:=False) = True Then
        '        'now default to True; key required to turn to False
        '        isOkay = True
        '        Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderMvrReportOnEndorsementRate")
        '        If String.IsNullOrWhiteSpace(strIsOkay) = False Then
        '            Dim qqHelper As New QuickQuoteHelperClass
        '            If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
        '                isOkay = True
        '            Else
        '                isOkay = False
        '            End If
        '        End If
        '    End If

        '    Return isOkay
        'End Function
        'Public Shared Function OkayToOrderClueReportOnEndorsementRate(Optional ByVal checkBaseKeyFirst As Boolean = True) As Boolean
        '    Dim isOkay As Boolean = False 'default to False 1st; dependent on OkayToOrderThirdPartyReportsOnEndorsementRate being True

        '    If checkBaseKeyFirst = False OrElse OkayToOrderThirdPartyReportsOnEndorsementRate(alsoCheckForSpecificTypes:=False) = True Then
        '        'now default to True; key required to turn to False
        '        isOkay = True
        '        Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderClueReportOnEndorsementRate")
        '        If String.IsNullOrWhiteSpace(strIsOkay) = False Then
        '            Dim qqHelper As New QuickQuoteHelperClass
        '            If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
        '                isOkay = True
        '            Else
        '                isOkay = False
        '            End If
        '        End If
        '    End If

        '    Return isOkay
        'End Function
        '3/13/2020 - new methods w/ lobType
        Public Shared Function OkayToOrderThirdPartyReportsOnEndorsementRate(Optional ByVal alsoCheckForSpecificTypes As Boolean = True, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            'Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderThirdPartyReportsOnEndorsementRate")
            'Dim baseIsOkayKeyName As String = "VR_OkayToOrderThirdPartyReportsOnEndorsementRate"
            'Dim isOkayKeyName As String = baseIsOkayKeyName
            'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
            '    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
            '    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
            '        isOkayKeyName &= "_" & lobAbbrev
            '    End If
            'End If
            'Dim strIsOkay As String = configAppSettingValueAsString(isOkayKeyName)
            'If String.IsNullOrWhiteSpace(strIsOkay) = True AndAlso isOkayKeyName <> baseIsOkayKeyName Then
            '    strIsOkay = configAppSettingValueAsString(baseIsOkayKeyName)
            'End If
            Dim strIsOkay As String = ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation("VR_OkayToOrderThirdPartyReportsOnEndorsementRate", lobType:=lobType)
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            If isOkay = True AndAlso alsoCheckForSpecificTypes = True Then
                If OkayToOrderCreditReportOnEndorsementRate(checkBaseKeyFirst:=False, lobType:=lobType) = False AndAlso OkayToOrderMvrReportOnEndorsementRate(checkBaseKeyFirst:=False, lobType:=lobType) = False AndAlso OkayToOrderClueReportOnEndorsementRate(checkBaseKeyFirst:=False, lobType:=lobType) = False Then
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToOrderCreditReportOnEndorsementRate(Optional ByVal checkBaseKeyFirst As Boolean = True, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = False 'default to False 1st; dependent on OkayToOrderThirdPartyReportsOnEndorsementRate being True

            If checkBaseKeyFirst = False OrElse OkayToOrderThirdPartyReportsOnEndorsementRate(alsoCheckForSpecificTypes:=False, lobType:=lobType) = True Then
                'now default to True; key required to turn to False
                isOkay = True
                'Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderCreditReportOnEndorsementRate")
                'Dim baseIsOkayKeyName As String = "VR_OkayToOrderCreditReportOnEndorsementRate"
                'Dim isOkayKeyName As String = baseIsOkayKeyName
                'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                '    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
                '    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                '        isOkayKeyName &= "_" & lobAbbrev
                '    End If
                'End If
                'Dim strIsOkay As String = configAppSettingValueAsString(isOkayKeyName)
                'If String.IsNullOrWhiteSpace(strIsOkay) = True AndAlso isOkayKeyName <> baseIsOkayKeyName Then
                '    strIsOkay = configAppSettingValueAsString(baseIsOkayKeyName)
                'End If
                Dim strIsOkay As String = ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation("VR_OkayToOrderCreditReportOnEndorsementRate", lobType:=lobType)
                If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                        isOkay = True
                    Else
                        isOkay = False
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToOrderMvrReportOnEndorsementRate(Optional ByVal checkBaseKeyFirst As Boolean = True, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = False 'default to False 1st; dependent on OkayToOrderThirdPartyReportsOnEndorsementRate being True

            If checkBaseKeyFirst = False OrElse OkayToOrderThirdPartyReportsOnEndorsementRate(alsoCheckForSpecificTypes:=False, lobType:=lobType) = True Then
                'now default to True; key required to turn to False
                isOkay = True
                'Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderMvrReportOnEndorsementRate")
                'Dim baseIsOkayKeyName As String = "VR_OkayToOrderMvrReportOnEndorsementRate"
                'Dim isOkayKeyName As String = baseIsOkayKeyName
                'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                '    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
                '    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                '        isOkayKeyName &= "_" & lobAbbrev
                '    End If
                'End If
                'Dim strIsOkay As String = configAppSettingValueAsString(isOkayKeyName)
                'If String.IsNullOrWhiteSpace(strIsOkay) = True AndAlso isOkayKeyName <> baseIsOkayKeyName Then
                '    strIsOkay = configAppSettingValueAsString(baseIsOkayKeyName)
                'End If
                Dim strIsOkay As String = ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation("VR_OkayToOrderMvrReportOnEndorsementRate", lobType:=lobType)
                If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                        isOkay = True
                    Else
                        isOkay = False
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToOrderClueReportOnEndorsementRate(Optional ByVal checkBaseKeyFirst As Boolean = True, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = False 'default to False 1st; dependent on OkayToOrderThirdPartyReportsOnEndorsementRate being True

            If checkBaseKeyFirst = False OrElse OkayToOrderThirdPartyReportsOnEndorsementRate(alsoCheckForSpecificTypes:=False, lobType:=lobType) = True Then
                'now default to True; key required to turn to False
                isOkay = True
                'Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToOrderClueReportOnEndorsementRate")
                'Dim baseIsOkayKeyName As String = "VR_OkayToOrderClueReportOnEndorsementRate"
                'Dim isOkayKeyName As String = baseIsOkayKeyName
                'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                '    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
                '    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                '        isOkayKeyName &= "_" & lobAbbrev
                '    End If
                'End If
                'Dim strIsOkay As String = configAppSettingValueAsString(isOkayKeyName)
                'If String.IsNullOrWhiteSpace(strIsOkay) = True AndAlso isOkayKeyName <> baseIsOkayKeyName Then
                '    strIsOkay = configAppSettingValueAsString(baseIsOkayKeyName)
                'End If
                Dim strIsOkay As String = ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation("VR_OkayToOrderClueReportOnEndorsementRate", lobType:=lobType)
                If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                        isOkay = True
                    Else
                        isOkay = False
                    End If
                End If
            End If

            Return isOkay
        End Function

        'added 5/2/2019
        Public Shared Function IsSessionValid() As Boolean
            Dim isValid As Boolean = False

            If System.Web.HttpContext.Current IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session IsNot Nothing Then
                isValid = True
            End If

            Return isValid
        End Function
        Public Shared Function NewClientIdsInSessionFromDiamondSave() As List(Of Integer)
            Dim clientIds As List(Of Integer) = Nothing

            If IsSessionValid() = True AndAlso System.Web.HttpContext.Current?.Session("NewClientIdsFromDiamondSave") IsNot Nothing Then
                clientIds = System.Web.HttpContext.Current?.Session("NewClientIdsFromDiamondSave")
            End If

            Return clientIds
        End Function
        Private Sub SetNewClientIdsInSessionFromDiamondSave(ByVal clientIds As List(Of Integer))
            If IsSessionValid() = True Then
                If clientIds IsNot Nothing Then
                    If System.Web.HttpContext.Current?.Session("NewClientIdsFromDiamondSave") IsNot Nothing Then
                        System.Web.HttpContext.Current?.Session.Add("NewClientIdsFromDiamondSave", clientIds)
                    Else
                        System.Web.HttpContext.Current?.Session.Add("NewClientIdsFromDiamondSave", clientIds)
                    End If
                Else
                    If System.Web.HttpContext.Current?.Session("NewClientIdsFromDiamondSave") IsNot Nothing Then
                        System.Web.HttpContext.Current?.Session.Add("NewClientIdsFromDiamondSave", Nothing)
                        System.Web.HttpContext.Current?.Session.Remove("NewClientIdsFromDiamondSave")
                    End If
                End If
            End If
        End Sub
        Protected Friend Sub AddToClientIdsInSessionFromDiamondSave(ByVal cId As Integer)
            If IsSessionValid() = True AndAlso cId > 0 AndAlso IsNewClientIdInSessionFromDiamondSave(cId) = False Then
                Dim clientIds As List(Of Integer) = NewClientIdsInSessionFromDiamondSave()
                QuickQuote.CommonMethods.QuickQuoteHelperClass.AddUniqueIntegerToIntegerList(cId, clientIds)
                SetNewClientIdsInSessionFromDiamondSave(clientIds)
            End If
        End Sub
        Public Shared Function IsNewClientIdInSessionFromDiamondSave(ByVal cId As Integer) As Boolean
            Dim isInList As Boolean = False

            Dim clientIds As List(Of Integer) = NewClientIdsInSessionFromDiamondSave()
            If clientIds IsNot Nothing AndAlso clientIds.Count > 0 AndAlso clientIds.Contains(cId) = True Then
                isInList = True
            End If

            Return isInList
        End Function
        Public Shared Function ClientIdForDiamondImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Integer
            Dim cId As Integer = 0

            If diaImage IsNot Nothing AndAlso diaImage.Policy IsNot Nothing AndAlso diaImage.Policy.Client IsNot Nothing AndAlso IsValidDiamondNum(diaImage.Policy.Client.ClientId, zeroIsOkay:=False) = True Then
                cId = diaImage.Policy.Client.ClientId.Id
            End If

            Return cId
        End Function
        Public Shared Function ClientIdForQuickQuoteObject(ByVal qqo As QuickQuoteObject) As Integer
            Dim cId As Integer = 0

            If qqo IsNot Nothing AndAlso qqo.Client IsNot Nothing AndAlso qqo.Client.HasValidClientId() = True Then
                cId = CInt(qqo.Client.ClientId)
            End If

            Return cId
        End Function

        'added 5/17/2019
        Public Shared Function QuickQuoteObjectAppearsToBeFromDiamondImage(ByVal qqo As QuickQuoteObject) As Boolean
            Dim appearsToBeDiaImg As Boolean = False

            Dim qqHelper As New QuickQuoteHelperClass
            If qqo IsNot Nothing AndAlso (qqo.XmlType = QuickQuoteObject.QuickQuoteXmlType.Response OrElse qqHelper.IsPositiveDecimalString(qqo.TotalQuotedPremium) = True OrElse (qqo.Agency IsNot Nothing AndAlso ((qqo.Agency.Name IsNot Nothing AndAlso String.IsNullOrWhiteSpace(qqo.Agency.Name.DisplayName) = False) OrElse (qqo.Agency.Address IsNot Nothing AndAlso String.IsNullOrWhiteSpace(qqo.Agency.Address.DisplayAddress) = False)))) Then
                appearsToBeDiaImg = True
            End If

            Return appearsToBeDiaImg
        End Function

        'added 5/22/2019; note: should only be called for objects that came directly from Diamond image or one that was converted
        Public Function IsQuickQuoteVehicleNewToImage(ByVal qqVeh As QuickQuoteVehicle, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String) As Boolean
            'Dim isNew As Boolean = False

            'If qqVeh IsNot Nothing AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
            '    If CDate(imageEffectiveDate) = CDate(qqVeh.EffectiveDate) Then
            '        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
            '        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
            '            isNew = True
            '        Else
            '            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
            '            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
            '                If CDate(qqVeh.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
            '                    'veh was inserted at least 5 seconds after image, so it should be new
            '                    isNew = True
            '                End If
            '            Else
            '                'one or both dates is/are invalid; can assume that it's a new vehicle
            '                isNew = True
            '            End If
            '        End If
            '    End If
            'End If

            'Return isNew
            'updated 7/24/2019 to use new method that also checks systemInsertDate
            Return IsQuickQuoteVehicleNewToImage_UseInsertSystemDateIfPossible(qqVeh, imageEffectiveDate, termEffectiveDate, imageInsertDate, "", "")
        End Function
        'added 5/24/2019; note: Diamond Drivers don't appear to have all of the same detail as Vehicles when coming from image xml... has effDate but not pcAddedDate... so this method may not be 100% accurate (would think that Drivers were new if tranEffDate is same as effDate
        Public Function IsQuickQuoteDriverNewToImage(ByVal qqDrv As QuickQuoteDriver, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String) As Boolean
            'Dim isNew As Boolean = False

            'If qqDrv IsNot Nothing AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.EffDate, mustBeGreaterThanDefaultDate:=True) = True Then
            '    If CDate(imageEffectiveDate) = CDate(qqDrv.EffDate) Then
            '        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
            '        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
            '            isNew = True
            '        Else
            '            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
            '            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
            '                If CDate(qqDrv.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
            '                    'drv was inserted at least 5 seconds after image, so it should be new
            '                    isNew = True
            '                End If
            '            Else
            '                'one or both dates is/are invalid; can assume that it's a new driver
            '                isNew = True
            '            End If
            '        End If
            '    End If
            'End If

            'Return isNew
            'updated 7/24/2019 to use new method that also checks systemInsertDate
            Return IsQuickQuoteDriverNewToImage_UseInsertSystemDateIfPossible(qqDrv, imageEffectiveDate, termEffectiveDate, imageInsertDate, "", "")
        End Function
        'added 7/24/2019
        Public Function IsQuickQuoteVehicleNewToImage_UseInsertSystemDateIfPossible(ByVal qqVeh As QuickQuoteVehicle, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As String, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            'If qqVeh IsNot Nothing AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
            '    If CDate(imageEffectiveDate) = CDate(qqVeh.EffectiveDate) Then
            '        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
            '        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
            '            isNew = True
            '        Else
            '            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
            '            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
            '                If CDate(qqVeh.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
            '                    'veh was inserted at least 5 seconds after image, so it should be new
            '                    isNew = True
            '                End If
            '            Else
            '                'one or both dates is/are invalid; can assume that it's a new vehicle
            '                '1st check imageNums and/or system insertedDate
            '                If IsPositiveIntegerString(qqVeh.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
            '                    If CInt(qqVeh.AddedImageNum) = CInt(imageNum) Then
            '                        isNew = True
            '                    End If
            '                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqVeh.AddedDate) < CDate(imageInsertSystemDate) Then
            '                    'definitely not new
            '                Else
            '                    isNew = True
            '                End If
            '            End If
            '        End If
            '    End If
            'End If
            'updated 9/6/2019
            If qqVeh IsNot Nothing Then
                If IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(imageEffectiveDate) = CDate(qqVeh.EffectiveDate) Then
                        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
                        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
                            isNew = True
                        Else
                            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
                            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqVeh.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                    'veh was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                End If
                            Else
                                'one or both dates is/are invalid; can assume that it's a new vehicle
                                '1st check imageNums and/or system insertedDate
                                If IsPositiveIntegerString(qqVeh.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                    If CInt(qqVeh.AddedImageNum) = CInt(imageNum) Then
                                        isNew = True
                                    End If
                                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqVeh.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqVeh.AddedDate) < CDate(imageInsertSystemDate) Then
                                    'definitely not new
                                Else
                                    isNew = True
                                End If
                            End If
                        End If
                    End If
                Else
                    If IsPositiveIntegerString(qqVeh.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True AndAlso CInt(qqVeh.AddedImageNum) <> CInt(imageNum) Then
                        'definitely not new
                    Else
                        'not enough info; assume New since anything Saved to Diamond should have this info
                        isNew = True
                    End If
                End If
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteDriverNewToImage_UseInsertSystemDateIfPossible(ByVal qqDrv As QuickQuoteDriver, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As String, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            'If qqDrv IsNot Nothing AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.EffDate, mustBeGreaterThanDefaultDate:=True) = True Then
            '    If CDate(imageEffectiveDate) = CDate(qqDrv.EffDate) Then
            '        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
            '        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
            '            isNew = True
            '        Else
            '            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
            '            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
            '                If CDate(qqDrv.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
            '                    'drv was inserted at least 5 seconds after image, so it should be new
            '                    isNew = True
            '                End If
            '            Else
            '                'one or both dates is/are invalid; can assume that it's a new driver
            '                '1st check imageNums and/or system insertedDate
            '                If IsPositiveIntegerString(qqDrv.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
            '                    If CInt(qqDrv.AddedImageNum) = CInt(imageNum) Then
            '                        isNew = True
            '                    End If
            '                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqDrv.AddedDate) < CDate(imageInsertSystemDate) Then
            '                    'definitely not new
            '                Else
            '                    isNew = True
            '                End If
            '            End If
            '        End If
            '    End If
            'End If
            'updated 9/6/2019
            If qqDrv IsNot Nothing Then
                If IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.EffDate, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(imageEffectiveDate) = CDate(qqDrv.EffDate) Then
                        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
                        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
                            isNew = True
                        Else
                            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
                            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqDrv.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                    'drv was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                End If
                            Else
                                'one or both dates is/are invalid; can assume that it's a new driver
                                '1st check imageNums and/or system insertedDate
                                If IsPositiveIntegerString(qqDrv.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                    If CInt(qqDrv.AddedImageNum) = CInt(imageNum) Then
                                        isNew = True
                                    End If
                                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqDrv.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqDrv.AddedDate) < CDate(imageInsertSystemDate) Then
                                    'definitely not new
                                Else
                                    isNew = True
                                End If
                            End If
                        End If
                    End If
                Else
                    If IsPositiveIntegerString(qqDrv.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True AndAlso CInt(qqDrv.AddedImageNum) <> CInt(imageNum) Then
                        'definitely not new
                    Else
                        'not enough info; assume New since anything Saved to Diamond should have this info
                        isNew = True
                    End If
                End If
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteLossHistoryNewToImage(ByVal qqLH As QuickQuoteLossHistoryRecord, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As String, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            If qqLH IsNot Nothing Then
                Dim keepChecking As Boolean = True

                If IsValidDateString(qqLH.GuaranteedRatePeriodEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                    'note: appears that new lossHist will have same date for GuaranteedRatePeriodEffectiveDate as termEffDate even if it was added for an Endorsement image eff after termEffDate
                    If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(qqLH.GuaranteedRatePeriodEffectiveDate) < CDate(termEffectiveDate) Then
                            'definitely not new
                            keepChecking = False
                        Else
                            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLH.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqLH.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                    'lh was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                End If
                                keepChecking = False
                            Else
                                'one or both dates is/are invalid; check imageNums and/or firstAddedData
                                If IsPositiveIntegerString(qqLH.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                    If CInt(qqLH.AddedImageNum) = CInt(imageNum) Then
                                        isNew = True
                                    End If
                                    keepChecking = False
                                Else
                                    '1st check system insertedDate
                                    If IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLH.AddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                        If CDate(qqLH.AddedDate) < CDate(imageInsertSystemDate) Then
                                            'definitely not new
                                            keepChecking = False
                                        End If
                                    End If
                                    If keepChecking = True Then
                                        'now check firstAddedData
                                        If IsValidDateString(qqLH.FirstAddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                            If CDate(qqLH.FirstAddedDate) >= DateAdd(DateInterval.Day, -30, CDate(imageEffectiveDate)) Then
                                                'just a guess, but this should be pretty good if we can't compare imageNums
                                                isNew = True
                                                keepChecking = False
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If keepChecking = True Then
                    If IsValidDateString(qqLH.FirstAddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(qqLH.FirstAddedDate) < DateAdd(DateInterval.Day, -90, CDate(imageEffectiveDate)) Then
                            'probably not new unless maybe created way before first image
                        Else
                            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLH.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqLH.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                    'lh was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                End If
                                keepChecking = False
                            Else
                                'one or both dates is/are invalid; check imageNums and/or firstAddedData
                                If IsPositiveIntegerString(qqLH.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                    If CInt(qqLH.AddedImageNum) = CInt(imageNum) Then
                                        isNew = True
                                    End If
                                    keepChecking = False
                                Else
                                    '1st check system insertedDate
                                    If IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLH.AddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                        If CDate(qqLH.AddedDate) < CDate(imageInsertSystemDate) Then
                                            'definitely not new
                                            keepChecking = False
                                        End If
                                    End If
                                    If keepChecking = True Then
                                        'now check firstAddedData
                                        If CDate(qqLH.FirstAddedDate) >= DateAdd(DateInterval.Day, -30, CDate(imageEffectiveDate)) Then
                                            'just a guess, but this should be pretty good if we can't compare imageNums
                                            isNew = True
                                            keepChecking = False
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If

                    If keepChecking = True Then
                        If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLH.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                            If CDate(qqLH.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                'lh was inserted at least 5 seconds after image, so it should be new
                                isNew = True
                            End If
                            keepChecking = False
                        End If

                        If keepChecking = True Then
                            '1st check system insertedDate
                            If IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLH.AddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqLH.AddedDate) < CDate(imageInsertSystemDate) Then
                                    'definitely not new
                                    keepChecking = False
                                End If
                            End If

                            If keepChecking = True Then
                                If IsPositiveIntegerString(qqLH.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                    If CInt(qqLH.AddedImageNum) = CInt(imageNum) Then
                                        isNew = True
                                    End If
                                    keepChecking = False
                                End If
                            End If

                            'added 9/6/2019
                            If keepChecking = True Then
                                If qqLH.HasValidLossHistoryNum() = False OrElse (IsValidDateString(qqLH.GuaranteedRatePeriodEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsValidDateString(qqLH.FirstAddedDate, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsValidDateString(qqLH.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsValidDateString(qqLH.AddedDate, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsPositiveIntegerString(qqLH.AddedImageNum) = False) Then
                                    'not enough info; assume New since anything Saved to Diamond should have this info
                                    isNew = True
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteAccidentViolationNewToImage(ByVal qqAV As QuickQuoteAccidentViolation, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As String, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            If qqAV IsNot Nothing Then
                Dim keepChecking As Boolean = True

                If IsValidDateString(qqAV.GuaranteedRatePeriodEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                    'note: appears that new av will have same date for GuaranteedRatePeriodEffectiveDate as termEffDate even if it was added for an Endorsement image eff after termEffDate
                    If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(qqAV.GuaranteedRatePeriodEffectiveDate) < CDate(termEffectiveDate) Then
                            'definitely not new
                            keepChecking = False
                        Else
                            'check imageNums and/or firstAddedData
                            If IsPositiveIntegerString(qqAV.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                If CInt(qqAV.AddedImageNum) = CInt(imageNum) Then
                                    isNew = True
                                End If
                                keepChecking = False
                            Else
                                '1st check system insertedDate
                                If IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAV.AddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                    If CDate(qqAV.AddedDate) < CDate(imageInsertSystemDate) Then
                                        'definitely not new
                                        keepChecking = False
                                    End If
                                End If
                                If keepChecking = True Then
                                    'now check firstAddedData
                                    If IsValidDateString(qqAV.FirstAddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                        If CDate(qqAV.FirstAddedDate) >= DateAdd(DateInterval.Day, -30, CDate(imageEffectiveDate)) Then
                                            'just a guess, but this should be pretty good if we can't compare imageNums
                                            isNew = True
                                            keepChecking = False
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If keepChecking = True Then
                    If IsValidDateString(qqAV.FirstAddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(qqAV.FirstAddedDate) < DateAdd(DateInterval.Day, -90, CDate(imageEffectiveDate)) Then
                            'probably not new unless maybe created way before first image
                        Else
                            'check imageNums and/or firstAddedData
                            If IsPositiveIntegerString(qqAV.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                If CInt(qqAV.AddedImageNum) = CInt(imageNum) Then
                                    isNew = True
                                End If
                                keepChecking = False
                            Else
                                '1st check system insertedDate
                                If IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAV.AddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                    If CDate(qqAV.AddedDate) < CDate(imageInsertSystemDate) Then
                                        'definitely not new
                                        keepChecking = False
                                    End If
                                End If
                                If keepChecking = True Then
                                    'now check firstAddedData
                                    If CDate(qqAV.FirstAddedDate) >= DateAdd(DateInterval.Day, -30, CDate(imageEffectiveDate)) Then
                                        'just a guess, but this should be pretty good if we can't compare imageNums
                                        isNew = True
                                        keepChecking = False
                                    End If
                                End If
                            End If
                        End If
                    End If

                    If keepChecking = True Then
                        '1st check system insertedDate
                        If IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAV.AddedDate, mustBeGreaterThanDefaultDate:=True) = True Then
                            If CDate(qqAV.AddedDate) < CDate(imageInsertSystemDate) Then
                                'definitely not new
                                keepChecking = False
                            End If
                        End If

                        If keepChecking = True Then
                            If IsPositiveIntegerString(qqAV.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                                If CInt(qqAV.AddedImageNum) = CInt(imageNum) Then
                                    isNew = True
                                End If
                                keepChecking = False
                            End If

                            'added 9/6/2019
                            If keepChecking = True Then
                                If qqAV.HasValidViolationNum() = False OrElse (IsValidDateString(qqAV.GuaranteedRatePeriodEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsValidDateString(qqAV.FirstAddedDate, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsValidDateString(qqAV.AddedDate, mustBeGreaterThanDefaultDate:=True) = False AndAlso IsPositiveIntegerString(qqAV.AddedImageNum) = False) Then
                                    'not enough info; assume New since anything Saved to Diamond should have this info
                                    isNew = True
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteVehicleNewToImage(ByVal qqVeh As QuickQuoteVehicle, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqVeh IsNot Nothing AndAlso qqo IsNot Nothing Then
                isNew = IsQuickQuoteVehicleNewToImage_UseInsertSystemDateIfPossible(qqVeh, qqo.TransactionEffectiveDate, qqo.EffectiveDate, qqo.PCAdded_Date, qqo.PolicyImageNum, qqo.AddedDate)
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteDriverNewToImage(ByVal qqDrv As QuickQuoteDriver, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqDrv IsNot Nothing AndAlso qqo IsNot Nothing Then
                isNew = IsQuickQuoteDriverNewToImage_UseInsertSystemDateIfPossible(qqDrv, qqo.TransactionEffectiveDate, qqo.EffectiveDate, qqo.PCAdded_Date, qqo.PolicyImageNum, qqo.AddedDate)
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteLossHistoryNewToImage(ByVal qqLH As QuickQuoteLossHistoryRecord, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqLH IsNot Nothing AndAlso qqo IsNot Nothing Then
                isNew = IsQuickQuoteLossHistoryNewToImage(qqLH, qqo.TransactionEffectiveDate, qqo.EffectiveDate, qqo.PCAdded_Date, qqo.PolicyImageNum, qqo.AddedDate)
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteAccidentViolationNewToImage(ByVal qqAV As QuickQuoteAccidentViolation, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqAV IsNot Nothing AndAlso qqo IsNot Nothing Then
                isNew = IsQuickQuoteAccidentViolationNewToImage(qqAV, qqo.TransactionEffectiveDate, qqo.EffectiveDate, qqo.PCAdded_Date, qqo.PolicyImageNum, qqo.AddedDate)
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteLocationNewToImage(ByVal qqLoc As QuickQuoteLocation, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqLoc IsNot Nothing AndAlso qqo IsNot Nothing Then
                If IsValidDateString(qqo.TransactionEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLoc.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(qqo.TransactionEffectiveDate) = CDate(qqLoc.EffectiveDate) Then
                        'looks like same image so far, but will need to check termEffDate and possibly image and loc insertDates to make sure
                        If IsValidDateString(qqo.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(qqo.EffectiveDate) <> CDate(qqo.TransactionEffectiveDate) Then
                            isNew = True
                        Else
                            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
                            If IsValidDateString(qqo.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLoc.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqLoc.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(qqo.PCAdded_Date)) Then
                                    'veh was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                End If
                            Else
                                'one or both dates is/are invalid; can assume that it's a new location
                                '1st check imageNums and/or system insertedDate
                                If IsPositiveIntegerString(qqLoc.AddedImageNum) = True AndAlso IsPositiveIntegerString(qqo.PolicyImageNum) = True Then
                                    If CInt(qqLoc.AddedImageNum) = CInt(qqo.PolicyImageNum) Then
                                        isNew = True
                                    End If
                                ElseIf IsValidDateString(qqo.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqLoc.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqLoc.AddedDate) < CDate(qqo.AddedDate) Then
                                    'definitely not new
                                Else
                                    isNew = True
                                End If
                            End If
                        End If
                    End If
                Else
                    If IsPositiveIntegerString(qqLoc.AddedImageNum) = True AndAlso IsPositiveIntegerString(qqo.PolicyImageNum) = True AndAlso CInt(qqLoc.AddedImageNum) <> CInt(qqo.PolicyImageNum) Then
                        'definitely not new
                    Else
                        'not enough info; assume New since anything Saved to Diamond should have this info
                        isNew = True
                    End If
                End If
            End If

            Return isNew
        End Function
        'added 5/24/2019
        Public Function IsNoHitChoicePointTransmission(ByVal cp As QuickQuoteChoicePointTransmission) As Boolean
            Dim isNoHit As Boolean = False

            If cp IsNot Nothing AndAlso String.IsNullOrWhiteSpace(cp.ProcessingStatusCode) = False AndAlso UCase(cp.ProcessingStatusCode) = "N" Then
                isNoHit = True
            End If

            Return isNoHit
        End Function
        Public Function IsInvalidChoicePointTransmission(ByVal cp As QuickQuoteChoicePointTransmission) As Boolean
            Dim isInvalid As Boolean = False

            If cp Is Nothing OrElse IsNoHitChoicePointTransmission(cp) = True Then
                isInvalid = True
            End If

            Return isInvalid
        End Function

        'added 6/15/2019
        Public Function PolicyLookupInfoForQuickQuoteObject(ByVal qqo As QuickQuoteObject, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As QuickQuotePolicyLookupInfo
            Dim polLookupInfo As QuickQuotePolicyLookupInfo = Nothing

            If qqo IsNot Nothing Then
                polLookupInfo = New QuickQuotePolicyLookupInfo
                With polLookupInfo
                    .PolicyId = IntegerForString(qqo.PolicyId)
                    .PolicyImageNum = IntegerForString(qqo.PolicyImageNum)
                    .PolicyNumber = qqo.PolicyNumber
                    .QuoteNumber = qqo.QuoteNumber
                    .AgencyId = IntegerForString(qqo.AgencyId)
                    .AgencyCode = qqo.AgencyCode
                    .PolicyCurrentStatusId = IntegerForString(qqo.PolicyCurrentStatusId)
                    .PolicyStatusCodeId = IntegerForString(qqo.PolicyStatusCodeId)
                    .TransTypeId = IntegerForString(qqo.TransactionTypeId)
                    .Set_EffectiveDate(qqo.EffectiveDate)
                    .Set_ExpirationDate(qqo.ExpirationDate)
                    .Set_TransactionEffectiveDate(qqo.TransactionEffectiveDate)
                    .Set_TransactionExpirationDate(qqo.TransactionExpirationDate)
                    .VersionId = IntegerForString(qqo.VersionId)
                    .LobId = IntegerForString(qqo.LobId)
                    .StateId = IntegerForString(qqo.State) 'added 11/28/2022
                    .CompanyId = IntegerForString(qqo.CompanyId) 'added 11/28/2022
                    If qqo.Client IsNot Nothing Then
                        .ClientId = IntegerForString(qqo.Client.ClientId)
                    Else
                        .ClientId = 0
                    End If
                    If qqo.Policyholder IsNot Nothing AndAlso qqo.Policyholder.Name IsNot Nothing Then
                        .Set_Policyholder1Name(qqo.Policyholder.Name.DisplayName)
                        .Set_Policyholder1SortName(qqo.Policyholder.Name.SortName)
                    Else
                        .Set_Policyholder1Name("")
                        .Set_Policyholder1SortName("")
                    End If
                    .Set_FullTermPremium(qqo.FullTermPremium)
                    .Set_ChangeInFullTermPremium(qqo.ChangeInFullTermPremium)
                    .Set_WrittenPremium(qqo.WrittenPremium)
                    .Set_ChangeInWrittenPremium(qqo.ChangeInWrittenPremium)
                    .Set_DateAdded(qqo.PCAdded_Date)
                    .Set_DateModified(qqo.LastModifiedDate)
                    .Set_CancelDate(qqo.CancelDate)

                    .statusHelper_useCancelDateToSeeIfReallyCancelled = useCancelDateToSeeIfReallyCancelled
                    .statusHelper_useExpirationDateToSeeIfReallyInforce = useExpirationDateToSeeIfReallyInforce
                End With
            End If

            Return polLookupInfo
        End Function
        Public Function IsPolicyInforce(Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal diaImg As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As Boolean
            Dim isIt As Boolean = False

            'If polLookupInfo Is Nothing AndAlso qqo IsNot Nothing Then
            '    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
            'End If
            'updated 6/16/2019
            If polLookupInfo Is Nothing Then
                If qqo IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                ElseIf diaImg IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForDiamondImage(diaImg, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                End If
            End If

            If polLookupInfo IsNot Nothing Then
                If useCancelDateToSeeIfReallyCancelled <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useCancelDateToSeeIfReallyCancelled = useCancelDateToSeeIfReallyCancelled
                End If
                If useExpirationDateToSeeIfReallyInforce <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useExpirationDateToSeeIfReallyInforce = useExpirationDateToSeeIfReallyInforce
                End If
                isIt = polLookupInfo.IsInforce()
            End If

            Return isIt
        End Function
        Public Function IsPolicyCancelled(Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal diaImg As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As Boolean
            Dim isIt As Boolean = False

            'If polLookupInfo Is Nothing AndAlso qqo IsNot Nothing Then
            '    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled)
            'End If
            'updated 6/16/2019
            If polLookupInfo Is Nothing Then
                If qqo IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled)
                ElseIf diaImg IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForDiamondImage(diaImg, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled)
                End If
            End If

            If polLookupInfo IsNot Nothing Then
                If useCancelDateToSeeIfReallyCancelled <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useCancelDateToSeeIfReallyCancelled = useCancelDateToSeeIfReallyCancelled
                End If
                isIt = polLookupInfo.IsCancelled()
            End If

            Return isIt
        End Function
        Public Function IsPolicyExpired(Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal diaImg As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As Boolean
            Dim isIt As Boolean = False

            'If polLookupInfo Is Nothing AndAlso qqo IsNot Nothing Then
            '    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
            'End If
            'updated 6/16/2019
            If polLookupInfo Is Nothing Then
                If qqo IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                ElseIf diaImg IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForDiamondImage(diaImg, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                End If
            End If

            If polLookupInfo IsNot Nothing Then
                If useExpirationDateToSeeIfReallyInforce <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useExpirationDateToSeeIfReallyInforce = useExpirationDateToSeeIfReallyInforce
                End If
                isIt = polLookupInfo.IsExpired()
            End If

            Return isIt
        End Function
        Public Function IsPolicyInforceOrFuture(Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal diaImg As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByRef polStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.None) As Boolean
            Dim isIt As Boolean = False

            'If polLookupInfo Is Nothing AndAlso qqo IsNot Nothing Then
            '    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
            'End If
            'updated 6/16/2019
            If polLookupInfo Is Nothing Then
                If qqo IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                ElseIf diaImg IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForDiamondImage(diaImg, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                End If
            End If

            If polLookupInfo IsNot Nothing Then
                If useCancelDateToSeeIfReallyCancelled <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useCancelDateToSeeIfReallyCancelled = useCancelDateToSeeIfReallyCancelled
                End If
                If useExpirationDateToSeeIfReallyInforce <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useExpirationDateToSeeIfReallyInforce = useExpirationDateToSeeIfReallyInforce
                End If
                isIt = polLookupInfo.IsInforceOrFuture(polStatus:=polStatus)
            Else
                polStatus = QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.None
            End If

            Return isIt
        End Function
        Public Function ActualPolicyStatus(Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal diaImg As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus
            Dim polStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.None

            'If polLookupInfo Is Nothing AndAlso qqo IsNot Nothing Then
            '    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
            'End If
            'updated 6/16/2019
            If polLookupInfo Is Nothing Then
                If qqo IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForQuickQuoteObject(qqo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                ElseIf diaImg IsNot Nothing Then
                    polLookupInfo = PolicyLookupInfoForDiamondImage(diaImg, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
                End If
            End If

            If polLookupInfo IsNot Nothing Then
                If useCancelDateToSeeIfReallyCancelled <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useCancelDateToSeeIfReallyCancelled = useCancelDateToSeeIfReallyCancelled
                End If
                If useExpirationDateToSeeIfReallyInforce <> QuickQuoteYesNoMaybeType.Maybe Then
                    polLookupInfo.statusHelper_useExpirationDateToSeeIfReallyInforce = useExpirationDateToSeeIfReallyInforce
                End If
                polStatus = polLookupInfo.ActualPolicyStatus()
            End If

            Return polStatus
        End Function
        'added 6/6/2019
        Public Function PolicyLookupInfoForDiamondImage(ByVal diaImg As Diamond.Common.Objects.Policy.Image, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe) As QuickQuotePolicyLookupInfo
            Dim polLookupInfo As QuickQuotePolicyLookupInfo = Nothing

            If diaImg IsNot Nothing Then
                polLookupInfo = New QuickQuotePolicyLookupInfo
                With polLookupInfo
                    .PolicyId = diaImg.PolicyId
                    .PolicyImageNum = diaImg.PolicyImageNum
                    .PolicyNumber = diaImg.PolicyNumber
                    .QuoteNumber = diaImg.Quote
                    .AgencyId = diaImg.AgencyId
                    If diaImg.Agency IsNot Nothing Then
                        .AgencyCode = diaImg.Agency.Code
                    Else
                        .AgencyCode = ""
                    End If
                    If diaImg.Policy IsNot Nothing Then
                        .PolicyCurrentStatusId = diaImg.Policy.PolicyCurrentStatusId
                    Else
                        .PolicyCurrentStatusId = 0
                    End If
                    .PolicyStatusCodeId = diaImg.PolicyStatusCodeId
                    .TransTypeId = diaImg.TransactionTypeId
                    If diaImg.EffectiveDate <> Nothing Then
                        .Set_EffectiveDate(diaImg.EffectiveDate.ToString)
                    Else
                        .Set_EffectiveDate("")
                    End If
                    If diaImg.ExpirationDate <> Nothing Then
                        .Set_ExpirationDate(diaImg.ExpirationDate.ToString)
                    Else
                        .Set_ExpirationDate("")
                    End If
                    If diaImg.TransactionEffectiveDate <> Nothing Then
                        .Set_TransactionEffectiveDate(diaImg.TransactionEffectiveDate.ToString)
                    Else
                        .Set_TransactionEffectiveDate("")
                    End If
                    If diaImg.TransactionExpirationDate <> Nothing Then
                        .Set_TransactionExpirationDate(diaImg.TransactionExpirationDate.ToString)
                    Else
                        .Set_TransactionExpirationDate("")
                    End If
                    .VersionId = IntegerForString(diaImg.VersionId)
                    '.LobId = GetLobIdForVersionId(.VersionId) 'may also be able to use static data or other existing method to avoid db lookup
                    'updated 11/28/2022; will now use static data if possible but fall back on SetDiamondLobIdStateIdAndCompanyIdForVersionId if needed
                    Dim lobId As String = ""
                    Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                    Dim stateId As String = ""
                    Dim companyId As String = ""
                    Dim actualLobId As String = ""
                    SetLobStateAndCompanyStuffFromDiamondVersionId(.VersionId.ToString, lobId, lobType, stateId, companyId, defaultStateToIndiana:=False, defaultCompanyToIndianaFarmersMutual:=False, actualLobId:=actualLobId)
                    If IsPositiveIntegerString(actualLobId) = True Then
                        .LobId = CInt(actualLobId)
                    Else
                        .LobId = IntegerForString(lobId)
                    End If
                    .StateId = IntegerForString(stateId)
                    .CompanyId = IntegerForString(companyId)

                    If diaImg.Policy IsNot Nothing AndAlso diaImg.Policy.Client IsNot Nothing Then
                        .ClientId = IntegerForString(diaImg.Policy.Client.ClientId)
                    Else
                        .ClientId = 0
                    End If
                    If diaImg.PolicyHolder IsNot Nothing AndAlso diaImg.PolicyHolder.Name IsNot Nothing Then
                        .Set_Policyholder1Name(diaImg.PolicyHolder.Name.DisplayName)
                        .Set_Policyholder1SortName(diaImg.PolicyHolder.Name.SortName)
                    Else
                        .Set_Policyholder1Name("")
                        .Set_Policyholder1SortName("")
                    End If
                    .Set_FullTermPremium(diaImg.FullTermPremium.ToString)
                    .Set_ChangeInFullTermPremium(diaImg.ChangeInFullTermPremium.ToString)
                    .Set_WrittenPremium(diaImg.WrittenPremium.ToString)
                    .Set_ChangeInWrittenPremium(diaImg.ChangeInWrittenPremium.ToString)
                    If diaImg.Policy IsNot Nothing AndAlso diaImg.Policy.PCAddedDate IsNot Nothing Then
                        .Set_DateAdded(diaImg.Policy.PCAddedDate.ToString)
                    Else
                        .Set_DateAdded("")
                    End If
                    If diaImg.LastModifiedDate IsNot Nothing Then
                        .Set_DateModified(diaImg.LastModifiedDate.ToString)
                    Else
                        .Set_DateModified("")
                    End If
                    If diaImg.Policy IsNot Nothing AndAlso diaImg.Policy.CancelDate <> Nothing Then
                        .Set_CancelDate(diaImg.Policy.CancelDate.ToString)
                    Else
                        .Set_CancelDate("")
                    End If

                    .statusHelper_useCancelDateToSeeIfReallyCancelled = useCancelDateToSeeIfReallyCancelled
                    .statusHelper_useExpirationDateToSeeIfReallyInforce = useExpirationDateToSeeIfReallyInforce
                End With
            End If

            Return polLookupInfo
        End Function

        'added 6/17/2019; similar to Diamond methods in QuickQuoteXML
        Public Function IsClearOrNoHitQuickQuoteAccidentViolationRecord(ByVal qqAccidentViolation As QuickQuoteAccidentViolation, Optional ByRef clearOrNoHitType As QuickQuoteXML.ChoicePointClearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Neither) As Boolean
            Dim isClearOrNoHit As Boolean = False
            clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Neither

            If qqAccidentViolation IsNot Nothing Then
                If UCase(qqAccidentViolation.Description) = "MVR RECORD NOT FOUND" Then 'accidentsviolationstype_id 37 (MVR Record Not Found)
                    isClearOrNoHit = True
                    clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.NoHit
                ElseIf UCase(qqAccidentViolation.Description) = "MVR RECORD CLEAR" Then 'accidentsviolationstype_id 36 (MVR Record Clear)
                    isClearOrNoHit = True
                    clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Clear
                End If
            End If

            Return isClearOrNoHit
        End Function
        Public Function IsClearOrNoHitQuickQuoteLossHistoryRecord(ByVal qqLossHistory As QuickQuoteLossHistoryRecord, Optional ByRef clearOrNoHitType As QuickQuoteXML.ChoicePointClearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Neither) As Boolean
            Dim isClearOrNoHit As Boolean = False
            clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Neither

            If qqLossHistory IsNot Nothing Then
                If UCase(qqLossHistory.LossDescription) = "CLUE RECORD NOT FOUND" Then 'not sure if this is valid
                    isClearOrNoHit = True
                    clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.NoHit
                ElseIf UCase(qqLossHistory.LossDescription) = "CLUE RECORD CLEAR" Then 'not sure if this is valid
                    isClearOrNoHit = True
                    clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Clear
                End If
            End If

            Return isClearOrNoHit
        End Function
        Public Sub EvaluateQuickQuoteAccidentsViolations(ByVal qqAccidentsViolations As List(Of QuickQuoteAccidentViolation), Optional ByRef hasValidRecord As Boolean = False, Optional ByRef hasNoHitRecord As Boolean = False, Optional ByRef hasClearRecord As Boolean = False, Optional ByVal clearOrNoHitEvaluationType As QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.All)
            hasValidRecord = False
            hasNoHitRecord = False
            hasClearRecord = False

            If qqAccidentsViolations IsNot Nothing AndAlso qqAccidentsViolations.Count > 0 Then
                For Each av As QuickQuoteAccidentViolation In qqAccidentsViolations
                    If av IsNot Nothing Then
                        Dim clearOrNoHitType As QuickQuoteXML.ChoicePointClearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Neither
                        If IsClearOrNoHitQuickQuoteAccidentViolationRecord(av, clearOrNoHitType:=clearOrNoHitType) = True Then
                            If clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Clear Then
                                hasClearRecord = True
                                If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClear Then
                                    Exit For
                                End If
                            ElseIf clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.NoHit Then
                                hasNoHitRecord = True
                                If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustNoHit Then
                                    Exit For
                                End If
                            End If
                            If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClearOrNoHit Then
                                Exit For
                            ElseIf clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.ClearAndNoHit Then
                                If hasClearRecord = True AndAlso hasNoHitRecord = True Then
                                    Exit For
                                End If
                            End If
                        Else
                            hasValidRecord = True
                            If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustValid Then
                                Exit For
                            End If
                        End If
                        If hasValidRecord = True AndAlso hasClearRecord = True AndAlso hasNoHitRecord = True Then
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub EvaluateQuickQuoteLossHistories(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord), Optional ByRef hasValidRecord As Boolean = False, Optional ByRef hasNoHitRecord As Boolean = False, Optional ByRef hasClearRecord As Boolean = False, Optional ByVal clearOrNoHitEvaluationType As QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.All)
            hasValidRecord = False
            hasNoHitRecord = False
            hasClearRecord = False

            If qqLossHistories IsNot Nothing AndAlso qqLossHistories.Count > 0 Then
                For Each lh As QuickQuoteLossHistoryRecord In qqLossHistories
                    If lh IsNot Nothing Then
                        Dim clearOrNoHitType As QuickQuoteXML.ChoicePointClearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Neither
                        If IsClearOrNoHitQuickQuoteLossHistoryRecord(lh, clearOrNoHitType:=clearOrNoHitType) = True Then
                            If clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.Clear Then
                                hasClearRecord = True
                                If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClear Then
                                    Exit For
                                End If
                            ElseIf clearOrNoHitType = QuickQuoteXML.ChoicePointClearOrNoHitType.NoHit Then
                                hasNoHitRecord = True
                                If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustNoHit Then
                                    Exit For
                                End If
                            End If
                            If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClearOrNoHit Then
                                Exit For
                            ElseIf clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.ClearAndNoHit Then
                                If hasClearRecord = True AndAlso hasNoHitRecord = True Then
                                    Exit For
                                End If
                            End If
                        Else
                            hasValidRecord = True
                            If clearOrNoHitEvaluationType = QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustValid Then
                                Exit For
                            End If
                        End If
                        If hasValidRecord = True AndAlso hasClearRecord = True AndAlso hasNoHitRecord = True Then
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        Public Function HasValidQuickQuoteAccidentViolationRecord(ByVal qqAccidentsViolations As List(Of QuickQuoteAccidentViolation)) As Boolean
            Dim hasValidRecord As Boolean = False

            EvaluateQuickQuoteAccidentsViolations(qqAccidentsViolations, hasValidRecord:=hasValidRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustValid)

            Return hasValidRecord
        End Function
        Public Function HasNoHitQuickQuoteAccidentViolationRecord(ByVal qqAccidentsViolations As List(Of QuickQuoteAccidentViolation)) As Boolean
            Dim hasNoHitRecord As Boolean = False

            EvaluateQuickQuoteAccidentsViolations(qqAccidentsViolations, hasNoHitRecord:=hasNoHitRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustNoHit)

            Return hasNoHitRecord
        End Function
        Public Function HasClearQuickQuoteAccidentViolationRecord(ByVal qqAccidentsViolations As List(Of QuickQuoteAccidentViolation)) As Boolean
            Dim hasClearRecord As Boolean = False

            EvaluateQuickQuoteAccidentsViolations(qqAccidentsViolations, hasClearRecord:=hasClearRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClear)

            Return hasClearRecord
        End Function
        Public Function HasClearOrNotHitQuickQuoteAccidentViolationRecord(ByVal qqAccidentsViolations As List(Of QuickQuoteAccidentViolation)) As Boolean
            Dim hasNoHitRecord As Boolean = False
            Dim hasClearRecord As Boolean = False

            EvaluateQuickQuoteAccidentsViolations(qqAccidentsViolations, hasNoHitRecord:=hasNoHitRecord, hasClearRecord:=hasClearRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClearOrNoHit)

            If hasNoHitRecord = True OrElse hasClearRecord = True Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Function HasValidQuickQuoteLossHistoryRecord(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord)) As Boolean
            Dim hasValidRecord As Boolean = False

            EvaluateQuickQuoteLossHistories(qqLossHistories, hasValidRecord:=hasValidRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustValid)

            Return hasValidRecord
        End Function
        Public Function HasNoHitQuickQuoteLossHistoryRecord(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord)) As Boolean
            Dim hasNoHitRecord As Boolean = False

            EvaluateQuickQuoteLossHistories(qqLossHistories, hasNoHitRecord:=hasNoHitRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustNoHit)

            Return hasNoHitRecord
        End Function
        Public Function HasClearQuickQuoteLossHistoryRecord(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord)) As Boolean
            Dim hasClearRecord As Boolean = False

            EvaluateQuickQuoteLossHistories(qqLossHistories, hasClearRecord:=hasClearRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClear)

            Return hasClearRecord
        End Function
        Public Function HasClearOrNotHitQuickQuoteLossHistoryRecord(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord)) As Boolean
            Dim hasNoHitRecord As Boolean = False
            Dim hasClearRecord As Boolean = False

            EvaluateQuickQuoteLossHistories(qqLossHistories, hasNoHitRecord:=hasNoHitRecord, hasClearRecord:=hasClearRecord, clearOrNoHitEvaluationType:=QuickQuoteXML.ChoicePointClearOrNoHitEvaluationType.JustClearOrNoHit)

            If hasNoHitRecord = True OrElse hasClearRecord = True Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Function HasQuickQuoteLossHistoryRecordForSourceId(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord), ByVal sourceId As Integer) As Boolean
            Dim hasIt As Boolean = False

            If qqLossHistories IsNot Nothing AndAlso qqLossHistories.Count > 0 Then
                For Each lh As QuickQuoteLossHistoryRecord In qqLossHistories
                    If lh IsNot Nothing Then
                        If IntegerForString(lh.LossHistorySourceId) = sourceId Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasQuickQuoteLossHistoryRecordForAnySourceIdInList(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord), ByVal sourceIds As List(Of Integer)) As Boolean
            Dim hasIt As Boolean = False

            If qqLossHistories IsNot Nothing AndAlso qqLossHistories.Count > 0 AndAlso sourceIds IsNot Nothing AndAlso sourceIds.Count > 0 Then
                For Each lh As QuickQuoteLossHistoryRecord In qqLossHistories
                    If lh IsNot Nothing Then
                        If sourceIds.Contains(IntegerForString(lh.LossHistorySourceId)) = True Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasQuickQuoteLossHistoryRecordNotEqualToSourceId(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord), ByVal sourceId As Integer) As Boolean 'added 6/11/2020
            Dim hasIt As Boolean = False

            If qqLossHistories IsNot Nothing AndAlso qqLossHistories.Count > 0 Then
                For Each lh As QuickQuoteLossHistoryRecord In qqLossHistories
                    If lh IsNot Nothing Then
                        If IntegerForString(lh.LossHistorySourceId) <> sourceId Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasQuickQuoteLossHistoryRecordNotEqualToAnySourceIdInList(ByVal qqLossHistories As List(Of QuickQuoteLossHistoryRecord), ByVal sourceIds As List(Of Integer)) As Boolean 'added 6/11/2020
            Dim hasIt As Boolean = False

            If qqLossHistories IsNot Nothing AndAlso qqLossHistories.Count > 0 AndAlso sourceIds IsNot Nothing AndAlso sourceIds.Count > 0 Then
                For Each lh As QuickQuoteLossHistoryRecord In qqLossHistories
                    If lh IsNot Nothing Then
                        If sourceIds.Contains(IntegerForString(lh.LossHistorySourceId)) = False Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function QuoteHasQuickQuoteLossHistoryRecordForSourceId(ByVal qqo As QuickQuoteObject, ByVal sourceId As Integer) As Boolean
            Dim hasIt As Boolean = False

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least qqo in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq IsNot Nothing Then
                                If msq.QuoteLevel = QuoteLevel.StateLevel AndAlso QuoteHasQuickQuoteLossHistoryRecordForSourceId(msq, sourceId) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                Else
                    hasIt = HasQuickQuoteLossHistoryRecordForSourceId(qqo.VersionAndLobInfo.LossHistoryRecords, sourceId)

                    If hasIt = False AndAlso qqo.VersionAndLobInfo.Drivers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Drivers.Count > 0 Then
                        For Each d As QuickQuoteDriver In qqo.VersionAndLobInfo.Drivers
                            If d IsNot Nothing Then
                                If HasQuickQuoteLossHistoryRecordForSourceId(d.LossHistoryRecords, sourceId) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If

                    If hasIt = False AndAlso qqo.VersionAndLobInfo.Applicants IsNot Nothing AndAlso qqo.VersionAndLobInfo.Applicants.Count > 0 Then
                        For Each a As QuickQuoteApplicant In qqo.VersionAndLobInfo.Applicants
                            If a IsNot Nothing Then
                                If HasQuickQuoteLossHistoryRecordForSourceId(a.LossHistoryRecords, sourceId) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return hasIt
        End Function
        Public Function QuoteHasQuickQuoteLossHistoryRecordForAnySourceIdInList(ByVal qqo As QuickQuoteObject, ByVal sourceIds As List(Of Integer)) As Boolean
            Dim hasIt As Boolean = False

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least qqo in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq IsNot Nothing Then
                                If msq.QuoteLevel = QuoteLevel.StateLevel AndAlso QuoteHasQuickQuoteLossHistoryRecordForAnySourceIdInList(msq, sourceIds) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                Else
                    hasIt = HasQuickQuoteLossHistoryRecordForAnySourceIdInList(qqo.VersionAndLobInfo.LossHistoryRecords, sourceIds)

                    If hasIt = False AndAlso qqo.VersionAndLobInfo.Drivers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Drivers.Count > 0 Then
                        For Each d As QuickQuoteDriver In qqo.VersionAndLobInfo.Drivers
                            If d IsNot Nothing Then
                                If HasQuickQuoteLossHistoryRecordForAnySourceIdInList(d.LossHistoryRecords, sourceIds) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If

                    If hasIt = False AndAlso qqo.VersionAndLobInfo.Applicants IsNot Nothing AndAlso qqo.VersionAndLobInfo.Applicants.Count > 0 Then
                        For Each a As QuickQuoteApplicant In qqo.VersionAndLobInfo.Applicants
                            If a IsNot Nothing Then
                                If HasQuickQuoteLossHistoryRecordForAnySourceIdInList(a.LossHistoryRecords, sourceIds) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return hasIt
        End Function

        'added 6/24/2019
        Public Enum AssignedOrUnassigned
            None = 0
            Assigned = 1
            Unassigned = 2
            Both = 3
        End Enum
        Public Sub EvaluateDiamondLossHistoryAssignment(ByVal diaLossHistories As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory), ByVal evalType As AssignedOrUnassigned, Optional ByRef hasAssigned As Boolean = False, Optional ByRef hasUnassigned As Boolean = False)
            hasAssigned = False
            hasUnassigned = False

            If System.Enum.IsDefined(GetType(AssignedOrUnassigned), evalType) = True AndAlso evalType <> AssignedOrUnassigned.None AndAlso diaLossHistories IsNot Nothing AndAlso diaLossHistories.Count > 0 Then
                For Each lh As Diamond.Common.Objects.Policy.LossHistory In diaLossHistories
                    If lh IsNot Nothing Then
                        If IsValidDiamondNum(lh.UnitNum) = True Then
                            hasAssigned = True
                        Else
                            hasUnassigned = True
                        End If

                        If hasAssigned = True AndAlso hasUnassigned = True Then
                            Exit For
                        ElseIf evalType = AssignedOrUnassigned.Assigned AndAlso hasAssigned = True Then
                            Exit For
                        ElseIf evalType = AssignedOrUnassigned.Unassigned AndAlso hasUnassigned = True Then
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        Public Function HasAssignedDiamondLossHistory(ByVal diaLossHistories As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory)) As Boolean
            Dim hasIt As Boolean = False

            EvaluateDiamondLossHistoryAssignment(diaLossHistories, AssignedOrUnassigned.Assigned, hasAssigned:=hasIt)

            Return hasIt
        End Function
        Public Function HasUnassignedDiamondLossHistory(ByVal diaLossHistories As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory)) As Boolean
            Dim hasIt As Boolean = False

            EvaluateDiamondLossHistoryAssignment(diaLossHistories, AssignedOrUnassigned.Unassigned, hasUnassigned:=hasIt)

            Return hasIt
        End Function

        'added 7/25/2019
        Public Sub SetPolicyStartAndEndDateForQuote(ByVal qqo As QuickQuoteObject, ByRef policyStartDate As String, ByRef policyEndDate As String)
            policyStartDate = ""
            policyEndDate = ""
            If qqo IsNot Nothing Then
                If IsPositiveIntegerString(qqo.PolicyId) = True Then
                    Dim policyLookupInfo As New QuickQuotePolicyLookupInfo
                    With policyLookupInfo
                        .PolicyId = CInt(qqo.PolicyId)
                        .PolicyLookupType = QuickQuotePolicyLookupInfo.LookupType.ByImage
                    End With
                    Dim policyLookupResults As List(Of QuickQuotePolicyLookupInfo) = PolicyResultsForLookupInfo(policyLookupInfo)
                    If policyLookupResults IsNot Nothing AndAlso policyLookupResults.Count > 0 Then
                        For Each plr As QuickQuotePolicyLookupInfo In policyLookupResults
                            If plr IsNot Nothing Then
                                Select Case plr.PolicyStatusCode
                                    Case QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.ArchivedQuote, QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.VoidDueToOOSCancel
                                        'ignore
                                    Case Else
                                        'should be acceptable image
                                        If IsValidDateString(plr.TransactionEffectiveDate) = True Then
                                            If IsValidDateString(policyStartDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(policyStartDate) > CDate(plr.TransactionEffectiveDate) Then
                                                policyStartDate = plr.TransactionEffectiveDate
                                            End If
                                        ElseIf IsValidDateString(plr.EffectiveDate) = True Then
                                            If IsValidDateString(policyStartDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(policyStartDate) > CDate(plr.EffectiveDate) Then
                                                policyStartDate = plr.EffectiveDate
                                            End If
                                        End If

                                        If IsValidDateString(plr.TransactionExpirationDate) = True Then
                                            If IsValidDateString(policyEndDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(policyEndDate) < CDate(plr.TransactionExpirationDate) Then
                                                policyEndDate = plr.TransactionExpirationDate
                                            End If
                                        ElseIf IsValidDateString(plr.ExpirationDate) = True Then
                                            If IsValidDateString(policyEndDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(policyEndDate) < CDate(plr.ExpirationDate) Then
                                                policyEndDate = plr.ExpirationDate
                                            End If
                                        End If
                                End Select
                            End If
                        Next
                    End If
                End If

                If IsValidDateString(policyStartDate, mustBeGreaterThanDefaultDate:=True) = False OrElse IsValidDateString(policyEndDate, mustBeGreaterThanDefaultDate:=True) = False Then
                    If IsValidDateString(qqo.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqo.ExpirationDate, mustBeGreaterThanDefaultDate:=True) = True Then
                        policyStartDate = qqo.EffectiveDate
                        policyEndDate = qqo.ExpirationDate
                    ElseIf IsValidDateString(qqo.TransactionEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqo.TransactionExpirationDate, mustBeGreaterThanDefaultDate:=True) = True Then
                        policyStartDate = qqo.TransactionEffectiveDate
                        policyEndDate = qqo.TransactionExpirationDate
                    End If
                End If
            End If
        End Sub

        'added 8/2/2019
        Public Function AdvancedCancelWarnings(Optional ByVal polNum As String = "", Optional ByVal polId As Integer = 0, Optional ByVal agCode As String = "") As List(Of QuickQuoteCancelWarning)
            Dim acws As List(Of QuickQuoteCancelWarning) = Nothing

            If String.IsNullOrWhiteSpace(polNum) = False OrElse polId > 0 OrElse String.IsNullOrWhiteSpace(agCode) = False Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamondReports"))
                    With sso
                        .queryOrStoredProc = "usp_AdvancedCancelWarnings"
                        .parameters = New ArrayList
                        If String.IsNullOrWhiteSpace(polNum) = False Then
                            .parameters.Add(New SqlClient.SqlParameter("@polNum", polNum))
                        End If
                        If polId > 0 Then
                            .parameters.Add(New SqlClient.SqlParameter("@policyId", polId))
                        End If
                        If String.IsNullOrWhiteSpace(agCode) = False Then
                            .parameters.Add(New SqlClient.SqlParameter("@agCode", agCode))
                        End If

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                acws = New List(Of QuickQuoteCancelWarning)
                                With dr
                                    While .Read
                                        Dim acw As New QuickQuoteCancelWarning
                                        acw.PolicyNumber = dr.Item("current_policy").ToString.Trim
                                        acw.PolicyId = IntegerForString(dr.Item("policy_id").ToString.Trim)
                                        acw.AgencyCode = dr.Item("code").ToString.Trim
                                        acw.Description = dr.Item("dscr").ToString.Trim
                                        acw.InsertTimeStamp = dr.Item("pcadded_date").ToString.Trim
                                        acw.PrintProcessId = IntegerForString(dr.Item("printprocess_id").ToString.Trim)
                                        acw.CancelDate = dr.Item("cancel_date").ToString.Trim
                                        acw.NoticeSystemDate = dr.Item("request_date").ToString.Trim
                                        acws.Add(acw)
                                    End While
                                End With
                            ElseIf .hasError = True Then
                                'database error
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return acws
        End Function
        Public Function HasAdvancedCancelWarning(Optional ByVal polNum As String = "", Optional ByVal polId As Integer = 0, Optional ByVal agCode As String = "", Optional ByRef qqAdvancedCancelWarnings As List(Of QuickQuoteCancelWarning) = Nothing, Optional ByRef hasFinalCancelWarning As Boolean = False) As Boolean
            Dim hasIt As Boolean = False
            hasFinalCancelWarning = False

            qqAdvancedCancelWarnings = AdvancedCancelWarnings(polNum:=polNum, polId:=polId, agCode:=agCode)
            If qqAdvancedCancelWarnings IsNot Nothing AndAlso qqAdvancedCancelWarnings.Count > 0 Then
                For Each acw As QuickQuoteCancelWarning In qqAdvancedCancelWarnings
                    If acw IsNot Nothing Then
                        hasIt = True
                        'as-of 8/2/2019, the types included: 1-Legal Cancellation Notice, 2-Final Cancellation Notice, 6-Renewal Reminder Notice, 11-Renewal Expiration Notice
                        If String.IsNullOrWhiteSpace(acw.Description) = False AndAlso (UCase(acw.Description).Contains("FINAL") = True OrElse UCase(acw.Description).Contains("EXPIRATION") = True) Then
                            hasFinalCancelWarning = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasFinalCancelWarning(Optional ByVal polNum As String = "", Optional ByVal polId As Integer = 0, Optional ByVal agCode As String = "", Optional ByRef qqAdvancedCancelWarnings As List(Of QuickQuoteCancelWarning) = Nothing) As Boolean
            Dim hasIt As Boolean = False

            Dim hasAny As Boolean = HasAdvancedCancelWarning(polNum:=polNum, polId:=polId, agCode:=agCode, qqAdvancedCancelWarnings:=qqAdvancedCancelWarnings, hasFinalCancelWarning:=hasIt)

            Return hasIt
        End Function

        'added 9/13/2019
        Public Function IsDiaDriverNewToImage(ByVal diaDrv As Diamond.Common.Objects.Policy.Driver, ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Boolean
            Dim isNew As Boolean = False

            If diaDrv IsNot Nothing AndAlso diaImage IsNot Nothing Then
                isNew = IsDiaDriverNewToImage(diaDrv, diaImage.TransactionEffectiveDate.ToString, diaImage.EffectiveDate.ToString, diaImage.PCAddedDate.ToString, diaImage.PolicyImageNum, diaImage.AddedDate.ToString)
            End If

            Return isNew
        End Function
        Public Function IsDiaDriverNewToImage(ByVal diaDrv As Diamond.Common.Objects.Policy.Driver, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As Integer, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            If diaDrv IsNot Nothing Then
                If IsValidDateString(imageEffectiveDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaDrv.EffDate.ToString, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(imageEffectiveDate) = CDate(diaDrv.EffDate.ToString) Then
                        'looks like same image so far, but will need to check termEffDate and possibly image and veh insertDates to make sure
                        If IsValidDateString(termEffectiveDate, mustBeGreaterThanDefaultDate:=True) = False OrElse CDate(termEffectiveDate) <> CDate(imageEffectiveDate) Then
                            isNew = True
                        Else
                            'imageEffDate is equal to termEffDate; either 1st image for term or full-term Endorsement; need to check insertDates
                            If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaDrv.PCAddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(diaDrv.PCAddedDate.ToString) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                    'drv was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                End If
                            Else
                                'one or both dates is/are invalid; can assume that it's a new driver
                                '1st check imageNums and/or system insertedDate
                                If diaDrv.AddedImageNum > 0 AndAlso imageNum > 0 Then
                                    If diaDrv.AddedImageNum = imageNum Then
                                        isNew = True
                                    End If
                                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaDrv.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaDrv.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                                    'definitely not new
                                Else
                                    isNew = True
                                End If
                            End If
                        End If
                    End If
                Else
                    If diaDrv.AddedImageNum > 0 AndAlso imageNum > 0 AndAlso diaDrv.AddedImageNum <> imageNum Then
                        'definitely not new
                    Else
                        'not enough info; assume New since anything Saved to Diamond should have this info
                        isNew = True
                    End If
                End If
            End If

            Return isNew
        End Function
        Public Function QuickQuoteDriversNewToImage(ByVal qqo As QuickQuoteObject, Optional ByVal level As MultiStateLevel = MultiStateLevel.GoverningStateLevel) As List(Of QuickQuoteDriver)
            Dim qqDriversNew As List(Of QuickQuoteDriver) = Nothing

            Dim qqDrivers As List(Of QuickQuoteDriver) = AllQuickQuoteDrivers(qqo, level:=level)
            If qqDrivers IsNot Nothing AndAlso qqDrivers.Count > 0 Then
                For Each d As QuickQuoteDriver In qqDrivers
                    If d IsNot Nothing AndAlso IsQuickQuoteDriverNewToImage(d, qqo) = True Then
                        If qqDriversNew Is Nothing Then
                            qqDriversNew = New List(Of QuickQuoteDriver)
                        End If
                        qqDriversNew.Add(d)
                    End If
                Next
            End If

            Return qqDriversNew
        End Function
        Public Function DiaDriversNewToImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.GoverningStateLevel) As List(Of Diamond.Common.Objects.Policy.Driver)
            Dim diaDriversNew As List(Of Diamond.Common.Objects.Policy.Driver) = Nothing

            Dim diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver) = AllDiamondDrivers(diaImage, level:=level)
            If diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                For Each d As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    If d IsNot Nothing AndAlso IsDiaDriverNewToImage(d, diaImage) = True Then
                        If diaDriversNew Is Nothing Then
                            diaDriversNew = New List(Of Diamond.Common.Objects.Policy.Driver)
                        End If
                        diaDriversNew.Add(d)
                    End If
                Next
            End If

            Return diaDriversNew
        End Function
        Public Function DiamondImageOrQuickQuoteObjectHasNewDrivers(Optional ByVal diaImage As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByRef diaDriversNew As List(Of Diamond.Common.Objects.Policy.Driver) = Nothing, Optional ByRef qqDriversNew As List(Of QuickQuoteDriver) = Nothing) As Boolean
            Dim hasNew As Boolean = False
            diaDriversNew = Nothing
            qqDriversNew = Nothing

            If diaImage IsNot Nothing Then
                diaDriversNew = DiaDriversNewToImage(diaImage)
                If diaDriversNew IsNot Nothing AndAlso diaDriversNew.Count > 0 Then
                    hasNew = True
                End If
            ElseIf qqo IsNot Nothing Then
                qqDriversNew = QuickQuoteDriversNewToImage(qqo)
                If qqDriversNew IsNot Nothing AndAlso qqDriversNew.Count > 0 Then
                    hasNew = True
                End If
            End If

            Return hasNew
        End Function
        Public Function Endorsements_Auto_OnlyOrderThirdPartyReportsOnNewDrivers() As Boolean
            Dim onlyNew As Boolean = True 'default to True; key required to turn to False

            Dim strOnlyNew As String = configAppSettingValueAsString("VR_Endorsements_Auto_OnlyOrderThirdPartyReportsOnNewDrivers")
            If String.IsNullOrWhiteSpace(strOnlyNew) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strOnlyNew) = "YES" OrElse qqHelper.BitToBoolean(strOnlyNew) = True Then 'key would just need any text value that doesn't equate to True to return False
                    onlyNew = True
                Else
                    onlyNew = False
                End If
            Else 'added 9/15/2019
                onlyNew = Endorsements_OnlyOrderThirdPartyReportsOnNewDriversOrApplicants()
            End If

            Return onlyNew
        End Function
        Public Function IsDiaApplicantNewToImage(ByVal diaApp As Diamond.Common.Objects.Policy.Applicant, ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Boolean
            Dim isNew As Boolean = False

            If diaApp IsNot Nothing AndAlso diaImage IsNot Nothing Then
                isNew = IsDiaApplicantNewToImage(diaApp, diaImage.TransactionEffectiveDate.ToString, diaImage.EffectiveDate.ToString, diaImage.PCAddedDate.ToString, diaImage.PolicyImageNum, diaImage.AddedDate.ToString)
            End If

            Return isNew
        End Function
        Public Function IsDiaApplicantNewToImage(ByVal diaApp As Diamond.Common.Objects.Policy.Applicant, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As Integer, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            If diaApp IsNot Nothing Then
                If IsValidDiamondNum(diaApp.ApplicantNum, zeroIsOkay:=False) = False Then
                    isNew = True
                ElseIf diaApp.AddedImageNum > 0 AndAlso imageNum > 0 Then
                    If diaApp.AddedImageNum = imageNum Then
                        If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaApp.PCAddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True Then
                            If CDate(diaApp.PCAddedDate.ToString) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                'app was inserted at least 5 seconds after image, so it should be new
                                isNew = True
                            ElseIf CDate(diaApp.PCAddedDate.ToString) <= DateAdd(DateInterval.Second, 1, CDate(imageInsertDate)) Then
                                'app was inserted within 1 second after image; assume it was pre-existing
                            ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaApp.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaApp.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                                'definitely not new
                            Else
                                isNew = True
                            End If
                        ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaApp.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaApp.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                            'definitely not new
                        Else
                            isNew = True
                        End If
                    End If
                ElseIf IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaApp.PCAddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(diaApp.PCAddedDate.ToString) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                        'app was inserted at least 5 seconds after image, so it should be new
                        isNew = True
                    End If
                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaApp.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaApp.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                    'definitely not new
                Else
                    'not enough info; assume New since anything Saved to Diamond should have this info
                    isNew = True
                End If
            End If

            Return isNew
        End Function

        ''' <summary>
        ''' Added 11/1/2021 MGB
        ''' </summary>
        ''' <param name="qqSectionIICoverage"></param>
        ''' <param name="qqo"></param>
        ''' <returns></returns>
        Public Function IsQuickQuoteSectionIICoverageNewToImage(ByVal qqSectionIICoverage As QuickQuoteSectionIICoverage, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False
            Dim TermEffectiveDate As String = qqo.TransactionEffectiveDate
            Dim ImageInsertDate As String = qqo.EffectiveDate
            Dim ImageNum As String = qqo.PolicyImageNum
            Dim ImageInsertSystemDate As String = qqo.AddedDate

            If qqSectionIICoverage.HasValidSectionCoverageNum() = False Then
                isNew = True
            ElseIf IsPositiveIntegerString(qqSectionIICoverage.AddedImageNum) = True AndAlso IsPositiveIntegerString(ImageNum) = True Then
                If CInt(qqSectionIICoverage.AddedImageNum) = CInt(ImageNum) Then
                    If IsValidDateString(ImageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqSectionIICoverage.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(qqSectionIICoverage.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(ImageInsertDate)) Then
                            'coverage was inserted at least 5 seconds after image, so it should be new
                            isNew = True
                        ElseIf CDate(qqSectionIICoverage.PCAdded_Date) <= DateAdd(DateInterval.Second, 1, CDate(ImageInsertDate)) Then
                            'coverage was inserted within 1 second after image; assume it was pre-existing
                        ElseIf IsValidDateString(ImageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqSectionIICoverage.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqSectionIICoverage.AddedDate) < CDate(ImageInsertSystemDate) Then
                            'definitely not new
                        Else
                            isNew = True
                        End If
                    ElseIf IsValidDateString(ImageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqSectionIICoverage.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqSectionIICoverage.AddedDate) < CDate(ImageInsertSystemDate) Then
                        'definitely not new
                    Else
                        isNew = True
                    End If
                End If
            ElseIf IsValidDateString(ImageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqSectionIICoverage.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                If CDate(qqSectionIICoverage.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(ImageInsertDate)) Then
                    'coverage was inserted at least 5 seconds after image, so it should be new
                    isNew = True
                End If
            ElseIf IsValidDateString(ImageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqSectionIICoverage.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqSectionIICoverage.AddedDate) < CDate(ImageInsertSystemDate) Then
                'definitely not new
            Else
                'not enough info; assume New since anything Saved to Diamond should have this info
                isNew = True
            End If

            Return isNew
        End Function

        Public Function IsQuickQuoteGLClassificationNewToImage(ByVal qqGLClassification As QuickQuoteGLClassification, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False
            If qqo IsNot Nothing Then
                Dim TermEffectiveDate As String = qqo.TransactionEffectiveDate
                Dim ImageInsertDate As String = qqo.EffectiveDate
                Dim ImageNum As String = qqo.PolicyImageNum
                Dim ImageInsertSystemDate As String = qqo.AddedDate

                If qqGLClassification IsNot Nothing Then
                    If IsPositiveIntegerString(qqGLClassification.AddedImageNum) = True AndAlso IsPositiveIntegerString(ImageNum) = True Then
                        If CInt(qqGLClassification.AddedImageNum) = CInt(ImageNum) Then
                            If IsValidDateString(ImageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqGLClassification.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                                If CDate(qqGLClassification.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(ImageInsertDate)) Then
                                    'Gl Class cade was inserted at least 5 seconds after image, so it should be new
                                    isNew = True
                                ElseIf CDate(qqGLClassification.PCAdded_Date) <= DateAdd(DateInterval.Second, 1, CDate(ImageInsertDate)) Then
                                    'Gl Class cade was inserted within 1 second after image; assume it was pre-existing
                                ElseIf IsValidDateString(ImageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqGLClassification.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqGLClassification.AddedDate) < CDate(ImageInsertSystemDate) Then
                                    'definitely not new
                                Else
                                    isNew = True
                                End If
                            ElseIf IsValidDateString(ImageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqGLClassification.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqGLClassification.AddedDate) < CDate(ImageInsertSystemDate) Then
                                'definitely not new
                            Else
                                isNew = True
                            End If
                        End If
                    ElseIf IsValidDateString(ImageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqGLClassification.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(qqGLClassification.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(ImageInsertDate)) Then
                            'Gl Class cade was inserted at least 5 seconds after image, so it should be new
                            isNew = True
                        End If
                    ElseIf IsValidDateString(ImageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqGLClassification.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqGLClassification.AddedDate) < CDate(ImageInsertSystemDate) Then
                        'definitely not new
                    Else
                        'not enough info; assume New since anything Saved to Diamond should have this info
                        isNew = True
                    End If
                End If
            End If

            Return isNew
        End Function

        Public Function IsQuickQuoteApplicantNewToImage(ByVal qqApp As QuickQuoteApplicant, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As String, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            If qqApp IsNot Nothing Then
                If qqApp.HasValidApplicantNum() = False Then
                    isNew = True
                ElseIf IsPositiveIntegerString(qqApp.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                    If CInt(qqApp.AddedImageNum) = CInt(imageNum) Then
                        If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqApp.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                            If CDate(qqApp.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                'app was inserted at least 5 seconds after image, so it should be new
                                isNew = True
                            ElseIf CDate(qqApp.PCAdded_Date) <= DateAdd(DateInterval.Second, 1, CDate(imageInsertDate)) Then
                                'app was inserted within 1 second after image; assume it was pre-existing
                            ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqApp.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqApp.AddedDate) < CDate(imageInsertSystemDate) Then
                                'definitely not new
                            Else
                                isNew = True
                            End If
                        ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqApp.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqApp.AddedDate) < CDate(imageInsertSystemDate) Then
                            'definitely not new
                        Else
                            isNew = True
                        End If
                    End If
                ElseIf IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqApp.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(qqApp.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                        'app was inserted at least 5 seconds after image, so it should be new
                        isNew = True
                    End If
                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqApp.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqApp.AddedDate) < CDate(imageInsertSystemDate) Then
                    'definitely not new
                Else
                    'not enough info; assume New since anything Saved to Diamond should have this info
                    isNew = True
                End If
            End If

            Return isNew
        End Function
        Public Function IsQuickQuoteApplicantNewToImage(ByVal qqApp As QuickQuoteApplicant, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqApp IsNot Nothing AndAlso qqo IsNot Nothing Then
                isNew = IsQuickQuoteApplicantNewToImage(qqApp, qqo.TransactionEffectiveDate, qqo.EffectiveDate, qqo.PCAdded_Date, qqo.PolicyImageNum, qqo.AddedDate)
            End If

            Return isNew
        End Function
        Public Function QuickQuoteApplicantsNewToImage(ByVal qqo As QuickQuoteObject, Optional ByVal level As MultiStateLevel = MultiStateLevel.GoverningStateLevel) As List(Of QuickQuoteApplicant)
            Dim qqApplicantsNew As List(Of QuickQuoteApplicant) = Nothing

            Dim qqApplicants As List(Of QuickQuoteApplicant) = AllQuickQuoteApplicants(qqo, level:=level)
            If qqApplicants IsNot Nothing AndAlso qqApplicants.Count > 0 Then
                For Each d As QuickQuoteApplicant In qqApplicants
                    If d IsNot Nothing AndAlso IsQuickQuoteApplicantNewToImage(d, qqo) = True Then
                        If qqApplicantsNew Is Nothing Then
                            qqApplicantsNew = New List(Of QuickQuoteApplicant)
                        End If
                        qqApplicantsNew.Add(d)
                    End If
                Next
            End If

            Return qqApplicantsNew
        End Function
        Public Function DiaApplicantsNewToImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.GoverningStateLevel) As List(Of Diamond.Common.Objects.Policy.Applicant)
            Dim diaApplicantsNew As List(Of Diamond.Common.Objects.Policy.Applicant) = Nothing

            Dim diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant) = AllDiamondApplicants(diaImage, level:=level)
            If diaApplicants IsNot Nothing AndAlso diaApplicants.Count > 0 Then
                For Each d As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    If d IsNot Nothing AndAlso IsDiaApplicantNewToImage(d, diaImage) = True Then
                        If diaApplicantsNew Is Nothing Then
                            diaApplicantsNew = New List(Of Diamond.Common.Objects.Policy.Applicant)
                        End If
                        diaApplicantsNew.Add(d)
                    End If
                Next
            End If

            Return diaApplicantsNew
        End Function
        Public Function DiamondImageOrQuickQuoteObjectHasNewApplicants(Optional ByVal diaImage As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByRef diaApplicantsNew As List(Of Diamond.Common.Objects.Policy.Applicant) = Nothing, Optional ByRef qqApplicantsNew As List(Of QuickQuoteApplicant) = Nothing) As Boolean
            Dim hasNew As Boolean = False
            diaApplicantsNew = Nothing
            qqApplicantsNew = Nothing

            If diaImage IsNot Nothing Then
                diaApplicantsNew = DiaApplicantsNewToImage(diaImage)
                If diaApplicantsNew IsNot Nothing AndAlso diaApplicantsNew.Count > 0 Then
                    hasNew = True
                End If
            ElseIf qqo IsNot Nothing Then
                qqApplicantsNew = QuickQuoteApplicantsNewToImage(qqo)
                If qqApplicantsNew IsNot Nothing AndAlso qqApplicantsNew.Count > 0 Then
                    hasNew = True
                End If
            End If

            Return hasNew
        End Function
        Public Function Endorsements_Property_OnlyOrderThirdPartyReportsOnNewApplicants() As Boolean
            Dim onlyNew As Boolean = True 'default to True; key required to turn to False

            Dim strOnlyNew As String = configAppSettingValueAsString("VR_Endorsements_Property_OnlyOrderThirdPartyReportsOnNewApplicants")
            If String.IsNullOrWhiteSpace(strOnlyNew) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strOnlyNew) = "YES" OrElse qqHelper.BitToBoolean(strOnlyNew) = True Then 'key would just need any text value that doesn't equate to True to return False
                    onlyNew = True
                Else
                    onlyNew = False
                End If
            Else 'added 9/15/2019
                onlyNew = Endorsements_OnlyOrderThirdPartyReportsOnNewDriversOrApplicants()
            End If

            Return onlyNew
        End Function
        'added 9/15/2019
        Public Function Endorsements_OnlyOrderThirdPartyReportsOnNewDriversOrApplicants() As Boolean
            Dim onlyNew As Boolean = True 'default to True; key required to turn to False

            Dim strOnlyNew As String = configAppSettingValueAsString("VR_Endorsements_OnlyOrderThirdPartyReportsOnNewDriversOrApplicants")
            If String.IsNullOrWhiteSpace(strOnlyNew) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strOnlyNew) = "YES" OrElse qqHelper.BitToBoolean(strOnlyNew) = True Then 'key would just need any text value that doesn't equate to True to return False
                    onlyNew = True
                Else
                    onlyNew = False
                End If
            End If

            Return onlyNew
        End Function
        Public Function EndorsementDiamondImageOrQuickQuoteObjectHasNewDriversOrApplicantsOrOkayToOrderReportsOnExisting(Optional ByVal diaImage As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByRef onlyNewDriversOrApplicants As Boolean = False, Optional ByRef diaDriversNew As List(Of Diamond.Common.Objects.Policy.Driver) = Nothing, Optional ByRef qqDriversNew As List(Of QuickQuoteDriver) = Nothing, Optional ByRef diaApplicantsNew As List(Of Diamond.Common.Objects.Policy.Applicant) = Nothing, Optional ByRef qqApplicantsNew As List(Of QuickQuoteApplicant) = Nothing) As Boolean
            Dim isOkay As Boolean = False
            onlyNewDriversOrApplicants = False
            diaDriversNew = Nothing
            qqDriversNew = Nothing
            diaApplicantsNew = Nothing
            qqApplicantsNew = Nothing

            'Updated 02/10/2021 for CAP Endorsements Task 52973 MLW
            'If ThirdPartyReports_IsPersonalAuto(diaImage:=diaImage, qqo:=qqo) = True Then
            If ThirdPartyReports_IsPersonalOrCommercialAuto(diaImage:=diaImage, qqo:=qqo) = True Then
                onlyNewDriversOrApplicants = Endorsements_Auto_OnlyOrderThirdPartyReportsOnNewDrivers()
                If onlyNewDriversOrApplicants = False OrElse DiamondImageOrQuickQuoteObjectHasNewDrivers(diaImage:=diaImage, qqo:=qqo) = True Then
                    isOkay = True
                End If
            Else
                onlyNewDriversOrApplicants = Endorsements_Property_OnlyOrderThirdPartyReportsOnNewApplicants()
                If onlyNewDriversOrApplicants = False OrElse DiamondImageOrQuickQuoteObjectHasNewApplicants(diaImage:=diaImage, qqo:=qqo) = True Then
                    isOkay = True
                End If
            End If

            Return isOkay
        End Function
        'following methods for CreditType similar to ones from QuickQuoteXml
        Public Function ThirdPartyReports_IsPersonalAuto(Optional ByVal diaImage As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByVal qqo As QuickQuoteObject = Nothing) As Boolean
            Dim isIt As Boolean = False

            If qqo IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), qqo.LobType) = True AndAlso qqo.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal Then
                    isIt = True
                End If
            ElseIf diaImage IsNot Nothing Then
                Dim diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver) = AllDiamondDrivers(diaImage, level:=MultiStateLevel.GoverningStateLevel)
                If diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                    isIt = True
                End If
            End If

            Return isIt
        End Function
        Public Function ThirdPartyReports_IsPersonalOrCommercialAuto(Optional ByVal diaImage As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByVal qqo As QuickQuoteObject = Nothing) As Boolean
            Dim isIt As Boolean = False

            If qqo IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), qqo.LobType) = True AndAlso qqo.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto Then
                    isIt = True
                End If
            ElseIf diaImage IsNot Nothing Then
                Dim diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver) = AllDiamondDrivers(diaImage, level:=MultiStateLevel.GoverningStateLevel)
                If diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                    isIt = True
                End If
            End If

            Return isIt
        End Function

        'added 10/7/2019
        Public Shared Function CreateNewEndorsementsAsQuotes() As Boolean
            Dim doIt As Boolean = False 'default to False; key required to turn to True

            Dim strDoIt As String = configAppSettingValueAsString("VR_CreateNewEndorsementsAsQuotes")
            If String.IsNullOrWhiteSpace(strDoIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strDoIt) = "YES" OrElse qqHelper.BitToBoolean(strDoIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    doIt = True
                Else
                    doIt = False 'redundant
                End If
            End If

            Return doIt
        End Function
        Public Shared Function ConsiderEndorsementQuoteStatusAsPending() As Boolean
            'Dim isIt As Boolean = False 'default to False; key required to turn to True

            'Dim strIt As String = configAppSettingValueAsString("VR_ConsiderEndorsementQuoteStatusAsPending")
            'If String.IsNullOrWhiteSpace(strIt) = False Then
            '    Dim qqHelper As New QuickQuoteHelperClass
            '    If UCase(strIt) = "YES" OrElse qqHelper.BitToBoolean(strIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
            '        isIt = True
            '    Else
            '        isIt = False 'redundant
            '    End If
            'End If
            Dim isIt As Boolean = True 'default to True; key required to turn to False

            Dim strIsIt As String = configAppSettingValueAsString("VR_ConsiderEndorsementQuoteStatusAsPending")
            If String.IsNullOrWhiteSpace(strIsIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsIt) = "YES" OrElse qqHelper.BitToBoolean(strIsIt) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isIt = True
                Else
                    isIt = False
                End If
            End If

            Return isIt
        End Function
        Public Shared Function DiamondPolicyStatusCodeIdIsPending(ByVal diaPolicyStatusCodeId As Integer, Optional ByVal considerQuoteStatusAsPending As Boolean = False) As Boolean
            'If diaPolicyStatusCodeId = 4 OrElse (diaPolicyStatusCodeId = 12 AndAlso considerQuoteStatusAsPending = True) Then
            If diaPolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending) OrElse (diaPolicyStatusCodeId = CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Quote) AndAlso considerQuoteStatusAsPending = True) Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Shared Function PendingDiamondPolicyStatusCodeIds(Optional ByVal considerQuoteStatusAsPending As Boolean = False) As List(Of Integer)
            Dim diaPolStatusCodeIds As New List(Of Integer)

            'diaPolStatusCodeIds.Add(4)
            'If considerQuoteStatusAsPending = True Then
            '    diaPolStatusCodeIds.Add(12)
            'End If
            diaPolStatusCodeIds.Add(CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Pending))
            If considerQuoteStatusAsPending = True Then
                diaPolStatusCodeIds.Add(CInt(QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.Quote))
            End If

            Return diaPolStatusCodeIds
        End Function

        Public Shared Sub OverwriteMakeModelYearSymbolsInfoBasedOnVIN(quoteObject As QuickQuoteObject)
            If quoteObject.Vehicles IsNot Nothing AndAlso quoteObject.Vehicles.Count > 0 Then
                For Each vehicle As QuickQuoteVehicle In quoteObject.Vehicles
                    If vehicle IsNot Nothing AndAlso String.IsNullOrWhiteSpace(vehicle.Vin) = False Then
                        'Updated 10/18/2022 for task 75263 MLW
                        'Dim vinResults As List(Of VinLookupResult) = QuickQuoteHelperClass.GetMakeModelYearOrVinVehicleInfo(vehicle.Vin, "", "", 0, If(IsDate(quoteObject.EffectiveDate), CDate(quoteObject.EffectiveDate), DateTime.MinValue), quoteObject.VersionId)
                        Dim lookupType As Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA
                        Dim qqHelper As New QuickQuoteHelperClass
                        If IsNewModelISORAPALookupTypeAvailable(qqHelper.IntegerForString(quoteObject.VersionId), qqHelper.DateForString(quoteObject.EffectiveDate), If(quoteObject.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, False, True)) Then
                            lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelIsoRapaApi
                        End If
                        Dim vinResults As List(Of VinLookupResult) = QuickQuoteHelperClass.GetMakeModelYearOrVinVehicleInfo_OptionalLookupType(vehicle.Vin, "", "", 0, If(IsDate(quoteObject.EffectiveDate), CDate(quoteObject.EffectiveDate), DateTime.MinValue), quoteObject.VersionId, lookupType, qqHelper.IntegerForString(quoteObject.PolicyId), qqHelper.IntegerForString(quoteObject.PolicyImageNum), 0)
                        If vinResults IsNot Nothing AndAlso vinResults.Count = 1 Then
                            Dim myVinResult As VinLookupResult = vinResults(0)
                            Dim symbol As String = ""
                            If QuickQuoteHelperClass.IsParachuteQuote(quoteObject) Then
                                If IsNewRAPASymbolAvailable(qqHelper.IntegerForString(quoteObject.VersionId), qqHelper.DateForString(quoteObject.EffectiveDate), If(quoteObject.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, False, True)) Then
                                    symbol = myVinResult.CompSymbol + "/" + myVinResult.CollisionSymbol + "/" + myVinResult.LiabilitySymbol + "/" + myVinResult.BodilyInjurySymbol + "/" + myVinResult.PropertyDamageSymbol + "/" + myVinResult.MedPaySymbol
                                Else
                                    symbol = myVinResult.CompSymbol + "/" + myVinResult.CollisionSymbol + "/" + myVinResult.LiabilitySymbol ' swapped 6-9-14
                                End If
                            Else
                                symbol = myVinResult.CompSymbol + "/" + myVinResult.CollisionSymbol ' swapped 6-9-14
                            End If

                            If vehicle.VehicleSymbols Is Nothing Then
                                vehicle.VehicleSymbols = New List(Of QuickQuoteVehicleSymbol)
                            Else
                                vehicle.VehicleSymbols.Clear()
                            End If

                            If symbol.Contains("/") Then
                                Dim splitSymbolsVals As String() = symbol.Trim().Split("/"c)
                                Dim symbolTypeId As Integer = 0
                                If splitSymbolsVals.Count > 1 Then
                                    For i As Integer = 0 To splitSymbolsVals.Length - 1
                                        If IsNewRAPASymbolAvailable(qqHelper.IntegerForString(quoteObject.VersionId), qqHelper.DateForString(quoteObject.EffectiveDate), If(quoteObject.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, False, True)) Then
                                            symbolTypeId = i + 1
                                            If splitSymbolsVals.Length >= 4 Then
                                                'NOTE: if order of symbols changes, this will need to be updated. It is assumed that the order will be 1=other(comp),2=coll,3=liab,8=bodilyInjury,9=propertyDamage,14=medPay always
                                                Select Case i
                                                    Case "3"
                                                        symbolTypeId = "8"
                                                    Case "4"
                                                        symbolTypeId = "9"
                                                    Case "5"
                                                        symbolTypeId = "14"
                                                End Select
                                            End If
                                            QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, symbolTypeId.ToString(), splitSymbolsVals(i))
                                        Else
                                            QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, (i + 1).ToString(), splitSymbolsVals(i))
                                        End If
                                    Next
                                End If
                            Else
                                If vehicle.NonOwned = True OrElse vehicle.NonOwnedNamed = True Then
                                    'QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "0", "1")
                                    'QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "0", "2")
                                    'QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "0", "3")
                                    QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "1", "0")
                                    QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "2", "0")
                                    QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "3", "0")
                                    If IsNewRAPASymbolAvailable(qqHelper.IntegerForString(quoteObject.VersionId), qqHelper.DateForString(quoteObject.EffectiveDate), If(quoteObject.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, False, True)) Then
                                        QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "8", "0")
                                        QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "9", "0")
                                        QuickQuoteHelperClass.AddUpdateAutoSymbols(quoteObject, vehicle, "14", "0")
                                    End If
                                Else
                                    'already cleared above
                                End If
                            End If

                            If String.IsNullOrWhiteSpace(myVinResult.Make) = False Then
                                vehicle.Make = myVinResult.Make
                            End If
                            If String.IsNullOrWhiteSpace(myVinResult.Description) = False Then
                                vehicle.Model = myVinResult.Description
                            End If
                            If String.IsNullOrWhiteSpace(myVinResult.Year) = False Then
                                vehicle.Year = myVinResult.Year
                            End If
                        End If
                    End If
                Next
            End If
        End Sub

        Public Shared Function GetMakeModelYearOrVinVehicleInfo(Vin As String, make As String, model As String, year As Int32, effectiveDate As DateTime, versionId As Integer) As List(Of VinLookupResult)
            'Dim lst As New List(Of Diamond.Common.Objects.VehicleInfoLookup.VehicleInfoLookupResults)
            'Dim results As New List(Of VinLookupResult)
            'Try
            '    Dim vinReq As New Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Request
            '    Dim vinRes As New Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Response
            '    If make.ToUpper().Contains("nissan".ToUpper()) Then
            '        make = "nissan/datsun".ToUpper()
            '    End If
            '    Dim vins As New List(Of String)

            '    If effectiveDate < Date.Now.AddDays(-90) Then ' Matt A 11/10/2016 if effective date is invalid use todays date
            '        effectiveDate = Date.Now
            '    End If

            '    With vinReq
            '        With .RequestData
            '            .LookupSource = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA
            '            If String.IsNullOrWhiteSpace(Vin) Then
            '                .Make = make.Trim()
            '                .Model = model.Trim()
            '                .Year = year
            '                .Type = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingYearMakeModel
            '            Else
            '                .Vin = Vin.Trim().ToUpper()
            '                .Type = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingVin
            '            End If
            '        End With
            '    End With
            '    Using proxy As New Diamond.Common.Services.Proxies.VinServiceProxy
            '        vinRes = proxy.VehicleInfoLookup(vinReq)
            '    End Using

            '    If vinRes IsNot Nothing Then
            '        With vinRes
            '            If .ResponseData IsNot Nothing Then
            '                With .ResponseData
            '                    If .VehicleInfoLookupResults IsNot Nothing AndAlso .VehicleInfoLookupResults.Count > 0 Then
            '                        For Each lr As Diamond.Common.Objects.VehicleInfoLookup.VehicleInfoLookupResults In .VehicleInfoLookupResults
            '                            lst.Add(lr)
            '                            Dim result As New VinLookupResult()
            '                            If vins.Contains(lr.Vin) = False Then
            '                                result.Description = lr.Description
            '                                result.Make = lr.Make.ToUpper()
            '                                result.Model = lr.Model.ToUpper()
            '                                result.Year = lr.Year
            '                                result.Vin = lr.Vin
            '                                result.BodyTypeId = lr.BodyTypeId
            '                                result.AntiTheftDescription = lr.AntiTheftDescription
            '                                result.ResultVendor = lr.VehicleInfoLookupTypeId
            '                                ' restraint is really a list
            '                                If lr.RestraintDescription.Contains(",") Then
            '                                    result.RestraintDescription = lr.RestraintDescription.Split(",")(1).Trim()
            '                                Else
            '                                    result.RestraintDescription = lr.RestraintDescription.Trim()
            '                                End If

            '                                If result.RestraintDescription.StartsWith("Side") Or result.RestraintDescription.Contains("Curtain") Or result.RestraintDescription.Contains("Head") Then
            '                                    result.RestraintDescription = "Side Airbags"
            '                                End If

            '                                result.PerformanceTypeText = lr.PerformanceDescription
            '                                result.BodyTypeText = lr.BodyType
            '                                result.CompSymbol = lr.IsoCompSymbol.Trim()
            '                                result.CollisionSymbol = lr.IsoCollisionSymbol.Trim()

            '                                result.ISOBodyStyle = ConvertVinLookupBodyStyleToVRBodyStyle(lr.ISOBodyStyle) ' Added 5-10-16 Matt A
            '                                result.CyclinderCount = lr.Cylinders ' Added 5-10-16 Matt A
            '                                result.CyclinderDescription = lr.CylindersDescription ' Added 5-10-16 Matt A

            '                                If result.Model.ToUpper() = "FORTWO" AndAlso result.Make.ToUpper() = "UNDETERMINED" Then 'Matt A 8-10-2016 needed to fix 'Smart' cars
            '                                    result.Make = "SMART"
            '                                End If

            '                                'added for PARAchute
            '                                Dim symbolResults As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults) = PerformVehicleSymbolPlanLookup(lr.ModelISOId, versionId)
            '                                Dim libSymbol As Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults = (From s In symbolResults Where s.VehicleSymbolCoverageTypeId = 3 Select s).FirstOrDefault()

            '                                If libSymbol IsNot Nothing Then
            '                                    result.LiabilitySymbol = libSymbol.Symbol
            '                                End If

            '                                vins.Add(lr.Vin)
            '                                results.Add(result)
            '                            End If

            '                        Next
            '                    End If
            '                End With
            '            End If
            '        End With
            '    End If
            'Catch ex As System.Exception

            'End Try

            'Return (From r In results Order By r.Model Select r).ToList()

            ''Updated 10/11/2022 for task 75263 MLW
            'If IsNewModelISORAPALookupTypeAvailable() Then
            '    Return GetMakeModelYearOrVinVehicleInfo_OptionalLookupType(Vin, make, model, year, effectiveDate, versionId, lookupType:=Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelIsoRapaApi)
            'Else
            '    Return GetMakeModelYearOrVinVehicleInfo_OptionalLookupType(Vin, make, model, year, effectiveDate, versionId, lookupType:=Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA)
            'End If
            'updated 6/29/2021
            Return GetMakeModelYearOrVinVehicleInfo_OptionalLookupType(Vin, make, model, year, effectiveDate, versionId, lookupType:=Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA)

        End Function

        Public Shared Function GetMakeModelYearOrVinVehicleInfo_OptionalLookupType(Vin As String, make As String, model As String, year As Int32, effectiveDate As DateTime, versionId As Integer, Optional ByVal lookupType As Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA, Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByVal vehicleNum As Integer = 0) As List(Of VinLookupResult)
            Dim lst As New List(Of Diamond.Common.Objects.VehicleInfoLookup.VehicleInfoLookupResults)
            Dim results As New List(Of VinLookupResult)
            Try
                CheckDiamondServicesToken()

                Dim vinReq As New Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Request
                Dim vinRes As New Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Response
                If make.ToUpper().Contains("nissan".ToUpper()) Then
                    make = "nissan/datsun".ToUpper()
                End If
                Dim vins As New List(Of String)

                If effectiveDate < Date.Now.AddDays(-90) Then ' Matt A 11/10/2016 if effective date is invalid use todays date
                    effectiveDate = Date.Today
                End If

                If System.Enum.IsDefined(GetType(Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType), lookupType) = False OrElse lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.NA Then
                    lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA
                End If

                With vinReq
                    With .RequestData
                        '.LookupSource = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA
                        .LookupSource = lookupType
                        If String.IsNullOrWhiteSpace(Vin) Then
                            Dim makeToUse As String = make.Trim()
                            If lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelIsoRapaApi Then
                                'This is a temporary fix until drop downs using Diamond's APIs can be added to VR.
                                '.MakeCode = make.Trim() 'Sending Year/MakeCode/Model with RAPA 2.0 gets us the same results as Diamond for now. There is also a ModelCode field, but that returns more results than needed.
                                makeToUse = IsoMakeForMake(make.Trim())
                                If String.IsNullOrWhiteSpace(makeToUse) Then
                                    makeToUse = make.Trim()
                                End If
                            End If
                            .Make = makeToUse
                            .Model = model.Trim()
                            .Year = year
                            .Type = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingYearMakeModel
                        Else
                            .Vin = Vin.Trim().ToUpper()
                            .Type = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingVin
                        End If
                        'Added 07/09/2021 for CAP Endorsements Tasks 53028 and 53030 MLW - Note: testing VINtelligence call, might not need.
                        .PolicyId = policyId
                        .PolicyImageNum = policyImageNum
                        .VehicleNum = vehicleNum
                        .VersionId = versionId
                        'Added 10/17/2022 for task 75263 MLW
                        .TEffDate = effectiveDate
                    End With
                End With
                Using proxy As New Diamond.Common.Services.Proxies.VinServiceProxy
                    vinRes = proxy.VehicleInfoLookup(vinReq)
                End Using

                If vinRes IsNot Nothing Then
                    With vinRes
                        If .ResponseData IsNot Nothing Then
                            With .ResponseData
                                If .VehicleInfoLookupResults IsNot Nothing AndAlso .VehicleInfoLookupResults.Count > 0 Then
                                    For Each lr As Diamond.Common.Objects.VehicleInfoLookup.VehicleInfoLookupResults In .VehicleInfoLookupResults
                                        lst.Add(lr)
                                        Dim result As New VinLookupResult()
                                        If vins.Contains(lr.Vin) = False Then
                                            result.Description = lr.Description
                                            result.Make = lr.Make.ToUpper()
                                            result.Model = lr.Model.ToUpper()
                                            result.Year = lr.Year
                                            If vinReq.RequestData.Type = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingVin Then
                                                result.Vin = Vin.Trim().ToUpper()
                                            Else
                                                result.Vin = lr.Vin
                                            End If
                                            'result.Vin = lr.Vin
                                            result.BodyTypeId = lr.BodyTypeId
                                            result.AntiTheftDescription = lr.AntiTheftDescription
                                            result.ResultVendor = lr.VehicleInfoLookupTypeId
                                            ' restraint is really a list
                                            If lr.RestraintDescription.Contains(",") Then
                                                result.RestraintDescription = lr.RestraintDescription.Split(",")(1).Trim()
                                            Else
                                                result.RestraintDescription = lr.RestraintDescription.Trim()
                                            End If

                                            If result.RestraintDescription.StartsWith("Side") Or result.RestraintDescription.Contains("Curtain") Or result.RestraintDescription.Contains("Head") Then
                                                result.RestraintDescription = "Side Airbags"
                                            End If

                                            result.PerformanceTypeText = lr.PerformanceDescription
                                            result.BodyTypeText = lr.BodyType
                                            'Updated 10/20/2022 for task 75263 MLW
                                            If lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelIsoRapaApi Then
                                                result.CompSymbol = lr.RAPAComprehensiveSymbol
                                                result.CollisionSymbol = lr.RAPACollisionSymbol
                                                result.LiabilitySymbol = lr.RAPACSLSymbol
                                                result.BodilyInjurySymbol = lr.RAPABodilyInjurySymbol
                                                result.MedPaySymbol = lr.RAPAMedPaySymbol
                                                result.PropertyDamageSymbol = lr.RAPAPropertyDamageSymbol
                                            Else
                                                result.CompSymbol = lr.IsoCompSymbol.Trim()
                                                result.CollisionSymbol = lr.IsoCollisionSymbol.Trim()
                                                'added for PARAchute
                                                'Updated 10/17/2022 for task 75263 MLW
                                                Dim symbolResults As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults) = PerformVehicleSymbolPlanLookup_OptionalLookupType(lr.ModelISOId, versionId, lookupType)
                                                'Dim symbolResults As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults) = PerformVehicleSymbolPlanLookup(lr.ModelISOId, versionId)
                                                Dim libSymbol As Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults = (From s In symbolResults Where s.VehicleSymbolCoverageTypeId = 3 Select s).FirstOrDefault()
                                                If libSymbol IsNot Nothing Then
                                                    result.LiabilitySymbol = libSymbol.Symbol
                                                End If
                                            End If
                                            If lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelIsoRapaApi AndAlso ConvertVinLookupBodyTypeIdToBodyStyleEnabled() AndAlso lr.BodyTypeId > 0 Then
                                                result.ISOBodyStyle = ConvertVinLookupBodyTypeIdToBodyStyle(lr.BodyTypeId) 'Updated for new PPA RAPA API 12/14/2022 MLW
                                            Else
                                                result.ISOBodyStyle = ConvertVinLookupBodyStyleToVRBodyStyle(lr.ISOBodyStyle) ' Added 5-10-16 Matt A                                            
                                            End If
                                            result.CyclinderCount = lr.Cylinders ' Added 5-10-16 Matt A
                                            result.CyclinderDescription = lr.CylindersDescription ' Added 5-10-16 Matt A

                                            If result.Model.ToUpper() = "FORTWO" AndAlso result.Make.ToUpper() = "UNDETERMINED" Then 'Matt A 8-10-2016 needed to fix 'Smart' cars
                                                result.Make = "SMART"
                                            End If

                                            ''added for PARAchute
                                            'Dim symbolResults As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults) = PerformVehicleSymbolPlanLookup(lr.ModelISOId, versionId)
                                            'Dim libSymbol As Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults = (From s In symbolResults Where s.VehicleSymbolCoverageTypeId = 3 Select s).FirstOrDefault()

                                            'If libSymbol IsNot Nothing Then
                                            '    result.LiabilitySymbol = libSymbol.Symbol
                                            'End If

                                            result.CostNew = lr.CostNew 'Added 06/30/2021 for CAP Endorsements Tasks 53028 and 53030 MLW
                                            result.Size = ConvertVinLookupSizeToVRSize(lr.VehicleType, lr.StyleCode, lr.GrossVehicleWeight) 'Added 06/30/2021 for CAP Endorsements Tasks 53028 and 53030 MLW
                                            result.RatingType = ConvertVinLookupVehicleTypeToVRVehicleRatingType(lr.VehicleType) 'Added 08/05/2021 for CAP Endorsements Tasks 53028 and 53030 MLW

                                            vins.Add(lr.Vin)
                                            results.Add(result)
                                        End If

                                    Next
                                End If
                            End With
                        End If
                    End With
                End If
            Catch ex As System.Exception

            End Try

            Return (From r In results Order By r.Model Select r).ToList()

        End Function

        Private Shared Function IsoMakeForMake(ByVal make As String) As String
            Dim isoMake As String = ""
            If String.IsNullOrWhiteSpace(make) = False Then
                Dim makeToUse As String = make
                Select Case UCase(make)
                    Case "CHEVY"
                        makeToUse = "Chevrolet"
                End Select

                Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    sql.queryOrStoredProc = "SELECT I.isomake FROM ModelISOMake as I with (nolock) WHERE I.dscr like '" & makeToUse & "%' ORDER BY I.isomake_id"

                    Using dr As SqlClient.SqlDataReader = sql.GetDataReader
                        If dr IsNot Nothing AndAlso dr.HasRows = True Then
                            dr.Read()
                            isoMake = dr.Item("isomake").ToString.Trim
                        End If
                    End Using
                End Using
            End If
            Return isoMake
        End Function

        Public Shared Function ConvertVinLookupBodyTypeIdToBodyStyleEnabled() As Boolean
            Dim isOkay As Boolean = False

            Dim strIsOkay As String = configAppSettingValueAsString("QQ_ConvertVinLookupBodyTypeIdToBodyStyle_Enabled")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function

        Public Shared Function ConvertVinLookupBodyTypeIdToBodyStyle(bodyTypeId As Integer) As String
            'Use bodyTypeId to lookup DiamondStaticData to find its body style
            Dim bodyStyle As String = "CAR"
            If bodyTypeId <> 0 Then
                Dim qqh As New QuickQuoteHelperClass
                bodyStyle = qqh.GetStaticDataTextForValue(QuickQuoteClassName.QuickQuoteVehicle, QuickQuotePropertyName.BodyTypeId, bodyTypeId.ToString()).ToUpper()
            End If
            Return bodyStyle
        End Function

        Public Shared Function IsNewRAPASymbolAvailable(ByVal versionId As Integer, ByVal effectiveDate As DateTime, ByVal isNewBusiness As Boolean) As Boolean
            Dim allowIt As Boolean = False 'default to False; key required to turn to True
            Dim chc As New CommonHelperClass
            Dim keyExists As Boolean = False
            Dim strSettings As String = chc.ConfigurationAppSettingValueAsString("VR_PPA_NewRAPASymbols_Settings", configurationAppSettingExists:=keyExists)
            If String.IsNullOrWhiteSpace(strSettings) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                Dim lstSettings As List(Of String) = ListOfStringFromString(strSettings, delimiter:=",", returnPairForEachDelimiter:=False)
                If lstSettings IsNot Nothing AndAlso lstSettings.Count > 2 Then
                    Dim enabled As Boolean = qqHelper.BitToBoolean(lstSettings(0))
                    If enabled = True Then
                        Dim startDate As Date = qqHelper.DateForString(lstSettings(1))
                        Dim vId As Integer = qqHelper.IntegerForString(lstSettings(2))
                        If isNewBusiness = True Then
                            If effectiveDate >= startDate Then allowIt = True
                        Else
                            If versionId >= vId Then allowIt = True
                        End If
                    End If
                End If
            End If
            Return allowIt
        End Function

        'Added 10/11/2022 for task 75263 MLW
        Public Shared Function IsNewModelISORAPALookupTypeAvailable(ByVal versionId As Integer, ByVal effectiveDate As DateTime, ByVal isNewBusiness As Boolean) As Boolean
            Dim allowIt As Boolean = False 'default to False; key required to turn to True
            Dim chc As New CommonHelperClass
            Dim keyExists As Boolean = False
            Dim strSettings As String = chc.ConfigurationAppSettingValueAsString("VR_PAA_NewModelISORAPALookupType_Settings", configurationAppSettingExists:=keyExists)
            If String.IsNullOrWhiteSpace(strSettings) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                Dim lstSettings As List(Of String) = ListOfStringFromString(strSettings, delimiter:=",", returnPairForEachDelimiter:=False)
                If lstSettings IsNot Nothing AndAlso lstSettings.Count > 2 Then
                    Dim enabled As Boolean = qqHelper.BitToBoolean(lstSettings(0))
                    If enabled = True Then
                        Dim startDate As Date = qqHelper.DateForString(lstSettings(1))
                        Dim vId As Integer = qqHelper.IntegerForString(lstSettings(2))
                        If isNewBusiness = True Then
                            If effectiveDate >= startDate Then allowIt = True
                        Else
                            If versionId >= vId Then allowIt = True
                        End If
                    End If
                End If
            End If
            Return allowIt
        End Function

        'Added 08/05/2021 for CAP Endorsements Tasks 53028 and 53030 MLW
        Public Shared Function ConvertVinLookupVehicleTypeToVRVehicleRatingType(vehicleType As String) As String
            Dim vehicleRatingType As String = ""
            If vehicleType = "C" Then
                'Trailer
                vehicleRatingType = "9" 'Truck, Trailer, Tractor
            ElseIf vehicleType = "T" Then
                'Tractor or Truck
                vehicleRatingType = "9" 'Truck, Trailer, Tractor
            ElseIf vehicleType = "P" Then
                'Car
                vehicleRatingType = "1" 'Private Passenger Type
            End If
            Return vehicleRatingType
        End Function

        'Added 07/19/2021 for CAP Endorsements Tasks 53028 and 53030 MLW
        Public Shared Function ConvertVinLookupSizeToVRSize(vehicleType As String, styleCode As String, grossVehicleWeight As Decimal) As String
            Dim sizeDescription As String = ""
            If vehicleType = "C" Then
                'Trailer
                sizeDescription = "Trailer Types"
            ElseIf vehicleType = "T" AndAlso styleCode = "TR" Then
                'Tractor
                If grossVehicleWeight <= 45000 Then
                    sizeDescription = "Heavy Truck-Tractors < or equal 45,000 Pounds GVW"
                ElseIf grossVehicleWeight > 45000 Then
                    sizeDescription = "Extra Heavy Truck-Tractors > 45,000 Pounds GVW"
                End If
            ElseIf vehicleType = "T" Then 'styleCode = "ST"
                'Truck
                If (grossVehicleWeight <= 10000) Then
                    sizeDescription = "Light Truck < or equal 10,000 Pounds GVW"
                ElseIf (grossVehicleWeight >= 10001 AndAlso grossVehicleWeight <= 20000) Then
                    sizeDescription = "Medium Truck 10,001 to 20,000 Pounds GVW"
                ElseIf (grossVehicleWeight >= 20001 AndAlso grossVehicleWeight <= 45000) Then
                    sizeDescription = "Heavy Truck 20,001 to 45,000 Pounds GVW"
                ElseIf (grossVehicleWeight > 45000) Then
                    sizeDescription = "Extra Heavy Truck > 45,000 Pounds GVW"
                End If
            End If
            Return sizeDescription
        End Function

        Public Shared Function ConvertVinLookupBodyStyleToVRBodyStyle(ISOBodyStyle As String) As String
            If ISOBodyStyle Is Nothing Then
                Return "CAR"
            End If
            If ISOBodyStyle.ToLower().Contains("pickup") Or ISOBodyStyle.ToLower().Contains("pkp") Or ISOBodyStyle.ToLower().Contains("shrt bed") Then
                Return "PICKUP W/O CAMPER"
            Else
                If ISOBodyStyle.ToLower().Contains("sedan") Or ISOBodyStyle.ToLower().Contains("coupe") Or ISOBodyStyle.ToLower().Contains("wagon") Or ISOBodyStyle.ToLower().Contains("hatchback") Or ISOBodyStyle.ToLower().Contains("conv") Or ISOBodyStyle.ToLower().Contains("rdstr") Or ISOBodyStyle.ToLower().Contains("hchbk") Or ISOBodyStyle.ToLower().Contains("hrdtp") Or ISOBodyStyle.ToLower().Contains("sed") Or ISOBodyStyle.ToLower().Contains("wag") Then
                    Return "CAR"
                Else
                    If ISOBodyStyle.ToLower().Contains("van") Then
                        Return "VAN"
                    Else
                        If ISOBodyStyle.ToLower().Contains("utility") Or ISOBodyStyle.ToLower().Contains("util") Or ISOBodyStyle.ToLower().Contains("utl") Then
                            Return "SUV"
                        Else
                            Return "CAR"
                        End If
                    End If
                End If
            End If
        End Function

        Public Shared Function PerformVehicleSymbolPlanLookup(ByVal vehiclelookupId As Integer, ByVal versionId As Integer) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults)

            'Dim request As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request = BuildVehicleSymbolPlanLookupRequest(vehiclelookupId, versionId)

            'If request IsNot Nothing Then
            '    Dim response As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Response = Nothing

            '    Using proxy As New Diamond.Common.Services.Proxies.VinServiceProxy
            '        response = proxy.VehicleSymbolPlanLookup(request)
            '    End Using

            '    Return response.ResponseData.VehicleSymbolPlanLookupResults
            'End If
            'Return Nothing
            Return PerformVehicleSymbolPlanLookup_OptionalLookupType(vehiclelookupId, versionId, Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA)
        End Function

        'Updated 10/17/2022 for task 75263 MLW - add effectiveDate
        Public Shared Function PerformVehicleSymbolPlanLookup_OptionalLookupType(ByVal vehiclelookupId As Integer, ByVal versionId As Integer, ByVal lookupType As Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType) As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.VehicleSymbolPlanLookup.VehicleSymbolPlanLookupResults)

            Dim request As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request = BuildVehicleSymbolPlanLookupRequest_OptionalLookupType(vehiclelookupId, versionId, lookupType)

            If request IsNot Nothing Then
                Dim response As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Response = Nothing

                Using proxy As New Diamond.Common.Services.Proxies.VinServiceProxy
                    response = proxy.VehicleSymbolPlanLookup(request)
                End Using

                Return response.ResponseData.VehicleSymbolPlanLookupResults
            End If
            Return Nothing
        End Function

        Public Shared Function BuildVehicleSymbolPlanLookupRequest(ByVal lookupId As Integer, ByVal versionId As Integer) As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request
            'Dim request As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request = Nothing
            'Dim lookupSource As Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA
            'request = New Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request

            'With request.RequestData
            '    .LookupSource = lookupSource
            '    .ModelISOId = lookupId
            '    .VersionId = versionId
            '    .MakeModelLookupType = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingVin
            'End With
            'Return request
            Return BuildVehicleSymbolPlanLookupRequest_OptionalLookupType(lookupId, versionId, Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA)
        End Function

        'Updated 10/17/2022 for task 75263 MLW - add effectiveDate
        Public Shared Function BuildVehicleSymbolPlanLookupRequest_OptionalLookupType(ByVal lookupId As Integer, ByVal versionId As Integer, ByVal lookupType As Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType) As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request
            Dim request As Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request = Nothing
            If System.Enum.IsDefined(GetType(Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType), lookupType) = False OrElse lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.NA Then
                lookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA
            End If

            request = New Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request

            With request.RequestData
                .LookupSource = lookupType
                .ModelISOId = lookupId
                .VersionId = versionId
                .MakeModelLookupType = Diamond.Common.Enums.Vin.MakeModelLookupType.LookupUsingVin
            End With
            Return request
        End Function

        Public Shared Function IsParachuteQuote(topQuote As QuickQuote.CommonObjects.QuickQuoteObject) As Boolean
            If topQuote.QuoteLevel <> QuickQuote.CommonMethods.QuickQuoteHelperClass.QuoteLevel.TopLevel Then
                Throw New Exception("Expected top level quote but received state level quote.")
            End If
            If IsDate(topQuote.EffectiveDate) Then
                If (CDate(topQuote.EffectiveDate) >= Date.Parse(System.Configuration.ConfigurationManager.AppSettings("parachute_EffectiveDate"))) Then
                    Return True
                End If
            End If
            Return False
        End Function

        Public Shared Function AddUpdateAutoSymbols(quote As QuickQuote.CommonObjects.QuickQuoteObject, vehicle As QuickQuote.CommonObjects.QuickQuoteVehicle, symbolTypeId As String, symbolValue As String) As Boolean
            Dim symbol As QuickQuoteVehicleSymbol = (From s In vehicle.VehicleSymbols Where s.VehicleSymbolCoverageTypeId = symbolTypeId Select s).FirstOrDefault()
            If (IsNumeric(symbolTypeId) AndAlso symbolTypeId = 3 AndAlso IsParachuteQuote(quote) = False) OrElse String.IsNullOrWhiteSpace(symbolValue) = True Then
                If symbol IsNot Nothing Then
                    vehicle.VehicleSymbols.Remove(symbol)
                End If
                Return False
            End If

            If symbol Is Nothing Then
                symbol = New QuickQuoteVehicleSymbol
            End If

            symbol.SystemGeneratedSymbol = symbolValue
            symbol.UserOverrideSymbol = symbolValue
            symbol.VehicleSymbolCoverageTypeId = symbolTypeId
            'Updated 10/11/2022 for task 75263 MLW
            Dim qqHelper As New QuickQuoteHelperClass
            If IsNewModelISORAPALookupTypeAvailable(qqHelper.IntegerForString(quote.VersionId), qqHelper.DateForString(quote.EffectiveDate), If(quote.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, False, True)) Then
                symbol.SystemGeneratedSymbolVehicleInfoLookupTypeId = CInt(Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelIsoRapaApi).ToString()
            Else
                symbol.SystemGeneratedSymbolVehicleInfoLookupTypeId = CInt(Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA).ToString()
            End If
            'symbol.SystemGeneratedSymbolVehicleInfoLookupTypeId = CInt(Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.ModelISORAPA).ToString()
            vehicle.VehicleSymbols.Add(symbol)
            Return True
        End Function

        'added 1/30/2020
        Public Function QuickQuoteSectionCoverageIndexesForCoverageExposureIds(ByRef sectionCovs As List(Of QuickQuoteSectionCoverage), ByVal covExposureIds As List(Of String)) As List(Of Integer)
            Dim indexes As List(Of Integer) = Nothing

            If sectionCovs IsNot Nothing AndAlso sectionCovs.Count > 0 AndAlso covExposureIds IsNot Nothing AndAlso covExposureIds.Count > 0 Then
                Dim counter As Integer = 0
                For Each sc As QuickQuoteSectionCoverage In sectionCovs
                    counter += 1
                    For Each covExpId As String In covExposureIds
                        If IsPositiveIntegerString(covExpId) AndAlso IsPositiveIntegerString(sc.CoverageExposureId) AndAlso CInt(covExpId) = CInt(sc.CoverageExposureId) Then
                            AddIntegerToIntegerList(counter - 1, indexes, positiveOnly:=False)
                            Exit For 'no need to keep looking in covExposureIds until next iteration for sectionCovs
                        End If
                    Next
                Next
            End If

            Return indexes
        End Function
        Public Sub RemoveQuickQuoteSectionCoveragesByIndexes(ByRef sectionCovs As List(Of QuickQuoteSectionCoverage), ByVal covIndexes As List(Of Integer), Optional ByRef numberOfSectionCoveragesRemoved As Integer = 0, Optional ByVal numberOfsectionCovsToMaintain As Integer = 0)
            numberOfSectionCoveragesRemoved = 0

            If sectionCovs IsNot Nothing AndAlso sectionCovs.Count > 0 AndAlso covIndexes IsNot Nothing AndAlso covIndexes.Count > 0 AndAlso (numberOfsectionCovsToMaintain = 0 OrElse covIndexes.Count > numberOfsectionCovsToMaintain) Then
                'put them in order 1st
                covIndexes.Sort()
                'now reverse the order so we can remove them from the end of the list back to the front (since the indexes would change if removing from the beginning)
                covIndexes.Reverse()
                For Each i As Integer In covIndexes
                    If sectionCovs.Count >= i + 1 Then 'adding 1 since the position is 1 more than the index
                        If numberOfsectionCovsToMaintain = 0 OrElse covIndexes.Count - numberOfSectionCoveragesRemoved > numberOfsectionCovsToMaintain Then
                            sectionCovs.RemoveAt(i)
                            numberOfSectionCoveragesRemoved += 1
                        Else
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub RemoveQuickQuoteSectionCoveragesForCoverageExposureIds(ByRef sectionCovs As List(Of QuickQuoteSectionCoverage), ByVal covExposureIds As List(Of String), Optional ByRef numberOfSectionCoveragesRemoved As Integer = 0)
            numberOfSectionCoveragesRemoved = 0
            If sectionCovs IsNot Nothing AndAlso sectionCovs.Count > 0 AndAlso covExposureIds IsNot Nothing AndAlso covExposureIds.Count > 0 Then
                Dim indexes As List(Of Integer) = QuickQuoteSectionCoverageIndexesForCoverageExposureIds(sectionCovs, covExposureIds)
                RemoveQuickQuoteSectionCoveragesByIndexes(sectionCovs, indexes, numberOfSectionCoveragesRemoved)
            End If
        End Sub

        'added 2/13/2020
        Public Shared Function Endorsements_AllowTransactionEffectiveDateChange() As Boolean
            Dim isOkay As Boolean = False 'default to False; key required to turn to True

            Dim strIsOkay As String = configAppSettingValueAsString("VR_Endorsements_AllowTransactionEffectiveDateChange")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    isOkay = True
                Else
                    isOkay = False 'redundant
                End If
            End If

            Return isOkay
        End Function

        'added 3/13/2020
        Public Shared Function QuickQuoteLobTypeForQuoteObjectOrDiamondImage(Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByVal diaImg As Diamond.Common.Objects.Policy.Image = Nothing) As QuickQuoteObject.QuickQuoteLobType
            Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

            If qqo IsNot Nothing AndAlso System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), qqo.LobType) = True AndAlso qqo.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                lobType = qqo.LobType
            ElseIf diaImg IsNot Nothing AndAlso diaImg.VersionId > 0 Then
                lobType = QuickQuoteLobTypeForVersionId(diaImg.VersionId)
            End If

            'If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = False OrElse lobType = QuickQuoteObject.QuickQuoteLobType.None Then
            '    'invalid; look at something else
            'End If

            Return lobType
        End Function
        Public Shared Function QuickQuoteLobTypeForVersionId(ByVal versionId As Integer) As QuickQuoteObject.QuickQuoteLobType
            Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

            If versionId > 0 Then
                Dim qqHelper As New QuickQuoteHelperClass
                Dim lobId As Integer = 0
                'check static data 1st
                Dim lobIdText As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.VersionId, versionId.ToString, QuickQuotePropertyName.LobId)
                If qqHelper.IsPositiveIntegerString(lobIdText) = True Then
                    lobId = CInt(lobIdText)
                Else
                    lobId = qqHelper.GetLobIdForVersionId(versionId) 'do db lookup if static data doesn't have it
                End If
                If lobId > 0 Then
                    lobId = LobIdForMasterLobId(lobId) 'just in case it's a multiState version
                    lobType = LobTypeForLobId(lobId) 'this should be able to translate multistate lobIds also
                End If
                'SetLobAndStateStuffFromDiamondVersionId(versionId.ToString, "", lobType, "") 'also accounts for multiState versions, but has additional logic not needed here
            End If

            Return lobType
        End Function

        'added 6/8/2020
        Public Shared Function PPA_CheckDictionaryKeyToOrderClueAtQuoteRate() As Boolean
            Dim doIt As Boolean = False 'default to False; key required to turn to True

            Dim strDoIt As String = configAppSettingValueAsString("VR_PPA_CheckDictionaryKeyToOrderClueAtQuoteRate")
            If String.IsNullOrWhiteSpace(strDoIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strDoIt) = "YES" OrElse qqHelper.BitToBoolean(strDoIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    doIt = True
                Else
                    doIt = False 'redundant
                End If
            End If

            Return doIt
        End Function
        'added 6/9/2020
        Public Shared Function QuoteIsOkayToOrderClueAtQuoteRate(ByVal qqo As QuickQuoteObject, Optional ByRef keyIsPresent As Boolean = False) As Boolean
            Dim isOkay As Boolean = False
            keyIsPresent = False

            If qqo IsNot Nothing Then
                Dim dictionaryVal As String = qqo.GetDevDictionaryItem("", "OkayToOrderClueAtQuoteRate")
                If String.IsNullOrWhiteSpace(dictionaryVal) = False Then
                    keyIsPresent = True
                    Dim qqHelper As New QuickQuoteHelperClass
                    isOkay = qqHelper.BitToBoolean(dictionaryVal)
                End If
            End If

            Return isOkay
        End Function
        Public Shared Sub Set_QuoteIsOkayToOrderClueAtQuoteRate(ByVal qqo As QuickQuoteObject, ByVal isOkay As Boolean) 'added 6/17/2020
            If qqo IsNot Nothing Then
                qqo.SetDevDictionaryItem("", "OkayToOrderClueAtQuoteRate", isOkay.ToString)
            End If
        End Sub
        Public Shared Function NewBusiness_CLUEAuto_AssignUnassignedLossesToPH1Driver() As Boolean
            Dim doIt As Boolean = False 'default to False; key required to turn to True

            Dim strDoIt As String = configAppSettingValueAsString("VR_NewBusiness_CLUEAuto_AssignUnassignedLossesToPH1Driver")
            If String.IsNullOrWhiteSpace(strDoIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strDoIt) = "YES" OrElse qqHelper.BitToBoolean(strDoIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    doIt = True
                Else
                    doIt = False 'redundant
                End If
            End If

            Return doIt
        End Function
        Public Function DiamondPH1Driver(ByRef diaDrivers As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Driver)) As Diamond.Common.Objects.Policy.Driver
            Dim d As Diamond.Common.Objects.Policy.Driver = Nothing

            If diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                For Each drv As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    If drv IsNot Nothing AndAlso IsDiamondDriverPolicyholder1(drv) = True Then
                        d = drv
                        Exit For
                    End If
                Next
            End If

            Return d
        End Function
        Public Function DiamondPH1Driver_GenericList(ByRef diaDrivers As List(Of Diamond.Common.Objects.Policy.Driver)) As Diamond.Common.Objects.Policy.Driver
            Dim d As Diamond.Common.Objects.Policy.Driver = Nothing

            If diaDrivers IsNot Nothing AndAlso diaDrivers.Count > 0 Then
                For Each drv As Diamond.Common.Objects.Policy.Driver In diaDrivers
                    If drv IsNot Nothing AndAlso IsDiamondDriverPolicyholder1(drv) = True Then
                        d = drv
                        Exit For
                    End If
                Next
            End If

            Return d
        End Function
        Public Function DiamondPH1Applicant(ByRef diaApplicants As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.Applicant)) As Diamond.Common.Objects.Policy.Applicant
            Dim a As Diamond.Common.Objects.Policy.Applicant = Nothing

            If diaApplicants IsNot Nothing AndAlso diaApplicants.Count > 0 Then
                For Each app As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    If app IsNot Nothing AndAlso IsDiamondApplicantPolicyholder1(app) = True Then
                        a = app
                        Exit For
                    End If
                Next
            End If

            Return a
        End Function
        Public Function DiamondPH1Applicant_GenericList(ByRef diaApplicants As List(Of Diamond.Common.Objects.Policy.Applicant)) As Diamond.Common.Objects.Policy.Applicant
            Dim a As Diamond.Common.Objects.Policy.Applicant = Nothing

            If diaApplicants IsNot Nothing AndAlso diaApplicants.Count > 0 Then
                For Each app As Diamond.Common.Objects.Policy.Applicant In diaApplicants
                    If app IsNot Nothing AndAlso IsDiamondApplicantPolicyholder1(app) = True Then
                        a = app
                        Exit For
                    End If
                Next
            End If

            Return a
        End Function
        'added 6/10/2020
        Public Sub AddQuickQuoteLossHistoryToList(ByVal newLH As QuickQuoteLossHistoryRecord, ByRef existingLHs As List(Of QuickQuoteLossHistoryRecord), Optional ByVal cloneLH As Boolean = False)
            If newLH IsNot Nothing Then
                If existingLHs Is Nothing Then
                    existingLHs = New List(Of QuickQuoteLossHistoryRecord)
                End If
                If cloneLH = True Then
                    existingLHs.Add(CloneObject(newLH))
                Else
                    existingLHs.Add(newLH)
                End If
            End If
        End Sub
        Public Sub AddQuickQuoteLossHistoriesToList(ByVal newLHs As List(Of QuickQuoteLossHistoryRecord), ByRef existingLHs As List(Of QuickQuoteLossHistoryRecord), Optional ByVal cloneLHs As Boolean = False)
            If newLHs IsNot Nothing AndAlso newLHs.Count > 0 Then
                For Each lh As QuickQuoteLossHistoryRecord In newLHs
                    AddQuickQuoteLossHistoryToList(lh, existingLHs, cloneLH:=cloneLHs)
                Next
            End If
        End Sub
        Public Sub AddQuickQuoteViolationToList(ByVal newV As QuickQuoteAccidentViolation, ByRef existingVs As List(Of QuickQuoteAccidentViolation), Optional ByVal cloneV As Boolean = False)
            If newV IsNot Nothing Then
                If existingVs Is Nothing Then
                    existingVs = New List(Of QuickQuoteAccidentViolation)
                End If
                If cloneV = True Then
                    existingVs.Add(CloneObject(newV))
                Else
                    existingVs.Add(newV)
                End If
            End If
        End Sub
        Public Sub AddQuickQuoteViolationsToList(ByVal newVs As List(Of QuickQuoteAccidentViolation), ByRef existingVs As List(Of QuickQuoteAccidentViolation), Optional ByVal cloneVs As Boolean = False)
            If newVs IsNot Nothing AndAlso newVs.Count > 0 Then
                For Each v As QuickQuoteAccidentViolation In newVs
                    AddQuickQuoteViolationToList(v, existingVs, cloneV:=cloneVs)
                Next
            End If
        End Sub
        Public Function QuickQuoteLossHistoriesFromAllLevels(ByVal qqo As QuickQuoteObject, Optional ByVal stopOnceAnyAreFound As Boolean = False, Optional ByVal cloneLossHistories As Boolean = False) As List(Of QuickQuoteLossHistoryRecord)
            Dim lhs As List(Of QuickQuoteLossHistoryRecord) = Nothing
            Dim hasLH As Boolean = False

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuote.CommonObjects.QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least Me in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq.QuoteLevel = QuoteLevel.StateLevel Then
                                Dim stateLossHistories As List(Of QuickQuoteLossHistoryRecord) = QuickQuoteLossHistoriesFromAllLevels(msq, stopOnceAnyAreFound:=stopOnceAnyAreFound, cloneLossHistories:=cloneLossHistories)
                                If stateLossHistories IsNot Nothing AndAlso stateLossHistories.Count > 0 Then
                                    If stopOnceAnyAreFound = True Then
                                        For Each lh As QuickQuoteLossHistoryRecord In stateLossHistories
                                            If lh IsNot Nothing Then
                                                AddQuickQuoteLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        AddQuickQuoteLossHistoriesToList(stateLossHistories, lhs, cloneLHs:=cloneLossHistories)
                                    End If
                                    hasLH = True
                                    If stopOnceAnyAreFound = True Then
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                    End If
                Else
                    If qqo.VersionAndLobInfo.LossHistoryRecords IsNot Nothing AndAlso qqo.VersionAndLobInfo.LossHistoryRecords.Count > 0 Then
                        If stopOnceAnyAreFound = True Then
                            For Each lh As QuickQuoteLossHistoryRecord In qqo.VersionAndLobInfo.LossHistoryRecords
                                If lh IsNot Nothing Then
                                    AddQuickQuoteLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                    Exit For
                                End If
                            Next
                        Else
                            AddQuickQuoteLossHistoriesToList(qqo.VersionAndLobInfo.LossHistoryRecords, lhs, cloneLHs:=cloneLossHistories)
                        End If
                        hasLH = True
                    End If

                    If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso qqo.VersionAndLobInfo.Drivers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Drivers.Count > 0 Then
                        For Each d As QuickQuoteDriver In qqo.VersionAndLobInfo.Drivers
                            If d IsNot Nothing Then
                                If d.LossHistoryRecords IsNot Nothing AndAlso d.LossHistoryRecords.Count > 0 Then
                                    If stopOnceAnyAreFound = True Then
                                        For Each lh As QuickQuoteLossHistoryRecord In d.LossHistoryRecords
                                            If lh IsNot Nothing Then
                                                AddQuickQuoteLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        AddQuickQuoteLossHistoriesToList(d.LossHistoryRecords, lhs, cloneLHs:=cloneLossHistories)
                                    End If
                                    hasLH = True
                                    If stopOnceAnyAreFound = True Then
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                    End If

                    If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso qqo.VersionAndLobInfo.Applicants IsNot Nothing AndAlso qqo.VersionAndLobInfo.Applicants.Count > 0 Then
                        For Each a As QuickQuoteApplicant In qqo.VersionAndLobInfo.Applicants
                            If a IsNot Nothing Then
                                If a.LossHistoryRecords IsNot Nothing AndAlso a.LossHistoryRecords.Count > 0 Then
                                    If stopOnceAnyAreFound = True Then
                                        For Each lh As QuickQuoteLossHistoryRecord In a.LossHistoryRecords
                                            If lh IsNot Nothing Then
                                                AddQuickQuoteLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        AddQuickQuoteLossHistoriesToList(a.LossHistoryRecords, lhs, cloneLHs:=cloneLossHistories)
                                    End If
                                    hasLH = True
                                    If stopOnceAnyAreFound = True Then
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return lhs
        End Function
        Public Function QuickQuoteViolationsFromAllLevels(ByVal qqo As QuickQuoteObject, Optional ByVal stopOnceAnyAreFound As Boolean = False, Optional ByVal cloneViolations As Boolean = False) As List(Of QuickQuoteAccidentViolation)
            Dim vs As List(Of QuickQuoteAccidentViolation) = Nothing
            Dim hasV As Boolean = False

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuote.CommonObjects.QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least Me in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq.QuoteLevel = QuoteLevel.StateLevel Then
                                Dim stateViolations As List(Of QuickQuoteAccidentViolation) = QuickQuoteViolationsFromAllLevels(msq, stopOnceAnyAreFound:=stopOnceAnyAreFound, cloneViolations:=cloneViolations)
                                If stateViolations IsNot Nothing AndAlso stateViolations.Count > 0 Then
                                    If stopOnceAnyAreFound = True Then
                                        For Each v As QuickQuoteAccidentViolation In stateViolations
                                            If v IsNot Nothing Then
                                                AddQuickQuoteViolationToList(v, vs, cloneV:=cloneViolations)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        AddQuickQuoteViolationsToList(stateViolations, vs, cloneVs:=cloneViolations)
                                    End If
                                    hasV = True
                                    If stopOnceAnyAreFound = True Then
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                    End If
                Else
                    If (hasV = False OrElse stopOnceAnyAreFound = False) AndAlso qqo.VersionAndLobInfo.Drivers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Drivers.Count > 0 Then
                        For Each d As QuickQuoteDriver In qqo.VersionAndLobInfo.Drivers
                            If d IsNot Nothing Then
                                If d.AccidentViolations IsNot Nothing AndAlso d.AccidentViolations.Count > 0 Then
                                    If stopOnceAnyAreFound = True Then
                                        For Each v As QuickQuoteAccidentViolation In d.AccidentViolations
                                            If v IsNot Nothing Then
                                                AddQuickQuoteViolationToList(v, vs, cloneV:=cloneViolations)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        AddQuickQuoteViolationsToList(d.AccidentViolations, vs, cloneVs:=cloneViolations)
                                    End If
                                    hasV = True
                                    If stopOnceAnyAreFound = True Then
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return vs
        End Function
        Public Sub AddDiamondLossHistoryToList(ByVal newLH As Diamond.Common.Objects.Policy.LossHistory, ByRef existingLHs As List(Of Diamond.Common.Objects.Policy.LossHistory), Optional ByVal cloneLH As Boolean = False)
            If newLH IsNot Nothing Then
                If existingLHs Is Nothing Then
                    existingLHs = New List(Of Diamond.Common.Objects.Policy.LossHistory)
                End If
                If cloneLH = True Then
                    existingLHs.Add(newLH.MakeCopy())
                Else
                    existingLHs.Add(newLH)
                End If
            End If
        End Sub
        Public Sub AddDiamondLossHistoriesToList(ByVal newLHs As List(Of Diamond.Common.Objects.Policy.LossHistory), ByRef existingLHs As List(Of Diamond.Common.Objects.Policy.LossHistory), Optional ByVal cloneLHs As Boolean = False)
            If newLHs IsNot Nothing AndAlso newLHs.Count > 0 Then
                For Each lh As Diamond.Common.Objects.Policy.LossHistory In newLHs
                    AddDiamondLossHistoryToList(lh, existingLHs, cloneLH:=cloneLHs)
                Next
            End If
        End Sub
        Public Sub AddDiamondLossHistoriesToList_FromInsList(ByVal newLHs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory), ByRef existingLHs As List(Of Diamond.Common.Objects.Policy.LossHistory), Optional ByVal cloneLHs As Boolean = False)
            If newLHs IsNot Nothing AndAlso newLHs.Count > 0 Then
                For Each lh As Diamond.Common.Objects.Policy.LossHistory In newLHs
                    AddDiamondLossHistoryToList(lh, existingLHs, cloneLH:=cloneLHs)
                Next
            End If
        End Sub
        Public Sub AddDiamondViolationToList(ByVal newV As Diamond.Common.Objects.Policy.AccidentViolation, ByRef existingVs As List(Of Diamond.Common.Objects.Policy.AccidentViolation), Optional ByVal cloneV As Boolean = False)
            If newV IsNot Nothing Then
                If existingVs Is Nothing Then
                    existingVs = New List(Of Diamond.Common.Objects.Policy.AccidentViolation)
                End If
                If cloneV = True Then
                    existingVs.Add(newV.MakeCopy())
                Else
                    existingVs.Add(newV)
                End If
            End If
        End Sub
        Public Sub AddDiamondViolationsToList(ByVal newVs As List(Of Diamond.Common.Objects.Policy.AccidentViolation), ByRef existingVs As List(Of Diamond.Common.Objects.Policy.AccidentViolation), Optional ByVal cloneVs As Boolean = False)
            If newVs IsNot Nothing AndAlso newVs.Count > 0 Then
                For Each v As Diamond.Common.Objects.Policy.AccidentViolation In newVs
                    AddDiamondViolationToList(v, existingVs, cloneV:=cloneVs)
                Next
            End If
        End Sub
        Public Sub AddDiamondViolationsToList_FromInsList(ByVal newVs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.AccidentViolation), ByRef existingVs As List(Of Diamond.Common.Objects.Policy.AccidentViolation), Optional ByVal cloneVs As Boolean = False)
            If newVs IsNot Nothing AndAlso newVs.Count > 0 Then
                For Each v As Diamond.Common.Objects.Policy.AccidentViolation In newVs
                    AddDiamondViolationToList(v, existingVs, cloneV:=cloneVs)
                Next
            End If
        End Sub
        Public Function DiamondLossHistoriesFromAllLevels(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal stopOnceAnyAreFound As Boolean = False, Optional ByVal cloneLossHistories As Boolean = False) As List(Of Diamond.Common.Objects.Policy.LossHistory)
            Dim lhs As List(Of Diamond.Common.Objects.Policy.LossHistory) = Nothing
            Dim hasLH As Boolean = False

            If diaImage IsNot Nothing Then
                Dim pl As Diamond.Common.Objects.Policy.PolicyLevel = DiamondPolicyLevelForImage(diaImage)
                If pl IsNot Nothing AndAlso pl.LossHistories IsNot Nothing AndAlso pl.LossHistories.Count > 0 Then
                    If stopOnceAnyAreFound = True Then
                        For Each lh As Diamond.Common.Objects.Policy.LossHistory In pl.LossHistories
                            If lh IsNot Nothing Then
                                AddDiamondLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                Exit For
                            End If
                        Next
                    Else
                        AddDiamondLossHistoriesToList_FromInsList(pl.LossHistories, lhs, cloneLHs:=cloneLossHistories)
                    End If
                    hasLH = True
                End If

                If hasLH = False OrElse stopOnceAnyAreFound = False Then
                    Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)

                    If rl IsNot Nothing Then
                        If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso rl.Drivers IsNot Nothing AndAlso rl.Drivers.Count > 0 Then
                            For Each d As Diamond.Common.Objects.Policy.Driver In rl.Drivers
                                If d IsNot Nothing Then
                                    If d.LossHistories IsNot Nothing AndAlso d.LossHistories.Count > 0 Then
                                        If stopOnceAnyAreFound = True Then
                                            For Each lh As Diamond.Common.Objects.Policy.LossHistory In d.LossHistories
                                                If lh IsNot Nothing Then
                                                    AddDiamondLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                    Exit For
                                                End If
                                            Next
                                        Else
                                            AddDiamondLossHistoriesToList_FromInsList(d.LossHistories, lhs, cloneLHs:=cloneLossHistories)
                                        End If
                                        hasLH = True
                                        If stopOnceAnyAreFound = True Then
                                            Exit For
                                        End If
                                    End If
                                End If
                            Next
                        End If

                        If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso rl.Applicants IsNot Nothing AndAlso rl.Applicants.Count > 0 Then
                            For Each a As Diamond.Common.Objects.Policy.Applicant In rl.Applicants
                                If a IsNot Nothing Then
                                    If a.LossHistories IsNot Nothing AndAlso a.LossHistories.Count > 0 Then
                                        If stopOnceAnyAreFound = True Then
                                            For Each lh As Diamond.Common.Objects.Policy.LossHistory In a.LossHistories
                                                If lh IsNot Nothing Then
                                                    AddDiamondLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                    Exit For
                                                End If
                                            Next
                                        Else
                                            AddDiamondLossHistoriesToList_FromInsList(a.LossHistories, lhs, cloneLHs:=cloneLossHistories)
                                        End If
                                        hasLH = True
                                        If stopOnceAnyAreFound = True Then
                                            Exit For
                                        End If
                                    End If
                                End If
                            Next
                        End If
                    End If

                    If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                        For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                            If pp IsNot Nothing Then
                                Dim pp_pl As Diamond.Common.Objects.Policy.PolicyLevel = DiamondPolicyLevelForLOB(pp.LOB)
                                If pp_pl IsNot Nothing AndAlso pp_pl.LossHistories IsNot Nothing AndAlso pp_pl.LossHistories.Count > 0 Then
                                    If stopOnceAnyAreFound = True Then
                                        For Each lh As Diamond.Common.Objects.Policy.LossHistory In pp_pl.LossHistories
                                            If lh IsNot Nothing Then
                                                AddDiamondLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                Exit For
                                            End If
                                        Next
                                    Else
                                        AddDiamondLossHistoriesToList_FromInsList(pp_pl.LossHistories, lhs, cloneLHs:=cloneLossHistories)
                                    End If
                                    hasLH = True
                                End If

                                If hasLH = False OrElse stopOnceAnyAreFound = False Then
                                    Dim pp_rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(pp.LOB)

                                    If pp_rl IsNot Nothing Then
                                        If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso pp_rl.Drivers IsNot Nothing AndAlso pp_rl.Drivers.Count > 0 Then
                                            For Each d As Diamond.Common.Objects.Policy.Driver In pp_rl.Drivers
                                                If d IsNot Nothing Then
                                                    If d.LossHistories IsNot Nothing AndAlso d.LossHistories.Count > 0 Then
                                                        If stopOnceAnyAreFound = True Then
                                                            For Each lh As Diamond.Common.Objects.Policy.LossHistory In d.LossHistories
                                                                If lh IsNot Nothing Then
                                                                    AddDiamondLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                                    Exit For
                                                                End If
                                                            Next
                                                        Else
                                                            AddDiamondLossHistoriesToList_FromInsList(d.LossHistories, lhs, cloneLHs:=cloneLossHistories)
                                                        End If
                                                        hasLH = True
                                                        If stopOnceAnyAreFound = True Then
                                                            Exit For
                                                        End If
                                                    End If
                                                End If
                                            Next
                                        End If

                                        If (hasLH = False OrElse stopOnceAnyAreFound = False) AndAlso pp_rl.Applicants IsNot Nothing AndAlso pp_rl.Applicants.Count > 0 Then
                                            For Each a As Diamond.Common.Objects.Policy.Applicant In pp_rl.Applicants
                                                If a IsNot Nothing Then
                                                    If a.LossHistories IsNot Nothing AndAlso a.LossHistories.Count > 0 Then
                                                        If stopOnceAnyAreFound = True Then
                                                            For Each lh As Diamond.Common.Objects.Policy.LossHistory In a.LossHistories
                                                                If lh IsNot Nothing Then
                                                                    AddDiamondLossHistoryToList(lh, lhs, cloneLH:=cloneLossHistories)
                                                                    Exit For
                                                                End If
                                                            Next
                                                        Else
                                                            AddDiamondLossHistoriesToList_FromInsList(a.LossHistories, lhs, cloneLHs:=cloneLossHistories)
                                                        End If
                                                        hasLH = True
                                                        If stopOnceAnyAreFound = True Then
                                                            Exit For
                                                        End If
                                                    End If
                                                End If
                                            Next
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return lhs
        End Function
        Public Function DiamondViolationsFromAllLevels(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal stopOnceAnyAreFound As Boolean = False, Optional ByVal cloneViolations As Boolean = False) As List(Of Diamond.Common.Objects.Policy.AccidentViolation)
            Dim vs As List(Of Diamond.Common.Objects.Policy.AccidentViolation) = Nothing
            Dim hasV As Boolean = False

            If diaImage IsNot Nothing Then
                Dim rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForImage(diaImage)

                If (hasV = False OrElse stopOnceAnyAreFound = False) AndAlso rl IsNot Nothing AndAlso rl.Drivers IsNot Nothing AndAlso rl.Drivers.Count > 0 Then
                    For Each d As Diamond.Common.Objects.Policy.Driver In rl.Drivers
                        If d IsNot Nothing Then
                            If d.AccidentViolations IsNot Nothing AndAlso d.AccidentViolations.Count > 0 Then
                                If stopOnceAnyAreFound = True Then
                                    For Each v As Diamond.Common.Objects.Policy.AccidentViolation In d.AccidentViolations
                                        If v IsNot Nothing Then
                                            AddDiamondViolationToList(v, vs, cloneV:=cloneViolations)
                                            Exit For
                                        End If
                                    Next
                                Else
                                    AddDiamondViolationsToList_FromInsList(d.AccidentViolations, vs, cloneVs:=cloneViolations)
                                End If
                                hasV = True
                                If stopOnceAnyAreFound = True Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                End If

                If (hasV = False OrElse stopOnceAnyAreFound = False) AndAlso diaImage.PackageParts IsNot Nothing AndAlso diaImage.PackageParts.Count > 0 Then
                    For Each pp As Diamond.Common.Objects.Policy.PackagePart In diaImage.PackageParts
                        If pp IsNot Nothing Then
                            Dim pp_rl As Diamond.Common.Objects.Policy.RiskLevel = DiamondRiskLevelForLOB(pp.LOB)
                            If pp_rl IsNot Nothing Then
                                If pp_rl.Drivers IsNot Nothing AndAlso pp_rl.Drivers.Count > 0 Then
                                    For Each d As Diamond.Common.Objects.Policy.Driver In pp_rl.Drivers
                                        If d IsNot Nothing Then
                                            If d.AccidentViolations IsNot Nothing AndAlso d.AccidentViolations.Count > 0 Then
                                                If stopOnceAnyAreFound = True Then
                                                    For Each v As Diamond.Common.Objects.Policy.AccidentViolation In d.AccidentViolations
                                                        If v IsNot Nothing Then
                                                            AddDiamondViolationToList(v, vs, cloneV:=cloneViolations)
                                                            Exit For
                                                        End If
                                                    Next
                                                Else
                                                    AddDiamondViolationsToList_FromInsList(d.AccidentViolations, vs, cloneVs:=cloneViolations)
                                                End If
                                                hasV = True
                                                If stopOnceAnyAreFound = True Then
                                                    Exit For
                                                End If
                                            End If
                                        End If
                                    Next
                                End If
                            End If
                        End If
                    Next
                End If
            End If

            Return vs
        End Function
        'added 6/12/2020
        Public Function HasQuickQuoteAccidentViolationForSourceId(ByVal qqAccidentViolations As List(Of QuickQuoteAccidentViolation), ByVal sourceId As Integer) As Boolean
            Dim hasIt As Boolean = False

            If qqAccidentViolations IsNot Nothing AndAlso qqAccidentViolations.Count > 0 Then
                For Each lh As QuickQuoteAccidentViolation In qqAccidentViolations
                    If lh IsNot Nothing Then
                        If IntegerForString(lh.ViolationSourceId) = sourceId Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasQuickQuoteAccidentViolationForAnySourceIdInList(ByVal qqAccidentViolations As List(Of QuickQuoteAccidentViolation), ByVal sourceIds As List(Of Integer)) As Boolean
            Dim hasIt As Boolean = False

            If qqAccidentViolations IsNot Nothing AndAlso qqAccidentViolations.Count > 0 AndAlso sourceIds IsNot Nothing AndAlso sourceIds.Count > 0 Then
                For Each lh As QuickQuoteAccidentViolation In qqAccidentViolations
                    If lh IsNot Nothing Then
                        If sourceIds.Contains(IntegerForString(lh.ViolationSourceId)) = True Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasQuickQuoteAccidentViolationNotEqualToSourceId(ByVal qqAccidentViolations As List(Of QuickQuoteAccidentViolation), ByVal sourceId As Integer) As Boolean
            Dim hasIt As Boolean = False

            If qqAccidentViolations IsNot Nothing AndAlso qqAccidentViolations.Count > 0 Then
                For Each lh As QuickQuoteAccidentViolation In qqAccidentViolations
                    If lh IsNot Nothing Then
                        If IntegerForString(lh.ViolationSourceId) <> sourceId Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function HasQuickQuoteAccidentViolationNotEqualToAnySourceIdInList(ByVal qqAccidentViolations As List(Of QuickQuoteAccidentViolation), ByVal sourceIds As List(Of Integer)) As Boolean
            Dim hasIt As Boolean = False

            If qqAccidentViolations IsNot Nothing AndAlso qqAccidentViolations.Count > 0 AndAlso sourceIds IsNot Nothing AndAlso sourceIds.Count > 0 Then
                For Each lh As QuickQuoteAccidentViolation In qqAccidentViolations
                    If lh IsNot Nothing Then
                        If sourceIds.Contains(IntegerForString(lh.ViolationSourceId)) = False Then
                            hasIt = True
                            Exit For
                        End If
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function QuoteHasQuickQuoteAccidentViolationForSourceId(ByVal qqo As QuickQuoteObject, ByVal sourceId As Integer) As Boolean
            Dim hasIt As Boolean = False

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least qqo in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq IsNot Nothing Then
                                If msq.QuoteLevel = QuoteLevel.StateLevel AndAlso QuoteHasQuickQuoteAccidentViolationForSourceId(msq, sourceId) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                Else
                    If hasIt = False AndAlso qqo.VersionAndLobInfo.Drivers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Drivers.Count > 0 Then
                        For Each d As QuickQuoteDriver In qqo.VersionAndLobInfo.Drivers
                            If d IsNot Nothing Then
                                If HasQuickQuoteAccidentViolationForSourceId(d.AccidentViolations, sourceId) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return hasIt
        End Function
        Public Function QuoteHasQuickQuoteAccidentViolationForAnySourceIdInList(ByVal qqo As QuickQuoteObject, ByVal sourceIds As List(Of Integer)) As Boolean
            Dim hasIt As Boolean = False

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least qqo in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq IsNot Nothing Then
                                If msq.QuoteLevel = QuoteLevel.StateLevel AndAlso QuoteHasQuickQuoteAccidentViolationForAnySourceIdInList(msq, sourceIds) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                Else
                    If hasIt = False AndAlso qqo.VersionAndLobInfo.Drivers IsNot Nothing AndAlso qqo.VersionAndLobInfo.Drivers.Count > 0 Then
                        For Each d As QuickQuoteDriver In qqo.VersionAndLobInfo.Drivers
                            If d IsNot Nothing Then
                                If HasQuickQuoteAccidentViolationForAnySourceIdInList(d.AccidentViolations, sourceIds) = True Then
                                    hasIt = True
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                End If
            End If

            Return hasIt
        End Function
        'added 6/15/2020
        Public Shared Function NewBusiness_CLUEProperty_AssignUnassignedLossesToPH1Applicant() As Boolean
            Dim doIt As Boolean = False 'default to False; key required to turn to True

            Dim strDoIt As String = configAppSettingValueAsString("VR_NewBusiness_CLUEProperty_AssignUnassignedLossesToPH1Applicant")
            If String.IsNullOrWhiteSpace(strDoIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strDoIt) = "YES" OrElse qqHelper.BitToBoolean(strDoIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    doIt = True
                Else
                    doIt = False 'redundant
                End If
            End If

            Return doIt
        End Function

        'added 6/17/2020
        Public Function QuickQuoteLossHistorySurchargeList(ByVal qqLossHists As List(Of QuickQuoteLossHistoryRecord)) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            If qqLossHists IsNot Nothing AndAlso qqLossHists.Count > 0 Then
                For Each ql As QuickQuoteLossHistoryRecord In qqLossHists
                    If ql IsNot Nothing Then
                        UpdateIntegerKeyCountInList(lst, IntegerForString(ql.LossHistorySurchargeId))
                    End If
                Next
            End If

            Return lst
        End Function
        Public Function DiamondLossHistorySurchargeList(ByVal diaLossHists As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory)) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            If diaLossHists IsNot Nothing AndAlso diaLossHists.Count > 0 Then
                For Each dl As Diamond.Common.Objects.Policy.LossHistory In diaLossHists
                    If dl IsNot Nothing Then
                        UpdateIntegerKeyCountInList(lst, dl.LossHistorySurchargeId)
                    End If
                Next
            End If

            Return lst
        End Function
        Public Function DiamondLossHistorySurchargeList_GenericList(ByVal diaLossHists As List(Of Diamond.Common.Objects.Policy.LossHistory)) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            If diaLossHists IsNot Nothing AndAlso diaLossHists.Count > 0 Then
                For Each dl As Diamond.Common.Objects.Policy.LossHistory In diaLossHists
                    If dl IsNot Nothing Then
                        UpdateIntegerKeyCountInList(lst, dl.LossHistorySurchargeId)
                    End If
                Next
            End If

            Return lst
        End Function
        Public Shared Sub UpdateIntegerKeyCountInList(ByRef lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties), ByVal intKey As Integer)
            Dim keyObject As QuickQuoteGenericObjectWithTwoIntegerProperties = IntegerKeyCountObjectFromList(lst, intKey)
            If keyObject IsNot Nothing Then
                keyObject.Property2 = keyObject.Property2 + 1
            Else
                keyObject = New QuickQuoteGenericObjectWithTwoIntegerProperties
                keyObject.Property1 = intKey
                keyObject.Property2 = 1

                If lst Is Nothing Then
                    lst = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                End If
                lst.Add(keyObject)
            End If
        End Sub
        Public Shared Function IntegerKeyCountObjectFromList(ByRef lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties), ByVal intKey As Integer) As QuickQuoteGenericObjectWithTwoIntegerProperties
            Dim keyObject As QuickQuoteGenericObjectWithTwoIntegerProperties = Nothing

            If lst IsNot Nothing AndAlso lst.Count > 0 Then
                For Each o As QuickQuoteGenericObjectWithTwoIntegerProperties In lst
                    If o IsNot Nothing AndAlso o.Property1 = intKey Then
                        keyObject = o
                        Exit For
                    End If
                Next
            End If

            Return keyObject
        End Function
        Public Shared Function TwoIntegerPropertyObjectListsMatch(ByVal lst1 As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties), ByVal lst2 As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)) As Boolean
            Dim isMatch As Boolean = False

            Dim lst1Count As Integer = 0
            Dim lst2Count As Integer = 0

            If lst1 IsNot Nothing Then
                lst1Count = lst1.Count
            End If
            If lst2 IsNot Nothing Then
                lst2Count = lst2.Count
            End If

            If lst1Count = lst2Count Then
                isMatch = True
                If lst1Count > 0 Then
                    Dim invalidObjectCount As Integer = 0
                    For Each o As QuickQuoteGenericObjectWithTwoIntegerProperties In lst1
                        If o IsNot Nothing Then
                            Dim oOtherList As QuickQuoteGenericObjectWithTwoIntegerProperties = IntegerKeyCountObjectFromList(lst2, o.Property1)
                            If oOtherList IsNot Nothing AndAlso oOtherList.Property2 = o.Property2 Then
                                'okay
                            Else
                                isMatch = False
                                Exit For
                            End If
                        Else
                            invalidObjectCount += 1
                        End If
                    Next
                    If isMatch = True AndAlso invalidObjectCount > 0 Then
                        Dim invalidObjectCountLst2 As Integer = 0
                        For Each oOther As QuickQuoteGenericObjectWithTwoIntegerProperties In lst2
                            If oOther Is Nothing Then
                                invalidObjectCountLst2 += 1
                            End If
                        Next
                        If invalidObjectCountLst2 <> invalidObjectCount Then
                            isMatch = False
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Function QuickQuoteAndDiamondLossHistorySurchargeListsMatch(ByVal qqLossHists As List(Of QuickQuoteLossHistoryRecord), ByVal diaLossHists As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory)) As Boolean
            Dim isMatch As Boolean = False

            Dim qqLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = QuickQuoteLossHistorySurchargeList(qqLossHists)
            Dim diaLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = DiamondLossHistorySurchargeList(diaLossHists)
            isMatch = TwoIntegerPropertyObjectListsMatch(qqLst, diaLst)

            Return isMatch
        End Function
        Public Function QuickQuoteAndDiamondLossHistorySurchargeListsMatch_GenericDiamondList(ByVal qqLossHists As List(Of QuickQuoteLossHistoryRecord), ByVal diaLossHists As List(Of Diamond.Common.Objects.Policy.LossHistory)) As Boolean
            Dim isMatch As Boolean = False

            Dim qqLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = QuickQuoteLossHistorySurchargeList(qqLossHists)
            Dim diaLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = DiamondLossHistorySurchargeList_GenericList(diaLossHists)
            isMatch = TwoIntegerPropertyObjectListsMatch(qqLst, diaLst)

            Return isMatch
        End Function
        Public Function QuickQuoteViolationSurchargeList(ByVal qqViolations As List(Of QuickQuoteAccidentViolation)) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            If qqViolations IsNot Nothing AndAlso qqViolations.Count > 0 Then
                For Each qv As QuickQuoteAccidentViolation In qqViolations
                    If qv IsNot Nothing Then
                        UpdateIntegerKeyCountInList(lst, IntegerForString(qv.AccidentSurchargeTypeId))
                    End If
                Next
            End If

            Return lst
        End Function
        Public Function DiamondViolationSurchargeList(ByVal diaViolations As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.AccidentViolation)) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            If diaViolations IsNot Nothing AndAlso diaViolations.Count > 0 Then
                For Each dv As Diamond.Common.Objects.Policy.AccidentViolation In diaViolations
                    If dv IsNot Nothing Then
                        UpdateIntegerKeyCountInList(lst, dv.AccidentSurchargeTypeId)
                    End If
                Next
            End If

            Return lst
        End Function
        Public Function DiamondViolationSurchargeList_GenericList(ByVal diaViolations As List(Of Diamond.Common.Objects.Policy.AccidentViolation)) As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
            Dim lst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing

            If diaViolations IsNot Nothing AndAlso diaViolations.Count > 0 Then
                For Each dv As Diamond.Common.Objects.Policy.AccidentViolation In diaViolations
                    If dv IsNot Nothing Then
                        UpdateIntegerKeyCountInList(lst, dv.AccidentSurchargeTypeId)
                    End If
                Next
            End If

            Return lst
        End Function
        Public Function QuickQuoteAndDiamondViolationSurchargeListsMatch(ByVal qqViolations As List(Of QuickQuoteAccidentViolation), ByVal diaViolations As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.AccidentViolation)) As Boolean
            Dim isMatch As Boolean = False

            Dim qqLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = QuickQuoteViolationSurchargeList(qqViolations)
            Dim diaLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = DiamondViolationSurchargeList(diaViolations)
            isMatch = TwoIntegerPropertyObjectListsMatch(qqLst, diaLst)

            Return isMatch
        End Function
        Public Function QuickQuoteAndDiamondViolationSurchargeListsMatch_GenericDiamondList(ByVal qqViolations As List(Of QuickQuoteAccidentViolation), ByVal diaViolations As List(Of Diamond.Common.Objects.Policy.AccidentViolation)) As Boolean
            Dim isMatch As Boolean = False

            Dim qqLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = QuickQuoteViolationSurchargeList(qqViolations)
            Dim diaLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = DiamondViolationSurchargeList_GenericList(diaViolations)
            isMatch = TwoIntegerPropertyObjectListsMatch(qqLst, diaLst)

            Return isMatch
        End Function
        Public Function DiamondUnassignedLossHistoryCount(ByVal diaLossHistories As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.LossHistory)) As Integer
            Dim cnt As Integer = 0

            If diaLossHistories IsNot Nothing AndAlso diaLossHistories.Count > 0 Then
                For Each lh As Diamond.Common.Objects.Policy.LossHistory In diaLossHistories
                    If lh IsNot Nothing Then
                        If IsValidDiamondNum(lh.UnitNum) = False Then
                            cnt += 1
                        End If
                    End If
                Next
            End If
            Return cnt
        End Function
        Public Function QuickQuoteUnassignedLossHistoryCount(ByVal qqo As QuickQuoteObject) As Integer
            Dim cnt As Integer = 0

            If qqo IsNot Nothing Then
                If qqo.QuoteLevel = QuoteLevel.TopLevel AndAlso qqo.HasMultipleQuoteStates = True Then
                    Dim multiStateQuotes As List(Of QuickQuote.CommonObjects.QuickQuoteObject) = MultiStateQuickQuoteObjects(qqo) 'should always return at least Me in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
                    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
                        For Each msq As QuickQuoteObject In multiStateQuotes
                            If msq.QuoteLevel = QuoteLevel.StateLevel Then
                                Dim stateUnassignedLossHistoryCount As Integer = QuickQuoteUnassignedLossHistoryCount(msq)
                                If stateUnassignedLossHistoryCount > 0 Then
                                    cnt += stateUnassignedLossHistoryCount
                                End If
                            End If
                        Next
                    End If
                Else
                    If qqo.VersionAndLobInfo.LossHistoryRecords IsNot Nothing AndAlso qqo.VersionAndLobInfo.LossHistoryRecords.Count > 0 Then
                        cnt += qqo.VersionAndLobInfo.LossHistoryRecords.Count
                    End If
                End If
            End If

            Return cnt
        End Function

        'added 11/11/2020 (Interoperability)
        Public Shared Function AllowVRToUpdateFromDiamond_Interoperability(Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim allowIt As Boolean = False 'default to False; key required to turn to True

            'Dim strAllowIt As String = configAppSettingValueAsString("AllowVRToUpdateFromDiamond_Interoperability")
            Dim strAllowIt As String = ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation("AllowVRToUpdateFromDiamond_Interoperability", lobType:=lobType)
            If String.IsNullOrWhiteSpace(strAllowIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strAllowIt) = "YES" OrElse qqHelper.BitToBoolean(strAllowIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    allowIt = True
                Else
                    allowIt = False 'redundant
                End If
            End If

            Return allowIt
        End Function
        'Public Shared Function ConfigAppSettingValueAsString_WithOptionalThreeLetterLobAppreviation(ByVal keyName As String, Optional ByVal checkForNumeric As Boolean = False, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As String

        'added 12/11/2020
        Public Shared Function DiamondClass(ByVal assemblyName As String, ByVal className As String) As Object
            Dim diaClass As Object = Nothing

            If String.IsNullOrWhiteSpace(assemblyName) = False AndAlso String.IsNullOrWhiteSpace(className) = False Then
                diaClass = Diamond.Common.Utility.ObjectCreator.CreateClassDynamically(assemblyName, className, False)
            End If

            Return diaClass
        End Function
        Public Shared Sub DiamondProductExtensionCleanup()
            Using instance As New Diamond.UI.Utility.ProductExtension()
                'instance.ClearPreviousDeploymentAssemblies()
            End Using
        End Sub

        'added 12/23/2020
        Public Function IsDiaAdditionalInterestNewToImage(ByVal diaAI As Diamond.Common.Objects.Policy.AdditionalInterest, ByVal diaImage As Diamond.Common.Objects.Policy.Image) As Boolean
            Dim isNew As Boolean = False

            If diaAI IsNot Nothing AndAlso diaImage IsNot Nothing Then
                isNew = IsDiaAdditionalInterestNewToImage(diaAI, diaImage.TransactionEffectiveDate.ToString, diaImage.EffectiveDate.ToString, diaImage.PCAddedDate.ToString, diaImage.PolicyImageNum, diaImage.AddedDate.ToString)
            End If

            Return isNew
        End Function
        Public Function IsDiaAdditionalInterestNewToImage(ByVal diaAI As Diamond.Common.Objects.Policy.AdditionalInterest, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As Integer, ByVal imageInsertSystemDate As String) As Boolean
            Dim isNew As Boolean = False

            If diaAI IsNot Nothing Then
                If IsValidDiamondNum(diaAI.AdditionalInterestNum, zeroIsOkay:=False) = False Then
                    isNew = True
                ElseIf diaAI.AddedImageNum > 0 AndAlso imageNum > 0 Then
                    If diaAI.AddedImageNum = imageNum Then
                        If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaAI.PCAddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True Then
                            If CDate(diaAI.PCAddedDate.ToString) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                'was inserted at least 5 seconds after image, so it should be new
                                isNew = True
                            ElseIf CDate(diaAI.PCAddedDate.ToString) <= DateAdd(DateInterval.Second, 1, CDate(imageInsertDate)) Then
                                'was inserted within 1 second after image; assume it was pre-existing
                            ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaAI.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaAI.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                                'definitely not new
                            Else
                                isNew = True
                            End If
                        ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaAI.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaAI.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                            'definitely not new
                        Else
                            isNew = True
                        End If
                    End If
                ElseIf IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaAI.PCAddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True Then
                    If CDate(diaAI.PCAddedDate.ToString) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                        'was inserted at least 5 seconds after image, so it should be new
                        isNew = True
                    End If
                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diaAI.AddedDate.ToString, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(diaAI.AddedDate.ToString) < CDate(imageInsertSystemDate) Then
                    'definitely not new
                Else
                    'not enough info; assume New since anything Saved to Diamond should have this info
                    isNew = True
                End If
            End If

            Return isNew
        End Function
        'Public Function IsQuickQuoteAdditionalInterestNewToImage(ByVal qqAI As QuickQuoteAdditionalInterest, ByVal imageEffectiveDate As String, ByVal termEffectiveDate As String, ByVal imageInsertDate As String, ByVal imageNum As String, ByVal imageInsertSystemDate As String) As Boolean
        '    Dim isNew As Boolean = False

        '    If qqAI IsNot Nothing Then
        '        If qqAI.HasValidAdditionalInterestNum() = False Then
        '            isNew = True
        '        ElseIf IsPositiveIntegerString(qqAI.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
        '            If CInt(qqAI.AddedImageNum) = CInt(imageNum) Then
        '                If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAI.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
        '                    If CDate(qqAI.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
        '                        'was inserted at least 5 seconds after image, so it should be new
        '                        isNew = True
        '                    ElseIf CDate(qqAI.PCAdded_Date) <= DateAdd(DateInterval.Second, 1, CDate(imageInsertDate)) Then
        '                        'was inserted within 1 second after image; assume it was pre-existing
        '                    ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAI.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqAI.AddedDate) < CDate(imageInsertSystemDate) Then
        '                        'definitely not new
        '                    Else
        '                        isNew = True
        '                    End If
        '                ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAI.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqAI.AddedDate) < CDate(imageInsertSystemDate) Then
        '                    'definitely not new
        '                Else
        '                    isNew = True
        '                End If
        '            End If
        '        ElseIf IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAI.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
        '            If CDate(qqAI.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
        '                'was inserted at least 5 seconds after image, so it should be new
        '                isNew = True
        '            End If
        '        ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(qqAI.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqAI.AddedDate) < CDate(imageInsertSystemDate) Then
        '            'definitely not new
        '        Else
        '            'not enough info; assume New since anything Saved to Diamond should have this info
        '            isNew = True
        '        End If
        '    End If

        '    Return isNew
        'End Function
        'Public Function IsQuickQuoteAdditionalInterestNewToImage(ByVal qqAI As QuickQuoteAdditionalInterest, ByVal qqo As QuickQuoteObject) As Boolean
        '    Dim isNew As Boolean = False

        '    If qqAI IsNot Nothing AndAlso qqo IsNot Nothing Then
        '        isNew = IsQuickQuoteAdditionalInterestNewToImage(qqAI, qqo.TransactionEffectiveDate, qqo.EffectiveDate, qqo.PCAdded_Date, qqo.PolicyImageNum, qqo.AddedDate)
        '    End If

        '    Return isNew
        'End Function
        '5/13/2021: removed prev methods and created new ones
        Public Function IsQuickQuoteAdditionalInterestNewToImage(ByVal qqAI As QuickQuoteAdditionalInterest, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isNew As Boolean = False

            If qqAI IsNot Nothing AndAlso qqo IsNot Nothing Then
                Dim imageEffectiveDate As String = qqo.TransactionEffectiveDate
                Dim termEffectiveDate As String = qqo.EffectiveDate
                Dim imageInsertDate As String = qqo.PCAdded_Date
                Dim imageNum As String = qqo.PolicyImageNum
                Dim imageInsertSystemDate As String = qqo.AddedDate

                Dim aiToUse As QuickQuoteAdditionalInterest = Nothing
                If qqAI.OriginalSourceAI IsNot Nothing AndAlso (qqAI.OriginalSourceAI.HasValidAdditionalInterestNum() = True OrElse qqAI.HasValidAdditionalInterestNum() = False) Then '2nd part may not be needed
                    aiToUse = qqAI.OriginalSourceAI
                Else
                    aiToUse = qqAI
                End If

                If aiToUse.HasValidAdditionalInterestNum() = False Then
                    isNew = True
                ElseIf IsPositiveIntegerString(aiToUse.AddedImageNum) = True AndAlso IsPositiveIntegerString(imageNum) = True Then
                    If CInt(aiToUse.AddedImageNum) = CInt(imageNum) Then
                        If IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(aiToUse.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                            If CDate(aiToUse.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                                'was inserted at least 5 seconds after image, so it should be new
                                isNew = True
                            ElseIf CDate(aiToUse.PCAdded_Date) <= DateAdd(DateInterval.Second, 1, CDate(imageInsertDate)) Then
                                'was inserted within 1 second after image; assume it was pre-existing
                            ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(aiToUse.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(aiToUse.AddedDate) < CDate(imageInsertSystemDate) Then
                                'definitely not new
                            Else
                                isNew = True
                            End If
                        ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(aiToUse.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(aiToUse.AddedDate) < CDate(imageInsertSystemDate) Then
                            'definitely not new
                        Else
                            isNew = True
                        End If
                    End If
                Else
                    Dim returnValueCanBeConfirmed As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.No
                    Dim fromVR As Boolean = False
                    Dim aiInsertedAfterQQ As Boolean = False
                    Dim aiInsertedBeforeOrAtSameTimeAsQQ As Boolean = False
                    If IsValidDateString(qqo.Database_QuickQuote_Inserted, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(aiToUse.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                        'doesn't even make since to check unless there are valid insert dates for Diamond and QQ
                        fromVR = QuickQuoteImageDefinitelyOrLikelyOriginatedInVelociRater(qqo, returnValueCanBeConfirmed:=returnValueCanBeConfirmed)
                        If fromVR = True Then
                            If CDate(aiToUse.PCAdded_Date) > CDate(qqo.Database_QuickQuote_Inserted) Then
                                aiInsertedAfterQQ = True
                            Else
                                aiInsertedBeforeOrAtSameTimeAsQQ = True
                            End If
                        End If
                    End If
                    If fromVR = True AndAlso returnValueCanBeConfirmed = QuickQuoteYesNoMaybeType.Yes Then
                        If aiInsertedAfterQQ = True Then
                            'AI was inserted after VR record, which should've been right after the Diamond insert
                            isNew = True
                        End If
                    ElseIf IsValidDateString(imageInsertDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(aiToUse.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True Then
                        If CDate(aiToUse.PCAdded_Date) > DateAdd(DateInterval.Second, 5, CDate(imageInsertDate)) Then
                            'was inserted at least 5 seconds after image, so it should be new... have seen some pre-existing AIs that weren't inserted until 11+ seconds after the image insert
                            'isNew = True
                            Dim probablyNew As Boolean = True
                            If fromVR = True AndAlso aiInsertedBeforeOrAtSameTimeAsQQ = True Then
                                If returnValueCanBeConfirmed = QuickQuoteYesNoMaybeType.Maybe Then
                                    'we'll allow for Diamond to insert the pre-existing AI up to 60 seconds after the image is inserted
                                    If CDate(aiToUse.PCAdded_Date) <= DateAdd(DateInterval.Second, 120, CDate(imageInsertDate)) Then 'note: may need to adjust by LOB (i.e. CPP may take longer to insert everything for the image)
                                        probablyNew = False
                                    End If
                                Else
                                    'we'll allow for Diamond to insert the pre-existing AI up to 20 seconds after the image is inserted'note: may need to adjust by LOB (i.e. CPP may take longer to insert everything for the image)
                                    If CDate(aiToUse.PCAdded_Date) <= DateAdd(DateInterval.Second, 60, CDate(imageInsertDate)) Then
                                        probablyNew = False
                                    End If
                                End If
                            End If
                            If probablyNew = True Then
                                isNew = True
                            End If
                        End If
                    ElseIf IsValidDateString(imageInsertSystemDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(aiToUse.AddedDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(aiToUse.AddedDate) < CDate(imageInsertSystemDate) Then
                        'definitely not new
                    Else
                        'not enough info; assume New since anything Saved to Diamond should have this info
                        isNew = True
                    End If
                End If

                'added 6/28/2021 to handle for scenario where we assign a "copied" AI to a separate vehicle and unassign it from the original vehicle on the same Save, and the Diamond Save fails, resulting in a guid for aiNum
                If isNew = True AndAlso qqAI.OriginalSourceAI IsNot Nothing AndAlso qqAI.OriginalSourceAI.HasValidAdditionalInterestNum() = False AndAlso QuickQuoteImageDefinitelyOrLikelyOriginatedInVelociRater(qqo) = True Then
                    isNew = False
                End If
            End If

            Return isNew
        End Function
        Public Shared Function ConfigAppSettingValueAsString_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(ByVal keyName As String, Optional ByVal checkForNumeric As Boolean = False, Optional ByVal tranType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As String
            Dim val As String = ""

            If String.IsNullOrWhiteSpace(keyName) = False Then
                Dim otherKeyNamesToTry As List(Of String) = Nothing

                Dim tranText As String = ""
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteTransactionType), tranType) = True AndAlso tranType <> QuickQuoteObject.QuickQuoteTransactionType.None Then
                    Dim tranTypeText As String = StringForQuoteTransactionType(tranType)
                    If String.IsNullOrWhiteSpace(tranTypeText) = False Then
                        tranText &= "_" & tranTypeText
                    End If
                End If

                Dim lobText As String = ""
                If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lobType) = True AndAlso lobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    Dim lobAbbrev As String = QuickQuote_ThreeLetterAbbreviation_ForLOB(lobType)
                    If String.IsNullOrWhiteSpace(lobAbbrev) = False Then
                        lobText = "_" & lobAbbrev
                    End If
                End If

                If String.IsNullOrWhiteSpace(tranText) = False OrElse String.IsNullOrWhiteSpace(lobText) = False Then
                    otherKeyNamesToTry = New List(Of String)

                    If String.IsNullOrWhiteSpace(tranText) = False AndAlso String.IsNullOrWhiteSpace(lobText) = False Then
                        otherKeyNamesToTry.Add(keyName & tranText & lobText)
                    End If
                    If String.IsNullOrWhiteSpace(tranText) = False Then
                        otherKeyNamesToTry.Add(keyName & tranText)
                    End If
                    If String.IsNullOrWhiteSpace(lobText) = False Then
                        otherKeyNamesToTry.Add(keyName & lobText)
                    End If

                    If otherKeyNamesToTry IsNot Nothing AndAlso otherKeyNamesToTry.Count > 0 Then
                        For Each kn As String In otherKeyNamesToTry
                            If String.IsNullOrWhiteSpace(kn) = False Then
                                val = configAppSettingValueAsString(kn, checkForNumeric:=checkForNumeric)
                                If String.IsNullOrWhiteSpace(val) = False Then
                                    Exit For
                                End If
                            End If
                        Next
                    End If
                End If

                If String.IsNullOrWhiteSpace(val) = True Then
                    val = configAppSettingValueAsString(keyName, checkForNumeric:=checkForNumeric)
                End If
            End If

            Return val
        End Function
        Public Shared Function StringForQuoteTransactionType(ByVal tranType As QuickQuoteObject.QuickQuoteTransactionType, Optional ByVal allowNone As Boolean = False) As String
            Dim strCat As String = ""

            If System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteTransactionType), tranType) = True AndAlso (allowNone = True OrElse tranType <> QuickQuoteObject.QuickQuoteTransactionType.None) Then
                strCat = System.Enum.GetName(GetType(QuickQuoteObject.QuickQuoteTransactionType), tranType)
            End If

            Return strCat
        End Function
        Public Shared Function OkayToAssumeQuickQuoteImageOriginatedFromVR_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(Optional ByVal tranType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = ConfigAppSettingValueAsString_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation("VR_OkayToAssumeQuickQuoteImageOriginatedFromVR", tranType:=tranType, lobType:=lobType)
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function QuickQuoteImageDefinitelyOrLikelyOriginatedInVelociRater(ByVal qqo As QuickQuoteObject, Optional ByRef returnValueCanBeConfirmed As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.No) As Boolean
            Dim fromVR As Boolean = False
            returnValueCanBeConfirmed = QuickQuoteYesNoMaybeType.No

            If qqo IsNot Nothing Then
                If qqo.Database_OriginatedInVR = True Then 'would just be set for NewBus right now, but maybe Endorsements in the near future
                    fromVR = True
                    returnValueCanBeConfirmed = QuickQuoteYesNoMaybeType.Yes
                Else
                    Select Case qqo.QuoteTransactionType
                        Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                            'cannot confirm right now (would at least need to start storing new flag in DiamondImageInfo table
                            Dim qqHelper As New QuickQuoteHelperClass
                            If qqHelper.IsValidDateString(qqo.PCAdded_Date, mustBeGreaterThanDefaultDate:=True) = True AndAlso qqHelper.IsValidDateString(qqo.Database_QuickQuote_Inserted, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(qqo.Database_QuickQuote_Inserted) > CDate(qqo.PCAdded_Date) AndAlso CDate(qqo.Database_QuickQuote_Inserted) <= DateAdd(DateInterval.Second, 10, CDate(qqo.PCAdded_Date)) Then 'note: may need to adjust by LOB (i.e. CPP may take longer to insert everything for the image)
                                'valid insert dates for Diamond and QQ; QQ is after Diamond (should always be the case when both are valid); QQ insert is within 10 seconds of the Diamond insert; note: may need to adjust by LOB (i.e. CPP may take longer to insert everything for the image)
                                fromVR = True
                                'seems likely but still cannot definitively confirm
                                returnValueCanBeConfirmed = QuickQuoteYesNoMaybeType.Maybe
                            Else
                                fromVR = OkayToAssumeQuickQuoteImageOriginatedFromVR_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=qqo.QuoteTransactionType, lobType:=qqo.LobType)
                            End If
                        Case QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage
                            'cannot confirm right now (would require storing new flag in DiamondImageInfo table for Endorsements, as well as cross-lookups to QuickQuote tables to determine; tranTypes other than NewBus and Endorsement could be confirmed as not originating in VR right now)

                        Case Else
                            'NewBus; should be able to confirm based on qqo.Database_OriginatedInVR checked above
                            returnValueCanBeConfirmed = QuickQuoteYesNoMaybeType.Yes
                    End Select
                End If
            End If

            Return fromVR
        End Function

        'added 5/14/2021
        Public Shared Function OkayToCopySourceAdditionalInterestsToTopLevelOnRetrieval_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(Optional ByVal tranType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = False 'default to False; key required to turn to True

            Dim strIsOkay As String = ConfigAppSettingValueAsString_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation("VR_OkayToCopySourceAdditionalInterestsToTopLevelOnRetrieval", tranType:=tranType, lobType:=lobType)
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToRemoveSourceAdditionalInterestsFromTopLevelOnSave_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(Optional ByVal tranType As QuickQuoteObject.QuickQuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.None, Optional ByVal lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None) As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = ConfigAppSettingValueAsString_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation("VR_OkayToRemoveSourceAdditionalInterestsFromTopLevelOnSave", tranType:=tranType, lobType:=lobType)
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Sub CopySourceAdditionalInterestsToTopLevel(ByRef qqo As QuickQuoteObject, Optional ByRef numberOfAIsCopied As Integer = 0, Optional ByVal resortListAfterAddingNew As QuickQuoteYesNoMaybeType = QuickQuoteYesNoMaybeType.Maybe)
            numberOfAIsCopied = 0
            If qqo IsNot Nothing Then
                Select Case qqo.LobType
                    'added other LOBs as needed
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto,
                            QuickQuoteObject.QuickQuoteLobType.CommercialBOP,
                            QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                        'okay to continue
                    Case Else
                        Exit Sub 'no need to continue if we haven't coded for the LOB yet
                End Select
                Dim aiListIds As List(Of Integer) = Nothing
                If qqo.AdditionalInterests IsNot Nothing AndAlso qqo.AdditionalInterests.Count > 0 Then
                    For Each ai As QuickQuoteAdditionalInterest In qqo.AdditionalInterests
                        If ai IsNot Nothing Then
                            AddUniqueIntegerToIntegerList(IntegerForString(ai.ListId), aiListIds, positiveOnly:=True)
                        End If
                    Next
                End If
                'note: add LOB-specific logic as needed (based on VR implementation)
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto Then
                    If qqo.Vehicles IsNot Nothing AndAlso qqo.Vehicles.Count > 0 Then
                        For Each v As QuickQuoteVehicle In qqo.Vehicles
                            If v IsNot Nothing AndAlso v.AdditionalInterests IsNot Nothing AndAlso v.AdditionalInterests.Count > 0 Then
                                ProcessAdditionalInterestListOnCopy(qqo, v.AdditionalInterests, aiListIds, numberOfAIsCopied)
                            End If
                        Next
                    End If
                End If

                'Copy Building Level
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                        For Each location As QuickQuoteLocation In qqo.Locations
                            If location.Buildings IsNot Nothing AndAlso location.Buildings.Count > 0 Then
                                For Each blding As QuickQuoteBuilding In location.Buildings
                                    If blding.AdditionalInterests IsNot Nothing AndAlso blding.AdditionalInterests.Count > 0 Then
                                        ProcessAdditionalInterestListOnCopy(qqo, blding.AdditionalInterests, aiListIds, numberOfAIsCopied)
                                    End If
                                Next
                            End If
                        Next
                    End If
                End If

                'Bring up Inland Marine AI's
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                    Dim qqh = New QuickQuoteHelperClass
                    Dim govStateQuote As QuickQuote.CommonObjects.QuickQuoteObject = qqh.GoverningStateQuote(qqo)

                    If govStateQuote IsNot Nothing AndAlso govStateQuote.CPP_Has_InlandMarine_PackagePart = True Then
                        If govStateQuote.BuildersRiskAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.BuildersRiskAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.ComputerAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.ComputerAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.ContractorsEquipmentScheduledCoverages IsNot Nothing AndAlso govStateQuote.ContractorsEquipmentScheduledCoverages.Count > 0 Then
                            For Each sc As QuickQuoteContractorsEquipmentScheduledCoverage In govStateQuote.ContractorsEquipmentScheduledCoverages
                                ProcessAdditionalInterestListOnCopy(qqo, sc.AdditionalInterests, aiListIds, numberOfAIsCopied)
                            Next
                        End If

                        If govStateQuote.FineArtsAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.FineArtsAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        'If govStateQuote.InstallationAdditionalInterests?.Count > 0 Then
                        '        ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.InstallationAdditionalInterests, aiListIds, numberOfAIsCopied)
                        'End If

                        If govStateQuote.MotorTruckCargoScheduledVehicleAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.MotorTruckCargoScheduledVehicleAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.MotorTruckCargoUnScheduledVehicleAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.MotorTruckCargoUnScheduledVehicleAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.OwnersCargoAnyOneOwnedVehicleAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.ScheduledPropertyAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.ScheduledPropertyAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.SignsAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.SignsAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                        If govStateQuote.TransportationCatastropheAdditionalInterests?.Count > 0 Then
                            ProcessAdditionalInterestListOnCopy(qqo, govStateQuote.TransportationCatastropheAdditionalInterests, aiListIds, numberOfAIsCopied)
                        End If

                    End If

                End If

                'added 5/20/2021
                If numberOfAIsCopied > 0 Then
                    Dim okayToSort As Boolean = False
                    Select Case resortListAfterAddingNew
                        Case QuickQuoteYesNoMaybeType.Yes
                            okayToSort = True
                        Case QuickQuoteYesNoMaybeType.No
                            okayToSort = False
                        Case Else 'Maybe
                            'we likely only need to sort if the AIs are being removed, which could cause the list order to get out of whack if we keep adding the copied ones to the end
                            okayToSort = OkayToRemoveSourceAdditionalInterestsFromTopLevelOnSave_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=qqo.QuoteTransactionType, lobType:=qqo.LobType)
                    End Select
                    If okayToSort = True Then
                        SortQuickQuoteAdditionalInterests(qqo.AdditionalInterests)
                    End If
                End If
            End If
        End Sub

        Public Sub ProcessAdditionalInterestListOnCopy(ByRef qqo As QuickQuoteObject, ByRef aiCollection As List(Of QuickQuoteAdditionalInterest), ByRef aiListIds As List(Of Integer), ByRef numberOfAIsCopied As Integer)
            If aiCollection IsNot Nothing Then
                For Each ai As QuickQuoteAdditionalInterest In aiCollection
                    ProcessAdditionalInterestOnCopy(qqo, ai, aiListIds, numberOfAIsCopied)
                Next
            End If
        End Sub
        Public Sub ProcessAdditionalInterestOnCopy(ByRef qqo As QuickQuoteObject, ByRef cai As QuickQuoteAdditionalInterest, ByRef aiListIds As List(Of Integer), ByRef numberOfAIsCopied As Integer)
            If cai IsNot Nothing AndAlso cai.HasValidAdditionalInterestListId = True Then
                If aiListIds Is Nothing OrElse aiListIds.Count = 0 OrElse aiListIds.Contains(IntegerForString(cai.ListId)) = False Then
                    Dim copiedAI As QuickQuoteAdditionalInterest = CloneObject(cai)
                    If copiedAI IsNot Nothing Then
                        If qqo.AdditionalInterests Is Nothing Then
                            qqo.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End If
                        copiedAI.Num = "" 'clearing out in case it came over from source AI
                        copiedAI.Set_OriginalSourceAI(cai) 'so we can identify these later
                        qqo.AdditionalInterests.Add(copiedAI)
                        AddUniqueIntegerToIntegerList(IntegerForString(cai.ListId), aiListIds, positiveOnly:=True)
                        numberOfAIsCopied += 1
                    End If
                Else 'added 6/24/2021
                    'aiListId is already in qqo.AdditionalInterests
                    If cai.HasValidAdditionalInterestNum() = True AndAlso qqo.AdditionalInterests IsNot Nothing AndAlso qqo.AdditionalInterests.Count > 0 Then
                        'look for one w/ OriginalSourceAI that may need to be updated
                        Dim aiToCheck As QuickQuoteAdditionalInterest = QuickQuoteAdditionalInterestForListId(qqo.AdditionalInterests, cai.ListId, cloneAI:=False, returnNewIfNothing:=False)
                        If aiToCheck IsNot Nothing AndAlso aiToCheck.OriginalSourceAI IsNot Nothing AndAlso (aiToCheck.OriginalSourceAI.HasValidAdditionalInterestNum() = False OrElse IntegerForString(cai.Num) < IntegerForString(aiToCheck.OriginalSourceAI.Num)) Then
                            'could try to replace only originalSourceAI; not sure if that would inadvertently make the original one the same as this one (easier but riskier option)
                            'aiToCheck.Set_OriginalSourceAI(vai)

                            'or could just remove from list and re-add w/ new info (probably the safer option)
                            Dim currIndex As Integer = qqo.AdditionalInterests.IndexOf(aiToCheck)
                            If currIndex >= 0 Then
                                Dim copiedAI As QuickQuoteAdditionalInterest = CloneObject(cai)
                                If copiedAI IsNot Nothing Then
                                    qqo.AdditionalInterests.RemoveAt(currIndex)

                                    copiedAI.Num = "" 'clearing out in case it came over from source AI
                                    copiedAI.Set_OriginalSourceAI(cai) 'so we can identify these later
                                    qqo.AdditionalInterests.Insert(currIndex, copiedAI)
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub


        Public Sub RemoveSourceAdditionalInterestsFromTopLevel(ByRef qqo As QuickQuoteObject, Optional ByRef numberOfAIsRemoved As Integer = 0)
            numberOfAIsRemoved = 0
            If qqo IsNot Nothing Then
                If qqo.AdditionalInterests IsNot Nothing AndAlso qqo.AdditionalInterests.Count > 0 Then
                    Dim aiRemoveList As List(Of Integer) = Nothing
                    Dim aiCount As Integer = 0
                    For Each ai As QuickQuoteAdditionalInterest In qqo.AdditionalInterests
                        aiCount += 1
                        If ai IsNot Nothing AndAlso ai.OriginalSourceAI IsNot Nothing Then
                            AddIntegerToIntegerList(aiCount - 1, aiRemoveList, positiveOnly:=False)
                        End If
                    Next
                    If aiRemoveList IsNot Nothing AndAlso aiRemoveList.Count > 0 Then
                        RemoveQuickQuoteAdditionalInterestsByIndex(qqo.AdditionalInterests, aiRemoveList)
                        numberOfAIsRemoved = aiRemoveList.Count
                    End If
                End If
            End If
        End Sub
        'added 5/20/2021
        Protected Friend Sub SortQuickQuoteAdditionalInterests(ByRef aiList As List(Of QuickQuoteAdditionalInterest))
            If aiList IsNot Nothing AndAlso aiList.Count > 0 Then
                Dim aiCounter As Integer = 0
                For Each ai As QuickQuoteAdditionalInterest In aiList
                    If ai IsNot Nothing Then
                        aiCounter += 1
                        ai.Set_ListPosition(aiCounter)
                    End If
                Next
                aiList.Sort(New QuickQuoteAdditionalInterestComparer_ByListPositionOrCopiedNum)
            End If
        End Sub
        Public Sub RemoveSpecificQuickQuoteAdditionalInterestFromVehicles(ByRef vehs As List(Of QuickQuoteVehicle), ByVal aiListId As Integer, Optional ByRef removedResults As List(Of QuickQuoteVehicleAndAdditionalInterests) = Nothing)
            'removedResults = Nothing
            'If vehs IsNot Nothing AndAlso vehs.Count > 0 Then
            '    For Each veh As QuickQuoteVehicle In vehs
            '        If veh IsNot Nothing AndAlso veh.AdditionalInterests IsNot Nothing AndAlso veh.AdditionalInterests.Count > 0 Then
            '            'Dim vehAiIndexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(veh.AdditionalInterests, aiListId.ToString)
            '            'If vehAiIndexes IsNot Nothing AndAlso vehAiIndexes.Count > 0 Then
            '            '    Dim vehAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = QuickQuoteAdditionalInterestsForIndexes(veh.AdditionalInterests, vehAiIndexes)
            '            '    If vehAdditionalInterests IsNot Nothing AndAlso vehAdditionalInterests.Count > 0 Then
            '            '        If removedResults Is Nothing Then
            '            '            removedResults = New List(Of QuickQuoteVehicleAndAdditionalInterests)
            '            '        End If
            '            '        Dim vehAndAIs As New QuickQuoteVehicleAndAdditionalInterests
            '            '        With vehAndAIs
            '            '            .Vehicle = veh
            '            '            .AdditionalInterests = vehAdditionalInterests
            '            '        End With
            '            '        removedResults.Add(vehAndAIs)
            '            '        RemoveQuickQuoteAdditionalInterestsByIndex(veh.AdditionalInterests, vehAiIndexes)
            '            '    End If
            '            'End If
            '            Dim vehAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing
            '            RemoveSpecificQuickQuoteAdditionalInterestFromList(veh.AdditionalInterests, aiListId, removedAIs:=vehAdditionalInterests)
            '            If vehAdditionalInterests IsNot Nothing AndAlso vehAdditionalInterests.Count > 0 Then
            '                If removedResults Is Nothing Then
            '                    removedResults = New List(Of QuickQuoteVehicleAndAdditionalInterests)
            '                End If
            '                Dim vehAndAIs As New QuickQuoteVehicleAndAdditionalInterests
            '                With vehAndAIs
            '                    .Vehicle = veh
            '                    .AdditionalInterests = vehAdditionalInterests
            '                End With
            '                removedResults.Add(vehAndAIs)
            '            End If
            '        End If
            '    Next
            'End If
            'updated 5/25/2021 to use new method
            IdentifySpecificQuickQuoteAdditionalInterestFromVehicles(vehs, aiListId, identifiedResults:=removedResults, shouldRemove:=True)
        End Sub
        'added 5/25/2021
        Public Sub IdentifySpecificQuickQuoteAdditionalInterestFromVehicles(ByRef vehs As List(Of QuickQuoteVehicle), ByVal aiListId As Integer, Optional ByRef identifiedResults As List(Of QuickQuoteVehicleAndAdditionalInterests) = Nothing, Optional ByVal shouldRemove As Boolean = False)
            identifiedResults = Nothing
            If vehs IsNot Nothing AndAlso vehs.Count > 0 Then
                For Each veh As QuickQuoteVehicle In vehs
                    If veh IsNot Nothing AndAlso veh.AdditionalInterests IsNot Nothing AndAlso veh.AdditionalInterests.Count > 0 Then
                        Dim vehAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing
                        IdentifySpecificQuickQuoteAdditionalInterestFromList(veh.AdditionalInterests, aiListId, identifiedAIs:=vehAdditionalInterests, shouldRemove:=shouldRemove)
                        If vehAdditionalInterests IsNot Nothing AndAlso vehAdditionalInterests.Count > 0 Then
                            If identifiedResults Is Nothing Then
                                identifiedResults = New List(Of QuickQuoteVehicleAndAdditionalInterests)
                            End If
                            Dim vehAndAIs As New QuickQuoteVehicleAndAdditionalInterests
                            With vehAndAIs
                                .Vehicle = veh
                                .AdditionalInterests = vehAdditionalInterests
                            End With
                            identifiedResults.Add(vehAndAIs)
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub RemoveSpecificQuickQuoteAdditionalInterestFromLocations(ByRef locs As List(Of QuickQuoteLocation), ByVal aiListId As Integer, Optional ByRef removedResults As List(Of QuickQuoteLocationAndAdditionalInterests) = Nothing)
            'removedResults = Nothing
            'If locs IsNot Nothing AndAlso locs.Count > 0 Then
            '    For Each loc As QuickQuoteLocation In locs
            '        If loc IsNot Nothing AndAlso loc.AdditionalInterests IsNot Nothing AndAlso loc.AdditionalInterests.Count > 0 Then
            '            'Dim locAiIndexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(loc.AdditionalInterests, aiListId.ToString)
            '            'If locAiIndexes IsNot Nothing AndAlso locAiIndexes.Count > 0 Then
            '            '    Dim locAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = QuickQuoteAdditionalInterestsForIndexes(loc.AdditionalInterests, locAiIndexes)
            '            '    If locAdditionalInterests IsNot Nothing AndAlso locAdditionalInterests.Count > 0 Then
            '            '        If removedResults Is Nothing Then
            '            '            removedResults = New List(Of QuickQuoteLocationAndAdditionalInterests)
            '            '        End If
            '            '        Dim locAndAIs As New QuickQuoteLocationAndAdditionalInterests
            '            '        With locAndAIs
            '            '            .Location = loc
            '            '            .AdditionalInterests = locAdditionalInterests
            '            '        End With
            '            '        removedResults.Add(locAndAIs)
            '            '        RemoveQuickQuoteAdditionalInterestsByIndex(loc.AdditionalInterests, locAiIndexes)
            '            '    End If
            '            'End If
            '            Dim locAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing
            '            RemoveSpecificQuickQuoteAdditionalInterestFromList(loc.AdditionalInterests, aiListId, removedAIs:=locAdditionalInterests)
            '            If locAdditionalInterests IsNot Nothing AndAlso locAdditionalInterests.Count > 0 Then
            '                If removedResults Is Nothing Then
            '                    removedResults = New List(Of QuickQuoteLocationAndAdditionalInterests)
            '                End If
            '                Dim locAndAIs As New QuickQuoteLocationAndAdditionalInterests
            '                With locAndAIs
            '                    .Location = loc
            '                    .AdditionalInterests = locAdditionalInterests
            '                End With
            '                removedResults.Add(locAndAIs)
            '            End If
            '        End If
            '    Next
            'End If
            'updated 5/25/2021 to use new method
            IdentifySpecificQuickQuoteAdditionalInterestFromLocations(locs, aiListId, identifiedResults:=removedResults, shouldRemove:=True)
        End Sub
        'added 5/25/2021
        Public Sub IdentifySpecificQuickQuoteAdditionalInterestFromLocations(ByRef locs As List(Of QuickQuoteLocation), ByVal aiListId As Integer, Optional ByRef identifiedResults As List(Of QuickQuoteLocationAndAdditionalInterests) = Nothing, Optional ByVal shouldRemove As Boolean = False)
            identifiedResults = Nothing
            If locs IsNot Nothing AndAlso locs.Count > 0 Then
                For Each loc As QuickQuoteLocation In locs
                    If loc IsNot Nothing AndAlso loc.AdditionalInterests IsNot Nothing AndAlso loc.AdditionalInterests.Count > 0 Then
                        Dim locAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing
                        IdentifySpecificQuickQuoteAdditionalInterestFromList(loc.AdditionalInterests, aiListId, identifiedAIs:=locAdditionalInterests, shouldRemove:=shouldRemove)
                        If locAdditionalInterests IsNot Nothing AndAlso locAdditionalInterests.Count > 0 Then
                            If identifiedResults Is Nothing Then
                                identifiedResults = New List(Of QuickQuoteLocationAndAdditionalInterests)
                            End If
                            Dim locAndAIs As New QuickQuoteLocationAndAdditionalInterests
                            With locAndAIs
                                .Location = loc
                                .AdditionalInterests = locAdditionalInterests
                            End With
                            identifiedResults.Add(locAndAIs)
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub RemoveSpecificQuickQuoteAdditionalInterestFromBuildings(ByRef bldgs As List(Of QuickQuoteBuilding), ByVal aiListId As Integer, Optional ByRef removedResults As List(Of QuickQuoteBuildingAndAdditionalInterests) = Nothing)
            'removedResults = Nothing
            'If bldgs IsNot Nothing AndAlso bldgs.Count > 0 Then
            '    For Each bldg As QuickQuoteBuilding In bldgs
            '        If bldg IsNot Nothing AndAlso bldg.AdditionalInterests IsNot Nothing AndAlso bldg.AdditionalInterests.Count > 0 Then
            '            'Dim bldgAiIndexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(bldg.AdditionalInterests, aiListId.ToString)
            '            'If bldgAiIndexes IsNot Nothing AndAlso bldgAiIndexes.Count > 0 Then
            '            '    Dim bldgAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = QuickQuoteAdditionalInterestsForIndexes(bldg.AdditionalInterests, bldgAiIndexes)
            '            '    If bldgAdditionalInterests IsNot Nothing AndAlso bldgAdditionalInterests.Count > 0 Then
            '            '        If removedResults Is Nothing Then
            '            '            removedResults = New List(Of QuickQuoteBuildingAndAdditionalInterests)
            '            '        End If
            '            '        Dim bldgAndAIs As New QuickQuoteBuildingAndAdditionalInterests
            '            '        With bldgAndAIs
            '            '            .Building = bldg
            '            '            .AdditionalInterests = bldgAdditionalInterests
            '            '        End With
            '            '        removedResults.Add(bldgAndAIs)
            '            '        RemoveQuickQuoteAdditionalInterestsByIndex(bldg.AdditionalInterests, bldgAiIndexes)
            '            '    End If
            '            'End If
            '            Dim bldgAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing
            '            RemoveSpecificQuickQuoteAdditionalInterestFromList(bldg.AdditionalInterests, aiListId, removedAIs:=bldgAdditionalInterests)
            '            If bldgAdditionalInterests IsNot Nothing AndAlso bldgAdditionalInterests.Count > 0 Then
            '                If removedResults Is Nothing Then
            '                    removedResults = New List(Of QuickQuoteBuildingAndAdditionalInterests)
            '                End If
            '                Dim bldgAndAIs As New QuickQuoteBuildingAndAdditionalInterests
            '                With bldgAndAIs
            '                    .Building = bldg
            '                    .AdditionalInterests = bldgAdditionalInterests
            '                End With
            '                removedResults.Add(bldgAndAIs)
            '            End If
            '        End If
            '    Next
            'End If
            'updated 5/25/2021 to use new method
            IdentifySpecificQuickQuoteAdditionalInterestFromBuildings(bldgs, aiListId, identifiedResults:=removedResults, shouldRemove:=True)
        End Sub
        Public Sub IdentifySpecificQuickQuoteAdditionalInterestFromBuildings(ByRef bldgs As List(Of QuickQuoteBuilding), ByVal aiListId As Integer, Optional ByRef identifiedResults As List(Of QuickQuoteBuildingAndAdditionalInterests) = Nothing, Optional ByVal shouldRemove As Boolean = False)
            identifiedResults = Nothing
            If bldgs IsNot Nothing AndAlso bldgs.Count > 0 Then
                For Each bldg As QuickQuoteBuilding In bldgs
                    If bldg IsNot Nothing AndAlso bldg.AdditionalInterests IsNot Nothing AndAlso bldg.AdditionalInterests.Count > 0 Then
                        Dim bldgAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing
                        IdentifySpecificQuickQuoteAdditionalInterestFromList(bldg.AdditionalInterests, aiListId, identifiedAIs:=bldgAdditionalInterests, shouldRemove:=shouldRemove)
                        If bldgAdditionalInterests IsNot Nothing AndAlso bldgAdditionalInterests.Count > 0 Then
                            If identifiedResults Is Nothing Then
                                identifiedResults = New List(Of QuickQuoteBuildingAndAdditionalInterests)
                            End If
                            Dim bldgAndAIs As New QuickQuoteBuildingAndAdditionalInterests
                            With bldgAndAIs
                                .Building = bldg
                                .AdditionalInterests = bldgAdditionalInterests
                            End With
                            identifiedResults.Add(bldgAndAIs)
                        End If
                    End If
                Next
            End If
        End Sub
        Public Sub RemoveSpecificQuickQuoteAdditionalInterestFromList(ByRef aiList As List(Of QuickQuoteAdditionalInterest), ByVal aiListId As Integer, Optional ByRef removedAIs As List(Of QuickQuoteAdditionalInterest) = Nothing)
            'removedAIs = Nothing
            'If aiList IsNot Nothing AndAlso aiList.Count > 0 Then
            '    Dim aiIndexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(aiList, aiListId.ToString)
            '    If aiIndexes IsNot Nothing AndAlso aiIndexes.Count > 0 Then
            '        removedAIs = QuickQuoteAdditionalInterestsForIndexes(aiList, aiIndexes)
            '        If removedAIs IsNot Nothing AndAlso removedAIs.Count > 0 Then
            '            RemoveQuickQuoteAdditionalInterestsByIndex(aiList, aiIndexes)
            '        End If
            '    End If
            'End If
            'updated 5/25/2021 to use new method
            IdentifySpecificQuickQuoteAdditionalInterestFromList(aiList, aiListId, identifiedAIs:=removedAIs, shouldRemove:=True)
        End Sub
        'added 5/25/2021
        Public Sub IdentifySpecificQuickQuoteAdditionalInterestFromList(ByRef aiList As List(Of QuickQuoteAdditionalInterest), ByVal aiListId As Integer, Optional ByRef identifiedAIs As List(Of QuickQuoteAdditionalInterest) = Nothing, Optional ByVal shouldRemove As Boolean = False)
            identifiedAIs = Nothing
            If aiList IsNot Nothing AndAlso aiList.Count > 0 Then
                Dim aiIndexes As List(Of Integer) = QuickQuoteAdditionalInterestIndexesForListId(aiList, aiListId.ToString)
                If aiIndexes IsNot Nothing AndAlso aiIndexes.Count > 0 Then
                    identifiedAIs = QuickQuoteAdditionalInterestsForIndexes(aiList, aiIndexes)
                    If shouldRemove = True AndAlso identifiedAIs IsNot Nothing AndAlso identifiedAIs.Count > 0 Then
                        RemoveQuickQuoteAdditionalInterestsByIndex(aiList, aiIndexes)
                    End If
                End If
            End If
        End Sub
        Public Sub RemoveSpecificQuickQuoteAdditionalInterestFromQuoteBasedOnLob(ByRef qqo As QuickQuoteObject, ByVal aiListId As Integer, Optional ByVal removeFromTopLevel As Boolean = False, Optional ByRef removedResults As QuickQuoteAdditionalInterestRelatedResults = Nothing)
            ''note: should reference CopySourceAdditionalInterestsToTopLevel
            'removedResults = Nothing

            'If qqo IsNot Nothing Then
            '    If removeFromTopLevel = True Then
            '        Dim removedAIs As List(Of QuickQuoteAdditionalInterest) = Nothing
            '        RemoveSpecificQuickQuoteAdditionalInterestFromList(qqo.AdditionalInterests, aiListId, removedAIs:=removedAIs)
            '        If removedAIs IsNot Nothing AndAlso removedAIs.Count > 0 Then
            '            If removedResults Is Nothing Then
            '                removedResults = New QuickQuoteAdditionalInterestRelatedResults
            '            End If
            '            removedResults.TopLevelAdditionalInterests = removedAIs
            '        End If
            '    End If
            '    'note: add LOB-specific logic as needed (based on VR implementation)
            '    If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto Then
            '        Dim removedVehResults As List(Of QuickQuoteVehicleAndAdditionalInterests) = Nothing
            '        RemoveSpecificQuickQuoteAdditionalInterestFromVehicles(qqo.Vehicles, aiListId, removedResults:=removedVehResults)
            '        If removedVehResults IsNot Nothing AndAlso removedVehResults.Count > 0 Then
            '            If removedResults Is Nothing Then
            '                removedResults = New QuickQuoteAdditionalInterestRelatedResults
            '            End If
            '            removedResults.VehiclesAndAdditionalInterests = removedVehResults
            '        End If
            '    End If
            'End If
            'updated 5/25/2021 to use new method
            IdentifySpecificQuickQuoteAdditionalInterestFromQuoteBasedOnLob(qqo, aiListId, identifiedResults:=removedResults, shouldRemove:=True, includeTopLevel:=removeFromTopLevel)
        End Sub
        'added 5/25/2021
        Public Sub IdentifySpecificQuickQuoteAdditionalInterestFromQuoteBasedOnLob(ByRef qqo As QuickQuoteObject, ByVal aiListId As Integer, Optional ByRef identifiedResults As QuickQuoteAdditionalInterestRelatedResults = Nothing, Optional ByVal shouldRemove As Boolean = False, Optional ByVal includeTopLevel As Boolean = False)
            'note: should reference CopySourceAdditionalInterestsToTopLevel
            identifiedResults = Nothing

            If qqo IsNot Nothing Then
                If includeTopLevel = True Then
                    Dim identifiedAIs As List(Of QuickQuoteAdditionalInterest) = Nothing
                    IdentifySpecificQuickQuoteAdditionalInterestFromList(qqo.AdditionalInterests, aiListId, identifiedAIs:=identifiedAIs, shouldRemove:=shouldRemove)
                    If identifiedAIs IsNot Nothing AndAlso identifiedAIs.Count > 0 Then
                        CheckIdentifiedResultsExist(identifiedResults)
                        identifiedResults.TopLevelAdditionalInterests = identifiedAIs
                    End If
                End If
                'note: add LOB-specific logic as needed (based on VR implementation)
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto Then
                    Dim identifiedVehResults As List(Of QuickQuoteVehicleAndAdditionalInterests) = Nothing
                    IdentifySpecificQuickQuoteAdditionalInterestFromVehicles(qqo.Vehicles, aiListId, identifiedResults:=identifiedVehResults, shouldRemove:=shouldRemove)
                    If identifiedVehResults IsNot Nothing AndAlso identifiedVehResults.Count > 0 Then
                        CheckIdentifiedResultsExist(identifiedResults)
                        identifiedResults.VehiclesAndAdditionalInterests = identifiedVehResults
                    End If
                End If
                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP OrElse qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                    Dim identifiedBuildingResults As List(Of QuickQuoteBuildingWithParentLocationAndAdditionalInterests) = New List(Of QuickQuoteBuildingWithParentLocationAndAdditionalInterests)
                    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                        For Each location As QuickQuoteLocation In qqo.Locations
                            Dim identifiedLocationBuildingResults As List(Of QuickQuoteBuildingAndAdditionalInterests) = Nothing
                            IdentifySpecificQuickQuoteAdditionalInterestFromBuildings(location.Buildings, aiListId, identifiedResults:=identifiedLocationBuildingResults, shouldRemove:=shouldRemove)
                            If identifiedLocationBuildingResults IsNot Nothing AndAlso identifiedLocationBuildingResults.Count > 0 Then
                                For Each buildingWithAi As QuickQuoteBuildingAndAdditionalInterests In identifiedLocationBuildingResults
                                    Dim AIRecord As QuickQuoteBuildingWithParentLocationAndAdditionalInterests = New QuickQuoteBuildingWithParentLocationAndAdditionalInterests
                                    AIRecord.Location = location
                                    AIRecord.Building = buildingWithAi.Building
                                    AIRecord.AdditionalInterests = buildingWithAi.AdditionalInterests
                                    identifiedBuildingResults.Add(AIRecord)
                                Next
                            End If
                        Next
                    End If
                    If identifiedBuildingResults IsNot Nothing AndAlso identifiedBuildingResults.Count > 0 Then
                        CheckIdentifiedResultsExist(identifiedResults)
                        identifiedResults.BuildingsWithParentLocationAndAdditionalInterests = identifiedBuildingResults
                    End If
                End If

                If qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage Then
                    Dim qqh = New QuickQuoteHelperClass
                    Dim govStateQuote As QuickQuote.CommonObjects.QuickQuoteObject = qqh.GoverningStateQuote(qqo)



                    If govStateQuote IsNot Nothing AndAlso govStateQuote.CPP_Has_InlandMarine_PackagePart = True Then
                        If govStateQuote.BuildersRiskAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.BuildersRiskAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineBuildersRiskAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.ComputerAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.ComputerAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineComputersAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.ContractorsEquipmentScheduledCoverages?.Count > 0 Then
                            Dim identifiedCEResults As List(Of QuickQuoteInlandMarineContractorsCoverageAndAdditionalInterests) = New List(Of QuickQuoteInlandMarineContractorsCoverageAndAdditionalInterests)
                            For Each sc As QuickQuoteContractorsEquipmentScheduledCoverage In govStateQuote.ContractorsEquipmentScheduledCoverages
                                Dim item As QuickQuoteInlandMarineContractorsCoverageAndAdditionalInterests = New QuickQuoteInlandMarineContractorsCoverageAndAdditionalInterests()
                                item.Coverage = sc
                                item.AdditionalInterests = ProcessAdditionalInterestForIdentifyAi(sc.AdditionalInterests, aiListId, shouldRemove)
                                If item.AdditionalInterests?.Count > 0 Then
                                    identifiedCEResults.Add(item)
                                End If
                            Next
                            If identifiedCEResults?.Count > 0 Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineContractorsEquipmentAndAdditionalInterests = identifiedCEResults
                            End If
                        End If

                        If govStateQuote.FineArtsAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.FineArtsAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineFineArtsAdditionalInterests = results
                            End If
                        End If

                        'If govStateQuote.InstallationAdditionalInterests?.Count > 0 Then
                        '
                        'End If

                        If govStateQuote.MotorTruckCargoScheduledVehicleAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.MotorTruckCargoScheduledVehicleAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineMotorTruckCargoAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.MotorTruckCargoUnScheduledVehicleAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.MotorTruckCargoUnScheduledVehicleAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineMotorTruckCargoAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.OwnersCargoAnyOneOwnedVehicleAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineOwnersCargoAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.ScheduledPropertyAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.ScheduledPropertyAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineScheduledPropertyFloaterAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.SignsAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.SignsAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineSignsAdditionalInterests = results
                            End If
                        End If

                        If govStateQuote.TransportationCatastropheAdditionalInterests?.Count > 0 Then
                            Dim results = ProcessAdditionalInterestForIdentifyAi(govStateQuote.TransportationCatastropheAdditionalInterests, aiListId, shouldRemove)
                            If results IsNot Nothing AndAlso results.Any() Then
                                CheckIdentifiedResultsExist(identifiedResults)
                                identifiedResults.InlandMarineTransportationAdditionalInterests = results
                            End If
                        End If

                    End If

                End If
            End If
        End Sub

        Public Function ProcessAdditionalInterestForIdentifyAi(ByRef aiList As List(Of QuickQuoteAdditionalInterest), ByVal aiListId As Integer, Optional ByVal shouldRemove As Boolean = False) As List(Of QuickQuoteAdditionalInterest)
            Dim identifiedAIs As List(Of QuickQuoteAdditionalInterest) = Nothing
            IdentifySpecificQuickQuoteAdditionalInterestFromList(aiList, aiListId, identifiedAIs:=identifiedAIs, shouldRemove:=shouldRemove)
            Return identifiedAIs
        End Function

        Public Sub CheckIdentifiedResultsExist(ByRef IdentifiedResults As QuickQuoteAdditionalInterestRelatedResults)
            If IdentifiedResults Is Nothing Then
                IdentifiedResults = New QuickQuoteAdditionalInterestRelatedResults
            End If
        End Sub

        Public Function QuickQuoteAdditionalInterestsNewToImage(ByVal qqo As QuickQuoteObject, Optional ByVal level As MultiStateLevel = MultiStateLevel.GoverningStateLevel) As List(Of QuickQuoteAdditionalInterest)
            Dim qqAdditionalInterestsNew As List(Of QuickQuoteAdditionalInterest) = Nothing

            Dim qqAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = AllQuickQuoteAdditionalInterests(qqo, level:=level)
            If qqAdditionalInterests IsNot Nothing AndAlso qqAdditionalInterests.Count > 0 Then
                For Each d As QuickQuoteAdditionalInterest In qqAdditionalInterests
                    If d IsNot Nothing AndAlso IsQuickQuoteAdditionalInterestNewToImage(d, qqo) = True Then
                        If qqAdditionalInterestsNew Is Nothing Then
                            qqAdditionalInterestsNew = New List(Of QuickQuoteAdditionalInterest)
                        End If
                        qqAdditionalInterestsNew.Add(d)
                    End If
                Next
            End If

            Return qqAdditionalInterestsNew
        End Function
        Public Function DiaAdditionalInterestsNewToImage(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.GoverningStateLevel) As List(Of Diamond.Common.Objects.Policy.AdditionalInterest)
            Dim diaAdditionalInterestsNew As List(Of Diamond.Common.Objects.Policy.AdditionalInterest) = Nothing

            Dim diaAdditionalInterests As List(Of Diamond.Common.Objects.Policy.AdditionalInterest) = AllDiamondAdditionalInterests(diaImage, level:=level)
            If diaAdditionalInterests IsNot Nothing AndAlso diaAdditionalInterests.Count > 0 Then
                For Each d As Diamond.Common.Objects.Policy.AdditionalInterest In diaAdditionalInterests
                    If d IsNot Nothing AndAlso IsDiaAdditionalInterestNewToImage(d, diaImage) = True Then
                        If diaAdditionalInterestsNew Is Nothing Then
                            diaAdditionalInterestsNew = New List(Of Diamond.Common.Objects.Policy.AdditionalInterest)
                        End If
                        diaAdditionalInterestsNew.Add(d)
                    End If
                Next
            End If

            Return diaAdditionalInterestsNew
        End Function
        Public Function DiamondImageOrQuickQuoteObjectHasNewAdditionalInterests(Optional ByVal diaImage As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByVal qqo As QuickQuoteObject = Nothing, Optional ByRef diaAdditionalInterestsNew As List(Of Diamond.Common.Objects.Policy.AdditionalInterest) = Nothing, Optional ByRef qqAdditionalInterestsNew As List(Of QuickQuoteAdditionalInterest) = Nothing) As Boolean
            Dim hasNew As Boolean = False
            diaAdditionalInterestsNew = Nothing
            qqAdditionalInterestsNew = Nothing

            If diaImage IsNot Nothing Then
                diaAdditionalInterestsNew = DiaAdditionalInterestsNewToImage(diaImage)
                If diaAdditionalInterestsNew IsNot Nothing AndAlso diaAdditionalInterestsNew.Count > 0 Then
                    hasNew = True
                End If
            ElseIf qqo IsNot Nothing Then
                qqAdditionalInterestsNew = QuickQuoteAdditionalInterestsNewToImage(qqo)
                If qqAdditionalInterestsNew IsNot Nothing AndAlso qqAdditionalInterestsNew.Count > 0 Then
                    hasNew = True
                End If
            End If

            Return hasNew
        End Function
        Public Function AllQuickQuoteAdditionalInterests(ByRef qqo As QuickQuoteObject, Optional ByRef subQuotes As List(Of QuickQuoteObject) = Nothing, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteAdditionalInterest)
            Dim qqAdditionalInterests As List(Of QuickQuoteAdditionalInterest) = Nothing

            If qqo IsNot Nothing Then
                If System.Enum.IsDefined(GetType(MultiStateLevel), level) = False OrElse level = MultiStateLevel.None Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.StateSpecific AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), specificStateToGet) = False OrElse specificStateToGet = QuickQuoteState.None) Then
                    level = MultiStateLevel.All
                End If
                If level = MultiStateLevel.GoverningStateLevel AndAlso (System.Enum.IsDefined(GetType(QuickQuoteState), qqo.QuickQuoteState) = False OrElse qqo.QuickQuoteState = QuickQuoteState.None) Then
                    level = MultiStateLevel.FirstStateQuote
                End If

                Dim includeTopLevel As Boolean = False
                Dim includeAllSubQuotes As Boolean = False
                Dim isStateSpecific As Boolean = False
                Dim exitAfterFirstSubQuote As Boolean = False

                Select Case level
                    Case MultiStateLevel.TopLevel
                        includeTopLevel = True
                    Case MultiStateLevel.MasterPartLevel
                        'not being used correctly yet
                        includeTopLevel = True
                    Case MultiStateLevel.PackagePartLevel
                        'not being used correctly yet
                        includeAllSubQuotes = True
                    Case MultiStateLevel.AllStates
                        includeAllSubQuotes = True
                    Case MultiStateLevel.GoverningStateLevel
                        isStateSpecific = True
                        specificStateToGet = qqo.QuickQuoteState
                    Case MultiStateLevel.StateSpecific
                        isStateSpecific = True
                    Case MultiStateLevel.FirstStateQuote
                        If subQuotes Is Nothing Then
                            subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                        End If
                        If subQuotes Is Nothing OrElse subQuotes.Count < 1 OrElse subQuotes(0) Is Nothing Then
                            includeTopLevel = True
                        Else
                            includeAllSubQuotes = True
                            exitAfterFirstSubQuote = True
                        End If
                    Case Else 'All
                        includeTopLevel = True
                        includeAllSubQuotes = True
                End Select

                If includeTopLevel = True AndAlso includeAllSubQuotes = True Then
                    'check to make sure subQuotes wouldn't just return qqo, in which case the items would be duplicated
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count = 1 Then
                        includeTopLevel = False
                    End If
                End If

                If includeTopLevel = True Then
                    AddQuickQuoteAdditionalInterestsToList(qqo.AdditionalInterests, qqAdditionalInterests)

                    'now get from sub-objects
                    AddQuickQuoteAdditionalInterestsToList(qqo.SmallToolsAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.InstallationAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.ScheduledPropertyAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.ComputerAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.BuildersRiskAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.FineArtsAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.TransportationCatastropheAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.MotorTruckCargoScheduledVehicleAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.MotorTruckCargoUnScheduledVehicleAdditionalInterests, qqAdditionalInterests)
                    AddQuickQuoteAdditionalInterestsToList(qqo.SignsAdditionalInterests, qqAdditionalInterests)

                    If qqo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso qqo.ContractorsEquipmentScheduledItems.Count > 0 Then
                        For Each si As QuickQuoteContractorsEquipmentScheduledItem In qqo.ContractorsEquipmentScheduledItems
                            If si IsNot Nothing Then
                                AddQuickQuoteAdditionalInterestsToList(si.AdditionalInterests, qqAdditionalInterests)
                            End If
                        Next
                    End If

                    If qqo.ContractorsEquipmentScheduledCoverages IsNot Nothing AndAlso qqo.ContractorsEquipmentScheduledCoverages.Count > 0 Then
                        For Each sc As QuickQuoteContractorsEquipmentScheduledCoverage In qqo.ContractorsEquipmentScheduledCoverages
                            If sc IsNot Nothing Then
                                AddQuickQuoteAdditionalInterestsToList(sc.AdditionalInterests, qqAdditionalInterests)
                            End If
                        Next
                    End If
                End If
                If includeAllSubQuotes = True Then
                    If subQuotes Is Nothing Then
                        subQuotes = MultiStateQuickQuoteObjects(qqo) 'will at least contain qqo
                    End If
                    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then 'just in case, but shouldn't be needed
                        For Each sq As QuickQuoteObject In subQuotes
                            AddQuickQuoteAdditionalInterestsToList(sq.AdditionalInterests, qqAdditionalInterests)

                            'now get from sub-objects
                            AddQuickQuoteAdditionalInterestsToList(sq.SmallToolsAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.InstallationAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.ScheduledPropertyAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.ComputerAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.BuildersRiskAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.FineArtsAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.TransportationCatastropheAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.MotorTruckCargoScheduledVehicleAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.MotorTruckCargoUnScheduledVehicleAdditionalInterests, qqAdditionalInterests)
                            AddQuickQuoteAdditionalInterestsToList(sq.SignsAdditionalInterests, qqAdditionalInterests)

                            If sq.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso sq.ContractorsEquipmentScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteContractorsEquipmentScheduledItem In sq.ContractorsEquipmentScheduledItems
                                    If si IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(si.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If

                            If sq.ContractorsEquipmentScheduledCoverages IsNot Nothing AndAlso sq.ContractorsEquipmentScheduledCoverages.Count > 0 Then
                                For Each sc As QuickQuoteContractorsEquipmentScheduledCoverage In sq.ContractorsEquipmentScheduledCoverages
                                    If sc IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(sc.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If

                            If exitAfterFirstSubQuote = True Then
                                Exit For
                            End If
                        Next
                    End If
                End If
                If isStateSpecific = True Then
                    Dim stateQuote As QuickQuoteObject = Nothing
                    If subQuotes IsNot Nothing Then
                        stateQuote = QuickQuoteObjectForState(subQuotes, specificStateToGet, addToListIfNeeded:=False)
                    Else
                        stateQuote = QuickQuoteObjectForState(qqo, specificStateToGet, addToListIfNeeded:=False)
                    End If
                    If stateQuote IsNot Nothing Then
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.AdditionalInterests, qqAdditionalInterests)

                        'now get from sub-objects
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.SmallToolsAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.InstallationAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.ScheduledPropertyAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.ComputerAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.BuildersRiskAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.FineArtsAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.TransportationCatastropheAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.MotorTruckCargoScheduledVehicleAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.MotorTruckCargoUnScheduledVehicleAdditionalInterests, qqAdditionalInterests)
                        AddQuickQuoteAdditionalInterestsToList(stateQuote.SignsAdditionalInterests, qqAdditionalInterests)

                        If stateQuote.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso stateQuote.ContractorsEquipmentScheduledItems.Count > 0 Then
                            For Each si As QuickQuoteContractorsEquipmentScheduledItem In stateQuote.ContractorsEquipmentScheduledItems
                                If si IsNot Nothing Then
                                    AddQuickQuoteAdditionalInterestsToList(si.AdditionalInterests, qqAdditionalInterests)
                                End If
                            Next
                        End If

                        If stateQuote.ContractorsEquipmentScheduledCoverages IsNot Nothing AndAlso stateQuote.ContractorsEquipmentScheduledCoverages.Count > 0 Then
                            For Each sc As QuickQuoteContractorsEquipmentScheduledCoverage In stateQuote.ContractorsEquipmentScheduledCoverages
                                If sc IsNot Nothing Then
                                    AddQuickQuoteAdditionalInterestsToList(sc.AdditionalInterests, qqAdditionalInterests)
                                End If
                            Next
                        End If
                    End If
                End If

                'now get from other sub-objects
                Dim qqLocs As List(Of QuickQuoteLocation) = AllQuickQuoteLocations(qqo, subQuotes:=subQuotes, level:=level, specificStateToGet:=specificStateToGet)
                If qqLocs IsNot Nothing AndAlso qqLocs.Count > 0 Then
                    For Each l As QuickQuoteLocation In qqLocs
                        If l IsNot Nothing Then
                            AddQuickQuoteAdditionalInterestsToList(l.AdditionalInterests, qqAdditionalInterests)

                            If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                                For Each b As QuickQuoteBuilding In l.Buildings
                                    If b IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(b.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If

                            If l.InlandMarines IsNot Nothing AndAlso l.InlandMarines.Count > 0 Then
                                For Each im As QuickQuoteInlandMarine In l.InlandMarines
                                    If im IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(im.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If

                            If l.RvWatercrafts IsNot Nothing AndAlso l.RvWatercrafts.Count > 0 Then
                                For Each rv As QuickQuoteRvWatercraft In l.RvWatercrafts
                                    If rv IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(rv.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If

                            If l.SectionICoverages IsNot Nothing AndAlso l.SectionICoverages.Count > 0 Then
                                For Each sc As QuickQuoteSectionICoverage In l.SectionICoverages
                                    If sc IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(sc.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If
                            If l.SectionIICoverages IsNot Nothing AndAlso l.SectionIICoverages.Count > 0 Then
                                For Each sc As QuickQuoteSectionIICoverage In l.SectionIICoverages
                                    If sc IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(sc.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If
                            If l.SectionIAndIICoverages IsNot Nothing AndAlso l.SectionIAndIICoverages.Count > 0 Then
                                For Each sc As QuickQuoteSectionIAndIICoverage In l.SectionIAndIICoverages
                                    If sc IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(sc.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                Dim qqVehs As List(Of QuickQuoteVehicle) = AllQuickQuoteVehicles(qqo, subQuotes:=subQuotes, level:=level, specificStateToGet:=specificStateToGet)
                If qqVehs IsNot Nothing AndAlso qqVehs.Count > 0 Then
                    For Each v As QuickQuoteVehicle In qqVehs
                        If v IsNot Nothing Then
                            AddQuickQuoteAdditionalInterestsToList(v.AdditionalInterests, qqAdditionalInterests)

                            If v.ScheduledItems IsNot Nothing AndAlso v.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteScheduledItem In v.ScheduledItems
                                    If si IsNot Nothing Then
                                        AddQuickQuoteAdditionalInterestsToList(si.AdditionalInterests, qqAdditionalInterests)
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

            End If

            Return qqAdditionalInterests
        End Function
        Public Function AllDiamondAdditionalInterests(ByVal diaImage As Diamond.Common.Objects.Policy.Image, Optional ByVal level As MultiStateLevel = MultiStateLevel.All, Optional ByVal specificStateToGet As QuickQuoteState = QuickQuoteState.None) As List(Of Diamond.Common.Objects.Policy.AdditionalInterest)
            Dim diaAdditionalInterests As List(Of Diamond.Common.Objects.Policy.AdditionalInterest) = Nothing

            If diaImage IsNot Nothing Then
                Dim diaLobExtendedList As List(Of DiamondLobAndVariousProperties) = DiamondLobAndPropertiesListForImageAndMultiStateLevel(diaImage, level, specificStateToGet:=specificStateToGet)
                If diaLobExtendedList IsNot Nothing AndAlso diaLobExtendedList.Count > 0 Then
                    For Each diaLobExtended As DiamondLobAndVariousProperties In diaLobExtendedList
                        If diaLobExtended IsNot Nothing Then
                            Dim lobPolicyLevel As Diamond.Common.Objects.Policy.PolicyLevel = DiamondPolicyLevelForLOB(diaLobExtended.DiamondLob)
                            If lobPolicyLevel IsNot Nothing Then
                                AddDiamondAdditionalInterestsToList(lobPolicyLevel.AdditionalInterests, diaAdditionalInterests)

                                If lobPolicyLevel.Coverages IsNot Nothing AndAlso lobPolicyLevel.Coverages.Count > 0 Then
                                    For Each c As Diamond.Common.Objects.Coverage In lobPolicyLevel.Coverages
                                        If c IsNot Nothing Then
                                            AddDiamondAdditionalInterestsToList(c.AdditionalInterests, diaAdditionalInterests)
                                        End If
                                    Next
                                End If

                                If lobPolicyLevel.ScheduledCoverages IsNot Nothing AndAlso lobPolicyLevel.ScheduledCoverages.Count > 0 Then
                                    For Each sc As Diamond.Common.Objects.Policy.ScheduledCoverage In lobPolicyLevel.ScheduledCoverages
                                        If sc IsNot Nothing Then
                                            AddDiamondAdditionalInterestsToList(sc.AdditionalInterests, diaAdditionalInterests)
                                        End If
                                    Next
                                End If
                            End If
                        End If
                    Next
                End If

                Dim diaLocs As List(Of Diamond.Common.Objects.Policy.Location) = AllDiamondLocations(diaImage, level:=level, specificStateToGet:=specificStateToGet)
                If diaLocs IsNot Nothing AndAlso diaLocs.Count > 0 Then
                    For Each l As Diamond.Common.Objects.Policy.Location In diaLocs
                        If l IsNot Nothing Then
                            AddDiamondAdditionalInterestsToList(l.AdditionalInterests, diaAdditionalInterests)

                            If l.BarnsBuildings IsNot Nothing AndAlso l.BarnsBuildings.Count > 0 Then
                                For Each b As Diamond.Common.Objects.Policy.BarnBuilding In l.BarnsBuildings
                                    If b IsNot Nothing Then
                                        AddDiamondAdditionalInterestsToList(b.AdditionalInterests, diaAdditionalInterests)
                                    End If
                                Next
                            End If

                            If l.InlandMarines IsNot Nothing AndAlso l.InlandMarines.Count > 0 Then
                                For Each im As Diamond.Common.Objects.Policy.InlandMarine In l.InlandMarines
                                    If im IsNot Nothing Then
                                        AddDiamondAdditionalInterestsToList(im.AdditionalInterests, diaAdditionalInterests)
                                    End If
                                Next
                            End If

                            If l.RvWatercrafts IsNot Nothing AndAlso l.RvWatercrafts.Count > 0 Then
                                For Each rv As Diamond.Common.Objects.Policy.RvWatercraft In l.RvWatercrafts
                                    If rv IsNot Nothing Then
                                        AddDiamondAdditionalInterestsToList(rv.AdditionalInterests, diaAdditionalInterests)
                                    End If
                                Next
                            End If

                            If l.SectionCoverages IsNot Nothing AndAlso l.SectionCoverages.Count > 0 Then
                                For Each sc As Diamond.Common.Objects.Policy.SectionCoverage In l.SectionCoverages
                                    If sc IsNot Nothing Then
                                        AddDiamondAdditionalInterestsToList(sc.AdditionalInterests, diaAdditionalInterests)
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If

                Dim diaVehs As List(Of Diamond.Common.Objects.Policy.Vehicle) = AllDiamondVehicles(diaImage, level:=level, specificStateToGet:=specificStateToGet)
                If diaVehs IsNot Nothing AndAlso diaVehs.Count > 0 Then
                    For Each v As Diamond.Common.Objects.Policy.Vehicle In diaVehs
                        If v IsNot Nothing Then
                            AddDiamondAdditionalInterestsToList(v.AdditionalInterests, diaAdditionalInterests)

                            If v.ScheduledItems IsNot Nothing AndAlso v.ScheduledItems.Count > 0 Then
                                For Each si As Diamond.Common.Objects.Policy.ScheduledItem In v.ScheduledItems
                                    If si IsNot Nothing Then
                                        AddDiamondAdditionalInterestsToList(si.AdditionalInterests, diaAdditionalInterests)
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
            End If

            Return diaAdditionalInterests
        End Function
        Public Sub AddQuickQuoteAdditionalInterestToList(ByVal newAI As QuickQuoteAdditionalInterest, ByRef existingAIs As List(Of QuickQuoteAdditionalInterest), Optional ByVal cloneAI As Boolean = False)
            If newAI IsNot Nothing Then
                If existingAIs Is Nothing Then
                    existingAIs = New List(Of QuickQuoteAdditionalInterest)
                End If
                If cloneAI = True Then
                    existingAIs.Add(CloneObject(newAI))
                Else
                    existingAIs.Add(newAI)
                End If
            End If
        End Sub
        Public Sub AddQuickQuoteAdditionalInterestsToList(ByVal newAIs As List(Of QuickQuoteAdditionalInterest), ByRef existingAIs As List(Of QuickQuoteAdditionalInterest), Optional ByVal cloneAIs As Boolean = False)
            If newAIs IsNot Nothing AndAlso newAIs.Count > 0 Then
                For Each ai As QuickQuoteAdditionalInterest In newAIs
                    AddQuickQuoteAdditionalInterestToList(ai, existingAIs, cloneAI:=cloneAIs)
                Next
            End If
        End Sub
        Public Sub AddDiamondQuoteAdditionalInterestToList(ByVal newAI As Diamond.Common.Objects.Policy.AdditionalInterest, ByRef existingAIs As List(Of Diamond.Common.Objects.Policy.AdditionalInterest), Optional ByVal cloneAI As Boolean = False)
            If newAI IsNot Nothing Then
                If existingAIs Is Nothing Then
                    existingAIs = New List(Of Diamond.Common.Objects.Policy.AdditionalInterest)
                End If
                If cloneAI = True Then
                    'existingAIs.Add(CloneObject(newAI))
                    'CloneObject won't work for Diamond objects; would need to use one of their methods
                    existingAIs.Add(newAI)
                Else
                    existingAIs.Add(newAI)
                End If
            End If
        End Sub
        Public Sub AddDiamondAdditionalInterestsToList(ByVal newAIs As List(Of Diamond.Common.Objects.Policy.AdditionalInterest), ByRef existingAIs As List(Of Diamond.Common.Objects.Policy.AdditionalInterest), Optional ByVal cloneAIs As Boolean = False)
            If newAIs IsNot Nothing AndAlso newAIs.Count > 0 Then
                For Each ai As Diamond.Common.Objects.Policy.AdditionalInterest In newAIs
                    AddDiamondQuoteAdditionalInterestToList(ai, existingAIs, cloneAI:=cloneAIs)
                Next
            End If
        End Sub
        Public Sub AddDiamondAdditionalInterestsToList(ByVal newAIs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Policy.AdditionalInterest), ByRef existingAIs As List(Of Diamond.Common.Objects.Policy.AdditionalInterest), Optional ByVal cloneAIs As Boolean = False)
            If newAIs IsNot Nothing AndAlso newAIs.Count > 0 Then
                For Each ai As Diamond.Common.Objects.Policy.AdditionalInterest In newAIs
                    AddDiamondQuoteAdditionalInterestToList(ai, existingAIs, cloneAI:=cloneAIs)
                Next
            End If
        End Sub


        'added 3/8/2021
        Public Shared Function AgencyDropdown_LoadActiveAgenciesOnly(Optional ByRef keyExists As Boolean = False) As Boolean
            Dim activeOnly As Boolean = True 'default to True; key required to turn to False

            'Dim strActiveOnly As String = configAppSettingValueAsString("VR_ConsiderEndorsementQuoteStatusAsPending")
            Dim chc As New CommonHelperClass
            Dim strActiveOnly As String = chc.ConfigurationAppSettingValueAsString("VR_ConsiderEndorsementQuoteStatusAsPending", configurationAppSettingExists:=keyExists)
            If String.IsNullOrWhiteSpace(strActiveOnly) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strActiveOnly) = "YES" OrElse qqHelper.BitToBoolean(strActiveOnly) = True Then 'key would just need any text value that doesn't equate to True to return False
                    activeOnly = True
                Else
                    activeOnly = False
                End If
            End If

            Return activeOnly
        End Function
        Public Shared Function AgencyDropdown_AllowCancelledAgenciesWithInforcePolicies(Optional ByRef keyExists As Boolean = False) As Boolean
            Dim allowIt As Boolean = False 'default to False; key required to turn to True

            'Dim strIsOkay As String = configAppSettingValueAsString("VR_AgencyDropdown_AllowCancelledAgenciesWithInforcePolicies")
            Dim chc As New CommonHelperClass
            Dim strAllowIt As String = chc.ConfigurationAppSettingValueAsString("VR_AgencyDropdown_AllowCancelledAgenciesWithInforcePolicies", configurationAppSettingExists:=keyExists)
            If String.IsNullOrWhiteSpace(strAllowIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strAllowIt) = "YES" OrElse qqHelper.BitToBoolean(strAllowIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    allowIt = True
                Else
                    allowIt = False 'redundant
                End If
            End If

            Return allowIt
        End Function
        Public Function IsAgencyCodeInCancelledSessionList(ByVal diaAgencyCode As String) As Boolean
            Dim isInList As Boolean = False

            If String.IsNullOrWhiteSpace(diaAgencyCode) = False Then
                Dim diaAgCodes As String = sessionVariableValueAsString("DiamondAgencyCodes")
                If String.IsNullOrWhiteSpace(diaAgCodes) = True Then
                    SetUserAgencyVariables()
                End If

                Dim diaAgCodesCancelled As String = sessionVariableValueAsString("DiamondAgencyCodes_Cancelled")
                'If String.IsNullOrWhiteSpace(diaAgCodesCancelled) = False AndAlso diaAgCodesCancelled.Contains(diaAgencyCode) = True Then
                '    isInList = True
                'End If
                'updated to prevent match on partial from list (i.e. agencyId 1 would be in the string "133"; doesn't apply as much to agency codes since they should always have the same format)
                If String.IsNullOrWhiteSpace(diaAgCodesCancelled) = False Then
                    Dim strList As List(Of String) = ListOfStringFromString(diaAgCodesCancelled, delimiter:=", ")
                    If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diaAgencyCode) = True Then
                        isInList = True
                    End If
                End If
            End If

            Return isInList
        End Function
        Public Function IsAgencyIdInCancelledSessionList(ByVal diaAgencyId As String) As Boolean
            Dim isInList As Boolean = False

            If String.IsNullOrWhiteSpace(diaAgencyId) = False Then
                Dim diaAgIds As String = sessionVariableValueAsString("DiamondAgencyIds")
                If String.IsNullOrWhiteSpace(diaAgIds) = True Then
                    SetUserAgencyVariables()
                End If

                Dim diaAgIdsCancelled As String = sessionVariableValueAsString("DiamondAgencyIds_Cancelled")
                'If String.IsNullOrWhiteSpace(diaAgIdsCancelled) = False AndAlso diaAgIdsCancelled.Contains(diaAgencyId) = True Then
                '    isInList = True
                'End If
                'updated to prevent match on partial from list (i.e. agencyId 1 would be in the string "133")
                If String.IsNullOrWhiteSpace(diaAgIdsCancelled) = False Then
                    Dim strList As List(Of String) = ListOfStringFromString(diaAgIdsCancelled, delimiter:=", ")
                    If strList IsNot Nothing AndAlso strList.Count > 0 AndAlso strList.Contains(diaAgencyId) = True Then
                        isInList = True
                    End If
                End If
            End If

            Return isInList
        End Function
        Public Shared Function AgencyDropdown_CancelledTextToAppendWhenNecessary(Optional ByRef keyExists As Boolean = False) As String
            Dim chc As New CommonHelperClass
            Dim txt As String = chc.ConfigurationAppSettingValueAsString("VR_AgencyDropdown_CancelledTextToAppendWhenNecessary", configurationAppSettingExists:=keyExists)
            'If String.IsNullOrWhiteSpace(txt) = False AndAlso Left(txt, 1) <> " " Then
            '    txt = " " & txt
            'End If
            If String.IsNullOrWhiteSpace(txt) = False Then
                If txt.Contains("#VR_CancelledAgencyBaseText#") = True Then
                    txt = Replace(txt, "#VR_CancelledAgencyBaseText#", CancelledAgencyBaseText())
                End If
                If Left(txt, 1) <> " " Then
                    txt = " " & txt
                End If
            End If
            Return txt
        End Function
        Public Shared Function CancelledAgencyBaseText(Optional ByVal defaultTxtToUse As String = "closed", Optional ByRef keyExists As Boolean = False) As String
            Dim chc As New CommonHelperClass
            Dim txt As String = chc.ConfigurationAppSettingValueAsString("VR_CancelledAgencyBaseText", configurationAppSettingExists:=keyExists)
            If String.IsNullOrWhiteSpace(txt) = True Then
                If String.IsNullOrWhiteSpace(defaultTxtToUse) = True Then
                    defaultTxtToUse = "closed"
                End If
                txt = defaultTxtToUse
            End If
            Return txt
        End Function

        'added 7/9/2021
        Public Shared Function FoodManufacturers_EffectiveDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("VR_FoodManufacturers_EffectiveDate")
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                dt = CDate("9/1/2021").ToShortDateString
            End If

            Return dt
        End Function
        Public Shared Function FoodManufacturers_Enabled() As Boolean 'removed 7/26/2021 since we won't need it anymore (was originally going to be used to move the code to Prod before the coverage should be available)
            Dim enabled As Boolean = False 'default to False; key required to turn to True

            Dim strEnabled As String = configAppSettingValueAsString("VR_FoodManufacturers_Enabled")
            If String.IsNullOrWhiteSpace(strEnabled) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strEnabled) = "YES" OrElse qqHelper.BitToBoolean(strEnabled) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    enabled = True
                Else
                    enabled = False 'redundant
                End If
            End If

            Return enabled
        End Function

        'added 7/26/2021
        Public Shared Function ProtectionClass_AssumeDiamondDoesEverythingOnSuccessfulRate() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("VR_ProtectionClass_AssumeDiamondDoesEverythingOnSuccessfulRate")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function

        'added 7/29/2021
        Public Shared Function FoodManufacturers_MaintainCoverageWhenDisabled() As Boolean 'added 7/29/2021
            Dim maintainIt As Boolean = False 'default to False; key required to turn to True

            Dim strMaintainIt As String = configAppSettingValueAsString("VR_FoodManufacturers_MaintainCoverageWhenDisabled")
            If String.IsNullOrWhiteSpace(strMaintainIt) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strMaintainIt) = "YES" OrElse qqHelper.BitToBoolean(strMaintainIt) = True Then 'key would be needed w/ value of Yes, True, or 1 for True
                    maintainIt = True
                Else
                    maintainIt = False 'redundant
                End If
            End If

            Return maintainIt
        End Function

        'added 5/25/2021
        Public Sub SetDatabaseInfoOnNewQuoteFromOldQuote(ByRef qqoOld As QuickQuoteObject, ByRef qqoNew As QuickQuoteObject)
            'note: CopyInformationFromOneQuoteToAnother uses Clone functionality so it may not copy over ReadOnly props if not specifically handled (like QuoteStatus)
            'Dim copyParams As New QuickQuote_Copy_Parameters
            'With copyParams
            '    .CopyTopLevelBaseDatabaseInfo = True
            'End With
            'CopyInformationFromOneQuoteToAnother(qqoOld, qqoNew, copyParams:=copyParams)
            If qqoOld IsNot Nothing AndAlso qqoNew IsNot Nothing Then
                qqoNew.TopLevelQuoteInfo.QuoteBase.DatabaseInfo = qqoOld.TopLevelQuoteInfo.QuoteBase.DatabaseInfo
            End If
        End Sub

        'added 9/9/2021
        Public Sub PerformDiamondRiskGradeConversionCleanup(ByRef qqo As QuickQuoteObject)
            If qqo IsNot Nothing AndAlso qqo.QuoteTransactionType <> QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote AndAlso qqo.QuoteTransactionType <> QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage Then
                Dim mayHaveBadRiskGradeLookupId As Boolean = False

                Dim diamondConversionDate As String = RiskGradeConversionDate()
                If IsValidDateString(qqo.Database_QuickQuote_Inserted, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diamondConversionDate, mustBeGreaterThanDefaultDate:=True) AndAlso CDate(qqo.Database_QuickQuote_Inserted) < CDate(diamondConversionDate) Then
                    mayHaveBadRiskGradeLookupId = True
                End If
                If mayHaveBadRiskGradeLookupId = False Then
                    'may also be able to look at quotes created after the conversion date that were copied from a quote that may still have a bad value
                End If

                If mayHaveBadRiskGradeLookupId = True AndAlso QuoteHasConvertedRiskGradeLookupId(qqo) = False Then
                    Dim hasConvertedRiskGradeLookupId As Boolean = False
                    Dim conversionType As RiskGradeLookupIdConversionType = RiskGradeLookupIdConversionType.None

                    Dim oldAndNewRiskGradeLookupIds As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing
                    If IsPositiveIntegerString(qqo.RiskGradeLookupId) = True Then
                        Dim riskGradeLookupIdToUse As String = ""
                        Dim hasConvertedRiskGradeLookupId_current As Boolean = False
                        Dim conversionType_current As RiskGradeLookupIdConversionType = RiskGradeLookupIdConversionType.None

                        checkRiskGradeLookupId(qqo.RiskGradeLookupId, IntegerForString(qqo.PolicyId), IntegerForString(qqo.StateId), qqo, riskGradeLookupIdToUse, hasConvertedRiskGradeLookupId:=hasConvertedRiskGradeLookupId_current, conversionType:=conversionType_current, diamondConversionDate:=diamondConversionDate)
                        If IsPositiveIntegerString(riskGradeLookupIdToUse) = True AndAlso CInt(riskGradeLookupIdToUse) <> CInt(qqo.RiskGradeLookupId) Then
                            Dim newConversionSet As New QuickQuoteGenericObjectWithTwoIntegerProperties
                            With newConversionSet
                                .Property1 = CInt(qqo.RiskGradeLookupId)
                                .Property2 = CInt(riskGradeLookupIdToUse)
                            End With
                            If oldAndNewRiskGradeLookupIds Is Nothing Then
                                oldAndNewRiskGradeLookupIds = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                            End If
                            oldAndNewRiskGradeLookupIds.Add(newConversionSet)
                            qqo.RiskGradeLookupId = riskGradeLookupIdToUse
                            If hasConvertedRiskGradeLookupId_current = True OrElse (System.Enum.IsDefined(GetType(RiskGradeLookupIdConversionType), conversionType_current) = True AndAlso conversionType_current <> RiskGradeLookupIdConversionType.None) Then
                                hasConvertedRiskGradeLookupId = hasConvertedRiskGradeLookupId_current
                                conversionType = conversionType_current
                            End If
                        End If
                    End If
                    If qqo.MultiStateQuotes IsNot Nothing AndAlso qqo.MultiStateQuotes.Count > 0 Then
                        For Each mq As QuickQuoteObject In qqo.MultiStateQuotes
                            If mq IsNot Nothing AndAlso IsPositiveIntegerString(mq.RiskGradeLookupId) = True Then
                                Dim isOkay As Boolean = False
                                If oldAndNewRiskGradeLookupIds IsNot Nothing AndAlso oldAndNewRiskGradeLookupIds.Count > 0 Then
                                    For Each rglSet As QuickQuoteGenericObjectWithTwoIntegerProperties In oldAndNewRiskGradeLookupIds
                                        If rglSet IsNot Nothing AndAlso rglSet.PassesPairTypeRequirement(IntegerPairType.BothPositive) = True Then
                                            If CInt(mq.RiskGradeLookupId) = rglSet.Property1 Then
                                                mq.RiskGradeLookupId = rglSet.Property2.ToString
                                                isOkay = True
                                                Exit For
                                            ElseIf CInt(mq.RiskGradeLookupId) = rglSet.Property2 Then
                                                'already okay
                                                isOkay = True
                                                Exit For
                                            Else
                                                'may have different riskGrade than what's at top level or a different state part; not likely
                                            End If
                                        End If
                                    Next
                                End If
                                If isOkay = False Then
                                    Dim riskGradeLookupIdToUse As String = ""
                                    Dim hasConvertedRiskGradeLookupId_current As Boolean = False
                                    Dim conversionType_current As RiskGradeLookupIdConversionType = RiskGradeLookupIdConversionType.None

                                    checkRiskGradeLookupId(mq.RiskGradeLookupId, IntegerForString(qqo.PolicyId), IntegerForString(qqo.StateId), qqo, riskGradeLookupIdToUse, hasConvertedRiskGradeLookupId:=hasConvertedRiskGradeLookupId_current, conversionType:=conversionType_current, diamondConversionDate:=diamondConversionDate)
                                    If IsPositiveIntegerString(riskGradeLookupIdToUse) = True AndAlso CInt(riskGradeLookupIdToUse) <> CInt(mq.RiskGradeLookupId) Then
                                        Dim newConversionSet As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                        With newConversionSet
                                            .Property1 = CInt(mq.RiskGradeLookupId)
                                            .Property2 = CInt(riskGradeLookupIdToUse)
                                        End With
                                        If oldAndNewRiskGradeLookupIds Is Nothing Then
                                            oldAndNewRiskGradeLookupIds = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                        End If
                                        oldAndNewRiskGradeLookupIds.Add(newConversionSet)
                                        mq.RiskGradeLookupId = riskGradeLookupIdToUse
                                        If hasConvertedRiskGradeLookupId_current = True OrElse (System.Enum.IsDefined(GetType(RiskGradeLookupIdConversionType), conversionType_current) = True AndAlso conversionType_current <> RiskGradeLookupIdConversionType.None) Then
                                            hasConvertedRiskGradeLookupId = hasConvertedRiskGradeLookupId_current
                                            conversionType = conversionType_current
                                        End If
                                    End If
                                End If
                            End If
                        Next
                    End If

                    If hasConvertedRiskGradeLookupId = True OrElse (System.Enum.IsDefined(GetType(RiskGradeLookupIdConversionType), conversionType) = True AndAlso conversionType <> RiskGradeLookupIdConversionType.None) Then
                        Set_QuoteHasConvertedRiskGradeLookupId(qqo, isOkay:=hasConvertedRiskGradeLookupId, conversionType:=conversionType, oldAndNewRiskGradeLookupIds:=oldAndNewRiskGradeLookupIds)
                    End If
                End If
            End If
        End Sub
        'added 9/13/2021
        Public Shared Function RiskGradeConversionDate() As String
            Dim dt As String = ""

            dt = configAppSettingValueAsString("Diamond_RiskGradeConversionDate")
            If String.IsNullOrWhiteSpace(dt) = True OrElse IsDate(dt) = False Then
                dt = CDate("8/8/2021").ToShortDateString
            End If

            Return dt
        End Function
        Public Shared Function QuoteHasConvertedRiskGradeLookupId(ByVal qqo As QuickQuoteObject, Optional ByRef conversionType As RiskGradeLookupIdConversionType = RiskGradeLookupIdConversionType.None, Optional ByRef oldAndNewRiskGradeLookupIds As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing, Optional ByRef keyIsPresent As Boolean = False) As Boolean
            Dim isOkay As Boolean = False
            conversionType = RiskGradeLookupIdConversionType.None
            oldAndNewRiskGradeLookupIds = Nothing
            keyIsPresent = False

            If qqo IsNot Nothing Then
                Dim dictionaryVal As String = qqo.GetDevDictionaryItem("", "HasConvertedRiskGradeLookupId")
                If String.IsNullOrWhiteSpace(dictionaryVal) = False Then
                    keyIsPresent = True
                    Dim qqHelper As New QuickQuoteHelperClass
                    isOkay = qqHelper.BitToBoolean(dictionaryVal)
                    Select Case UCase(dictionaryVal)
                        Case "NONE"
                            conversionType = RiskGradeLookupIdConversionType.None
                        Case "FIXED"
                            conversionType = RiskGradeLookupIdConversionType.Fixed
                        Case "VERIFIED"
                            conversionType = RiskGradeLookupIdConversionType.Verified
                        Case Else
                            If Len(dictionaryVal) > 5 AndAlso Left(UCase(dictionaryVal), 5) = "FIXED" Then
                                conversionType = RiskGradeLookupIdConversionType.Fixed
                                Dim remainingTxt As String = Right(dictionaryVal, Len(dictionaryVal) - 5)
                                If Len(remainingTxt) > 1 AndAlso Left(remainingTxt, 1) = "-" Then
                                    Dim rglTxt As String = Right(remainingTxt, Len(remainingTxt) - 1)
                                    oldAndNewRiskGradeLookupIds = ListOfGenericObjectWith2IntegerPropsFromString(rglTxt, objectdelimiter:=",", propDelimiter:="to", integerPairRequirement:=IntegerPairType.BothPositive)
                                End If
                            Else
                                If System.Enum.TryParse(Of DiamondImageToPackagePartSyncType)(dictionaryVal, conversionType) = False Then
                                    conversionType = RiskGradeLookupIdConversionType.None 'redundant
                                End If
                            End If
                    End Select
                    If conversionType = RiskGradeLookupIdConversionType.Fixed OrElse conversionType = RiskGradeLookupIdConversionType.Verified Then
                        isOkay = True
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Shared Sub Set_QuoteHasConvertedRiskGradeLookupId(ByVal qqo As QuickQuoteObject, Optional ByVal isOkay As Boolean = False, Optional ByVal conversionType As RiskGradeLookupIdConversionType = RiskGradeLookupIdConversionType.None, Optional ByVal oldAndNewRiskGradeLookupIds As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing)
            If qqo IsNot Nothing Then
                Dim okayTxt As String = isOkay.ToString
                If System.Enum.IsDefined(GetType(RiskGradeLookupIdConversionType), conversionType) = True AndAlso conversionType <> RiskGradeLookupIdConversionType.None Then
                    okayTxt = System.Enum.GetName(GetType(RiskGradeLookupIdConversionType), conversionType)
                    If conversionType = RiskGradeLookupIdConversionType.Fixed AndAlso oldAndNewRiskGradeLookupIds IsNot Nothing AndAlso oldAndNewRiskGradeLookupIds.Count > 0 Then
                        Dim rglTxt As String = ""
                        'For Each rglSet As QuickQuoteGenericObjectWithTwoIntegerProperties In oldAndNewRiskGradeLookupIds
                        '    If rglSet IsNot Nothing AndAlso rglSet.PassesPairTypeRequirement(IntegerPairType.BothPositive) = True Then
                        '        If String.IsNullOrWhiteSpace(rglTxt) = False Then
                        '            rglTxt &= ","
                        '        End If
                        '        rglTxt &= rglSet.Property1.ToString & "to" & rglSet.Property2.ToString
                        '    End If
                        'Next
                        rglTxt = StringForListOfGenericObjectWith2IntegerProps(oldAndNewRiskGradeLookupIds, objectdelimiter:=",", propDelimiter:="to", integerPairRequirement:=IntegerPairType.BothPositive)
                        If String.IsNullOrWhiteSpace(rglTxt) = False Then
                            okayTxt &= "-" & rglTxt
                        End If
                    End If
                End If
                qqo.SetDevDictionaryItem("", "HasConvertedRiskGradeLookupId", okayTxt)
            End If
        End Sub
        Public Function GetLatestDiamondRiskGradeLookupIdForPolicyId(ByVal polId As Integer, Optional ByRef inOldTable As Boolean = False, Optional ByRef oldTableGlClassCode As String = "", Optional ByRef inNewTable As Boolean = False, Optional ByRef newTableGlClassCode As String = "", Optional ByRef caughtDbError As Boolean = False) As Integer
            Dim riskGradeLookupId As Integer = 0
            inOldTable = False
            oldTableGlClassCode = ""
            inNewTable = False
            newTableGlClassCode = ""
            caughtDbError = False

            If polId > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "select TOP 1 PL.riskgradelookup_id"
                        .queryOrStoredProc &= ", newTableRecord.riskgradelookup_id as newRGLid, newTableRecord.glclasscode as newCC"
                        .queryOrStoredProc &= ", oldTableRecord.riskgradelookup_id as oldRGLid, oldTableRecord.glclasscode as oldCC"
                        .queryOrStoredProc &= " from PolicyLevel as PL with (nolock)"
                        .queryOrStoredProc &= " outer apply (select L.riskgradelookup_id, L.glclasscode from RiskGradeLookup as L with (nolock) where L.riskgradelookup_id = PL.riskgradelookup_id) as newTableRecord"
                        .queryOrStoredProc &= " outer apply (select B.riskgradelookup_id, B.glclasscode from TT314586_RiskGradeLookup_Backup as B with (nolock) where B.riskgradelookup_id = PL.riskgradelookup_id) as oldTableRecord"
                        .queryOrStoredProc &= " where PL.policy_id = " & polId.ToString
                        .queryOrStoredProc &= " and PL.riskgradelookup_id is not null and PL.riskgradelookup_id > 0"
                        .queryOrStoredProc &= " order by PL.policyimage_num desc, PL.policylevel_num desc"

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    riskGradeLookupId = .Item("riskgradelookup_id")
                                    If IsPositiveIntegerString(.Item("newRGLid").ToString.Trim) = True Then
                                        inNewTable = True
                                        newTableGlClassCode = .Item("newCC").ToString.Trim
                                    End If
                                    If IsPositiveIntegerString(.Item("oldRGLid").ToString.Trim) = True Then
                                        inOldTable = True
                                        oldTableGlClassCode = .Item("oldCC").ToString.Trim
                                    End If
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                caughtDbError = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return riskGradeLookupId
        End Function
        'added 9/14/2021
        Public Sub checkRiskGradeLookupId(ByVal currRiskGradeLookupId As String, ByVal policyId As Integer, ByVal stateId As Integer, ByVal qqoForSupplementalReferenceInfoOnly As QuickQuoteObject, ByRef riskGradeLookupIdToUse As String, Optional ByRef hasConvertedRiskGradeLookupId As Boolean = False, Optional ByRef conversionType As RiskGradeLookupIdConversionType = RiskGradeLookupIdConversionType.None, Optional ByVal diamondConversionDate As String = "")
            riskGradeLookupIdToUse = ""
            hasConvertedRiskGradeLookupId = False
            conversionType = RiskGradeLookupIdConversionType.None

            Dim diaRiskGradeLookupId As Integer = 0
            Dim inOldTable As Boolean = False
            Dim oldTableGlClassCode As String = ""
            Dim inNewTable As Boolean = False
            Dim newTableGlClassCode As String = ""
            Dim caughtDbError As Boolean = False

            If IsPositiveIntegerString(currRiskGradeLookupId) = True Then
                Dim currRiskGradeLookupIdAsInt As Integer = CInt(currRiskGradeLookupId)
                If stateId < 0 Then
                    stateId = 0
                End If
                If policyId > 0 Then
                    diaRiskGradeLookupId = GetLatestDiamondRiskGradeLookupIdForPolicyId(policyId, inOldTable:=inOldTable, oldTableGlClassCode:=oldTableGlClassCode, inNewTable:=inNewTable, newTableGlClassCode:=newTableGlClassCode, caughtDbError:=caughtDbError)
                    If diaRiskGradeLookupId > 0 Then
                        'something's in Diamond
                        If inNewTable = True Then
                            'in new table; good start... either correct in Diamond or old lookupId is still in new table
                            If diaRiskGradeLookupId = currRiskGradeLookupIdAsInt Then
                                'same as what we currently have; we've either already "updated from Diamond" or old lookupId is still in new table
                            Else
                                'different than what we currently have... Diamond value is likely correct; could query migration table to verify that old riskGradeLookupId (what we currently have) converts to what Diamond has
                                'will just assume Diamond is right
                                riskGradeLookupIdToUse = diaRiskGradeLookupId.ToString
                                hasConvertedRiskGradeLookupId = True
                                conversionType = RiskGradeLookupIdConversionType.Fixed
                            End If
                        Else
                            'not in new table
                            If inOldTable = True Then
                                'Diamond likely has old value
                                If diaRiskGradeLookupId = currRiskGradeLookupIdAsInt Then
                                    'same as what we currently have (confirmed to be old value); try to convert
                                    Dim caughtDbErrorOnConversionLookup As Boolean = False
                                    Dim newId As Integer = NewRiskGradeLookupIdForOldOneAndState(currRiskGradeLookupId, stateId, caughtDbError:=caughtDbErrorOnConversionLookup)
                                    If newId > 0 Then
                                        riskGradeLookupIdToUse = newId.ToString
                                        hasConvertedRiskGradeLookupId = True
                                        conversionType = RiskGradeLookupIdConversionType.Fixed
                                    End If
                                Else
                                    'different than what we currently have; not likely to happen; could check our current quote value, but we may not be able to tell which one needs to be converted
                                End If
                            Else
                                'Diamond has a value that's not in old or new table; not likely
                            End If
                        End If
                    End If
                End If
                If hasConvertedRiskGradeLookupId = False AndAlso caughtDbError = False Then
                    If qqoForSupplementalReferenceInfoOnly IsNot Nothing Then
                        If IsValidDateString(diamondConversionDate, mustBeGreaterThanDefaultDate:=True) = False Then
                            diamondConversionDate = RiskGradeConversionDate()
                        End If
                        If IsValidDateString(qqoForSupplementalReferenceInfoOnly.Database_QuickQuote_Inserted, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(diamondConversionDate, mustBeGreaterThanDefaultDate:=True) AndAlso CDate(qqoForSupplementalReferenceInfoOnly.Database_QuickQuote_Inserted) < CDate(diamondConversionDate) Then
                            'started before Diamond conversion
                            If IsValidDateString(qqoForSupplementalReferenceInfoOnly.Database_QuickQuote_Updated, mustBeGreaterThanDefaultDate:=True) = True Then
                                'has updated date
                                If CDate(qqoForSupplementalReferenceInfoOnly.Database_QuickQuote_Updated) < CDate(diamondConversionDate) Then
                                    'hasn't been updated since the Diamond conversion; need to convert
                                    Dim caughtDbErrorOnConversionLookup As Boolean = False
                                    Dim newId As Integer = NewRiskGradeLookupIdForOldOneAndState(currRiskGradeLookupId, stateId, caughtDbError:=caughtDbErrorOnConversionLookup)
                                    If newId > 0 Then
                                        riskGradeLookupIdToUse = newId.ToString
                                        hasConvertedRiskGradeLookupId = True
                                        conversionType = RiskGradeLookupIdConversionType.Fixed
                                    End If
                                Else
                                    'has been updated since Diamond conversion; see if it's been "updated from Diamond" since conversion date
                                    If IsPositiveIntegerString(qqoForSupplementalReferenceInfoOnly.Database_QuoteId) = True Then 'just checking for NewBusiness
                                        Dim caughtDbErrorOnUpdatedFromDiamondLookup As Boolean = False
                                        Dim dateUpdated As String = ""
                                        If UpdatedFromDiamondSinceSpecifiedDate(diamondConversionDate, quoteId:=CInt(qqoForSupplementalReferenceInfoOnly.Database_QuoteId), dateUpdated:=dateUpdated, caughtDbError:=caughtDbErrorOnUpdatedFromDiamondLookup) = False AndAlso caughtDbErrorOnUpdatedFromDiamondLookup = False Then
                                            'has not been "updated from Diamond"; need to convert
                                            Dim caughtDbErrorOnConversionLookup As Boolean = False
                                            Dim newId As Integer = NewRiskGradeLookupIdForOldOneAndState(currRiskGradeLookupId, stateId, caughtDbError:=caughtDbErrorOnConversionLookup)
                                            If newId > 0 Then
                                                riskGradeLookupIdToUse = newId.ToString
                                                hasConvertedRiskGradeLookupId = True
                                                conversionType = RiskGradeLookupIdConversionType.Fixed
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End Sub
        Public Enum RiskGradeLookupIdConversionType
            None = 0
            Fixed = 1
            Verified = 2
        End Enum
        Public Function NewRiskGradeLookupIdForOldOneAndState(ByVal oldRiskGradeLookupId As Integer, ByVal stateId As Integer, Optional ByRef caughtDbError As Boolean = False) As Integer
            Dim riskGradeLookupId As Integer = 0
            caughtDbError = False

            If oldRiskGradeLookupId > 0 Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                    With sso
                        .queryOrStoredProc = "select TOP 1 M.new_riskgrade_id"
                        .queryOrStoredProc &= " from TT314586_RiskGradeLookup_Migration as M with (nolock)"
                        .queryOrStoredProc &= " where M.old_riskgrade_id = " & oldRiskGradeLookupId.ToString
                        If stateId > 0 Then
                            .queryOrStoredProc &= " and M.state_id = " & stateId.ToString
                        End If
                        .queryOrStoredProc &= " order by M.new_riskgrade_id desc, M.state_id desc"

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    riskGradeLookupId = .Item("new_riskgrade_id")
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                caughtDbError = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return riskGradeLookupId
        End Function
        'added 9/15/2021
        Public Function UpdatedFromDiamondSinceSpecifiedDate(ByVal sinceDate As String, Optional ByVal policyNumber As String = "", Optional ByVal policyId As Integer = 0, Optional ByVal policyImageNum As Integer = 0, Optional ByVal quoteId As Integer = 0, Optional ByRef dateUpdated As String = "", Optional ByRef caughtDbError As Boolean = False) As Boolean
            Dim wasUpdated As Boolean = False
            dateUpdated = ""
            caughtDbError = False

            If IsValidDateString(sinceDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso (String.IsNullOrWhiteSpace(policyNumber) = False OrElse policyId > 0 OrElse quoteId > 0) Then
                Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
                    With sso
                        .queryOrStoredProc = "select TOP 1 DQ.inserted"
                        .queryOrStoredProc &= " from DiamondQuotes as DQ with (nolock)"
                        .queryOrStoredProc &= " where DQ.inserted > '" & CDate(sinceDate).ToString & "'"
                        If String.IsNullOrWhiteSpace(policyNumber) = False Then
                            .queryOrStoredProc &= " and DQ.policyNumber = '" & policyNumber & "'"
                        End If
                        If policyId > 0 Then
                            .queryOrStoredProc &= " and DQ.policyId = " & policyId.ToString
                            If policyImageNum > 0 Then
                                .queryOrStoredProc &= " and DQ.policyImageNum = " & policyImageNum.ToString
                            End If
                        End If
                        If quoteId > 0 Then
                            .queryOrStoredProc &= " and DQ.quoteId = " & quoteId.ToString
                        End If
                        .queryOrStoredProc &= " order by DQ.diamondQuoteId"

                        Using dr As SqlClient.SqlDataReader = .GetDataReader
                            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                                With dr
                                    .Read()
                                    dateUpdated = .Item("inserted").ToString.Trim
                                    wasUpdated = True
                                End With
                            ElseIf .hasError = True Then
                                'database error
                                caughtDbError = True
                            Else
                                'nothing found
                            End If
                        End Using
                    End With
                End Using
            End If

            Return wasUpdated
        End Function


        'added 9/27/2021
        Public Function GetStaticDataOptionsByTextOrValue(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal maxReturnCount As Integer = 0) As List(Of QuickQuoteStaticDataOption)
            Dim retOptions As List(Of QuickQuoteStaticDataOption) = Nothing

            'If options IsNot Nothing AndAlso options.Count > 0 Then
            '    If searchType = StaticDataOptionSearchType.None Then
            '        searchType = StaticDataOptionSearchType.ByText
            '    End If
            '    For Each o As QuickQuoteStaticDataOption In options
            '        If (searchType = StaticDataOptionSearchType.ByValue AndAlso isTextMatch(o.Value, valueOrText, matchType:=matchType) = True) OrElse (searchType = StaticDataOptionSearchType.ByText AndAlso isTextMatch(o.Text, valueOrText, matchType:=matchType) = True) Then
            '            If retOptions Is Nothing Then
            '                retOptions = New List(Of QuickQuoteStaticDataOption)
            '            End If
            '            retOptions.Add(o)
            '            If maxReturnCount > 0 AndAlso retOptions.Count >= maxReturnCount Then
            '                Exit For
            '            End If
            '        End If
            '    Next
            'End If
            Dim valueOrTextList As List(Of String) = Nothing
            If String.IsNullOrWhiteSpace(valueOrText) = False Then
                valueOrTextList = New List(Of String)
                valueOrTextList.Add(valueOrText)
            End If
            retOptions = GetStaticDataOptionsByTextOrValueList(options, searchType, valueOrTextList, matchType:=matchType, maxReturnCount:=maxReturnCount)

            Return retOptions
        End Function
        Public Function GetStaticDataOptionsByTextOrValueList(ByVal options As List(Of QuickQuoteStaticDataOption), ByVal searchType As StaticDataOptionSearchType, ByVal valueOrTextList As List(Of String), Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal maxReturnCount As Integer = 0) As List(Of QuickQuoteStaticDataOption)
            Dim retOptions As List(Of QuickQuoteStaticDataOption) = Nothing

            If options IsNot Nothing AndAlso options.Count > 0 Then
                If searchType = StaticDataOptionSearchType.None Then
                    searchType = StaticDataOptionSearchType.ByText
                End If
                For Each o As QuickQuoteStaticDataOption In options
                    If valueOrTextList IsNot Nothing AndAlso valueOrTextList.Count > 0 Then
                        Dim exitOptionLoop As Boolean = False
                        For Each valOrTxt As String In valueOrTextList
                            If (searchType = StaticDataOptionSearchType.ByValue AndAlso isTextMatch(o.Value, valOrTxt, matchType:=matchType) = True) OrElse (searchType = StaticDataOptionSearchType.ByText AndAlso isTextMatch(o.Text, valOrTxt, matchType:=matchType) = True) Then
                                If retOptions Is Nothing Then
                                    retOptions = New List(Of QuickQuoteStaticDataOption)
                                End If
                                retOptions.Add(o)
                                If maxReturnCount > 0 AndAlso retOptions.Count >= maxReturnCount Then
                                    Exit For
                                End If
                            End If
                        Next
                        If exitOptionLoop = True Then
                            Exit For
                        End If
                    Else
                        'just look for match on emptystring
                        If (searchType = StaticDataOptionSearchType.ByValue AndAlso isTextMatch(o.Value, "", matchType:=matchType) = True) OrElse (searchType = StaticDataOptionSearchType.ByText AndAlso isTextMatch(o.Text, "", matchType:=matchType) = True) Then
                            If retOptions Is Nothing Then
                                retOptions = New List(Of QuickQuoteStaticDataOption)
                            End If
                            retOptions.Add(o)
                            If maxReturnCount > 0 AndAlso retOptions.Count >= maxReturnCount Then
                                Exit For
                            End If
                        End If
                    End If
                Next
            End If

            Return retOptions
        End Function
        Public Sub CheckBillingPayPlanIdForSave(ByRef qqo As QuickQuoteObject, Optional ByVal okayToUpdateIfNeeded As Boolean = True, Optional ByRef beforeAndAfterValues_BillingPayPlanId As QuickQuoteGenericObjectWithTwoStringProperties = Nothing, Optional ByRef beforeAndAfterValues_CurrentPayplanId As QuickQuoteGenericObjectWithTwoStringProperties = Nothing)
            beforeAndAfterValues_BillingPayPlanId = Nothing
            Dim beforeVal_BillingPayPlanId As String = ""
            Dim afterVal_BillingPayPlanId As String = ""
            beforeAndAfterValues_CurrentPayplanId = Nothing
            Dim beforeVal_CurrentPayplanId As String = ""
            Dim afterVal_CurrentPayplanId As String = ""

            If qqo IsNot Nothing Then
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseBillingPayPlanIdConvertedAtSave(False)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_BillingPayPlanIdConvertedAtSave("")
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseCurrentPayPlanIdConvertedAtSave(False)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_CurrentPayPlanIdConvertedAtSave("")

                Select Case qqo.QuoteTransactionType
                    'Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                    '    'nothing yet
                    'Case QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage
                    '    'nothing yet
                    Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage
                        'note: will not change based on effDate
                        Dim isCurrentPayPlanIdOkay As Boolean = False
                        If IsPositiveIntegerString(qqo.CurrentPayplanId) = True Then
                            beforeVal_CurrentPayplanId = qqo.CurrentPayplanId
                            If IsPositiveIntegerString(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialCurrentPayPlanIdAtRetrieval) = True Then
                                If CInt(qqo.CurrentPayplanId) = CInt(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialCurrentPayPlanIdAtRetrieval) Then
                                    'it hasn't changed, so we're good
                                    isCurrentPayPlanIdOkay = True
                                ElseIf IsPositiveIntegerString(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.ConvertedCurrentPayPlanIdAtRetrieval) = True AndAlso CInt(beforeVal_CurrentPayplanId) = CInt(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.ConvertedCurrentPayPlanIdAtRetrieval) Then
                                    'it's the same as what it was initially converted to, so switch it back
                                    afterVal_CurrentPayplanId = qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialCurrentPayPlanIdAtRetrieval
                                    isCurrentPayPlanIdOkay = True
                                End If
                                If isCurrentPayPlanIdOkay = False Then
                                    'check initial option to get the info needed to convert to the right payplan
                                    Dim sdoInitial As QuickQuoteStaticDataOption = Nothing
                                    If qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialCurrentPayPlanStaticDataOptionAtRetrieval IsNot Nothing Then
                                        sdoInitial = qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialCurrentPayPlanStaticDataOptionAtRetrieval
                                    Else
                                        sdoInitial = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialCurrentPayPlanIdAtRetrieval)
                                    End If
                                    If sdoInitial IsNot Nothing Then
                                        If sdoInitial.MiscellaneousAttributes IsNot Nothing AndAlso sdoInitial.MiscellaneousAttributes.Count > 0 Then
                                            Dim sdaInitialStartDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoInitial.MiscellaneousAttributes, "startDate")
                                            Dim sdaInitialEndDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoInitial.MiscellaneousAttributes, "endDate")
                                            If sdaInitialStartDate IsNot Nothing AndAlso sdaInitialEndDate IsNot Nothing AndAlso IsValidDateString(sdaInitialStartDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(sdaInitialEndDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                                                'initial has start and end dates; now get current option
                                                Dim sdoCurrent As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, beforeVal_CurrentPayplanId)
                                                If sdoCurrent IsNot Nothing Then
                                                    If sdoCurrent.MiscellaneousAttributes IsNot Nothing AndAlso sdoCurrent.MiscellaneousAttributes.Count > 0 Then
                                                        Dim sdaCurrentStartDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "startDate")
                                                        Dim sdaCurrentEndDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "endDate")
                                                        Dim sdaCurrentBillMethodId As QuickQuoteStaticDataAttribute = Nothing
                                                        If sdaCurrentStartDate IsNot Nothing AndAlso sdaCurrentEndDate IsNot Nothing AndAlso IsValidDateString(sdaCurrentStartDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(sdaCurrentEndDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                                                            'current has dates; now see if they match initial
                                                            If sdaCurrentStartDate.nvp_value = sdaInitialStartDate.nvp_value AndAlso sdaCurrentEndDate.nvp_value = sdaInitialEndDate.nvp_value Then
                                                                'dates are the same, so we're close; verify billMethodId just in case
                                                                If IsPositiveIntegerString(qqo.BillMethodId) = True Then
                                                                    sdaCurrentBillMethodId = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "BillMethodId")
                                                                    If sdaCurrentBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaCurrentBillMethodId.nvp_value) = True Then
                                                                        'option has a value for billMethodId
                                                                        If CInt(sdaCurrentBillMethodId.nvp_value) = CInt(qqo.BillMethodId) Then
                                                                            'looks good
                                                                            isCurrentPayPlanIdOkay = True
                                                                        Else
                                                                            'appears to have the wrong billMethodId; see if it has a value for the other billMethod
                                                                            If sdoCurrent.MiscellaneousElements IsNot Nothing AndAlso sdoCurrent.MiscellaneousElements.Count > 0 Then
                                                                                Dim sdeOtherBillMethodPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoCurrent.MiscellaneousElements, "OtherBillMethodPayPlanId")
                                                                                If sdeOtherBillMethodPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeOtherBillMethodPayPlanId.nvp_value) = True Then
                                                                                    afterVal_CurrentPayplanId = sdeOtherBillMethodPayPlanId.nvp_value
                                                                                    isCurrentPayPlanIdOkay = True
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                                If isCurrentPayPlanIdOkay = False Then
                                                                    'not able to verify billMethodId; assume it's correct since the dates are right
                                                                    isCurrentPayPlanIdOkay = True
                                                                End If
                                                            Else
                                                                'dates don't match; pull payplan options for initial dates and see if we can find the equivalent
                                                                'see if we can use the billMethodId in the lookup
                                                                Dim billMethodIdToUse As String = ""
                                                                If IsPositiveIntegerString(qqo.BillMethodId) = True Then
                                                                    billMethodIdToUse = qqo.BillMethodId
                                                                Else
                                                                    If sdaCurrentBillMethodId Is Nothing Then
                                                                        sdaCurrentBillMethodId = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "BillMethodId")
                                                                    End If
                                                                    If sdaCurrentBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaCurrentBillMethodId.nvp_value) = True Then
                                                                        billMethodIdToUse = sdaCurrentBillMethodId.nvp_value
                                                                    End If
                                                                End If
                                                                Dim optionAttributes As New List(Of QuickQuoteStaticDataAttribute)
                                                                Dim attInitialStart As New QuickQuoteStaticDataAttribute
                                                                With attInitialStart
                                                                    .nvp_name = "startDate"
                                                                    .nvp_value = sdaInitialStartDate.nvp_value
                                                                End With
                                                                optionAttributes.Add(attInitialStart)
                                                                Dim attInitialEnd As New QuickQuoteStaticDataAttribute
                                                                With attInitialEnd
                                                                    .nvp_name = "endDate"
                                                                    .nvp_value = sdaInitialEndDate.nvp_value
                                                                End With
                                                                optionAttributes.Add(attInitialEnd)
                                                                Dim billMethodAtt As QuickQuoteStaticDataAttribute = Nothing
                                                                If IsPositiveIntegerString(billMethodIdToUse) = True Then
                                                                    billMethodAtt = New QuickQuoteStaticDataAttribute
                                                                    With billMethodAtt
                                                                        .nvp_name = "BillMethodId"
                                                                        .nvp_value = billMethodIdToUse
                                                                    End With
                                                                    optionAttributes.Add(billMethodAtt)
                                                                End If

                                                                'pull current payplanType to see if we can match on that
                                                                Dim currentPayPlanTypeTxt As String = ""
                                                                Dim sdaCurrentPayPlanType As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "PayPlanType")
                                                                If sdaCurrentPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaCurrentPayPlanType.nvp_value) = False Then
                                                                    currentPayPlanTypeTxt = sdaCurrentPayPlanType.nvp_value
                                                                End If

                                                                Dim initialPayPlanOptions As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
                                                                If initialPayPlanOptions IsNot Nothing AndAlso initialPayPlanOptions.Count > 0 Then
                                                                    Dim ppoValAndInitialPrevIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                    Dim ppoValAndInitialNextIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                    For Each ppo As QuickQuoteStaticDataOption In initialPayPlanOptions
                                                                        If ppo IsNot Nothing AndAlso IsPositiveIntegerString(ppo.Value) = True Then
                                                                            '1st check payplan txt; then next/prev
                                                                            If String.IsNullOrWhiteSpace(currentPayPlanTypeTxt) = False AndAlso ppo.MiscellaneousAttributes IsNot Nothing AndAlso ppo.MiscellaneousAttributes.Count > 0 Then
                                                                                Dim sdaPpoPayPlanType As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(ppo.MiscellaneousAttributes, "PayPlanType")
                                                                                If sdaPpoPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaPpoPayPlanType.nvp_value) = False AndAlso sdaPpoPayPlanType.nvp_value = currentPayPlanTypeTxt Then
                                                                                    'afterVal_CurrentPayplanId = sdaPpoPayPlanType.nvp_value
                                                                                    'updated 5/2/2022
                                                                                    afterVal_CurrentPayplanId = ppo.Value
                                                                                    isCurrentPayPlanIdOkay = True
                                                                                    Exit For
                                                                                End If
                                                                            End If
                                                                            If isCurrentPayPlanIdOkay = False Then
                                                                                'now check next/prev
                                                                                If ppo.MiscellaneousElements IsNot Nothing AndAlso ppo.MiscellaneousElements.Count > 0 Then
                                                                                    Dim initialPrevBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                    Dim initialNextBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                    Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                    'If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True AndAlso CInt(sdePreviousBillingPayPlanId.nvp_value) = CInt(beforeVal_CurrentPayplanId) Then
                                                                                    '    afterVal_CurrentPayplanId = sdePreviousBillingPayPlanId.nvp_value
                                                                                    '    isCurrentPayPlanIdOkay = True
                                                                                    '    Exit For
                                                                                    'End If
                                                                                    'updated 5/2/2022
                                                                                    If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True Then
                                                                                        initialPrevBillingPayPlanId = CInt(sdePreviousBillingPayPlanId.nvp_value)
                                                                                        If initialPrevBillingPayPlanId = CInt(beforeVal_CurrentPayplanId) Then
                                                                                            afterVal_CurrentPayplanId = ppo.Value
                                                                                            isCurrentPayPlanIdOkay = True
                                                                                            Exit For
                                                                                        End If
                                                                                    End If
                                                                                    If isCurrentPayPlanIdOkay = False Then
                                                                                        Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                        'If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True AndAlso CInt(sdeNextBillingPayPlanId.nvp_value) = CInt(beforeVal_CurrentPayplanId) Then
                                                                                        '    afterVal_CurrentPayplanId = sdeNextBillingPayPlanId.nvp_value
                                                                                        '    isCurrentPayPlanIdOkay = True
                                                                                        '    Exit For
                                                                                        'End If
                                                                                        'updated 5/2/2022
                                                                                        If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True Then
                                                                                            initialNextBillingPayPlanId = CInt(sdeNextBillingPayPlanId.nvp_value)
                                                                                            If initialNextBillingPayPlanId = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                afterVal_CurrentPayplanId = ppo.Value
                                                                                                isCurrentPayPlanIdOkay = True
                                                                                                Exit For
                                                                                            End If
                                                                                        End If

                                                                                        'added 5/2/2022
                                                                                        'now build up prevNext lists so we can look later
                                                                                        If isCurrentPayPlanIdOkay = False Then
                                                                                            If initialPrevBillingPayPlanId > 0 Then
                                                                                                Dim ppoValAndInitialPrevId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                With ppoValAndInitialPrevId
                                                                                                    .Property1 = CInt(ppo.Value)
                                                                                                    .Property2 = initialPrevBillingPayPlanId
                                                                                                End With
                                                                                                If ppoValAndInitialPrevIdList Is Nothing Then
                                                                                                    ppoValAndInitialPrevIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                End If
                                                                                                ppoValAndInitialPrevIdList.Add(ppoValAndInitialPrevId)
                                                                                            End If
                                                                                            If initialNextBillingPayPlanId > 0 Then
                                                                                                Dim ppoValAndInitialNextId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                With ppoValAndInitialNextId
                                                                                                    .Property1 = CInt(ppo.Value)
                                                                                                    .Property2 = initialNextBillingPayPlanId
                                                                                                End With
                                                                                                If ppoValAndInitialNextIdList Is Nothing Then
                                                                                                    ppoValAndInitialNextIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                End If
                                                                                                ppoValAndInitialNextIdList.Add(ppoValAndInitialNextId)
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    Next

                                                                    'added 5/2/2022
                                                                    'now go through additional prev/next values to see if we can find it
                                                                    If isCurrentPayPlanIdOkay = False Then
                                                                        If ppoValAndInitialPrevIdList IsNot Nothing AndAlso ppoValAndInitialPrevIdList.Count > 0 Then
                                                                            For Each p As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialPrevIdList
                                                                                If p IsNot Nothing AndAlso p.Property1 > 0 AndAlso p.Property2 > 0 Then
                                                                                    Dim prevIdToCheck As Integer = p.Property2
                                                                                    Dim okayToContinue As Boolean = True
                                                                                    Do While okayToContinue = True
                                                                                        If prevIdToCheck > 0 Then
                                                                                            Dim oPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, prevIdToCheck.ToString)
                                                                                            If oPrev IsNot Nothing AndAlso oPrev.MiscellaneousElements IsNot Nothing AndAlso oPrev.MiscellaneousElements.Count > 0 Then
                                                                                                Dim ePrev As QuickQuoteStaticDataElement = StaticDataElementForName(oPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                                If ePrev IsNot Nothing AndAlso IsPositiveIntegerString(ePrev.nvp_value) = True Then
                                                                                                    prevIdToCheck = CInt(ePrev.nvp_value)
                                                                                                    If prevIdToCheck = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                        afterVal_CurrentPayplanId = p.Property1.ToString
                                                                                                        isCurrentPayPlanIdOkay = True
                                                                                                    End If
                                                                                                Else
                                                                                                    okayToContinue = False
                                                                                                End If
                                                                                            Else
                                                                                                okayToContinue = False
                                                                                            End If
                                                                                        Else
                                                                                            okayToContinue = False
                                                                                        End If
                                                                                        If okayToContinue = False OrElse isCurrentPayPlanIdOkay = True Then
                                                                                            Exit Do
                                                                                        End If
                                                                                    Loop

                                                                                    If isCurrentPayPlanIdOkay = True Then
                                                                                        Exit For
                                                                                    End If
                                                                                End If
                                                                            Next
                                                                        End If
                                                                        If isCurrentPayPlanIdOkay = False Then
                                                                            If ppoValAndInitialNextIdList IsNot Nothing AndAlso ppoValAndInitialNextIdList.Count > 0 Then
                                                                                For Each n As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialNextIdList
                                                                                    If n IsNot Nothing AndAlso n.Property1 > 0 AndAlso n.Property2 > 0 Then
                                                                                        Dim nextIdToCheck As Integer = n.Property2
                                                                                        Dim okayToContinue As Boolean = True
                                                                                        Do While okayToContinue = True
                                                                                            If nextIdToCheck > 0 Then
                                                                                                Dim oNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, nextIdToCheck.ToString)
                                                                                                If oNext IsNot Nothing AndAlso oNext.MiscellaneousElements IsNot Nothing AndAlso oNext.MiscellaneousElements.Count > 0 Then
                                                                                                    Dim eNext As QuickQuoteStaticDataElement = StaticDataElementForName(oNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                                    If eNext IsNot Nothing AndAlso IsPositiveIntegerString(eNext.nvp_value) = True Then
                                                                                                        nextIdToCheck = CInt(eNext.nvp_value)
                                                                                                        If nextIdToCheck = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                            afterVal_CurrentPayplanId = n.Property1.ToString
                                                                                                            isCurrentPayPlanIdOkay = True
                                                                                                        End If
                                                                                                    Else
                                                                                                        okayToContinue = False
                                                                                                    End If
                                                                                                Else
                                                                                                    okayToContinue = False
                                                                                                End If
                                                                                            Else
                                                                                                okayToContinue = False
                                                                                            End If
                                                                                            If okayToContinue = False OrElse isCurrentPayPlanIdOkay = True Then
                                                                                                Exit Do
                                                                                            End If
                                                                                        Loop

                                                                                        If isCurrentPayPlanIdOkay = True Then
                                                                                            Exit For
                                                                                        End If
                                                                                    End If
                                                                                Next
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                                If isCurrentPayPlanIdOkay = False Then
                                                                    'see if maybe we can find it w/o the billMethod attribute
                                                                    If billMethodAtt IsNot Nothing Then
                                                                        optionAttributes.Remove(billMethodAtt)
                                                                        Dim initialPayPlanOptionsWithoutBillMethod As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
                                                                        If initialPayPlanOptionsWithoutBillMethod IsNot Nothing AndAlso initialPayPlanOptionsWithoutBillMethod.Count > 0 Then
                                                                            Dim ppoValAndInitialPrevIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                            Dim ppoValAndInitialNextIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                            For Each ppo As QuickQuoteStaticDataOption In initialPayPlanOptions
                                                                                If ppo IsNot Nothing AndAlso IsPositiveIntegerString(ppo.Value) = True Then
                                                                                    '1st check payplan txt; then next/prev
                                                                                    If String.IsNullOrWhiteSpace(currentPayPlanTypeTxt) = False AndAlso ppo.MiscellaneousAttributes IsNot Nothing AndAlso ppo.MiscellaneousAttributes.Count > 0 Then
                                                                                        Dim sdaPpoPayPlanType As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(ppo.MiscellaneousAttributes, "PayPlanType")
                                                                                        If sdaPpoPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaPpoPayPlanType.nvp_value) = False AndAlso sdaPpoPayPlanType.nvp_value = currentPayPlanTypeTxt Then
                                                                                            'afterVal_CurrentPayplanId = sdaPpoPayPlanType.nvp_value
                                                                                            'updated 5/2/2022
                                                                                            afterVal_CurrentPayplanId = ppo.Value
                                                                                            isCurrentPayPlanIdOkay = True
                                                                                            Exit For
                                                                                        End If
                                                                                    End If
                                                                                    If isCurrentPayPlanIdOkay = False Then
                                                                                        'now check next/prev
                                                                                        If ppo.MiscellaneousElements IsNot Nothing AndAlso ppo.MiscellaneousElements.Count > 0 Then
                                                                                            Dim initialPrevBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                            Dim initialNextBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                            Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                            'If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True AndAlso CInt(sdePreviousBillingPayPlanId.nvp_value) = CInt(beforeVal_CurrentPayplanId) Then
                                                                                            '    afterVal_CurrentPayplanId = sdePreviousBillingPayPlanId.nvp_value
                                                                                            '    isCurrentPayPlanIdOkay = True
                                                                                            '    Exit For
                                                                                            'End If
                                                                                            'updated 5/2/2022
                                                                                            If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True Then
                                                                                                initialPrevBillingPayPlanId = CInt(sdePreviousBillingPayPlanId.nvp_value)
                                                                                                If initialPrevBillingPayPlanId = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                    afterVal_CurrentPayplanId = ppo.Value
                                                                                                    isCurrentPayPlanIdOkay = True
                                                                                                    Exit For
                                                                                                End If
                                                                                            End If
                                                                                            If isCurrentPayPlanIdOkay = False Then
                                                                                                Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                                'If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True AndAlso CInt(sdeNextBillingPayPlanId.nvp_value) = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                '    afterVal_CurrentPayplanId = sdeNextBillingPayPlanId.nvp_value
                                                                                                '    isCurrentPayPlanIdOkay = True
                                                                                                '    Exit For
                                                                                                'End If
                                                                                                'updated 5/2/2022
                                                                                                If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True Then
                                                                                                    initialNextBillingPayPlanId = CInt(sdeNextBillingPayPlanId.nvp_value)
                                                                                                    If initialNextBillingPayPlanId = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                        afterVal_CurrentPayplanId = ppo.Value
                                                                                                        isCurrentPayPlanIdOkay = True
                                                                                                        Exit For
                                                                                                    End If
                                                                                                End If

                                                                                                'added 5/2/2022
                                                                                                'now build up prevNext lists so we can look later
                                                                                                If isCurrentPayPlanIdOkay = False Then
                                                                                                    If initialPrevBillingPayPlanId > 0 Then
                                                                                                        Dim ppoValAndInitialPrevId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                        With ppoValAndInitialPrevId
                                                                                                            .Property1 = CInt(ppo.Value)
                                                                                                            .Property2 = initialPrevBillingPayPlanId
                                                                                                        End With
                                                                                                        If ppoValAndInitialPrevIdList Is Nothing Then
                                                                                                            ppoValAndInitialPrevIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                        End If
                                                                                                        ppoValAndInitialPrevIdList.Add(ppoValAndInitialPrevId)
                                                                                                    End If
                                                                                                    If initialNextBillingPayPlanId > 0 Then
                                                                                                        Dim ppoValAndInitialNextId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                        With ppoValAndInitialNextId
                                                                                                            .Property1 = CInt(ppo.Value)
                                                                                                            .Property2 = initialNextBillingPayPlanId
                                                                                                        End With
                                                                                                        If ppoValAndInitialNextIdList Is Nothing Then
                                                                                                            ppoValAndInitialNextIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                        End If
                                                                                                        ppoValAndInitialNextIdList.Add(ppoValAndInitialNextId)
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            Next

                                                                            'added 5/2/2022
                                                                            'now go through additional prev/next values to see if we can find it
                                                                            If isCurrentPayPlanIdOkay = False Then
                                                                                If ppoValAndInitialPrevIdList IsNot Nothing AndAlso ppoValAndInitialPrevIdList.Count > 0 Then
                                                                                    For Each p As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialPrevIdList
                                                                                        If p IsNot Nothing AndAlso p.Property1 > 0 AndAlso p.Property2 > 0 Then
                                                                                            Dim prevIdToCheck As Integer = p.Property2
                                                                                            Dim okayToContinue As Boolean = True
                                                                                            Do While okayToContinue = True
                                                                                                If prevIdToCheck > 0 Then
                                                                                                    Dim oPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, prevIdToCheck.ToString)
                                                                                                    If oPrev IsNot Nothing AndAlso oPrev.MiscellaneousElements IsNot Nothing AndAlso oPrev.MiscellaneousElements.Count > 0 Then
                                                                                                        Dim ePrev As QuickQuoteStaticDataElement = StaticDataElementForName(oPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                                        If ePrev IsNot Nothing AndAlso IsPositiveIntegerString(ePrev.nvp_value) = True Then
                                                                                                            prevIdToCheck = CInt(ePrev.nvp_value)
                                                                                                            If prevIdToCheck = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                                afterVal_CurrentPayplanId = p.Property1.ToString
                                                                                                                isCurrentPayPlanIdOkay = True
                                                                                                            End If
                                                                                                        Else
                                                                                                            okayToContinue = False
                                                                                                        End If
                                                                                                    Else
                                                                                                        okayToContinue = False
                                                                                                    End If
                                                                                                Else
                                                                                                    okayToContinue = False
                                                                                                End If
                                                                                                If okayToContinue = False OrElse isCurrentPayPlanIdOkay = True Then
                                                                                                    Exit Do
                                                                                                End If
                                                                                            Loop

                                                                                            If isCurrentPayPlanIdOkay = True Then
                                                                                                Exit For
                                                                                            End If
                                                                                        End If
                                                                                    Next
                                                                                End If
                                                                                If isCurrentPayPlanIdOkay = False Then
                                                                                    If ppoValAndInitialNextIdList IsNot Nothing AndAlso ppoValAndInitialNextIdList.Count > 0 Then
                                                                                        For Each n As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialNextIdList
                                                                                            If n IsNot Nothing AndAlso n.Property1 > 0 AndAlso n.Property2 > 0 Then
                                                                                                Dim nextIdToCheck As Integer = n.Property2
                                                                                                Dim okayToContinue As Boolean = True
                                                                                                Do While okayToContinue = True
                                                                                                    If nextIdToCheck > 0 Then
                                                                                                        Dim oNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, nextIdToCheck.ToString)
                                                                                                        If oNext IsNot Nothing AndAlso oNext.MiscellaneousElements IsNot Nothing AndAlso oNext.MiscellaneousElements.Count > 0 Then
                                                                                                            Dim eNext As QuickQuoteStaticDataElement = StaticDataElementForName(oNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                                            If eNext IsNot Nothing AndAlso IsPositiveIntegerString(eNext.nvp_value) = True Then
                                                                                                                nextIdToCheck = CInt(eNext.nvp_value)
                                                                                                                If nextIdToCheck = CInt(beforeVal_CurrentPayplanId) Then
                                                                                                                    afterVal_CurrentPayplanId = n.Property1.ToString
                                                                                                                    isCurrentPayPlanIdOkay = True
                                                                                                                End If
                                                                                                            Else
                                                                                                                okayToContinue = False
                                                                                                            End If
                                                                                                        Else
                                                                                                            okayToContinue = False
                                                                                                        End If
                                                                                                    Else
                                                                                                        okayToContinue = False
                                                                                                    End If
                                                                                                    If okayToContinue = False OrElse isCurrentPayPlanIdOkay = True Then
                                                                                                        Exit Do
                                                                                                    End If
                                                                                                Loop

                                                                                                If isCurrentPayPlanIdOkay = True Then
                                                                                                    Exit For
                                                                                                End If
                                                                                            End If
                                                                                        Next
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If

                            If IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then 'note: properties will set both as long as OnlyUsePropertyToSetFieldWithSameName property is False; need to use True for Endorsements
                                'beforeAndAfterValues = New QuickQuoteGenericObjectWithTwoStringProperties
                                'With beforeAndAfterValues
                                '    .Property1 = beforeVal
                                '    .Property2 = afterVal
                                'End With
                                If okayToUpdateIfNeeded = True Then 'here since the property being set could change based on tranType (i.e. maybe currentPayPlanId for Endorsements)
                                    'qqo.CurrentPayPlanId = afterVal_CurrentPayPlanId 'note: will also set BillingPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    Dim defaultPayPlanIds As List(Of Integer) = Default_PayPlanIds()
                                    If defaultPayPlanIds IsNot Nothing AndAlso defaultPayPlanIds.Count > 0 AndAlso defaultPayPlanIds.Contains(CInt(afterVal_CurrentPayplanId)) = False Then
                                        'may need to Save differently (using different/new properties) in this case to make sure what's being loaded in VR still works
                                        'qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseBillingPayPlanIdConvertedAtSave(True)
                                        'qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_BillingPayPlanIdConvertedAtSave(afterVal_BillingPayPlanId)
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseCurrentPayPlanIdConvertedAtSave(True)
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_CurrentPayPlanIdConvertedAtSave(afterVal_CurrentPayplanId)
                                    Else
                                        qqo.OnlyUsePropertyToSetFieldWithSameName = True
                                        qqo.CurrentPayplanId = afterVal_CurrentPayplanId 'note: will also set BillingPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    End If
                                End If
                            End If
                        End If
                        Dim isBillingPayPlanIdOkay As Boolean = False
                        If IsPositiveIntegerString(qqo.BillingPayPlanId) = True Then
                            beforeVal_BillingPayPlanId = qqo.BillingPayPlanId
                            If IsPositiveIntegerString(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanIdAtRetrieval) Then
                                If CInt(qqo.BillingPayPlanId) = CInt(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanIdAtRetrieval) Then
                                    'it hasn't changed, so we're good
                                    isBillingPayPlanIdOkay = True
                                ElseIf IsPositiveIntegerString(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.ConvertedBillingPayPlanIdAtRetrieval) = True AndAlso CInt(beforeVal_BillingPayPlanId) = CInt(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.ConvertedBillingPayPlanIdAtRetrieval) Then
                                    'it's the same as what it was initially converted to, so switch it back
                                    afterVal_BillingPayPlanId = qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanIdAtRetrieval
                                    isBillingPayPlanIdOkay = True
                                End If
                            End If
                            If isBillingPayPlanIdOkay = False Then
                                '1st check to see if whatever happened for currentPayPlanId can be applied here
                                If IsPositiveIntegerString(beforeVal_CurrentPayplanId) = True AndAlso CInt(beforeVal_BillingPayPlanId) = CInt(beforeVal_CurrentPayplanId) AndAlso isCurrentPayPlanIdOkay = True Then
                                    If IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then
                                        afterVal_BillingPayPlanId = afterVal_CurrentPayplanId
                                        isBillingPayPlanIdOkay = True
                                    Else
                                        'must already be okay
                                        isBillingPayPlanIdOkay = True
                                    End If
                                End If
                                If isBillingPayPlanIdOkay = False Then
                                    If IsPositiveIntegerString(qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanIdAtRetrieval) Then
                                        'check initial option to get the info needed to convert to the right payplan
                                        Dim sdoInitial As QuickQuoteStaticDataOption = Nothing
                                        If qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanStaticDataOptionAtRetrieval IsNot Nothing Then
                                            sdoInitial = qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanStaticDataOptionAtRetrieval
                                        Else
                                            sdoInitial = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.InitialBillingPayPlanIdAtRetrieval)
                                        End If
                                        If sdoInitial IsNot Nothing Then
                                            If sdoInitial.MiscellaneousAttributes IsNot Nothing AndAlso sdoInitial.MiscellaneousAttributes.Count > 0 Then
                                                Dim sdaInitialStartDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoInitial.MiscellaneousAttributes, "startDate")
                                                Dim sdaInitialEndDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoInitial.MiscellaneousAttributes, "endDate")
                                                If sdaInitialStartDate IsNot Nothing AndAlso sdaInitialEndDate IsNot Nothing AndAlso IsValidDateString(sdaInitialStartDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(sdaInitialEndDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                                                    'initial has start and end dates; now get current option
                                                    Dim sdoCurrent As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, beforeVal_BillingPayPlanId)
                                                    If sdoCurrent IsNot Nothing Then
                                                        If sdoCurrent.MiscellaneousAttributes IsNot Nothing AndAlso sdoCurrent.MiscellaneousAttributes.Count > 0 Then
                                                            Dim sdaCurrentStartDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "startDate")
                                                            Dim sdaCurrentEndDate As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "endDate")
                                                            Dim sdaCurrentBillMethodId As QuickQuoteStaticDataAttribute = Nothing
                                                            If sdaCurrentStartDate IsNot Nothing AndAlso sdaCurrentEndDate IsNot Nothing AndAlso IsValidDateString(sdaCurrentStartDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(sdaCurrentEndDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                                                                'current has dates; now see if they match initial
                                                                If sdaCurrentStartDate.nvp_value = sdaInitialStartDate.nvp_value AndAlso sdaCurrentEndDate.nvp_value = sdaInitialEndDate.nvp_value Then
                                                                    'dates are the same, so we're close; verify billMethodId just in case
                                                                    If IsPositiveIntegerString(qqo.BillMethodId) = True Then
                                                                        sdaCurrentBillMethodId = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "BillMethodId")
                                                                        If sdaCurrentBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaCurrentBillMethodId.nvp_value) = True Then
                                                                            'option has a value for billMethodId
                                                                            If CInt(sdaCurrentBillMethodId.nvp_value) = CInt(qqo.BillMethodId) Then
                                                                                'looks good
                                                                                isBillingPayPlanIdOkay = True
                                                                            Else
                                                                                'appears to have the wrong billMethodId; see if it has a value for the other billMethod
                                                                                If sdoCurrent.MiscellaneousElements IsNot Nothing AndAlso sdoCurrent.MiscellaneousElements.Count > 0 Then
                                                                                    Dim sdeOtherBillMethodPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoCurrent.MiscellaneousElements, "OtherBillMethodPayPlanId")
                                                                                    If sdeOtherBillMethodPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeOtherBillMethodPayPlanId.nvp_value) = True Then
                                                                                        afterVal_BillingPayPlanId = sdeOtherBillMethodPayPlanId.nvp_value
                                                                                        isBillingPayPlanIdOkay = True
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    If isBillingPayPlanIdOkay = False Then
                                                                        'not able to verify billMethodId; assume it's correct since the dates are right
                                                                        isBillingPayPlanIdOkay = True
                                                                    End If
                                                                Else
                                                                    'dates don't match; pull payplan options for initial dates and see if we can find the equivalent
                                                                    'see if we can use the billMethodId in the lookup
                                                                    Dim billMethodIdToUse As String = ""
                                                                    If IsPositiveIntegerString(qqo.BillMethodId) = True Then
                                                                        billMethodIdToUse = qqo.BillMethodId
                                                                    Else
                                                                        If sdaCurrentBillMethodId Is Nothing Then
                                                                            sdaCurrentBillMethodId = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "BillMethodId")
                                                                        End If
                                                                        If sdaCurrentBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaCurrentBillMethodId.nvp_value) = True Then
                                                                            billMethodIdToUse = sdaCurrentBillMethodId.nvp_value
                                                                        End If
                                                                    End If
                                                                    Dim optionAttributes As New List(Of QuickQuoteStaticDataAttribute)
                                                                    Dim attInitialStart As New QuickQuoteStaticDataAttribute
                                                                    With attInitialStart
                                                                        .nvp_name = "startDate"
                                                                        .nvp_value = sdaInitialStartDate.nvp_value
                                                                    End With
                                                                    optionAttributes.Add(attInitialStart)
                                                                    Dim attInitialEnd As New QuickQuoteStaticDataAttribute
                                                                    With attInitialEnd
                                                                        .nvp_name = "endDate"
                                                                        .nvp_value = sdaInitialEndDate.nvp_value
                                                                    End With
                                                                    optionAttributes.Add(attInitialEnd)
                                                                    Dim billMethodAtt As QuickQuoteStaticDataAttribute = Nothing
                                                                    If IsPositiveIntegerString(billMethodIdToUse) = True Then
                                                                        billMethodAtt = New QuickQuoteStaticDataAttribute
                                                                        With billMethodAtt
                                                                            .nvp_name = "BillMethodId"
                                                                            .nvp_value = billMethodIdToUse
                                                                        End With
                                                                        optionAttributes.Add(billMethodAtt)
                                                                    End If

                                                                    'pull current payplanType to see if we can match on that
                                                                    Dim currentPayPlanTypeTxt As String = ""
                                                                    Dim sdaCurrentPayPlanType As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(sdoCurrent.MiscellaneousAttributes, "PayPlanType")
                                                                    If sdaCurrentPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaCurrentPayPlanType.nvp_value) = False Then
                                                                        currentPayPlanTypeTxt = sdaCurrentPayPlanType.nvp_value
                                                                    End If

                                                                    Dim initialPayPlanOptions As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
                                                                    If initialPayPlanOptions IsNot Nothing AndAlso initialPayPlanOptions.Count > 0 Then
                                                                        Dim ppoValAndInitialPrevIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                        Dim ppoValAndInitialNextIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                        For Each ppo As QuickQuoteStaticDataOption In initialPayPlanOptions
                                                                            If ppo IsNot Nothing AndAlso IsPositiveIntegerString(ppo.Value) = True Then
                                                                                '1st check payplan txt; then next/prev
                                                                                If String.IsNullOrWhiteSpace(currentPayPlanTypeTxt) = False AndAlso ppo.MiscellaneousAttributes IsNot Nothing AndAlso ppo.MiscellaneousAttributes.Count > 0 Then
                                                                                    Dim sdaPpoPayPlanType As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(ppo.MiscellaneousAttributes, "PayPlanType")
                                                                                    If sdaPpoPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaPpoPayPlanType.nvp_value) = False AndAlso sdaPpoPayPlanType.nvp_value = currentPayPlanTypeTxt Then
                                                                                        'afterVal_BillingPayPlanId = sdaPpoPayPlanType.nvp_value
                                                                                        'updated 5/2/2022
                                                                                        afterVal_BillingPayPlanId = ppo.Value
                                                                                        isBillingPayPlanIdOkay = True
                                                                                        Exit For
                                                                                    End If
                                                                                End If
                                                                                If isBillingPayPlanIdOkay = False Then
                                                                                    'now check next/prev
                                                                                    If ppo.MiscellaneousElements IsNot Nothing AndAlso ppo.MiscellaneousElements.Count > 0 Then
                                                                                        Dim initialPrevBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                        Dim initialNextBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                        Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                        'If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True AndAlso CInt(sdePreviousBillingPayPlanId.nvp_value) = CInt(beforeVal_BillingPayPlanId) Then
                                                                                        '    afterVal_BillingPayPlanId = sdePreviousBillingPayPlanId.nvp_value
                                                                                        '    isBillingPayPlanIdOkay = True
                                                                                        '    Exit For
                                                                                        'End If
                                                                                        'updated 5/2/2022
                                                                                        If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True Then
                                                                                            initialPrevBillingPayPlanId = CInt(sdePreviousBillingPayPlanId.nvp_value)
                                                                                            If initialPrevBillingPayPlanId = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                afterVal_BillingPayPlanId = ppo.Value
                                                                                                isBillingPayPlanIdOkay = True
                                                                                                Exit For
                                                                                            End If
                                                                                        End If
                                                                                        If isBillingPayPlanIdOkay = False Then
                                                                                            Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                            'If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True AndAlso CInt(sdeNextBillingPayPlanId.nvp_value) = CInt(beforeVal_BillingPayPlanId) Then
                                                                                            '    afterVal_BillingPayPlanId = sdeNextBillingPayPlanId.nvp_value
                                                                                            '    isBillingPayPlanIdOkay = True
                                                                                            '    Exit For
                                                                                            'End If
                                                                                            'updated 5/2/2022
                                                                                            If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True Then
                                                                                                initialNextBillingPayPlanId = CInt(sdeNextBillingPayPlanId.nvp_value)
                                                                                                If initialNextBillingPayPlanId = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                    afterVal_BillingPayPlanId = ppo.Value
                                                                                                    isBillingPayPlanIdOkay = True
                                                                                                    Exit For
                                                                                                End If
                                                                                            End If

                                                                                            'added 5/2/2022
                                                                                            'now build up prevNext lists so we can look later
                                                                                            If isBillingPayPlanIdOkay = False Then
                                                                                                If initialPrevBillingPayPlanId > 0 Then
                                                                                                    Dim ppoValAndInitialPrevId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                    With ppoValAndInitialPrevId
                                                                                                        .Property1 = CInt(ppo.Value)
                                                                                                        .Property2 = initialPrevBillingPayPlanId
                                                                                                    End With
                                                                                                    If ppoValAndInitialPrevIdList Is Nothing Then
                                                                                                        ppoValAndInitialPrevIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                    End If
                                                                                                    ppoValAndInitialPrevIdList.Add(ppoValAndInitialPrevId)
                                                                                                End If
                                                                                                If initialNextBillingPayPlanId > 0 Then
                                                                                                    Dim ppoValAndInitialNextId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                    With ppoValAndInitialNextId
                                                                                                        .Property1 = CInt(ppo.Value)
                                                                                                        .Property2 = initialNextBillingPayPlanId
                                                                                                    End With
                                                                                                    If ppoValAndInitialNextIdList Is Nothing Then
                                                                                                        ppoValAndInitialNextIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                    End If
                                                                                                    ppoValAndInitialNextIdList.Add(ppoValAndInitialNextId)
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        Next

                                                                        'added 5/2/2022
                                                                        'now go through additional prev/next values to see if we can find it
                                                                        If isBillingPayPlanIdOkay = False Then
                                                                            If ppoValAndInitialPrevIdList IsNot Nothing AndAlso ppoValAndInitialPrevIdList.Count > 0 Then
                                                                                For Each p As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialPrevIdList
                                                                                    If p IsNot Nothing AndAlso p.Property1 > 0 AndAlso p.Property2 > 0 Then
                                                                                        Dim prevIdToCheck As Integer = p.Property2
                                                                                        Dim okayToContinue As Boolean = True
                                                                                        Do While okayToContinue = True
                                                                                            If prevIdToCheck > 0 Then
                                                                                                Dim oPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, prevIdToCheck.ToString)
                                                                                                If oPrev IsNot Nothing AndAlso oPrev.MiscellaneousElements IsNot Nothing AndAlso oPrev.MiscellaneousElements.Count > 0 Then
                                                                                                    Dim ePrev As QuickQuoteStaticDataElement = StaticDataElementForName(oPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                                    If ePrev IsNot Nothing AndAlso IsPositiveIntegerString(ePrev.nvp_value) = True Then
                                                                                                        prevIdToCheck = CInt(ePrev.nvp_value)
                                                                                                        If prevIdToCheck = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                            afterVal_BillingPayPlanId = p.Property1.ToString
                                                                                                            isBillingPayPlanIdOkay = True
                                                                                                        End If
                                                                                                    Else
                                                                                                        okayToContinue = False
                                                                                                    End If
                                                                                                Else
                                                                                                    okayToContinue = False
                                                                                                End If
                                                                                            Else
                                                                                                okayToContinue = False
                                                                                            End If
                                                                                            If okayToContinue = False OrElse isBillingPayPlanIdOkay = True Then
                                                                                                Exit Do
                                                                                            End If
                                                                                        Loop

                                                                                        If isBillingPayPlanIdOkay = True Then
                                                                                            Exit For
                                                                                        End If
                                                                                    End If
                                                                                Next
                                                                            End If
                                                                            If isBillingPayPlanIdOkay = False Then
                                                                                If ppoValAndInitialNextIdList IsNot Nothing AndAlso ppoValAndInitialNextIdList.Count > 0 Then
                                                                                    For Each n As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialNextIdList
                                                                                        If n IsNot Nothing AndAlso n.Property1 > 0 AndAlso n.Property2 > 0 Then
                                                                                            Dim nextIdToCheck As Integer = n.Property2
                                                                                            Dim okayToContinue As Boolean = True
                                                                                            Do While okayToContinue = True
                                                                                                If nextIdToCheck > 0 Then
                                                                                                    Dim oNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, nextIdToCheck.ToString)
                                                                                                    If oNext IsNot Nothing AndAlso oNext.MiscellaneousElements IsNot Nothing AndAlso oNext.MiscellaneousElements.Count > 0 Then
                                                                                                        Dim eNext As QuickQuoteStaticDataElement = StaticDataElementForName(oNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                                        If eNext IsNot Nothing AndAlso IsPositiveIntegerString(eNext.nvp_value) = True Then
                                                                                                            nextIdToCheck = CInt(eNext.nvp_value)
                                                                                                            If nextIdToCheck = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                                afterVal_BillingPayPlanId = n.Property1.ToString
                                                                                                                isBillingPayPlanIdOkay = True
                                                                                                            End If
                                                                                                        Else
                                                                                                            okayToContinue = False
                                                                                                        End If
                                                                                                    Else
                                                                                                        okayToContinue = False
                                                                                                    End If
                                                                                                Else
                                                                                                    okayToContinue = False
                                                                                                End If
                                                                                                If okayToContinue = False OrElse isBillingPayPlanIdOkay = True Then
                                                                                                    Exit Do
                                                                                                End If
                                                                                            Loop

                                                                                            If isBillingPayPlanIdOkay = True Then
                                                                                                Exit For
                                                                                            End If
                                                                                        End If
                                                                                    Next
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    If isBillingPayPlanIdOkay = False Then
                                                                        'see if maybe we can find it w/o the billMethod attribute
                                                                        If billMethodAtt IsNot Nothing Then
                                                                            optionAttributes.Remove(billMethodAtt)
                                                                            Dim initialPayPlanOptionsWithoutBillMethod As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
                                                                            If initialPayPlanOptionsWithoutBillMethod IsNot Nothing AndAlso initialPayPlanOptionsWithoutBillMethod.Count > 0 Then
                                                                                Dim ppoValAndInitialPrevIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                                Dim ppoValAndInitialNextIdList As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing 'added 5/2/2022
                                                                                For Each ppo As QuickQuoteStaticDataOption In initialPayPlanOptions
                                                                                    If ppo IsNot Nothing AndAlso IsPositiveIntegerString(ppo.Value) = True Then
                                                                                        '1st check payplan txt; then next/prev
                                                                                        If String.IsNullOrWhiteSpace(currentPayPlanTypeTxt) = False AndAlso ppo.MiscellaneousAttributes IsNot Nothing AndAlso ppo.MiscellaneousAttributes.Count > 0 Then
                                                                                            Dim sdaPpoPayPlanType As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(ppo.MiscellaneousAttributes, "PayPlanType")
                                                                                            If sdaPpoPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaPpoPayPlanType.nvp_value) = False AndAlso sdaPpoPayPlanType.nvp_value = currentPayPlanTypeTxt Then
                                                                                                'afterVal_BillingPayPlanId = sdaPpoPayPlanType.nvp_value
                                                                                                'updated 5/2/2022
                                                                                                afterVal_BillingPayPlanId = ppo.Value
                                                                                                isBillingPayPlanIdOkay = True
                                                                                                Exit For
                                                                                            End If
                                                                                        End If
                                                                                        If isBillingPayPlanIdOkay = False Then
                                                                                            'now check next/prev
                                                                                            If ppo.MiscellaneousElements IsNot Nothing AndAlso ppo.MiscellaneousElements.Count > 0 Then
                                                                                                Dim initialPrevBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                                Dim initialNextBillingPayPlanId As Integer = 0 'added 5/2/2022
                                                                                                Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                                'If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True AndAlso CInt(sdePreviousBillingPayPlanId.nvp_value) = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                '    afterVal_BillingPayPlanId = sdePreviousBillingPayPlanId.nvp_value
                                                                                                '    isBillingPayPlanIdOkay = True
                                                                                                '    Exit For
                                                                                                'End If
                                                                                                'updated 5/2/2022
                                                                                                If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True Then
                                                                                                    initialPrevBillingPayPlanId = CInt(sdePreviousBillingPayPlanId.nvp_value)
                                                                                                    If initialPrevBillingPayPlanId = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                        afterVal_BillingPayPlanId = ppo.Value
                                                                                                        isBillingPayPlanIdOkay = True
                                                                                                        Exit For
                                                                                                    End If
                                                                                                End If
                                                                                                If isBillingPayPlanIdOkay = False Then
                                                                                                    Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(ppo.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                                    'If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True AndAlso CInt(sdeNextBillingPayPlanId.nvp_value) = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                    '    afterVal_BillingPayPlanId = sdeNextBillingPayPlanId.nvp_value
                                                                                                    '    isBillingPayPlanIdOkay = True
                                                                                                    '    Exit For
                                                                                                    'End If
                                                                                                    'updated 5/2/2022
                                                                                                    If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True Then
                                                                                                        initialNextBillingPayPlanId = CInt(sdeNextBillingPayPlanId.nvp_value)
                                                                                                        If initialNextBillingPayPlanId = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                            afterVal_BillingPayPlanId = ppo.Value
                                                                                                            isBillingPayPlanIdOkay = True
                                                                                                            Exit For
                                                                                                        End If
                                                                                                    End If

                                                                                                    'added 5/2/2022
                                                                                                    'now build up prevNext lists so we can look later
                                                                                                    If isBillingPayPlanIdOkay = False Then
                                                                                                        If initialPrevBillingPayPlanId > 0 Then
                                                                                                            Dim ppoValAndInitialPrevId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                            With ppoValAndInitialPrevId
                                                                                                                .Property1 = CInt(ppo.Value)
                                                                                                                .Property2 = initialPrevBillingPayPlanId
                                                                                                            End With
                                                                                                            If ppoValAndInitialPrevIdList Is Nothing Then
                                                                                                                ppoValAndInitialPrevIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                            End If
                                                                                                            ppoValAndInitialPrevIdList.Add(ppoValAndInitialPrevId)
                                                                                                        End If
                                                                                                        If initialNextBillingPayPlanId > 0 Then
                                                                                                            Dim ppoValAndInitialNextId As New QuickQuoteGenericObjectWithTwoIntegerProperties
                                                                                                            With ppoValAndInitialNextId
                                                                                                                .Property1 = CInt(ppo.Value)
                                                                                                                .Property2 = initialNextBillingPayPlanId
                                                                                                            End With
                                                                                                            If ppoValAndInitialNextIdList Is Nothing Then
                                                                                                                ppoValAndInitialNextIdList = New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
                                                                                                            End If
                                                                                                            ppoValAndInitialNextIdList.Add(ppoValAndInitialNextId)
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                Next

                                                                                'added 5/2/2022
                                                                                'now go through additional prev/next values to see if we can find it
                                                                                If isBillingPayPlanIdOkay = False Then
                                                                                    If ppoValAndInitialPrevIdList IsNot Nothing AndAlso ppoValAndInitialPrevIdList.Count > 0 Then
                                                                                        For Each p As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialPrevIdList
                                                                                            If p IsNot Nothing AndAlso p.Property1 > 0 AndAlso p.Property2 > 0 Then
                                                                                                Dim prevIdToCheck As Integer = p.Property2
                                                                                                Dim okayToContinue As Boolean = True
                                                                                                Do While okayToContinue = True
                                                                                                    If prevIdToCheck > 0 Then
                                                                                                        Dim oPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, prevIdToCheck.ToString)
                                                                                                        If oPrev IsNot Nothing AndAlso oPrev.MiscellaneousElements IsNot Nothing AndAlso oPrev.MiscellaneousElements.Count > 0 Then
                                                                                                            Dim ePrev As QuickQuoteStaticDataElement = StaticDataElementForName(oPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                                                                            If ePrev IsNot Nothing AndAlso IsPositiveIntegerString(ePrev.nvp_value) = True Then
                                                                                                                prevIdToCheck = CInt(ePrev.nvp_value)
                                                                                                                If prevIdToCheck = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                                    afterVal_BillingPayPlanId = p.Property1.ToString
                                                                                                                    isBillingPayPlanIdOkay = True
                                                                                                                End If
                                                                                                            Else
                                                                                                                okayToContinue = False
                                                                                                            End If
                                                                                                        Else
                                                                                                            okayToContinue = False
                                                                                                        End If
                                                                                                    Else
                                                                                                        okayToContinue = False
                                                                                                    End If
                                                                                                    If okayToContinue = False OrElse isBillingPayPlanIdOkay = True Then
                                                                                                        Exit Do
                                                                                                    End If
                                                                                                Loop

                                                                                                If isBillingPayPlanIdOkay = True Then
                                                                                                    Exit For
                                                                                                End If
                                                                                            End If
                                                                                        Next
                                                                                    End If
                                                                                    If isBillingPayPlanIdOkay = False Then
                                                                                        If ppoValAndInitialNextIdList IsNot Nothing AndAlso ppoValAndInitialNextIdList.Count > 0 Then
                                                                                            For Each n As QuickQuoteGenericObjectWithTwoIntegerProperties In ppoValAndInitialNextIdList
                                                                                                If n IsNot Nothing AndAlso n.Property1 > 0 AndAlso n.Property2 > 0 Then
                                                                                                    Dim nextIdToCheck As Integer = n.Property2
                                                                                                    Dim okayToContinue As Boolean = True
                                                                                                    Do While okayToContinue = True
                                                                                                        If nextIdToCheck > 0 Then
                                                                                                            Dim oNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, nextIdToCheck.ToString)
                                                                                                            If oNext IsNot Nothing AndAlso oNext.MiscellaneousElements IsNot Nothing AndAlso oNext.MiscellaneousElements.Count > 0 Then
                                                                                                                Dim eNext As QuickQuoteStaticDataElement = StaticDataElementForName(oNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                                                                                If eNext IsNot Nothing AndAlso IsPositiveIntegerString(eNext.nvp_value) = True Then
                                                                                                                    nextIdToCheck = CInt(eNext.nvp_value)
                                                                                                                    If nextIdToCheck = CInt(beforeVal_BillingPayPlanId) Then
                                                                                                                        afterVal_BillingPayPlanId = n.Property1.ToString
                                                                                                                        isBillingPayPlanIdOkay = True
                                                                                                                    End If
                                                                                                                Else
                                                                                                                    okayToContinue = False
                                                                                                                End If
                                                                                                            Else
                                                                                                                okayToContinue = False
                                                                                                            End If
                                                                                                        Else
                                                                                                            okayToContinue = False
                                                                                                        End If
                                                                                                        If okayToContinue = False OrElse isBillingPayPlanIdOkay = True Then
                                                                                                            Exit Do
                                                                                                        End If
                                                                                                    Loop

                                                                                                    If isBillingPayPlanIdOkay = True Then
                                                                                                        Exit For
                                                                                                    End If
                                                                                                End If
                                                                                            Next
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If

                            If IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then 'note: properties will set both as long as OnlyUsePropertyToSetFieldWithSameName property is False; need to use True for Endorsements
                                'beforeAndAfterValues = New QuickQuoteGenericObjectWithTwoStringProperties
                                'With beforeAndAfterValues
                                '    .Property1 = beforeVal
                                '    .Property2 = afterVal
                                'End With
                                If okayToUpdateIfNeeded = True Then 'here since the property being set could change based on tranType (i.e. maybe currentPayPlanId for Endorsements)
                                    'qqo.BillingPayPlanId = afterVal_BillingPayPlanId 'note: will also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    Dim defaultPayPlanIds As List(Of Integer) = Default_PayPlanIds()
                                    If defaultPayPlanIds IsNot Nothing AndAlso defaultPayPlanIds.Count > 0 AndAlso defaultPayPlanIds.Contains(CInt(afterVal_BillingPayPlanId)) = False Then
                                        'may need to Save differently (using different/new properties) in this case to make sure what's being loaded in VR still works
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseBillingPayPlanIdConvertedAtSave(True)
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_BillingPayPlanIdConvertedAtSave(afterVal_BillingPayPlanId)
                                        'qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseCurrentPayPlanIdConvertedAtSave(True)
                                        'qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_CurrentPayPlanIdConvertedAtSave(afterVal_CurrentPayplanId)
                                    Else
                                        qqo.OnlyUsePropertyToSetFieldWithSameName = True
                                        qqo.BillingPayPlanId = afterVal_BillingPayPlanId 'note: will also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    End If
                                End If
                            End If
                        End If
                    Case Else
                        'NewBusiness
                        If IsPositiveIntegerString(qqo.BillingPayPlanId) = True AndAlso (IsValidDateString(qqo.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True OrElse IsPositiveIntegerString(qqo.BillMethodId) = True) Then
                            beforeVal_BillingPayPlanId = qqo.BillingPayPlanId
                            Dim sdo As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, qqo.BillingPayPlanId)
                            If sdo IsNot Nothing Then
                                Dim sdaBillMethodId As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaStartDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaEndDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaRenewalStartDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaRenewalEndDate As QuickQuoteStaticDataAttribute = Nothing

                                Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = Nothing
                                Dim sdeOtherBillMethodPayPlanId As QuickQuoteStaticDataElement = Nothing
                                Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = Nothing

                                If sdo.MiscellaneousAttributes IsNot Nothing AndAlso sdo.MiscellaneousAttributes.Count > 0 AndAlso sdo.MiscellaneousElements IsNot Nothing AndAlso sdo.MiscellaneousElements.Count > 0 Then
                                    'sdaBillMethodId = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "billMethodId")
                                    sdaBillMethodId = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "BillMethodId")
                                    'sdaStartDate = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "startDate")
                                    'sdaEndDate = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "endDate")
                                    'sdaRenewalStartDate = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "renewalStartDate")
                                    'sdaRenewalEndDate = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "renewalEndDate")

                                    'If sdaBillMethodId IsNot Nothing OrElse sdaStartDate IsNot Nothing OrElse sdaEndDate IsNot Nothing OrElse sdaRenewalStartDate IsNot Nothing OrElse sdaRenewalEndDate IsNot Nothing Then

                                    'End If

                                    'sdeNextBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "NextBillingPayPlanId")
                                    'sdeOtherBillMethodPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "OtherBillMethodPayPlanId")
                                    'sdePreviousBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                    'If sdeNextBillingPayPlanId IsNot Nothing OrElse sdeOtherBillMethodPayPlanId IsNot Nothing OrElse sdePreviousBillingPayPlanId IsNot Nothing Then

                                    'End If

                                    If IsPositiveIntegerString(qqo.BillMethodId) = True Then
                                        'HasMatchOnAllAttributes(optionAttributes, o.MiscellaneousAttributes)
                                        'For Each a As QuickQuoteStaticDataAttribute In sdo.MiscellaneousAttributes 'removed 5/2/2022
                                        '    If a.nvp_name <> "" OrElse a.nvp_value <> "" OrElse a.nvp_propertyName = QuickQuotePropertyName.BillMethodId Then 'note: casing has to match in order to be converted to the QuickQuotePropertyName enum
                                        '        Dim propName As QuickQuotePropertyName = a.nvp_propertyName
                                        '        If System.Enum.IsDefined(GetType(QuickQuotePropertyName), propName) = True AndAlso propName <> QuickQuotePropertyName.None Then

                                        '        End If
                                        '    End If
                                        'Next
                                        If sdaBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaBillMethodId.nvp_value) = True AndAlso CInt(qqo.BillMethodId) <> CInt(sdaBillMethodId.nvp_value) Then
                                            'wrong billMethodId
                                            sdeOtherBillMethodPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "OtherBillMethodPayPlanId")
                                            If sdeOtherBillMethodPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeOtherBillMethodPayPlanId.nvp_value) = True AndAlso CInt(sdeOtherBillMethodPayPlanId.nvp_value) <> CInt(beforeVal_BillingPayPlanId) Then
                                                afterVal_BillingPayPlanId = sdeOtherBillMethodPayPlanId.nvp_value
                                                'note: could verify that I can find the option
                                                'note: would need to reload the staticDataOption so it's now checked instead of the original one
                                            End If
                                        End If
                                    End If
                                    If IsValidDateString(qqo.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                        If IsPositiveIntegerString(afterVal_BillingPayPlanId) = True AndAlso (sdo Is Nothing OrElse IsPositiveIntegerString(sdo.Value) = False OrElse CInt(afterVal_BillingPayPlanId) <> CInt(sdo.Value)) Then
                                            'still need to reload
                                            sdo = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, afterVal_BillingPayPlanId)
                                        End If
                                        'If sdo IsNot Nothing Then 'make sure it's still something
                                        '    sdaStartDate = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "startDate")
                                        '    sdaEndDate = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "endDate")
                                        '    If sdaStartDate IsNot Nothing AndAlso sdaEndDate IsNot Nothing AndAlso IsValidDateString(sdaStartDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(sdaEndDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                                        '        If CDate(sdaStartDate.nvp_value) <= CDate(qqo.EffectiveDate) Then
                                        '            'startDate is good (before effDate)
                                        '            If CDate(sdaEndDate.nvp_value) >= CDate(qqo.EffectiveDate) Then
                                        '                'endDate is good (after effDate)
                                        '                'all good here
                                        '            Else
                                        '                'endDate is before effDate (effDate is after endDate); look for next
                                        '                sdeNextBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "NextBillingPayPlanId")
                                        '                If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True Then
                                        '                    'has next; check it
                                        '                    If IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then
                                        '                        'already have afterVal; compare to that
                                        '                        If CInt(sdeNextBillingPayPlanId.nvp_value) <> CInt(afterVal_BillingPayPlanId) Then
                                        '                            afterVal_BillingPayPlanId = sdeNextBillingPayPlanId.nvp_value
                                        '                            'may want to continue checking... to verify that I can find the option... and that it's dates are good
                                        '                        End If
                                        '                    Else
                                        '                        'compare to beforeVal
                                        '                        If CInt(sdeNextBillingPayPlanId.nvp_value) <> CInt(beforeVal_BillingPayPlanId) Then
                                        '                            afterVal_BillingPayPlanId = sdeNextBillingPayPlanId.nvp_value
                                        '                            'may want to continue checking... to verify that I can find the option... and that it's dates are good
                                        '                        End If
                                        '                    End If
                                        '                End If
                                        '            End If
                                        '        Else
                                        '            'startDate is after effDate (effDate is before startDate); look for prev
                                        '            sdePreviousBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                        '            If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True Then
                                        '                'has prev; check it
                                        '                If IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then
                                        '                    'already have afterVal; compare to that
                                        '                    If CInt(sdePreviousBillingPayPlanId.nvp_value) <> CInt(afterVal_BillingPayPlanId) Then
                                        '                        afterVal_BillingPayPlanId = sdePreviousBillingPayPlanId.nvp_value
                                        '                        'may want to continue checking... to verify that I can find the option... and that it's dates are good
                                        '                    End If
                                        '                Else
                                        '                    'compare to beforeVal
                                        '                    If CInt(sdePreviousBillingPayPlanId.nvp_value) <> CInt(beforeVal_BillingPayPlanId) Then
                                        '                        afterVal_BillingPayPlanId = sdePreviousBillingPayPlanId.nvp_value
                                        '                        'may want to continue checking... to verify that I can find the option... and that it's dates are good
                                        '                    End If
                                        '                End If
                                        '            End If
                                        '        End If
                                        '    End If
                                        'End If
                                        'updated 5/2/2022
                                        Dim payPlanIdToUse As Integer = 0
                                        Dim isOkay As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdo, qqo, payPlanIdToUse:=payPlanIdToUse, okayToCheckForStateLobEquivalent:=True)
                                        If isOkay = True AndAlso payPlanIdToUse > 0 Then
                                            'it appears to be okay
                                            afterVal_BillingPayPlanId = payPlanIdToUse.ToString
                                        End If
                                    End If
                                End If
                            End If

                            If IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then 'may also want logic to set CurrentPayPlanId, but it should set both as long as OnlyUsePropertyToSetFieldWithSameName property is False
                                'beforeAndAfterValues = New QuickQuoteGenericObjectWithTwoStringProperties
                                'With beforeAndAfterValues
                                '    .Property1 = beforeVal
                                '    .Property2 = afterVal
                                'End With
                                If okayToUpdateIfNeeded = True Then 'here since the property being set could change based on tranType (i.e. maybe currentPayPlanId for Endorsements)
                                    'qqo.BillingPayPlanId = afterVal_BillingPayPlanId 'note: will also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    Dim defaultPayPlanIds As List(Of Integer) = Default_PayPlanIds()
                                    If defaultPayPlanIds IsNot Nothing AndAlso defaultPayPlanIds.Count > 0 AndAlso defaultPayPlanIds.Contains(CInt(afterVal_BillingPayPlanId)) = False Then
                                        'may need to Save differently (using different/new properties) in this case to make sure what's being loaded in VR still works
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseBillingPayPlanIdConvertedAtSave(True)
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_BillingPayPlanIdConvertedAtSave(afterVal_BillingPayPlanId)
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_UseCurrentPayPlanIdConvertedAtSave(True)
                                        qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_CurrentPayPlanIdConvertedAtSave(afterVal_BillingPayPlanId)
                                    Else
                                        qqo.BillingPayPlanId = afterVal_BillingPayPlanId 'note: will also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    End If
                                End If
                            End If
                        End If
                End Select

                'will do this here since it will be the same for all tranTypes
                If IsPositiveIntegerString(beforeVal_BillingPayPlanId) = True AndAlso IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then
                    beforeAndAfterValues_BillingPayPlanId = New QuickQuoteGenericObjectWithTwoStringProperties
                    With beforeAndAfterValues_BillingPayPlanId
                        .Property1 = beforeVal_BillingPayPlanId
                        .Property2 = afterVal_BillingPayPlanId
                    End With
                    'If okayToUpdateIfNeeded = True Then 'need to move this within proper case as we may use currentPayPlanId for Endorsements
                    '    qqo.BillingPayPlanId = afterVal 'note: would also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                    'End If
                End If
                If IsPositiveIntegerString(beforeVal_CurrentPayplanId) = True AndAlso IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then
                    beforeAndAfterValues_CurrentPayplanId = New QuickQuoteGenericObjectWithTwoStringProperties
                    With beforeAndAfterValues_CurrentPayplanId
                        .Property1 = beforeVal_CurrentPayplanId
                        .Property2 = afterVal_CurrentPayplanId
                    End With
                    'If okayToUpdateIfNeeded = True Then 'need to move this within proper case as we may use currentPayPlanId for Endorsements
                    '    qqo.CurrentPayPlanId = afterVal 'note: would also set BillingPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False, which would probably not be what we want for Endorsements
                    'End If
                End If
            End If
        End Sub
        'added 5/2/2022
        Public Function IsBillingPayPlanIdStaticDataOptionOkayForQuote(ByVal sdo As QuickQuoteStaticDataOption, ByVal qqo As QuickQuoteObject, Optional ByRef payPlanIdToUse As Integer = 0, Optional ByVal resetPayPlanIdToUse As Boolean = True, Optional ByVal okayToCheckForStateLobEquivalent As Boolean = True) As Boolean
            Dim isOkay As Boolean = False
            If resetPayPlanIdToUse = True Then
                payPlanIdToUse = 0
            End If

            If sdo IsNot Nothing AndAlso qqo IsNot Nothing AndAlso IsPositiveIntegerString(sdo.Value) = True Then
                Dim qtEffectiveDateToUse As String = ""
                If IsValidDateString(qqo.EffectiveDate, mustBeGreaterThanDefaultDate:=True) = True Then
                    qtEffectiveDateToUse = qqo.EffectiveDate
                Else
                    qtEffectiveDateToUse = Date.Today.ToShortDateString
                End If
                Dim elementAndAttributeStuff As QuickQuotePayplanStateAndOrLobElementAndAttributeStuff = Nothing
                SetBillingPayplanStuffFromStaticDataOptionElementsAndAttributes(sdo, elementAndAttributeStuff, onlyLoadInfoSpecificToQuote:=True, qqo:=qqo)

                If elementAndAttributeStuff IsNot Nothing AndAlso (elementAndAttributeStuff.ElementStuff IsNot Nothing OrElse elementAndAttributeStuff.AttributeStuff IsNot Nothing) Then
                    'element stuff
                    Dim EquivalentInfo As QuickQuotePayplanIdForStateAndOrLob = Nothing
                    Dim EquivalentInfosForStateLob As List(Of QuickQuotePayplanIdForStateAndOrLob) = Nothing
                    Dim PrevPayPlanIdInfo As QuickQuotePayplanIdForStateAndOrLob = Nothing
                    Dim PrevPayPlanIdInfosForStateLob As List(Of QuickQuotePayplanIdForStateAndOrLob) = Nothing
                    Dim NextPayPlanIdInfo As QuickQuotePayplanIdForStateAndOrLob = Nothing
                    Dim NextPayPlanIdInfosForStateLob As List(Of QuickQuotePayplanIdForStateAndOrLob) = Nothing
                    'attribute stuff
                    Dim TermDateInfo As QuickQuotePayplanTermDatesForStateAndOrLob = Nothing
                    Dim TermDateInfosForStateLob As List(Of QuickQuotePayplanTermDatesForStateAndOrLob) = Nothing
                    Dim IsStateAndOrLobSpecific As Boolean = False
                    Dim SpecificStateLobCombos As List(Of QuickQuotePayplanIdForStateAndOrLob) = Nothing

                    If elementAndAttributeStuff.ElementStuff IsNot Nothing Then
                        With elementAndAttributeStuff.ElementStuff
                            EquivalentInfo = .EquivalentInfo
                            EquivalentInfosForStateLob = .EquivalentInfosForStateLob
                            PrevPayPlanIdInfo = .PrevPayPlanIdInfo
                            PrevPayPlanIdInfosForStateLob = .PrevPayPlanIdInfosForStateLob
                            NextPayPlanIdInfo = .NextPayPlanIdInfo
                            NextPayPlanIdInfosForStateLob = .NextPayPlanIdInfosForStateLob
                        End With
                    End If
                    If elementAndAttributeStuff.AttributeStuff IsNot Nothing Then
                        With elementAndAttributeStuff.AttributeStuff
                            TermDateInfo = .TermDateInfo
                            TermDateInfosForStateLob = .TermDateInfosForStateLob
                            IsStateAndOrLobSpecific = .IsStateAndOrLobSpecific
                            SpecificStateLobCombos = .SpecificStateLobCombos
                        End With
                    End If

                    Dim okayToContinue As Boolean = True
                    '1st check to see if we can easily switch to an equivalent for the stateLob; should only be used for Save and not Retrieve (since Retrieve will generally default back to values common to most stateLob combinations)
                    If okayToCheckForStateLobEquivalent = True AndAlso EquivalentInfosForStateLob IsNot Nothing AndAlso EquivalentInfosForStateLob.Count > 0 Then
                        okayToContinue = False
                        For Each e As QuickQuotePayplanIdForStateAndOrLob In EquivalentInfosForStateLob
                            If e IsNot Nothing AndAlso e.PayplanId > 0 Then
                                Dim sdoEquivSL As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, e.PayplanId)
                                If sdoEquivSL IsNot Nothing Then
                                    Dim payPlanIdToUseEquivSL As Integer = 0
                                    Dim isOkayEquivSL As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdoEquivSL, qqo, payPlanIdToUse:=payPlanIdToUseEquivSL, okayToCheckForStateLobEquivalent:=okayToCheckForStateLobEquivalent)
                                    If isOkayEquivSL = True AndAlso payPlanIdToUseEquivSL > 0 Then
                                        'stateLob equiv appears to be okay
                                        isOkay = True
                                        payPlanIdToUse = payPlanIdToUseEquivSL
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                        If isOkay = False Then
                            'assume there shouldn't be any stateLob equivalents
                            okayToContinue = True
                        End If
                    End If

                    If okayToContinue = True AndAlso isOkay = False Then
                        'next check for stateLob-specific
                        If IsStateAndOrLobSpecific = True AndAlso SpecificStateLobCombos IsNot Nothing AndAlso SpecificStateLobCombos.Count > 0 Then
                            okayToContinue = False
                            For Each sl As QuickQuotePayplanIdForStateAndOrLob In SpecificStateLobCombos
                                If StateLobInfoOkayForQuote(Of QuickQuotePayplanIdForStateAndOrLob)(sl, qqo) = True Then
                                    okayToContinue = True
                                    Exit For
                                End If
                            Next
                        End If

                        If okayToContinue = False Then
                            'appears to be stateLob-specific but not for this quote; look for normal equivalent
                            If EquivalentInfo IsNot Nothing AndAlso EquivalentInfo.PayplanId > 0 Then
                                Dim sdoEquiv As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, EquivalentInfo.PayplanId.ToString)
                                If sdoEquiv IsNot Nothing Then
                                    Dim payPlanIdToUseEquiv As Integer = 0
                                    Dim isOkayEquiv As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdoEquiv, qqo, payPlanIdToUse:=payPlanIdToUseEquiv, okayToCheckForStateLobEquivalent:=okayToCheckForStateLobEquivalent)
                                    If isOkayEquiv = True AndAlso payPlanIdToUseEquiv > 0 Then
                                        'normal equivalent appears to be okay
                                        isOkay = True
                                        payPlanIdToUse = payPlanIdToUseEquiv
                                    Else
                                        'normal equivalent doesn't appear to work; assume it shouldn't be set as stateLob specific
                                        okayToContinue = True
                                    End If
                                Else
                                    'no normal equivalent sdo found; assume it shouldn't be set as stateLob specific
                                    okayToContinue = True
                                End If
                            Else
                                'no normal equivalent found; assume it shouldn't be set as stateLob specific
                                okayToContinue = True
                            End If
                        End If

                        If okayToContinue = True AndAlso isOkay = False Then
                            'now check for state-specific term dates
                            If TermDateInfosForStateLob IsNot Nothing AndAlso TermDateInfosForStateLob.Count > 0 Then
                                okayToContinue = False
                                'Dim hasValidTermDatesForStateLob As Boolean = False
                                For Each td As QuickQuotePayplanTermDatesForStateAndOrLob In TermDateInfosForStateLob
                                    If td IsNot Nothing AndAlso IsValidDateString(td.StartDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(td.EndDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                        'hasValidTermDatesForStateLob = True
                                        Dim dateIsBeforeStart As Boolean = False
                                        Dim dateIsAfterEnd As Boolean = False
                                        If IsDateOkayForStartAndEnd(qtEffectiveDateToUse, td.StartDate, td.EndDate, dateIsBeforeStart:=dateIsBeforeStart, dateIsAfterEnd:=dateIsAfterEnd) = True Then
                                            'dates are good
                                            isOkay = True
                                            payPlanIdToUse = CInt(sdo.Value)
                                            Exit For
                                        ElseIf dateIsBeforeStart = True Then
                                            'check for prev
                                            If PrevPayPlanIdInfosForStateLob IsNot Nothing AndAlso PrevPayPlanIdInfosForStateLob.Count > 0 Then
                                                Dim exitTermDateLoop As Boolean = False
                                                For Each p As QuickQuotePayplanIdForStateAndOrLob In PrevPayPlanIdInfosForStateLob
                                                    If p IsNot Nothing AndAlso p.PayplanId > 0 AndAlso p.StateType = td.StateType AndAlso p.LobType = td.LobType Then
                                                        'appears to match up as far as exact stateLob combo
                                                        Dim sdoPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, p.PayplanId)
                                                        If sdoPrev IsNot Nothing Then
                                                            Dim payPlanIdToUsePrev As Integer = 0
                                                            Dim isOkayPrev As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdoPrev, qqo, payPlanIdToUse:=payPlanIdToUsePrev, okayToCheckForStateLobEquivalent:=okayToCheckForStateLobEquivalent)
                                                            If isOkayPrev = True AndAlso payPlanIdToUsePrev > 0 Then
                                                                'prev appears to be okay
                                                                isOkay = True
                                                                payPlanIdToUse = payPlanIdToUsePrev
                                                                exitTermDateLoop = True
                                                                Exit For
                                                            End If
                                                        End If
                                                    End If
                                                Next
                                                If exitTermDateLoop = True Then
                                                    Exit For
                                                End If
                                            End If
                                        ElseIf dateIsAfterEnd = True Then
                                            'check for next
                                            If NextPayPlanIdInfosForStateLob IsNot Nothing AndAlso NextPayPlanIdInfosForStateLob.Count > 0 Then
                                                Dim exitTermDateLoop As Boolean = False
                                                For Each n As QuickQuotePayplanIdForStateAndOrLob In NextPayPlanIdInfosForStateLob
                                                    If n IsNot Nothing AndAlso n.PayplanId > 0 AndAlso n.StateType = td.StateType AndAlso n.LobType = td.LobType Then
                                                        'appears to match up as far as exact stateLob combo
                                                        Dim sdoNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, n.PayplanId)
                                                        If sdoNext IsNot Nothing Then
                                                            Dim payPlanIdToUseNext As Integer = 0
                                                            Dim isOkayNext As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdoNext, qqo, payPlanIdToUse:=payPlanIdToUseNext, okayToCheckForStateLobEquivalent:=okayToCheckForStateLobEquivalent)
                                                            If isOkayNext = True AndAlso payPlanIdToUseNext > 0 Then
                                                                'next appears to be okay
                                                                isOkay = True
                                                                payPlanIdToUse = payPlanIdToUseNext
                                                                exitTermDateLoop = True
                                                                Exit For
                                                            End If
                                                        End If
                                                    End If
                                                Next
                                                If exitTermDateLoop = True Then
                                                    Exit For
                                                End If
                                            End If
                                        Else
                                            'bad dates somewhere
                                        End If
                                    End If
                                Next
                                If isOkay = False Then
                                    'assume there shouldn't be termDates specific to stateLob
                                    okayToContinue = True
                                End If
                            End If

                            If okayToContinue = True AndAlso isOkay = False Then
                                'now check for regular term dates
                                If TermDateInfo IsNot Nothing AndAlso IsValidDateString(TermDateInfo.StartDate, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(TermDateInfo.EndDate, mustBeGreaterThanDefaultDate:=True) = True Then
                                    Dim dateIsBeforeStart As Boolean = False
                                    Dim dateIsAfterEnd As Boolean = False
                                    If IsDateOkayForStartAndEnd(qtEffectiveDateToUse, TermDateInfo.StartDate, TermDateInfo.EndDate, dateIsBeforeStart:=dateIsBeforeStart, dateIsAfterEnd:=dateIsAfterEnd) = True Then
                                        'dates are good
                                        isOkay = True
                                        payPlanIdToUse = CInt(sdo.Value)
                                    ElseIf dateIsBeforeStart = True Then
                                        'check for prev
                                        If PrevPayPlanIdInfo IsNot Nothing AndAlso PrevPayPlanIdInfo.PayplanId > 0 Then
                                            Dim sdoPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, PrevPayPlanIdInfo.PayplanId)
                                            If sdoPrev IsNot Nothing Then
                                                Dim payPlanIdToUsePrev As Integer = 0
                                                Dim isOkayPrev As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdoPrev, qqo, payPlanIdToUse:=payPlanIdToUsePrev, okayToCheckForStateLobEquivalent:=okayToCheckForStateLobEquivalent)
                                                If isOkayPrev = True AndAlso payPlanIdToUsePrev > 0 Then
                                                    'prev appears to be okay
                                                    isOkay = True
                                                    payPlanIdToUse = payPlanIdToUsePrev
                                                End If
                                            End If
                                        End If
                                    ElseIf dateIsAfterEnd = True Then
                                        'check for next
                                        If NextPayPlanIdInfo IsNot Nothing AndAlso NextPayPlanIdInfo.PayplanId > 0 Then
                                            Dim sdoNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, NextPayPlanIdInfo.PayplanId)
                                            If sdoNext IsNot Nothing Then
                                                Dim payPlanIdToUseNext As Integer = 0
                                                Dim isOkayNext As Boolean = IsBillingPayPlanIdStaticDataOptionOkayForQuote(sdoNext, qqo, payPlanIdToUse:=payPlanIdToUseNext, okayToCheckForStateLobEquivalent:=okayToCheckForStateLobEquivalent)
                                                If isOkayNext = True AndAlso payPlanIdToUseNext > 0 Then
                                                    'next appears to be okay
                                                    isOkay = True
                                                    payPlanIdToUse = payPlanIdToUseNext
                                                End If
                                            End If
                                        End If
                                    Else
                                        'bad dates somewhere
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            Return isOkay
        End Function
        Public Function IsDateOkayForStartAndEnd(ByVal dtToCheck As String, ByVal dtStart As String, dtEnd As String, Optional ByRef dateIsBeforeStart As Boolean = False, Optional ByRef dateIsAfterEnd As Boolean = False) As Boolean
            Dim isOkay As Boolean = False
            dateIsBeforeStart = False
            dateIsAfterEnd = False

            If IsValidDateString(dtToCheck, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(dtStart, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(dtEnd, mustBeGreaterThanDefaultDate:=True) = True AndAlso CDate(dtEnd) >= CDate(dtStart) Then
                If CDate(dtStart) <= CDate(dtToCheck) Then
                    'startDate is good (before dtToCheck)
                    If CDate(dtEnd) >= CDate(dtToCheck) Then
                        'endDate is good (after effDate)
                        'all good here
                        isOkay = True
                    Else
                        'endDate is before dtToCheck (dtToCheck is after endDate); look for next
                        dateIsAfterEnd = True
                    End If
                Else
                    'startDate is after dtToCheck (dtToCheck is before startDate); look for prev
                    dateIsBeforeStart = True
                End If
            End If

            Return isOkay
        End Function
        'Public Function GetStaticDataOptionsForTextOrValueList(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrTextList As List(Of String), Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal maxReturnCount As Integer = 0) As List(Of QuickQuoteStaticDataOption)
        'updated 11/23/2022
        Public Function GetStaticDataOptionsForTextOrValueList(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrTextList As List(Of String), Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal maxReturnCount As Integer = 0) As List(Of QuickQuoteStaticDataOption)
            Dim retOptions As List(Of QuickQuoteStaticDataOption) = Nothing

            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)

            'If sdl IsNot Nothing AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
            '    Dim optionsToUse As List(Of QuickQuoteStaticDataOption) = Nothing
            '    If (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (lob = Nothing OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (persOrComm = Nothing OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) AndAlso sdl IsNot Nothing Then
            '        optionsToUse = sdl.Options
            '    Else
            '        optionsToUse = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob:=lob, persOrComm:=persOrComm, useIgnoreForListsProperty:=False)
            '    End If
            '    retOptions = GetStaticDataOptionsByTextOrValueList(optionsToUse, searchType, valueOrTextList, matchType:=matchType, maxReturnCount:=maxReturnCount)
            'End If
            'updated 9/28/2021
            'Dim options As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(className, propertyName, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
            'updated 11/23/2022
            Dim options As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(className, propertyName, qqState:=qqState, qqCompany:=qqCompany, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
            If options IsNot Nothing AndAlso options.Count > 0 Then
                retOptions = GetStaticDataOptionsByTextOrValueList(options, searchType, valueOrTextList, matchType:=matchType, maxReturnCount:=maxReturnCount)
            End If

            Return retOptions
        End Function
        'Public Function GetStaticDataOptionForTextOrValueList(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrTextList As List(Of String), Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As QuickQuoteStaticDataOption
        'updated 11/23/2022
        Public Function GetStaticDataOptionForTextOrValueList(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrTextList As List(Of String), Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As QuickQuoteStaticDataOption
            Dim o As QuickQuoteStaticDataOption = Nothing

            'Dim retOptions As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsForTextOrValueList(className, propertyName, searchType, valueOrTextList, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, matchType:=matchType, maxReturnCount:=1)
            'updated 11/23/2022
            Dim retOptions As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsForTextOrValueList(className, propertyName, searchType, valueOrTextList, qqState:=qqState, qqCompany:=qqCompany, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, matchType:=matchType, maxReturnCount:=1)
            If retOptions IsNot Nothing AndAlso retOptions.Count > 0 AndAlso retOptions(0) IsNot Nothing Then
                o = retOptions(0)
            End If

            Return o
        End Function
        'Public Function GetStaticDataOptionsForTextOrValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal maxReturnCount As Integer = 0) As List(Of QuickQuoteStaticDataOption)
        'updated 11/23/2022
        Public Function GetStaticDataOptionsForTextOrValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional ByVal maxReturnCount As Integer = 0) As List(Of QuickQuoteStaticDataOption)
            Dim retOptions As List(Of QuickQuoteStaticDataOption) = Nothing

            Dim valueOrTextList As List(Of String) = Nothing
            If String.IsNullOrWhiteSpace(valueOrText) = False Then
                valueOrTextList = New List(Of String)
                valueOrTextList.Add(valueOrText)
            End If
            'retOptions = GetStaticDataOptionsForTextOrValueList(className, propertyName, searchType, valueOrTextList, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, matchType:=matchType, maxReturnCount:=maxReturnCount)
            'updated 11/23/2022
            retOptions = GetStaticDataOptionsForTextOrValueList(className, propertyName, searchType, valueOrTextList, qqState:=qqState, qqCompany:=qqCompany, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, matchType:=matchType, maxReturnCount:=maxReturnCount)

            Return retOptions
        End Function
        'Public Function GetStaticDataOptionForTextOrValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As QuickQuoteStaticDataOption
        'updated 11/23/2022
        Public Function GetStaticDataOptionForTextOrValue(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, ByVal searchType As StaticDataOptionSearchType, ByVal valueOrText As String, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing) As QuickQuoteStaticDataOption
            Dim o As QuickQuoteStaticDataOption = Nothing

            'Dim retOptions As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsForTextOrValue(className, propertyName, searchType, valueOrText, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, matchType:=matchType, maxReturnCount:=1)
            'updated 11/23/2022
            Dim retOptions As List(Of QuickQuoteStaticDataOption) = GetStaticDataOptionsForTextOrValue(className, propertyName, searchType, valueOrText, qqState:=qqState, qqCompany:=qqCompany, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, matchType:=matchType, maxReturnCount:=1)
            If retOptions IsNot Nothing AndAlso retOptions.Count > 0 AndAlso retOptions(0) IsNot Nothing Then
                o = retOptions(0)
            End If

            Return o
        End Function
        Public Function StaticDataAttributeForName(ByRef atts As List(Of QuickQuoteStaticDataAttribute), ByVal nm As String) As QuickQuoteStaticDataAttribute
            'Dim sda As QuickQuoteStaticDataAttribute = Nothing

            'If atts IsNot Nothing AndAlso atts.Count > 0 AndAlso String.IsNullOrWhiteSpace(nm) = False Then
            '    For Each a As QuickQuoteStaticDataAttribute In atts
            '        If a IsNot Nothing AndAlso a.NameValuePair IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.NameValuePair.Name) = False AndAlso UCase(a.NameValuePair.Name) = UCase(nm) Then
            '            sda = a
            '            Exit For
            '        End If
            '    Next
            'End If

            'Return sda
            'updated 4/26/2022 to use new method
            Return StaticDataAttributeForName_OptionalMatchType(atts, nm)
        End Function
        'added 4/26/2022
        Public Function StaticDataAttributeForName_OptionalMatchType(ByRef atts As List(Of QuickQuoteStaticDataAttribute), ByVal nm As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional firstOrLastOne As QuickQuote.CommonMethods.QuickQuoteHelperClass.FirstOrLast = FirstOrLast.First) As QuickQuoteStaticDataAttribute
            Dim sda As QuickQuoteStaticDataAttribute = Nothing

            'If atts IsNot Nothing AndAlso atts.Count > 0 AndAlso String.IsNullOrWhiteSpace(nm) = False Then
            '    If System.Enum.IsDefined(GetType(TextMatchType), matchType) = False OrElse matchType = TextMatchType.None Then
            '        matchType = TextMatchType.TextOnly_IgnoreCasing
            '    End If
            '    For Each a As QuickQuoteStaticDataAttribute In atts
            '        If a IsNot Nothing AndAlso a.NameValuePair IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.NameValuePair.Name) = False AndAlso isTextMatch(a.NameValuePair.Name, nm, matchType:=matchType) = True Then
            '            sda = a
            '            Exit For
            '        End If
            '    Next
            'End If
            Dim justOne As Boolean = False
            If firstOrLastOne = FirstOrLast.First Then
                justOne = True
            End If
            Dim sdas As List(Of QuickQuoteStaticDataAttribute) = StaticDataAttributesForName_OptionalMatchType(atts, nm, matchType:=matchType, justOne:=justOne, firstOrLastOne:=firstOrLastOne)
            If sdas IsNot Nothing AndAlso sdas.Count > 0 Then
                If firstOrLastOne = FirstOrLast.Last AndAlso sdas.Count > 1 Then
                    sda = sdas.Item(sdas.Count - 1)
                Else
                    sda = sdas.Item(0)
                End If
            End If

            Return sda
        End Function
        Public Function StaticDataAttributesForName_OptionalMatchType(ByRef atts As List(Of QuickQuoteStaticDataAttribute), ByVal nm As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional justOne As Boolean = False, Optional firstOrLastOne As QuickQuote.CommonMethods.QuickQuoteHelperClass.FirstOrLast = FirstOrLast.First) As List(Of QuickQuoteStaticDataAttribute)
            Dim sdas As List(Of QuickQuoteStaticDataAttribute) = Nothing

            If justOne = True AndAlso firstOrLastOne = FirstOrLast.Last Then
                Dim sda As QuickQuoteStaticDataAttribute = StaticDataAttributeForName_OptionalMatchType(atts, nm, matchType:=matchType, firstOrLastOne:=firstOrLastOne)
                If sda IsNot Nothing Then
                    sdas = New List(Of QuickQuoteStaticDataAttribute)
                    sdas.Add(sda)
                End If
            Else
                If atts IsNot Nothing AndAlso atts.Count > 0 AndAlso String.IsNullOrWhiteSpace(nm) = False Then
                    If System.Enum.IsDefined(GetType(TextMatchType), matchType) = False OrElse matchType = TextMatchType.None Then
                        matchType = TextMatchType.TextOnly_IgnoreCasing
                    End If
                    For Each a As QuickQuoteStaticDataAttribute In atts
                        If a IsNot Nothing AndAlso a.NameValuePair IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.NameValuePair.Name) = False AndAlso isTextMatch(a.NameValuePair.Name, nm, matchType:=matchType) = True Then
                            If sdas Is Nothing Then
                                sdas = New List(Of QuickQuoteStaticDataAttribute)
                            End If
                            sdas.Add(a)
                            If justOne = True AndAlso firstOrLastOne = FirstOrLast.First Then
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return sdas
        End Function
        Public Function StaticDataElementForName(ByRef els As List(Of QuickQuoteStaticDataElement), ByVal nm As String) As QuickQuoteStaticDataElement
            'Dim sde As QuickQuoteStaticDataElement = Nothing

            'If els IsNot Nothing AndAlso els.Count > 0 AndAlso String.IsNullOrWhiteSpace(nm) = False Then
            '    For Each e As QuickQuoteStaticDataElement In els
            '        If e IsNot Nothing AndAlso e.NameValuePair IsNot Nothing AndAlso String.IsNullOrWhiteSpace(e.NameValuePair.Name) = False AndAlso UCase(e.NameValuePair.Name) = UCase(nm) Then
            '            sde = e
            '            Exit For
            '        End If
            '    Next
            'End If

            'Return sde
            'updated 4/26/2022 to use new method
            Return StaticDataElementForName_OptionalMatchType(els, nm)
        End Function
        'added 4/26/2022
        Public Function StaticDataElementForName_OptionalMatchType(ByRef els As List(Of QuickQuoteStaticDataElement), ByVal nm As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional firstOrLastOne As QuickQuote.CommonMethods.QuickQuoteHelperClass.FirstOrLast = FirstOrLast.First) As QuickQuoteStaticDataElement
            Dim sde As QuickQuoteStaticDataElement = Nothing

            'If els IsNot Nothing AndAlso els.Count > 0 AndAlso String.IsNullOrWhiteSpace(nm) = False Then
            '    If System.Enum.IsDefined(GetType(TextMatchType), matchType) = False OrElse matchType = TextMatchType.None Then
            '        matchType = TextMatchType.TextOnly_IgnoreCasing
            '    End If
            '    For Each e As QuickQuoteStaticDataElement In els
            '        If e IsNot Nothing AndAlso e.NameValuePair IsNot Nothing AndAlso String.IsNullOrWhiteSpace(e.NameValuePair.Name) = False AndAlso isTextMatch(e.NameValuePair.Name, nm, matchType:=matchType) = True Then
            '            sde = e
            '            Exit For
            '        End If
            '    Next
            'End If
            Dim justOne As Boolean = False
            If firstOrLastOne = FirstOrLast.First Then
                justOne = True
            End If
            Dim sdes As List(Of QuickQuoteStaticDataElement) = StaticDataElementsForName_OptionalMatchType(els, nm, matchType:=matchType, justOne:=justOne, firstOrLastOne:=firstOrLastOne)
            If sdes IsNot Nothing AndAlso sdes.Count > 0 Then
                If firstOrLastOne = FirstOrLast.Last AndAlso sdes.Count > 1 Then
                    sde = sdes.Item(sdes.Count - 1)
                Else
                    sde = sdes.Item(0)
                End If
            End If

            Return sde
        End Function
        Public Function StaticDataElementsForName_OptionalMatchType(ByRef els As List(Of QuickQuoteStaticDataElement), ByVal nm As String, Optional ByVal matchType As TextMatchType = TextMatchType.TextOnly_IgnoreCasing, Optional justOne As Boolean = False, Optional firstOrLastOne As QuickQuote.CommonMethods.QuickQuoteHelperClass.FirstOrLast = FirstOrLast.First) As List(Of QuickQuoteStaticDataElement)
            Dim sdes As List(Of QuickQuoteStaticDataElement) = Nothing

            If justOne = True AndAlso firstOrLastOne = FirstOrLast.Last Then
                Dim sde As QuickQuoteStaticDataElement = StaticDataElementForName_OptionalMatchType(els, nm, matchType:=matchType, firstOrLastOne:=firstOrLastOne)
                If sde IsNot Nothing Then
                    sdes = New List(Of QuickQuoteStaticDataElement)
                    sdes.Add(sde)
                End If
            Else
                If els IsNot Nothing AndAlso els.Count > 0 AndAlso String.IsNullOrWhiteSpace(nm) = False Then
                    If System.Enum.IsDefined(GetType(TextMatchType), matchType) = False OrElse matchType = TextMatchType.None Then
                        matchType = TextMatchType.TextOnly_IgnoreCasing
                    End If
                    For Each e As QuickQuoteStaticDataElement In els
                        If e IsNot Nothing AndAlso e.NameValuePair IsNot Nothing AndAlso String.IsNullOrWhiteSpace(e.NameValuePair.Name) = False AndAlso isTextMatch(e.NameValuePair.Name, nm, matchType:=matchType) = True Then
                            If sdes Is Nothing Then
                                sdes = New List(Of QuickQuoteStaticDataElement)
                            End If
                            sdes.Add(e)
                            If justOne = True AndAlso firstOrLastOne = FirstOrLast.First Then
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If

            Return sdes
        End Function
        Public Shared Function Default_PayPlanIds() As List(Of Integer)
            Dim payplanIds As List(Of Integer) = Nothing

            Dim payPlanIdsTxt As String = configAppSettingValueAsString("VR_Default_PayPlanIds")
            If String.IsNullOrWhiteSpace(payPlanIdsTxt) = False Then
                payplanIds = ListOfIntegerFromString(payPlanIdsTxt, delimiter:=",", positiveOnly:=True, returnPairForEachDelimiter:=False)
            End If

            Return payplanIds
        End Function
        Public Sub CheckBillingPayPlanIdForRetrieval(ByRef qqo As QuickQuoteObject, Optional ByVal okayToUpdateIfNeeded As Boolean = True, Optional ByRef beforeAndAfterValues_BillingPayPlanId As QuickQuoteGenericObjectWithTwoStringProperties = Nothing, Optional ByRef beforeAndAfterValues_CurrentPayplanId As QuickQuoteGenericObjectWithTwoStringProperties = Nothing)
            beforeAndAfterValues_BillingPayPlanId = Nothing
            Dim beforeVal_BillingPayPlanId As String = ""
            Dim afterVal_BillingPayPlanId As String = ""
            beforeAndAfterValues_CurrentPayplanId = Nothing
            Dim beforeVal_CurrentPayplanId As String = ""
            Dim afterVal_CurrentPayplanId As String = ""

            If qqo IsNot Nothing Then

                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialBillingPayPlanIdAtRetrieval(qqo.BillingPayPlanId)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialBillingPayPlanStaticDataOptionAtRetrieval(Nothing)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_ConvertedBillingPayPlanIdAtRetrieval("")
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_ConvertedBillingPayPlanStaticDataOptionAtRetrieval(Nothing)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialCurrentPayPlanIdAtRetrieval(qqo.CurrentPayplanId)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialCurrentPayPlanStaticDataOptionAtRetrieval(Nothing)
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_ConvertedCurrentPayPlanIdAtRetrieval("")
                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_ConvertedCurrentPayPlanStaticDataOptionAtRetrieval(Nothing)

                Dim defaultPayplanIds As List(Of Integer) = Default_PayPlanIds()
                If defaultPayplanIds IsNot Nothing AndAlso defaultPayplanIds.Count > 0 Then
                    'Select Case qqo.QuoteTransactionType
                    '    'Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote
                    '    '    'nothing yet
                    '    'Case QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage
                    '    '    'nothing yet
                    '    Case QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote, QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage

                    '    Case Else
                    '        'NewBusiness

                    'End Select
                    'logic should be the same for all tranTypes; only diff is when setting Endorsements/ReadOnly
                    If qqo.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote OrElse qqo.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage Then
                        'only do CurrentPayPlanId for Endorsements/ReadOnly
                        If IsPositiveIntegerString(qqo.CurrentPayplanId) = True AndAlso defaultPayplanIds.Contains(CInt(qqo.CurrentPayplanId)) = False Then
                            beforeVal_CurrentPayplanId = qqo.CurrentPayplanId
                            Dim sdo As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, qqo.CurrentPayplanId)
                            If sdo IsNot Nothing Then
                                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialCurrentPayPlanStaticDataOptionAtRetrieval(CloneObject(sdo))

                                Dim sdaBillMethodId As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaStartDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaEndDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaRenewalStartDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaRenewalEndDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaPayPlanType As QuickQuoteStaticDataAttribute = Nothing

                                Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = Nothing
                                Dim sdeOtherBillMethodPayPlanId As QuickQuoteStaticDataElement = Nothing
                                Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = Nothing

                                If sdo.MiscellaneousElements IsNot Nothing AndAlso sdo.MiscellaneousElements.Count > 0 Then
                                    'check for prev 1st
                                    sdePreviousBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                    If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True AndAlso defaultPayplanIds.Contains(CInt(sdePreviousBillingPayPlanId.nvp_value)) = True Then
                                        afterVal_CurrentPayplanId = sdePreviousBillingPayPlanId.nvp_value
                                    End If
                                    If IsPositiveIntegerString(afterVal_CurrentPayplanId) = False Then
                                        'check for next
                                        sdeNextBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "NextBillingPayPlanId")
                                        If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True AndAlso defaultPayplanIds.Contains(CInt(sdeNextBillingPayPlanId.nvp_value)) = True Then
                                            afterVal_CurrentPayplanId = sdeNextBillingPayPlanId.nvp_value
                                        End If
                                    End If
                                End If

                                If IsPositiveIntegerString(afterVal_CurrentPayplanId) = False Then
                                    If sdo.MiscellaneousAttributes IsNot Nothing AndAlso sdo.MiscellaneousAttributes.Count > 0 Then
                                        'try to find match on payPlanType
                                        sdaPayPlanType = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "PayPlanType")
                                        If sdaPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaPayPlanType.nvp_value) = False Then
                                            Dim ppt As PayPlanType = PayPlanType.None
                                            If System.Enum.TryParse(Of PayPlanType)(sdaPayPlanType.nvp_value, ppt) = False Then
                                                ppt = PayPlanType.None
                                            End If
                                            Dim optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing
                                            sdaBillMethodId = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "BillMethodId")
                                            If sdaBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaBillMethodId.nvp_value) = True Then
                                                optionAttributes = New List(Of QuickQuoteStaticDataAttribute)
                                                Dim att As New QuickQuoteStaticDataAttribute
                                                With att
                                                    .nvp_name = "BillMethodId"
                                                    .nvp_value = sdaBillMethodId.nvp_value
                                                End With
                                                optionAttributes.Add(att)
                                            End If
                                            Dim payPlanIds As List(Of Integer) = BillingPayPlanIdsForPayPlanType(ppt, optionAttributes:=optionAttributes)
                                            If payPlanIds IsNot Nothing AndAlso payPlanIds.Count > 0 Then
                                                For Each ppId As Integer In payPlanIds
                                                    If ppId > 0 AndAlso defaultPayplanIds.Contains(ppId) = True Then
                                                        afterVal_CurrentPayplanId = ppId.ToString
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                            If IsPositiveIntegerString(afterVal_CurrentPayplanId) = False Then
                                                If optionAttributes IsNot Nothing Then
                                                    'now try w/o attributes
                                                    Dim payPlanIdsWithoutAtts As List(Of Integer) = BillingPayPlanIdsForPayPlanType(ppt)
                                                    If payPlanIdsWithoutAtts IsNot Nothing AndAlso payPlanIdsWithoutAtts.Count > 0 Then
                                                        For Each ppId As Integer In payPlanIdsWithoutAtts
                                                            If ppId > 0 AndAlso defaultPayplanIds.Contains(ppId) = True Then
                                                                afterVal_CurrentPayplanId = ppId.ToString
                                                                Exit For
                                                            End If
                                                        Next
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If

                                    'added 4/28/2022
                                    If IsPositiveIntegerString(afterVal_CurrentPayplanId) = False Then
                                        'could maybe look for sdeOtherBillMethodPayPlanId, but we were never doing it before (maybe defaults are just for directBill... nope... includes 3 agency bill too)

                                        If IsPositiveIntegerString(afterVal_CurrentPayplanId) = False Then
                                            'If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True Then
                                            '    'could look for the previous to the previous
                                            '    Dim sdoPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, sdePreviousBillingPayPlanId.nvp_value)
                                            '    If sdoPrev IsNot Nothing Then
                                            '        If sdoPrev.MiscellaneousElements IsNot Nothing AndAlso sdoPrev.MiscellaneousElements.Count > 0 Then
                                            '            Dim sdePrevious2BillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                            '            If sdePrevious2BillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePrevious2BillingPayPlanId.nvp_value) = True AndAlso defaultPayplanIds.Contains(CInt(sdePrevious2BillingPayPlanId.nvp_value)) = True Then
                                            '                afterVal_CurrentPayplanId = sdePrevious2BillingPayPlanId.nvp_value
                                            '            End If
                                            '        End If
                                            '    End If
                                            'End If
                                            'updated 4/29/2022
                                            Dim prevPayplanIdElementToCheck As QuickQuoteStaticDataElement = sdePreviousBillingPayPlanId
                                            Dim okayToCheckForPrev As Boolean = True
                                            Do While okayToCheckForPrev = True
                                                If prevPayplanIdElementToCheck IsNot Nothing AndAlso IsPositiveIntegerString(prevPayplanIdElementToCheck.nvp_value) = True Then
                                                    'could look for the previous to the previous
                                                    Dim sdoPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, prevPayplanIdElementToCheck.nvp_value)
                                                    If sdoPrev IsNot Nothing Then
                                                        If sdoPrev.MiscellaneousElements IsNot Nothing AndAlso sdoPrev.MiscellaneousElements.Count > 0 Then
                                                            Dim sdePrevious2BillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                            If sdePrevious2BillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePrevious2BillingPayPlanId.nvp_value) = True Then
                                                                If defaultPayplanIds.Contains(CInt(sdePrevious2BillingPayPlanId.nvp_value)) = True Then
                                                                    afterVal_CurrentPayplanId = sdePrevious2BillingPayPlanId.nvp_value
                                                                Else
                                                                    'check for child prev element on next loop
                                                                    prevPayplanIdElementToCheck = sdePrevious2BillingPayPlanId
                                                                End If
                                                            Else
                                                                okayToCheckForPrev = False
                                                            End If
                                                        Else
                                                            okayToCheckForPrev = False
                                                        End If
                                                    Else
                                                        okayToCheckForPrev = False
                                                    End If
                                                Else
                                                    okayToCheckForPrev = False
                                                End If
                                                If okayToCheckForPrev = False OrElse IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then
                                                    Exit Do
                                                End If
                                            Loop

                                            If IsPositiveIntegerString(afterVal_CurrentPayplanId) = False Then
                                                'If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True Then
                                                '    'could look for the next after the next
                                                '    Dim sdoNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, sdeNextBillingPayPlanId.nvp_value)
                                                '    If sdoNext IsNot Nothing Then
                                                '        If sdoNext.MiscellaneousElements IsNot Nothing AndAlso sdoNext.MiscellaneousElements.Count > 0 Then
                                                '            Dim sdeNext2BillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                '            If sdeNext2BillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNext2BillingPayPlanId.nvp_value) = True AndAlso defaultPayplanIds.Contains(CInt(sdeNext2BillingPayPlanId.nvp_value)) = True Then
                                                '                afterVal_CurrentPayplanId = sdeNext2BillingPayPlanId.nvp_value
                                                '            End If
                                                '        End If
                                                '    End If
                                                'End If
                                                'updated 5/1/2022
                                                Dim nextPayplanIdElementToCheck As QuickQuoteStaticDataElement = sdeNextBillingPayPlanId
                                                Dim okayToCheckForNext As Boolean = True
                                                Do While okayToCheckForNext = True
                                                    If nextPayplanIdElementToCheck IsNot Nothing AndAlso IsPositiveIntegerString(nextPayplanIdElementToCheck.nvp_value) = True Then
                                                        'could look for the next to the next
                                                        Dim sdoNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, nextPayplanIdElementToCheck.nvp_value)
                                                        If sdoNext IsNot Nothing Then
                                                            If sdoNext.MiscellaneousElements IsNot Nothing AndAlso sdoNext.MiscellaneousElements.Count > 0 Then
                                                                Dim sdeNext2BillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                                If sdeNext2BillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNext2BillingPayPlanId.nvp_value) = True Then
                                                                    If defaultPayplanIds.Contains(CInt(sdeNext2BillingPayPlanId.nvp_value)) = True Then
                                                                        afterVal_CurrentPayplanId = sdeNext2BillingPayPlanId.nvp_value
                                                                    Else
                                                                        'check for child prev element on next loop
                                                                        prevPayplanIdElementToCheck = sdeNext2BillingPayPlanId
                                                                    End If
                                                                Else
                                                                    okayToCheckForNext = False
                                                                End If
                                                            Else
                                                                okayToCheckForNext = False
                                                            End If
                                                        Else
                                                            okayToCheckForNext = False
                                                        End If
                                                    Else
                                                        okayToCheckForNext = False
                                                    End If
                                                    If okayToCheckForNext = False OrElse IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then
                                                        Exit Do
                                                    End If
                                                Loop
                                            End If
                                        End If
                                    End If
                                End If
                            End If

                            If IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then 'may also want logic to set BillingPayPlanId, but it should set both as long as OnlyUsePropertyToSetFieldWithSameName property is False
                                'beforeAndAfterValues = New QuickQuoteGenericObjectWithTwoStringProperties
                                'With beforeAndAfterValues
                                '    .Property1 = beforeVal
                                '    .Property2 = afterVal
                                'End With
                                If okayToUpdateIfNeeded = True Then 'here since the property being set could change based on tranType (i.e. maybe currentPayPlanId for Endorsements)
                                    qqo.OnlyUsePropertyToSetFieldWithSameName = True
                                    qqo.CurrentPayplanId = afterVal_CurrentPayplanId 'note: will also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                    qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_ConvertedCurrentPayPlanIdAtRetrieval(afterVal_CurrentPayplanId)
                                End If
                            End If
                        End If
                    End If

                    If IsPositiveIntegerString(qqo.BillingPayPlanId) = True AndAlso defaultPayplanIds.Contains(CInt(qqo.BillingPayPlanId)) = False Then
                        beforeVal_BillingPayPlanId = qqo.BillingPayPlanId

                        Dim keepChecking As Boolean = True
                        If qqo.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote OrElse qqo.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage Then
                            'quickly see if we can just do the same thing to BillingPayPlanId as we did for CurrentPayPlanId
                            If IsPositiveIntegerString(beforeVal_CurrentPayplanId) = True AndAlso CInt(beforeVal_CurrentPayplanId) = CInt(beforeVal_BillingPayPlanId) Then
                                'same value as currentPlanId; no sense continuing as we'd get the same results
                                afterVal_BillingPayPlanId = afterVal_CurrentPayplanId
                                keepChecking = False
                            End If
                        End If

                        If keepChecking = True AndAlso IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                            Dim sdo As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, qqo.BillingPayPlanId)
                            If sdo IsNot Nothing Then
                                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialBillingPayPlanStaticDataOptionAtRetrieval(CloneObject(sdo))
                                'If qqo.CurrentPayplanId = qqo.BillingPayPlanId Then 'note: this logic was originally just for NewBus
                                '    qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_InitialCurrentPayPlanStaticDataOptionAtRetrieval(CloneObject(sdo))
                                'End If

                                Dim sdaBillMethodId As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaStartDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaEndDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaRenewalStartDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaRenewalEndDate As QuickQuoteStaticDataAttribute = Nothing
                                Dim sdaPayPlanType As QuickQuoteStaticDataAttribute = Nothing

                                Dim sdeNextBillingPayPlanId As QuickQuoteStaticDataElement = Nothing
                                Dim sdeOtherBillMethodPayPlanId As QuickQuoteStaticDataElement = Nothing
                                Dim sdePreviousBillingPayPlanId As QuickQuoteStaticDataElement = Nothing

                                If sdo.MiscellaneousElements IsNot Nothing AndAlso sdo.MiscellaneousElements.Count > 0 Then
                                    'check for prev 1st
                                    sdePreviousBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "PreviousBillingPayPlanId")
                                    If sdePreviousBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePreviousBillingPayPlanId.nvp_value) = True AndAlso defaultPayplanIds.Contains(CInt(sdePreviousBillingPayPlanId.nvp_value)) = True Then
                                        afterVal_BillingPayPlanId = sdePreviousBillingPayPlanId.nvp_value
                                    End If
                                    If IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                                        'check for next
                                        sdeNextBillingPayPlanId = StaticDataElementForName(sdo.MiscellaneousElements, "NextBillingPayPlanId")
                                        If sdeNextBillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNextBillingPayPlanId.nvp_value) = True AndAlso defaultPayplanIds.Contains(CInt(sdeNextBillingPayPlanId.nvp_value)) = True Then
                                            afterVal_BillingPayPlanId = sdeNextBillingPayPlanId.nvp_value
                                        End If
                                    End If
                                End If

                                If IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                                    If sdo.MiscellaneousAttributes IsNot Nothing AndAlso sdo.MiscellaneousAttributes.Count > 0 Then
                                        'try to find match on payPlanType
                                        sdaPayPlanType = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "PayPlanType")
                                        If sdaPayPlanType IsNot Nothing AndAlso String.IsNullOrWhiteSpace(sdaPayPlanType.nvp_value) = False Then
                                            Dim ppt As PayPlanType = PayPlanType.None
                                            If System.Enum.TryParse(Of PayPlanType)(sdaPayPlanType.nvp_value, ppt) = False Then
                                                ppt = PayPlanType.None
                                            End If
                                            Dim optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing
                                            sdaBillMethodId = StaticDataAttributeForName(sdo.MiscellaneousAttributes, "BillMethodId")
                                            If sdaBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaBillMethodId.nvp_value) = True Then
                                                optionAttributes = New List(Of QuickQuoteStaticDataAttribute)
                                                Dim att As New QuickQuoteStaticDataAttribute
                                                With att
                                                    .nvp_name = "BillMethodId"
                                                    .nvp_value = sdaBillMethodId.nvp_value
                                                End With
                                                optionAttributes.Add(att)
                                            End If
                                            Dim payPlanIds As List(Of Integer) = BillingPayPlanIdsForPayPlanType(ppt, optionAttributes:=optionAttributes)
                                            If payPlanIds IsNot Nothing AndAlso payPlanIds.Count > 0 Then
                                                For Each ppId As Integer In payPlanIds
                                                    If ppId > 0 AndAlso defaultPayplanIds.Contains(ppId) = True Then
                                                        afterVal_BillingPayPlanId = ppId.ToString
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                            If IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                                                If optionAttributes IsNot Nothing Then
                                                    'now try w/o attributes
                                                    Dim payPlanIdsWithoutAtts As List(Of Integer) = BillingPayPlanIdsForPayPlanType(ppt)
                                                    If payPlanIdsWithoutAtts IsNot Nothing AndAlso payPlanIdsWithoutAtts.Count > 0 Then
                                                        For Each ppId As Integer In payPlanIdsWithoutAtts
                                                            If ppId > 0 AndAlso defaultPayplanIds.Contains(ppId) = True Then
                                                                afterVal_BillingPayPlanId = ppId.ToString
                                                                Exit For
                                                            End If
                                                        Next
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If

                                    'added 5/1/2022
                                    If IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                                        'could maybe look for sdeOtherBillMethodPayPlanId, but we were never doing it before (maybe defaults are just for directBill... nope... includes 3 agency bill too)

                                        If IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                                            Dim prevPayplanIdElementToCheck As QuickQuoteStaticDataElement = sdePreviousBillingPayPlanId
                                            Dim okayToCheckForPrev As Boolean = True
                                            Do While okayToCheckForPrev = True
                                                If prevPayplanIdElementToCheck IsNot Nothing AndAlso IsPositiveIntegerString(prevPayplanIdElementToCheck.nvp_value) = True Then
                                                    'could look for the previous to the previous
                                                    Dim sdoPrev As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, prevPayplanIdElementToCheck.nvp_value)
                                                    If sdoPrev IsNot Nothing Then
                                                        If sdoPrev.MiscellaneousElements IsNot Nothing AndAlso sdoPrev.MiscellaneousElements.Count > 0 Then
                                                            Dim sdePrevious2BillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoPrev.MiscellaneousElements, "PreviousBillingPayPlanId")
                                                            If sdePrevious2BillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdePrevious2BillingPayPlanId.nvp_value) = True Then
                                                                If defaultPayplanIds.Contains(CInt(sdePrevious2BillingPayPlanId.nvp_value)) = True Then
                                                                    afterVal_BillingPayPlanId = sdePrevious2BillingPayPlanId.nvp_value
                                                                Else
                                                                    'check for child prev element on next loop
                                                                    prevPayplanIdElementToCheck = sdePrevious2BillingPayPlanId
                                                                End If
                                                            Else
                                                                okayToCheckForPrev = False
                                                            End If
                                                        Else
                                                            okayToCheckForPrev = False
                                                        End If
                                                    Else
                                                        okayToCheckForPrev = False
                                                    End If
                                                Else
                                                    okayToCheckForPrev = False
                                                End If
                                                If okayToCheckForPrev = False OrElse IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then
                                                    Exit Do
                                                End If
                                            Loop

                                            If IsPositiveIntegerString(afterVal_BillingPayPlanId) = False Then
                                                Dim nextPayplanIdElementToCheck As QuickQuoteStaticDataElement = sdeNextBillingPayPlanId
                                                Dim okayToCheckForNext As Boolean = True
                                                Do While okayToCheckForNext = True
                                                    If nextPayplanIdElementToCheck IsNot Nothing AndAlso IsPositiveIntegerString(nextPayplanIdElementToCheck.nvp_value) = True Then
                                                        'could look for the next to the next
                                                        Dim sdoNext As QuickQuoteStaticDataOption = GetStaticDataOptionForTextOrValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, StaticDataOptionSearchType.ByValue, nextPayplanIdElementToCheck.nvp_value)
                                                        If sdoNext IsNot Nothing Then
                                                            If sdoNext.MiscellaneousElements IsNot Nothing AndAlso sdoNext.MiscellaneousElements.Count > 0 Then
                                                                Dim sdeNext2BillingPayPlanId As QuickQuoteStaticDataElement = StaticDataElementForName(sdoNext.MiscellaneousElements, "NextBillingPayPlanId")
                                                                If sdeNext2BillingPayPlanId IsNot Nothing AndAlso IsPositiveIntegerString(sdeNext2BillingPayPlanId.nvp_value) = True Then
                                                                    If defaultPayplanIds.Contains(CInt(sdeNext2BillingPayPlanId.nvp_value)) = True Then
                                                                        afterVal_BillingPayPlanId = sdeNext2BillingPayPlanId.nvp_value
                                                                    Else
                                                                        'check for child prev element on next loop
                                                                        prevPayplanIdElementToCheck = sdeNext2BillingPayPlanId
                                                                    End If
                                                                Else
                                                                    okayToCheckForNext = False
                                                                End If
                                                            Else
                                                                okayToCheckForNext = False
                                                            End If
                                                        Else
                                                            okayToCheckForNext = False
                                                        End If
                                                    Else
                                                        okayToCheckForNext = False
                                                    End If
                                                    If okayToCheckForNext = False OrElse IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then
                                                        Exit Do
                                                    End If
                                                Loop
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If

                        If IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then 'may also want logic to set CurrentPayPlanId, but it should set both as long as OnlyUsePropertyToSetFieldWithSameName property is False
                            'beforeAndAfterValues = New QuickQuoteGenericObjectWithTwoStringProperties
                            'With beforeAndAfterValues
                            '    .Property1 = beforeVal
                            '    .Property2 = afterVal
                            'End With
                            If okayToUpdateIfNeeded = True Then 'here since the property being set could change based on tranType (i.e. maybe currentPayPlanId for Endorsements)
                                If qqo.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.EndorsementQuote OrElse qqo.QuoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.ReadOnlyImage Then
                                    qqo.OnlyUsePropertyToSetFieldWithSameName = True
                                End If
                                qqo.BillingPayPlanId = afterVal_BillingPayPlanId 'note: will also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                                qqo.TopLevelQuoteInfo.QuoteBase.CommonInfo.Set_ConvertedBillingPayPlanIdAtRetrieval(afterVal_BillingPayPlanId)
                            End If
                        End If
                    End If

                    'will do this here since it will be the same for all tranTypes
                    If IsPositiveIntegerString(beforeVal_BillingPayPlanId) = True AndAlso IsPositiveIntegerString(afterVal_BillingPayPlanId) = True Then
                        beforeAndAfterValues_BillingPayPlanId = New QuickQuoteGenericObjectWithTwoStringProperties
                        With beforeAndAfterValues_BillingPayPlanId
                            .Property1 = beforeVal_BillingPayPlanId
                            .Property2 = afterVal_BillingPayPlanId
                        End With
                        'If okayToUpdateIfNeeded = True Then 'need to move this within proper case as we may use currentPayPlanId for Endorsements
                        '    qqo.BillingPayPlanId = afterVal 'note: would also set CurrentPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False
                        'End If
                    End If
                    If IsPositiveIntegerString(beforeVal_CurrentPayplanId) = True AndAlso IsPositiveIntegerString(afterVal_CurrentPayplanId) = True Then
                        beforeAndAfterValues_CurrentPayplanId = New QuickQuoteGenericObjectWithTwoStringProperties
                        With beforeAndAfterValues_CurrentPayplanId
                            .Property1 = beforeVal_CurrentPayplanId
                            .Property2 = afterVal_CurrentPayplanId
                        End With
                        'If okayToUpdateIfNeeded = True Then 'need to move this within proper case as we may use currentPayPlanId for Endorsements
                        '    qqo.CurrentPayPlanId = afterVal 'note: would also set BillingPayPlanId if OnlyUsePropertyToSetFieldWithSameName property is False, which would probably not be what we want for Endorsements
                        'End If
                    End If
                End If
            End If
        End Sub
        Public Sub SetBillingPayplanStuffFromStaticDataElements(ByVal els As List(Of QuickQuoteStaticDataElement), ByRef elementStuff As QuickQuotePayplanStateAndOrLobElementStuff, Optional ByVal onlyLoadInfoSpecificToQuote As Boolean = False, Optional ByRef qqo As QuickQuoteObject = Nothing)
            elementStuff = Nothing

            If els IsNot Nothing AndAlso els.Count > 0 Then
                Dim equivText As String = "StateAndOrLobEquivalent"
                Dim equivEls As List(Of QuickQuoteStaticDataElement) = StaticDataElementsForName_OptionalMatchType(els, equivText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If equivEls IsNot Nothing AndAlso equivEls.Count > 0 Then
                    For Each e As QuickQuoteStaticDataElement In equivEls
                        If e IsNot Nothing AndAlso String.IsNullOrWhiteSpace(e.nvp_name) = False AndAlso IsPositiveIntegerString(e.nvp_value) = True Then
                            If Len(e.nvp_name) > Len(equivText) Then
                                Dim stateLobText As String = Right(e.nvp_name, Len(e.nvp_name) - Len(equivText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim equivInfo As New QuickQuotePayplanIdForStateAndOrLob
                                    With equivInfo
                                        .PayplanId = CInt(e.nvp_value)
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanIdForStateAndOrLob)(equivInfo, qqo) = True Then
                                        If elementStuff Is Nothing Then
                                            elementStuff = New QuickQuotePayplanStateAndOrLobElementStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(elementStuff.EquivalentInfosForStateLob, equivInfo)
                                    End If
                                End If
                            Else
                                If elementStuff Is Nothing Then
                                    elementStuff = New QuickQuotePayplanStateAndOrLobElementStuff
                                End If
                                If elementStuff.EquivalentInfo Is Nothing Then
                                    elementStuff.EquivalentInfo = New QuickQuotePayplanIdForStateAndOrLob
                                    elementStuff.EquivalentInfo.PayplanId = CInt(e.nvp_value)
                                End If
                            End If
                        End If
                    Next
                End If

                Dim prevText As String = "PreviousBillingPayPlanId"
                Dim prevEls As List(Of QuickQuoteStaticDataElement) = StaticDataElementsForName_OptionalMatchType(els, prevText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If prevEls IsNot Nothing AndAlso prevEls.Count > 0 Then
                    For Each e As QuickQuoteStaticDataElement In prevEls
                        If e IsNot Nothing AndAlso String.IsNullOrWhiteSpace(e.nvp_name) = False AndAlso IsPositiveIntegerString(e.nvp_value) = True Then
                            If Len(e.nvp_name) > Len(prevText) Then
                                Dim stateLobText As String = Right(e.nvp_name, Len(e.nvp_name) - Len(prevText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim prevInfo As New QuickQuotePayplanIdForStateAndOrLob
                                    With prevInfo
                                        .PayplanId = CInt(e.nvp_value)
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanIdForStateAndOrLob)(prevInfo, qqo) = True Then
                                        If elementStuff Is Nothing Then
                                            elementStuff = New QuickQuotePayplanStateAndOrLobElementStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(elementStuff.PrevPayPlanIdInfosForStateLob, prevInfo)
                                    End If
                                End If
                            Else
                                If elementStuff Is Nothing Then
                                    elementStuff = New QuickQuotePayplanStateAndOrLobElementStuff
                                End If
                                If elementStuff.PrevPayPlanIdInfo Is Nothing Then
                                    elementStuff.PrevPayPlanIdInfo = New QuickQuotePayplanIdForStateAndOrLob
                                    elementStuff.PrevPayPlanIdInfo.PayplanId = CInt(e.nvp_value)
                                End If
                            End If
                        End If
                    Next
                End If

                Dim nextText As String = "NextBillingPayPlanId"
                Dim nextEls As List(Of QuickQuoteStaticDataElement) = StaticDataElementsForName_OptionalMatchType(els, nextText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If nextEls IsNot Nothing AndAlso nextEls.Count > 0 Then
                    For Each e As QuickQuoteStaticDataElement In nextEls
                        If e IsNot Nothing AndAlso String.IsNullOrWhiteSpace(e.nvp_name) = False AndAlso IsPositiveIntegerString(e.nvp_value) = True Then
                            If Len(e.nvp_name) > Len(nextText) Then
                                Dim stateLobText As String = Right(e.nvp_name, Len(e.nvp_name) - Len(nextText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim nextInfo As New QuickQuotePayplanIdForStateAndOrLob
                                    With nextInfo
                                        .PayplanId = CInt(e.nvp_value)
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanIdForStateAndOrLob)(nextInfo, qqo) = True Then
                                        If elementStuff Is Nothing Then
                                            elementStuff = New QuickQuotePayplanStateAndOrLobElementStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(elementStuff.NextPayPlanIdInfosForStateLob, nextInfo)
                                    End If
                                End If
                            Else
                                If elementStuff Is Nothing Then
                                    elementStuff = New QuickQuotePayplanStateAndOrLobElementStuff
                                End If
                                If elementStuff.NextPayPlanIdInfo Is Nothing Then
                                    elementStuff.NextPayPlanIdInfo = New QuickQuotePayplanIdForStateAndOrLob
                                    elementStuff.NextPayPlanIdInfo.PayplanId = CInt(e.nvp_value)
                                End If
                            End If
                        End If
                    Next
                End If
            End If
        End Sub
        Public Sub SetStateAndOrLobFromText(ByVal stateLobText As String, ByRef st As QuickQuoteState, ByRef lob As QuickQuoteObject.QuickQuoteLobType)
            st = QuickQuoteState.None
            lob = QuickQuoteObject.QuickQuoteLobType.None

            If String.IsNullOrWhiteSpace(stateLobText) = False AndAlso Len(stateLobText) >= 3 AndAlso stateLobText.Contains("_") = True Then
                Dim stateLobList As List(Of String) = ListOfStringFromString(stateLobText, delimiter:="_", returnPairForEachDelimiter:=False)
                If stateLobList IsNot Nothing AndAlso stateLobList.Count > 0 Then
                    Dim hasStateAbbrev As Boolean = False
                    Dim hasLobAbbrev As Boolean = False
                    Dim st_identified As QuickQuoteState = QuickQuoteState.None
                    Dim lob_identified As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                    For Each sl As String In stateLobList
                        If String.IsNullOrWhiteSpace(sl) = False Then
                            If hasStateAbbrev = False AndAlso Len(sl) = 2 Then
                                st_identified = QuickQuoteStateForStateAbbreviation(sl, defaultToIndiana:=False)
                                hasStateAbbrev = True
                            End If
                            If hasLobAbbrev = False AndAlso Len(sl) = 3 Then
                                lob_identified = QuickQuote_LOB_ForThreeLetterAbbreviation(sl)
                                hasLobAbbrev = True
                            End If
                            If hasStateAbbrev = True AndAlso hasLobAbbrev = True Then
                                Exit For
                            End If
                        End If
                    Next
                    If hasStateAbbrev = True OrElse hasLobAbbrev = True Then
                        If hasStateAbbrev = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteState), st_identified) = True AndAlso st_identified <> QuickQuoteState.None Then
                            st = st_identified
                        End If
                        If hasLobAbbrev = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lob_identified) = True AndAlso lob_identified <> QuickQuoteObject.QuickQuoteLobType.None Then
                            lob = lob_identified
                        End If
                    End If
                End If
            End If
        End Sub
        Public Sub UpdateStateLobInfosBasedOnNew(Of T As IQuickQuoteStateAndOrLobInfo)(ByRef stateLobInfos As List(Of T), ByRef newStateLobInfo As T)
            If newStateLobInfo IsNot Nothing AndAlso newStateLobInfo.HasClassSpecificInfo_Base() = True Then
                Dim addIt As Boolean = False
                If stateLobInfos IsNot Nothing AndAlso stateLobInfos.Count > 0 Then
                    Dim newTakesPrecedent As Boolean = False
                    Dim listTakesPrecedent As Boolean = False
                    Dim checkedNew As Boolean = False
                    Dim newHasLob As Boolean = False
                    Dim newHasState As Boolean = False
                    For Each i As IQuickQuoteStateAndOrLobInfo In stateLobInfos
                        If i IsNot Nothing Then
                            If checkedNew = False Then
                                newHasLob = newStateLobInfo.HasLobType()
                                newHasState = newStateLobInfo.HasStateType()
                                checkedNew = True
                            End If
                            Dim currHasLob As Boolean = i.HasLobType()
                            Dim currHasState As Boolean = i.HasStateType()
                            If newHasLob = True AndAlso newHasState = True Then
                                'new has state and lob; anything with just state or lob would take precedent
                                If currHasLob = True OrElse currHasState = True Then
                                    If currHasLob = False Then
                                        'curr only has state
                                        If i.StateType = newStateLobInfo.StateType Then
                                            'curr only has state, and it matches, so list takes precedent
                                            listTakesPrecedent = True
                                        End If
                                    ElseIf currHasState = False Then
                                        'curr only has lob
                                        If i.LobType = newStateLobInfo.LobType Then
                                            'curr only has lob, and it matches, so list takes precedent
                                            listTakesPrecedent = True
                                        End If
                                    Else
                                        'curr has state and lob also
                                        If i.StateType = newStateLobInfo.StateType AndAlso i.LobType = newStateLobInfo.LobType Then
                                            'same item already exists, so list takes precedent
                                            listTakesPrecedent = True
                                            i.CopyInfo_Base(newStateLobInfo, onlyUpdateClassSpecificInfoIfCurrentIsInvalid:=True, doNotUpdateBaseInfo:=True)
                                        End If
                                    End If
                                End If
                            ElseIf newHasLob = True Then
                                'new only has lob; would take precedent over anything with state and lob
                                If currHasLob = True AndAlso currHasState = True Then
                                    'curr has state and lob
                                    If i.LobType = newStateLobInfo.LobType Then
                                        'lob matches; new takes precedent
                                        'i.StateType = newPayPlanInfo.StateType
                                        'i.PayplanId = newPayPlanInfo.PayplanId
                                        i.CopyInfo_Base(newStateLobInfo)
                                        newTakesPrecedent = True
                                    End If
                                ElseIf currHasLob = True Then
                                    'curr only has lob also
                                    If i.LobType = newStateLobInfo.LobType Then
                                        'lob matches; list takes precedent
                                        listTakesPrecedent = True
                                        i.CopyInfo_Base(newStateLobInfo, onlyUpdateClassSpecificInfoIfCurrentIsInvalid:=True, doNotUpdateBaseInfo:=True)
                                    End If
                                End If
                            ElseIf newHasState = True Then
                                'new only has state; would take precedent over anything with state and lob
                                If currHasLob = True AndAlso currHasState = True Then
                                    'curr has state and lob
                                    If i.StateType = newStateLobInfo.StateType Then
                                        'state matches; new takes precedent
                                        'i.LobType = newPayPlanInfo.LobType
                                        'i.PayplanId = newPayPlanInfo.PayplanId
                                        i.CopyInfo_Base(newStateLobInfo)
                                        newTakesPrecedent = True
                                    End If
                                ElseIf currHasState = True Then
                                    'curr only has state also
                                    If i.StateType = newStateLobInfo.StateType Then
                                        'state matches; list takes precedent
                                        listTakesPrecedent = True
                                        i.CopyInfo_Base(newStateLobInfo, onlyUpdateClassSpecificInfoIfCurrentIsInvalid:=True, doNotUpdateBaseInfo:=True)
                                    End If
                                End If
                            End If
                            If newTakesPrecedent = True OrElse listTakesPrecedent = True Then
                                Exit For
                            End If
                        End If
                    Next
                    If addIt = False Then
                        If newTakesPrecedent = False AndAlso listTakesPrecedent = False Then
                            addIt = True
                        End If
                    End If
                Else
                    addIt = True
                End If
                If addIt = True Then
                    If stateLobInfos Is Nothing Then
                        'stateLobInfos = New List(Of IQuickQuoteStateAndOrLobInfo)
                        stateLobInfos = New List(Of T)
                    End If
                    stateLobInfos.Add(newStateLobInfo)
                End If
            End If
        End Sub
        Public Sub SetBillingPayplanStuffFromStaticDataAttributes(ByVal atts As List(Of QuickQuoteStaticDataAttribute), ByRef attributeStuff As QuickQuotePayplanStateAndOrLobAttributeStuff, Optional ByVal onlyLoadInfoSpecificToQuote As Boolean = False, Optional ByRef qqo As QuickQuoteObject = Nothing)
            attributeStuff = Nothing

            If atts IsNot Nothing AndAlso atts.Count > 0 Then
                Dim isStateLobSpecificAtt As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(atts, "isStateAndOrLobSpecific")
                If isStateLobSpecificAtt IsNot Nothing Then
                    If attributeStuff Is Nothing Then
                        attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                    End If
                    attributeStuff.IsStateAndOrLobSpecific = BitToBoolean(isStateLobSpecificAtt.nvp_value)

                    'added 5/2/2022
                    If attributeStuff.IsStateAndOrLobSpecific = True Then
                        Dim specificStateLobCombosAtt As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(atts, "specificStateAndOrLobCombos")
                        If specificStateLobCombosAtt IsNot Nothing AndAlso String.IsNullOrWhiteSpace(specificStateLobCombosAtt.nvp_value) = False AndAlso Len(specificStateLobCombosAtt.nvp_value) > 1 Then
                            Dim stateLobTextCombos As List(Of String) = Nothing
                            If specificStateLobCombosAtt.nvp_value.Contains("|") = True Then
                                stateLobTextCombos = ListOfStringFromString(specificStateLobCombosAtt.nvp_value, delimiter:="|", returnPairForEachDelimiter:=False)
                            End If
                            If stateLobTextCombos Is Nothing Then
                                stateLobTextCombos = New List(Of String)
                            End If
                            If stateLobTextCombos.Count = 0 Then
                                stateLobTextCombos.Add(specificStateLobCombosAtt.nvp_value)
                            End If
                            For Each slText As String In stateLobTextCombos
                                If String.IsNullOrWhiteSpace(slText) = False AndAlso Len(slText) > 1 Then
                                    If Left(slText, 1) <> "_" Then 'needed for SetStateAndOrLobFromText
                                        slText = "_" & slText
                                    End If
                                    Dim st As QuickQuoteState = QuickQuoteState.None
                                    Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                    SetStateAndOrLobFromText(slText, st, lob)
                                    If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                        Dim stateLobInfo As New QuickQuotePayplanIdForStateAndOrLob
                                        With stateLobInfo
                                            .StateType = st
                                            .LobType = lob
                                            .PayplanId = Integer.MaxValue 'need to default it to something to pass validation in UpdateStateLobInfosBasedOnNew
                                        End With
                                        '1st see if there's already one there that would take precedent; no need to add this one
                                        'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                        If attributeStuff Is Nothing Then
                                            attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(attributeStuff.SpecificStateLobCombos, stateLobInfo)
                                    End If
                                End If
                            Next
                        End If
                    End If
                End If

                Dim startDateText As String = "startDate"
                Dim startAtts As List(Of QuickQuoteStaticDataAttribute) = StaticDataAttributesForName_OptionalMatchType(atts, startDateText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If startAtts IsNot Nothing AndAlso startAtts.Count > 0 Then
                    For Each a As QuickQuoteStaticDataAttribute In startAtts
                        If a IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.nvp_name) = False AndAlso IsValidDateString(a.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                            If Len(a.nvp_name) > Len(startDateText) Then
                                Dim stateLobText As String = Right(a.nvp_name, Len(a.nvp_name) - Len(startDateText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim stateLobInfo As New QuickQuotePayplanTermDatesForStateAndOrLob
                                    With stateLobInfo
                                        .StartDate = CDate(a.nvp_value).ToShortDateString
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanTermDatesForStateAndOrLob)(stateLobInfo, qqo) = True Then
                                        If attributeStuff Is Nothing Then
                                            attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(attributeStuff.TermDateInfosForStateLob, stateLobInfo)
                                    End If
                                End If
                            Else
                                If attributeStuff Is Nothing Then
                                    attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                End If
                                If attributeStuff.TermDateInfo Is Nothing Then
                                    attributeStuff.TermDateInfo = New QuickQuotePayplanTermDatesForStateAndOrLob
                                End If
                                If IsValidDateString(attributeStuff.TermDateInfo.StartDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                    attributeStuff.TermDateInfo.StartDate = CDate(a.nvp_value).ToShortDateString
                                End If
                            End If
                        End If
                    Next
                End If

                Dim endDateText As String = "endDate"
                Dim endAtts As List(Of QuickQuoteStaticDataAttribute) = StaticDataAttributesForName_OptionalMatchType(atts, endDateText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If endAtts IsNot Nothing AndAlso endAtts.Count > 0 Then
                    For Each a As QuickQuoteStaticDataAttribute In endAtts
                        If a IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.nvp_name) = False AndAlso IsValidDateString(a.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                            If Len(a.nvp_name) > Len(endDateText) Then
                                Dim stateLobText As String = Right(a.nvp_name, Len(a.nvp_name) - Len(endDateText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim stateLobInfo As New QuickQuotePayplanTermDatesForStateAndOrLob
                                    With stateLobInfo
                                        .EndDate = CDate(a.nvp_value).ToShortDateString
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanTermDatesForStateAndOrLob)(stateLobInfo, qqo) = True Then
                                        If attributeStuff Is Nothing Then
                                            attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(attributeStuff.TermDateInfosForStateLob, stateLobInfo)
                                    End If
                                End If
                            Else
                                If attributeStuff Is Nothing Then
                                    attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                End If
                                If attributeStuff.TermDateInfo Is Nothing Then
                                    attributeStuff.TermDateInfo = New QuickQuotePayplanTermDatesForStateAndOrLob
                                End If
                                If IsValidDateString(attributeStuff.TermDateInfo.EndDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                    attributeStuff.TermDateInfo.EndDate = CDate(a.nvp_value).ToShortDateString
                                End If
                            End If
                        End If
                    Next
                End If

                Dim renewalStartDateText As String = "renewalStartDate"
                Dim renStartAtts As List(Of QuickQuoteStaticDataAttribute) = StaticDataAttributesForName_OptionalMatchType(atts, renewalStartDateText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If renStartAtts IsNot Nothing AndAlso renStartAtts.Count > 0 Then
                    For Each a As QuickQuoteStaticDataAttribute In renStartAtts
                        If a IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.nvp_name) = False AndAlso IsValidDateString(a.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                            If Len(a.nvp_name) > Len(renewalStartDateText) Then
                                Dim stateLobText As String = Right(a.nvp_name, Len(a.nvp_name) - Len(renewalStartDateText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim stateLobInfo As New QuickQuotePayplanTermDatesForStateAndOrLob
                                    With stateLobInfo
                                        .RenewalStartDate = CDate(a.nvp_value).ToShortDateString
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanTermDatesForStateAndOrLob)(stateLobInfo, qqo) = True Then
                                        If attributeStuff Is Nothing Then
                                            attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(attributeStuff.TermDateInfosForStateLob, stateLobInfo)
                                    End If
                                End If
                            Else
                                If attributeStuff Is Nothing Then
                                    attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                End If
                                If attributeStuff.TermDateInfo Is Nothing Then
                                    attributeStuff.TermDateInfo = New QuickQuotePayplanTermDatesForStateAndOrLob
                                End If
                                If IsValidDateString(attributeStuff.TermDateInfo.RenewalStartDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                    attributeStuff.TermDateInfo.RenewalStartDate = CDate(a.nvp_value).ToShortDateString
                                End If
                            End If
                        End If
                    Next
                End If

                Dim renewalEndDateText As String = "renewalEndDate"
                Dim renEndAtts As List(Of QuickQuoteStaticDataAttribute) = StaticDataAttributesForName_OptionalMatchType(atts, renewalEndDateText, matchType:=TextMatchType.TextOnly_IgnoreCasing_MatchBeginning)
                If renEndAtts IsNot Nothing AndAlso renEndAtts.Count > 0 Then
                    For Each a As QuickQuoteStaticDataAttribute In renEndAtts
                        If a IsNot Nothing AndAlso String.IsNullOrWhiteSpace(a.nvp_name) = False AndAlso IsValidDateString(a.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                            If Len(a.nvp_name) > Len(renewalEndDateText) Then
                                Dim stateLobText As String = Right(a.nvp_name, Len(a.nvp_name) - Len(renewalEndDateText))
                                Dim st As QuickQuoteState = QuickQuoteState.None
                                Dim lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
                                SetStateAndOrLobFromText(stateLobText, st, lob)
                                If st <> QuickQuoteState.None OrElse lob <> QuickQuoteObject.QuickQuoteLobType.None Then
                                    Dim stateLobInfo As New QuickQuotePayplanTermDatesForStateAndOrLob
                                    With stateLobInfo
                                        .RenewalEndDate = CDate(a.nvp_value).ToShortDateString
                                        .StateType = st
                                        .LobType = lob
                                    End With
                                    '1st see if there's already one there that would take precedent; no need to add this one
                                    'then see if this one takes precedent over one that's already there; would need to replace the one already there
                                    If onlyLoadInfoSpecificToQuote = False OrElse StateLobInfoOkayForQuote(Of QuickQuotePayplanTermDatesForStateAndOrLob)(stateLobInfo, qqo) = True Then
                                        If attributeStuff Is Nothing Then
                                            attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                        End If
                                        UpdateStateLobInfosBasedOnNew(attributeStuff.TermDateInfosForStateLob, stateLobInfo)
                                    End If
                                End If
                            Else
                                If attributeStuff Is Nothing Then
                                    attributeStuff = New QuickQuotePayplanStateAndOrLobAttributeStuff
                                End If
                                If attributeStuff.TermDateInfo Is Nothing Then
                                    attributeStuff.TermDateInfo = New QuickQuotePayplanTermDatesForStateAndOrLob
                                End If
                                If IsValidDateString(attributeStuff.TermDateInfo.RenewalEndDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                    attributeStuff.TermDateInfo.RenewalEndDate = CDate(a.nvp_value).ToShortDateString
                                End If
                            End If
                        End If
                    Next
                End If

                If attributeStuff IsNot Nothing AndAlso attributeStuff.TermDateInfo IsNot Nothing Then
                    If attributeStuff.TermDateInfosForStateLob IsNot Nothing AndAlso attributeStuff.TermDateInfosForStateLob.Count > 0 Then
                        Dim hasBaseStartDate As Boolean = IsValidDateString(attributeStuff.TermDateInfo.StartDate, mustBeGreaterThanDefaultDate:=True)
                        Dim hasBaseEndDate As Boolean = IsValidDateString(attributeStuff.TermDateInfo.EndDate, mustBeGreaterThanDefaultDate:=True)
                        Dim hasBaseRenStartDate As Boolean = IsValidDateString(attributeStuff.TermDateInfo.RenewalStartDate, mustBeGreaterThanDefaultDate:=True)
                        Dim hasBaseRenEndDate As Boolean = IsValidDateString(attributeStuff.TermDateInfo.RenewalEndDate, mustBeGreaterThanDefaultDate:=True)
                        If hasBaseStartDate = True OrElse hasBaseEndDate = True OrElse hasBaseRenStartDate = True OrElse hasBaseRenEndDate = True Then
                            For Each i As QuickQuotePayplanTermDatesForStateAndOrLob In attributeStuff.TermDateInfosForStateLob
                                If i IsNot Nothing Then
                                    If hasBaseStartDate = True AndAlso IsValidDateString(i.StartDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                        i.StartDate = attributeStuff.TermDateInfo.StartDate
                                    End If
                                    If hasBaseEndDate = True AndAlso IsValidDateString(i.EndDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                        i.EndDate = attributeStuff.TermDateInfo.EndDate
                                    End If
                                    If hasBaseRenStartDate = True AndAlso IsValidDateString(i.RenewalStartDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                        i.RenewalStartDate = attributeStuff.TermDateInfo.RenewalStartDate
                                    End If
                                    If hasBaseRenEndDate = True AndAlso IsValidDateString(i.RenewalEndDate, mustBeGreaterThanDefaultDate:=True) = False Then
                                        i.RenewalEndDate = attributeStuff.TermDateInfo.RenewalEndDate
                                    End If
                                End If
                            Next
                        End If
                    End If
                End If
            End If
        End Sub
        'added 5/1/2022
        Public Sub SetBillingPayplanStuffFromStaticDataElementsAndAttributes(ByVal els As List(Of QuickQuoteStaticDataElement), ByVal atts As List(Of QuickQuoteStaticDataAttribute), ByRef elementAndAttributeStuff As QuickQuotePayplanStateAndOrLobElementAndAttributeStuff, Optional ByVal onlyLoadInfoSpecificToQuote As Boolean = False, Optional ByRef qqo As QuickQuoteObject = Nothing)
            elementAndAttributeStuff = Nothing
            Dim elementStuff As QuickQuotePayplanStateAndOrLobElementStuff = Nothing
            Dim attributeStuff As QuickQuotePayplanStateAndOrLobAttributeStuff = Nothing

            If els IsNot Nothing OrElse atts IsNot Nothing Then
                SetBillingPayplanStuffFromStaticDataElements(els, elementStuff, onlyLoadInfoSpecificToQuote:=onlyLoadInfoSpecificToQuote, qqo:=qqo)
                SetBillingPayplanStuffFromStaticDataAttributes(atts, attributeStuff, onlyLoadInfoSpecificToQuote:=onlyLoadInfoSpecificToQuote, qqo:=qqo)
            End If

            If attributeStuff IsNot Nothing OrElse elementStuff IsNot Nothing Then
                elementAndAttributeStuff = New QuickQuotePayplanStateAndOrLobElementAndAttributeStuff
                elementAndAttributeStuff.ElementStuff = elementStuff
                elementAndAttributeStuff.AttributeStuff = attributeStuff
            End If
        End Sub
        Public Sub SetBillingPayplanStuffFromStaticDataOptionElementsAndAttributes(ByVal sdo As QuickQuoteStaticDataOption, ByRef elementAndAttributeStuff As QuickQuotePayplanStateAndOrLobElementAndAttributeStuff, Optional ByVal onlyLoadInfoSpecificToQuote As Boolean = False, Optional ByRef qqo As QuickQuoteObject = Nothing)
            elementAndAttributeStuff = Nothing

            If sdo IsNot Nothing Then
                SetBillingPayplanStuffFromStaticDataElementsAndAttributes(sdo.MiscellaneousElements, sdo.MiscellaneousAttributes, elementAndAttributeStuff, onlyLoadInfoSpecificToQuote:=onlyLoadInfoSpecificToQuote, qqo:=qqo)
                'added 5/2/2022
                If elementAndAttributeStuff IsNot Nothing AndAlso elementAndAttributeStuff.AttributeStuff IsNot Nothing AndAlso elementAndAttributeStuff.AttributeStuff.SpecificStateLobCombos IsNot Nothing AndAlso elementAndAttributeStuff.AttributeStuff.SpecificStateLobCombos.Count > 0 AndAlso IsPositiveIntegerString(sdo.Value) = True Then
                    For Each slCombo As QuickQuotePayplanIdForStateAndOrLob In elementAndAttributeStuff.AttributeStuff.SpecificStateLobCombos
                        If slCombo IsNot Nothing AndAlso (slCombo.PayplanId <= 0 OrElse slCombo.PayplanId = Integer.MaxValue) Then
                            slCombo.PayplanId = CInt(sdo.Value)
                        End If
                    Next
                End If
            End If
        End Sub
        'added 4/27/2022
        Public Function StateLobInfoOkayForQuote(Of T As IQuickQuoteStateAndOrLobInfo)(ByVal stateLobInfo As T, ByVal qqo As QuickQuoteObject) As Boolean
            Dim isOkay As Boolean = False

            If stateLobInfo IsNot Nothing Then
                If qqo IsNot Nothing Then
                    Dim hasLob As Boolean = False
                    Dim hasState As Boolean = False
                    If stateLobInfo.HasLobAndStateType(hasLob:=hasLob, hasState:=hasState) = True Then
                        If qqo.LobType = stateLobInfo.LobType AndAlso qqo.QuickQuoteState = stateLobInfo.StateType Then
                            isOkay = True
                        End If
                    ElseIf hasState = True Then
                        If qqo.QuickQuoteState = stateLobInfo.StateType Then
                            isOkay = True
                        End If
                    ElseIf hasLob = True Then
                        If qqo.LobType = stateLobInfo.LobType Then
                            isOkay = True
                        End If
                    Else
                        isOkay = True
                    End If
                Else
                    isOkay = True
                End If
            End If

            Return isOkay
        End Function
        'added 9/28/2021
        Public Enum PayPlanType
            None = 0
            Annual = 1
            Quarterly = 2
            SemiAnnual = 3
            Monthly = 4
            RccMonthly = 5
            EftMonthly = 6
            AnnualMTG = 7
            AccountBillMonthly = 8
            AccountBillRccMonthly = 9
            AccountBillEftMonthly = 10
        End Enum
        Private Function IsMatchForFileAttribute(ByVal att As QuickQuoteStaticDataAttribute, ByVal fileAtt As QuickQuoteStaticDataAttribute) As Boolean
            Dim isMatch As Boolean = False

            If att IsNot Nothing AndAlso fileAtt IsNot Nothing Then
                If isMatch = False AndAlso att.NameValuePair IsNot Nothing Then
                    isMatch = IsMatchForFileAttributeNameValuePair(att.NameValuePair, fileAtt.NameValuePair)
                End If
                If isMatch = False AndAlso att.ValidNameValuePairs IsNot Nothing AndAlso att.ValidNameValuePairs.Count > 0 Then
                    For Each nvp As QuickQuoteStaticDataNameValuePair In att.ValidNameValuePairs
                        isMatch = IsMatchForFileAttributeNameValuePair(nvp, fileAtt.NameValuePair)
                        If isMatch = True Then
                            Exit For
                        End If
                    Next
                End If
            End If

            Return isMatch
        End Function
        Private Function IsMatchForFileAttributeNameValuePair(ByVal nvp As QuickQuoteStaticDataNameValuePair, ByVal fileNvp As QuickQuoteStaticDataNameValuePair) As Boolean
            Dim isMatch As Boolean = False

            'note: logic taken from IsAttributeValidForList
            If nvp IsNot Nothing AndAlso fileNvp IsNot Nothing AndAlso String.IsNullOrWhiteSpace(nvp.Name) = False AndAlso String.IsNullOrWhiteSpace(fileNvp.Name) = False AndAlso String.IsNullOrWhiteSpace(nvp.Value) = False AndAlso String.IsNullOrWhiteSpace(fileNvp.Value) = False Then
                If UCase(fileNvp.Name) = UCase(nvp.Name) Then
                    'name matches
                    If UCase(fileNvp.Value) = UCase(nvp.Value) Then
                        'exact match
                        isMatch = True
                    Else
                        'see if there are multiple values in attribute from file, parse through them, and look for match on each
                        If fileNvp.Value.Contains("|") = True Then
                            Dim arValues As String() = fileNvp.Value.Split("|") '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                            Dim exitOuterLoop As Boolean = False
                            For Each v As String In arValues
                                If Trim(UCase(v)) = Trim(UCase(nvp.Value)) Then 'use trim to handle for spaces before/after separator
                                    isMatch = True
                                    Exit For
                                End If
                            Next
                        End If
                        If isMatch = False AndAlso fileNvp.Value.Contains(",") = True Then
                            Dim arValues As String() = fileNvp.Value.Split(",") '4/10/2017 note: this Split (.Split) should only be used whenever the delimiter is 1-character, else it splits on each one; other Split should be used in most cases (Split(str, del))
                            Dim exitOuterLoop As Boolean = False
                            For Each v As String In arValues
                                If Trim(UCase(v)) = Trim(UCase(nvp.Value)) Then 'use trim to handle for spaces before/after separator
                                    isMatch = True
                                    Exit For
                                End If
                            Next
                        End If
                    End If
                End If
            End If

            Return isMatch
        End Function
        Public Function StaticDataOptionsForPayPlanType(ByVal ppt As PayPlanType, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = False) As List(Of QuickQuoteStaticDataOption)
            Dim sdos As List(Of QuickQuoteStaticDataOption) = Nothing

            If System.Enum.IsDefined(GetType(PayPlanType), ppt) = True AndAlso ppt <> PayPlanType.None Then
                Dim ppts As New List(Of PayPlanType)
                ppts.Add(ppt)
                sdos = StaticDataOptionsForPayPlanTypes(ppts, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)
            End If

            Return sdos
        End Function
        Public Function StaticDataOptionsForPayPlanTypes(ByVal ppts As List(Of PayPlanType), Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = False) As List(Of QuickQuoteStaticDataOption)
            Dim sdos As List(Of QuickQuoteStaticDataOption) = Nothing

            If ppts IsNot Nothing AndAlso ppts.Count > 0 Then
                Dim att As QuickQuoteStaticDataAttribute = Nothing
                For Each ppt As PayPlanType In ppts
                    If System.Enum.IsDefined(GetType(PayPlanType), ppt) = True AndAlso ppt <> PayPlanType.None Then
                        If att Is Nothing Then
                            att = New QuickQuoteStaticDataAttribute
                        End If
                        With att
                            If .ValidNameValuePairs Is Nothing Then
                                .ValidNameValuePairs = New List(Of QuickQuoteStaticDataNameValuePair)
                            End If
                            Dim nvp As New QuickQuoteStaticDataNameValuePair
                            With nvp
                                .Name = "PayPlanType"
                                .Value = System.Enum.GetName(GetType(PayPlanType), ppt)
                            End With
                            .ValidNameValuePairs.Add(nvp)
                        End With
                    End If
                Next
                If att IsNot Nothing Then
                    If optionAttributes Is Nothing Then
                        optionAttributes = New List(Of QuickQuoteStaticDataAttribute)
                    End If
                    optionAttributes.Add(att)

                    sdos = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)
                End If
            End If

            Return sdos
        End Function
        'Private Function GetBaseStaticDataOptionsWithOptionalParams(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As List(Of QuickQuoteStaticDataOption)
        'updated 11/23/2022
        Private Function GetBaseStaticDataOptionsWithOptionalParams(ByVal className As QuickQuoteClassName, ByVal propertyName As QuickQuotePropertyName, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal qqCompany As QuickQuoteCompany = QuickQuoteCompany.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = True) As List(Of QuickQuoteStaticDataOption)
            Dim options As List(Of QuickQuoteStaticDataOption) = Nothing

            'Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForState(className, propertyName, qqState)
            'updated 11/23/2022
            Dim sdl As QuickQuoteStaticDataList = GetStaticDataListForStateAndCompany(className, propertyName, qqState, qqCompany)

            If sdl IsNot Nothing AndAlso sdl.Options IsNot Nothing AndAlso sdl.Options.Count > 0 Then
                If useIgnoreForListsProperty = False AndAlso (optionAttributes Is Nothing OrElse optionAttributes.Count = 0) AndAlso (System.Enum.IsDefined(GetType(QuickQuoteObject.QuickQuoteLobType), lob) = False OrElse lob = QuickQuoteObject.QuickQuoteLobType.None) AndAlso (System.Enum.IsDefined(GetType(QuickQuoteHelperClass.PersOrComm), persOrComm) = False OrElse persOrComm = QuickQuoteHelperClass.PersOrComm.None) Then
                    options = sdl.Options
                Else
                    options = GetStaticDataOptionsWithMatchingAttributes(sdl, optionAttributes, lob:=lob, persOrComm:=persOrComm, useIgnoreForListsProperty:=useIgnoreForListsProperty)
                End If
            End If

            Return options
        End Function
        Public Function BillingPayPlanIdsForPayPlanTypes(ByVal ppts As List(Of PayPlanType), Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = False) As List(Of Integer)
            Dim ids As List(Of Integer) = Nothing

            Dim sdos As List(Of QuickQuoteStaticDataOption) = StaticDataOptionsForPayPlanTypes(ppts, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)
            If sdos IsNot Nothing AndAlso sdos.Count > 0 Then
                For Each sdo As QuickQuoteStaticDataOption In sdos
                    If sdo IsNot Nothing Then
                        AddUniqueIntegerToIntegerList(IntegerForString(sdo.Value), ids, positiveOnly:=True)
                    End If
                Next
            End If

            Return ids
        End Function
        Public Function BillingPayPlanIdsForPayPlanType(ByVal ppt As PayPlanType, Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = False) As List(Of Integer)
            Dim ids As List(Of Integer) = Nothing

            'Dim sdos As List(Of QuickQuoteStaticDataOption) = StaticDataOptionsForPayPlanType(ppt, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)
            'If sdos IsNot Nothing AndAlso sdos.Count > 0 Then
            '    For Each sdo As QuickQuoteStaticDataOption In sdos
            '        If sdo IsNot Nothing Then
            '            AddUniqueIntegerToIntegerList(IntegerForString(sdo.Value), ids, positiveOnly:=True)
            '        End If
            '    Next
            'End If
            'either way should work the same
            If System.Enum.IsDefined(GetType(PayPlanType), ppt) = True AndAlso ppt <> PayPlanType.None Then
                Dim ppts As New List(Of PayPlanType)
                ppts.Add(ppt)
                ids = BillingPayPlanIdsForPayPlanTypes(ppts, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)
            End If

            Return ids
        End Function
        Public Function ActivePayPlanStaticDataOptionsWithOptionalParams(Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal effDate As String = "", Optional ByVal billMethodId As String = "2", Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None) As List(Of QuickQuoteStaticDataOption)
            Dim options As List(Of QuickQuoteStaticDataOption) = Nothing

            If IsValidDateString(effDate, mustBeGreaterThanDefaultDate:=True) = False Then
                effDate = Date.Today.ToShortDateString
            End If

            'Dim billMethodAtt As QuickQuoteStaticDataAttribute = Nothing
            'If IsPositiveIntegerString(billMethodId) = True Then
            '    billMethodAtt = New QuickQuoteStaticDataAttribute
            '    With billMethodAtt
            '        .nvp_name = "BillMethodId"
            '        .nvp_value = billMethodId
            '    End With
            'End If
            'If billMethodAtt IsNot Nothing Then
            '    If optionAttributes Is Nothing Then
            '        optionAttributes = New List(Of QuickQuoteStaticDataAttribute)
            '    End If
            '    optionAttributes.Add(billMethodAtt)
            'End If
            Dim activeAtt As New QuickQuoteStaticDataAttribute
            With activeAtt
                .nvp_name = "active"
                .nvp_value = "True"
            End With
            If activeAtt IsNot Nothing Then
                If optionAttributes Is Nothing Then
                    optionAttributes = New List(Of QuickQuoteStaticDataAttribute)
                End If
                optionAttributes.Add(activeAtt)
            End If

            Dim initialOptions As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=False)
            If initialOptions IsNot Nothing AndAlso initialOptions.Count > 0 Then
                For Each o As QuickQuoteStaticDataOption In initialOptions
                    If o IsNot Nothing Then
                        Dim sdaStartDate As QuickQuoteStaticDataAttribute = Nothing
                        Dim sdaEndDate As QuickQuoteStaticDataAttribute = Nothing
                        If o.MiscellaneousAttributes IsNot Nothing AndAlso o.MiscellaneousAttributes.Count > 0 Then
                            sdaStartDate = StaticDataAttributeForName(o.MiscellaneousAttributes, "startDate")
                            If sdaStartDate IsNot Nothing Then
                                sdaEndDate = StaticDataAttributeForName(o.MiscellaneousAttributes, "endDate")
                            End If
                        End If
                        Dim okayToAdd As Boolean = True
                        If sdaStartDate IsNot Nothing AndAlso sdaEndDate IsNot Nothing AndAlso IsValidDateString(sdaStartDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True AndAlso IsValidDateString(sdaEndDate.nvp_value, mustBeGreaterThanDefaultDate:=True) = True Then
                            okayToAdd = False
                            If CDate(sdaStartDate.nvp_value) <= CDate(effDate) AndAlso CDate(sdaEndDate.nvp_value) >= CDate(effDate) Then
                                'startDate is good (before effDate) and endDate is good (after effDate)
                                okayToAdd = True
                            End If
                        Else
                            okayToAdd = True
                        End If
                        If okayToAdd = True AndAlso IsPositiveIntegerString(billMethodId) = True Then
                            Dim sdaBillMethodId As QuickQuoteStaticDataAttribute = StaticDataAttributeForName(o.MiscellaneousAttributes, "BillMethodId")
                            If sdaBillMethodId IsNot Nothing AndAlso IsPositiveIntegerString(sdaBillMethodId.nvp_value) = True Then
                                okayToAdd = False
                                If CInt(sdaBillMethodId.nvp_value) = CInt(billMethodId) Then
                                    okayToAdd = True
                                End If
                            Else
                                okayToAdd = True
                            End If
                        End If
                        If okayToAdd = True Then
                            If options Is Nothing Then
                                options = New List(Of QuickQuoteStaticDataOption)
                            End If
                            options.Add(o)
                        End If
                    End If
                Next
            End If

            If options Is Nothing OrElse options.Count = 0 Then
                'just return normal list
                'If billMethodAtt IsNot Nothing Then
                '    optionAttributes.Remove(billMethodAtt)
                'End If
                If activeAtt IsNot Nothing Then
                    optionAttributes.Remove(activeAtt)
                End If
                options = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=True)
            End If

            Return options
        End Function
        Public Sub LoadActivePayPlanStaticDataOptionsDropDown(ByRef ddl As DropDownList, Optional ByVal sortBy As QuickQuoteStaticDataOption.SortBy = QuickQuoteStaticDataOption.SortBy.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal effDate As String = "", Optional ByVal billMethodId As String = "2", Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal EmptyZeroOrNoneEvaluationTypeForSort As QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType = QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText, Optional ByVal returnTextInUpperCase As Boolean = True)
            Dim options As List(Of QuickQuoteStaticDataOption) = ActivePayPlanStaticDataOptionsWithOptionalParams(lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, effDate:=effDate, billMethodId:=billMethodId, qqState:=qqState)

            If options IsNot Nothing AndAlso options.Count > 0 Then
                'If ddl IsNot Nothing AndAlso ddl.Items IsNot Nothing Then '12/26/2013 - added IF to avoid possible object reference error; removed since ddl should always be something or instantiated when used programatically for testing
                ddl.Items.Clear()
                'End If

                If System.Enum.IsDefined(GetType(QuickQuoteStaticDataOption.SortBy), sortBy) = True AndAlso sortBy <> QuickQuoteStaticDataOption.SortBy.None Then
                    SortStaticDataOptions(options, sortBy, EmptyZeroOrNoneEvaluationTypeForSort)
                End If

                For Each o As QuickQuoteStaticDataOption In options
                    If o IsNot Nothing Then
                        Dim li As New ListItem
                        li.Text = o.Text
                        If returnTextInUpperCase = True Then
                            li.Text = UCase(li.Text)
                        End If
                        li.Value = o.Value
                        ddl.Items.Add(li)
                    End If
                Next
            End If
        End Sub
        'added 9/29/2021
        Public Function BillingPayPlanIdsForStaticDataOptions(ByVal options As List(Of QuickQuoteStaticDataOption)) As List(Of Integer)
            Dim ids As List(Of Integer) = Nothing

            If options IsNot Nothing AndAlso options.Count > 0 Then
                For Each sdo As QuickQuoteStaticDataOption In options
                    If sdo IsNot Nothing Then
                        AddUniqueIntegerToIntegerList(IntegerForString(sdo.Value), ids, positiveOnly:=True)
                    End If
                Next
            End If

            Return ids
        End Function
        Public Function BillingPayPlanIdsForOptionalParams(Optional ByVal qqState As QuickQuoteState = QuickQuoteState.None, Optional ByVal lob As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None, Optional ByVal persOrComm As PersOrComm = QuickQuoteHelperClass.PersOrComm.None, Optional ByVal optionAttributes As List(Of QuickQuoteStaticDataAttribute) = Nothing, Optional ByVal useIgnoreForListsProperty As Boolean = False) As List(Of Integer)
            Dim ids As List(Of Integer) = Nothing

            Dim sdos As List(Of QuickQuoteStaticDataOption) = GetBaseStaticDataOptionsWithOptionalParams(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.BillingPayPlanId, qqState:=qqState, lob:=lob, persOrComm:=persOrComm, optionAttributes:=optionAttributes, useIgnoreForListsProperty:=useIgnoreForListsProperty)
            If sdos IsNot Nothing AndAlso sdos.Count > 0 Then
                ids = BillingPayPlanIdsForStaticDataOptions(sdos)
            End If

            Return ids
        End Function
        Public Shared Function ConvertPayPlanIdsIfNeeded() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("VR_ConvertPayPlanIdsIfNeeded")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function
        Public Shared Function OkayToSaveAIListHistory() As Boolean
            Dim isOkay As Boolean = True 'default to True; key required to turn to False

            Dim strIsOkay As String = configAppSettingValueAsString("VR_OkayToSaveAIListHistory")
            If String.IsNullOrWhiteSpace(strIsOkay) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                If UCase(strIsOkay) = "YES" OrElse qqHelper.BitToBoolean(strIsOkay) = True Then 'key would just need any text value that doesn't equate to True to return False
                    isOkay = True
                Else
                    isOkay = False
                End If
            End If

            Return isOkay
        End Function

        'added 11/21/2022
        Public Enum QuickQuoteCompany
            None = 0
            IndianaFarmersMutual = 1
            IndianaFarmersIndemnity = 2
        End Enum
        Public Shared Function QuickQuoteCompanyForDiamondCompanyId(ByVal companyId As Integer, Optional ByVal defaultToIndianaFarmersMutual As Boolean = False) As QuickQuoteCompany
            Dim qqComp As QuickQuoteCompany = QuickQuoteCompany.None

            If companyId > 0 Then
                Dim qqHelper As New QuickQuoteHelperClass
                Dim compText As String = qqHelper.GetStaticDataTextForValue(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.CompanyId, companyId.ToString)
                If String.IsNullOrWhiteSpace(compText) = False Then
                    If compText.Contains(" ") = True Then
                        compText = compText.Replace(" ", "")
                    End If
                    Select Case UCase(compText)
                        Case "INDIANAFARMERSMUTUALINSURANCECOMPANY", "INDIANAFARMERSINSURANCECOMPANY", "INDIANAFARMERSMUTUAL"
                            qqComp = QuickQuoteCompany.IndianaFarmersMutual
                        Case "INDIANAFARMERSINDEMNITYCOMPANY", "INDIANAFARMERSINDEMNITY"
                            qqComp = QuickQuoteCompany.IndianaFarmersIndemnity
                    End Select
                End If
            End If

            If qqComp = QuickQuoteCompany.None AndAlso companyId > 0 Then 'added as backup after adding static data logic
                Select Case companyId
                    Case 1
                        qqComp = QuickQuoteCompany.IndianaFarmersMutual
                    Case 2
                        qqComp = QuickQuoteCompany.IndianaFarmersIndemnity
                End Select
            End If

            If qqComp = QuickQuoteCompany.None AndAlso defaultToIndianaFarmersMutual = True Then
                qqComp = QuickQuoteCompany.IndianaFarmersMutual
            End If

            Return qqComp
        End Function
        Public Shared Function DiamondCompanyIdForQuickQuoteCompany(ByVal qqComp As QuickQuoteCompany, Optional ByVal defaultToIndianaFarmersMutual As Boolean = False) As Integer
            Dim compId As Integer = 0

            If System.Enum.IsDefined(GetType(QuickQuoteCompany), qqComp) = True AndAlso qqComp <> QuickQuoteCompany.None Then
                Dim compText1 As String = ""
                Dim compText2 As String = ""
                Dim compText3 As String = ""
                Select Case qqComp
                    Case QuickQuoteCompany.IndianaFarmersMutual
                        compText1 = "Indiana Farmers Mutual Insurance Company"
                        compText2 = "Indiana Farmers Insurance Company"
                        compText3 = "Indiana Farmers Mutual"
                    Case QuickQuoteCompany.IndianaFarmersIndemnity
                        compText1 = "Indiana Farmers Indemnity Company"
                        compText2 = "Indiana Farmers Indemnity"
                        compText3 = ""
                End Select
                If String.IsNullOrWhiteSpace(compText1) = False OrElse String.IsNullOrWhiteSpace(compText1) = False Then
                    Dim qqHelper As New QuickQuoteHelperClass
                    If String.IsNullOrWhiteSpace(compText1) = False Then
                        Dim compIdText As String = qqHelper.GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.CompanyId, compText1)
                        If qqHelper.IsPositiveIntegerString(compIdText) = True Then
                            compId = CInt(compIdText)
                        End If
                    End If
                    If compId = 0 AndAlso String.IsNullOrWhiteSpace(compText2) = False Then
                        Dim compIdText As String = qqHelper.GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.CompanyId, compText2)
                        If qqHelper.IsPositiveIntegerString(compIdText) = True Then
                            compId = CInt(compIdText)
                        End If
                    End If
                    If compId = 0 AndAlso String.IsNullOrWhiteSpace(compText3) = False Then
                        Dim compIdText As String = qqHelper.GetStaticDataValueForText(QuickQuoteClassName.QuickQuoteObject, QuickQuotePropertyName.CompanyId, compText3)
                        If qqHelper.IsPositiveIntegerString(compIdText) = True Then
                            compId = CInt(compIdText)
                        End If
                    End If
                End If
            End If

            If compId = 0 AndAlso (System.Enum.IsDefined(GetType(QuickQuoteCompany), qqComp) = True OrElse defaultToIndianaFarmersMutual = True) Then 'added /as backup after adding static data logic
                Select Case qqComp
                    Case QuickQuoteCompany.IndianaFarmersMutual
                        compId = 1
                    Case QuickQuoteCompany.IndianaFarmersIndemnity
                        compId = 2
                    Case Else
                        If defaultToIndianaFarmersMutual = True Then
                            compId = DiamondCompanyIdForQuickQuoteCompany(QuickQuoteCompany.IndianaFarmersMutual, defaultToIndianaFarmersMutual:=False)
                        End If
                End Select
            End If

            Return compId
        End Function

        'added 5/1/2023
        Public Shared Function QuickQuoteValidationItemsListContainsError(ByVal qqValItems As List(Of QuickQuoteValidationItem)) As Boolean
            Dim hasIt As Boolean = False

            If qqValItems IsNot Nothing AndAlso qqValItems.Count > 0 Then
                For Each vi As QuickQuoteValidationItem In qqValItems
                    If vi IsNot Nothing AndAlso vi.ValidationSeverityType = QuickQuoteValidationItem.QuickQuoteValidationSeverityType.ValidationError Then
                        hasIt = True
                        Exit For
                    End If
                Next
            End If

            Return hasIt
        End Function
        Public Function IsUM_UIM_UMPDChangesAvailable(ByVal versionId As Integer, ByVal effectiveDate As DateTime, ByVal quoteTransactionType As QuickQuoteObject.QuickQuoteTransactionType) As Boolean
            Dim allowIt As Boolean = False 'default to False; key required to turn to True
            Dim chc As New CommonHelperClass
            Dim keyExists As Boolean = False
            Dim strSettings As String = chc.ConfigurationAppSettingValueAsString("VR_CAP_UM_UIM_UMPD_Settings", configurationAppSettingExists:=keyExists)
            If String.IsNullOrWhiteSpace(strSettings) = False Then
                Dim qqHelper As New QuickQuoteHelperClass
                Dim lstSettings As List(Of String) = ListOfStringFromString(strSettings, delimiter:=",", returnPairForEachDelimiter:=False)
                If lstSettings IsNot Nothing AndAlso lstSettings.Count > 2 Then
                    Dim enabled As Boolean = qqHelper.BitToBoolean(lstSettings(0))
                    If enabled = True Then
                        Dim startDate As Date = qqHelper.DateForString(lstSettings(1))
                        Dim vId As Integer = qqHelper.IntegerForString(lstSettings(2))
                        If quoteTransactionType = QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote Then
                            If effectiveDate >= startDate Then allowIt = True
                        Else
                            If versionId >= vId Then allowIt = True
                        End If
                    End If
                End If
            End If
            Return allowIt
        End Function

        Public Function SetLiquorSales(quote As QuickQuoteObject) As String
            Dim liquorSales As String = String.Empty

            Dim liquorSalesDict As New Dictionary(Of String, String) From {
                    {"manufacturing", quote.LiquorManufacturersSales},
                    {"restaurant", quote.LiquorRestaurantsSales},
                    {"package store", quote.LiquorPackageStoresSales},
                    {"club", quote.LiquorClubsSales}
            }

            For Each kvp As KeyValuePair(Of String, String) In liquorSalesDict
                If IsPositiveDecimalString(kvp.Value) Then
                    liquorSales += If(String.IsNullOrWhiteSpace(liquorSales), String.Empty, " / ") + $"{kvp.Key} sales ${Format(CDec(kvp.Value), "#,#")}"
                End If
            Next

            Return liquorSales
        End Function
    End Class

    'added for test purposes 10/2/2015
    'Public Class QuickQuoteDateRange
    '    Public Property StartDate As Date
    '    Public Property EndDate As Date

    '    Public Sub New()
    '        _StartDate = Nothing
    '        _EndDate = Nothing
    '    End Sub
    'End Class

    Public Class VinLookupResult
        Public Vin As String
        Public Make As String
        Public Model As String
        Public Year As Int32
        Public BodyTypeId As String
        Public AntiTheftDescription As String
        Public RestraintDescription As String

        Public CollisionSymbol As String
        Public CompSymbol As String
        Public LiabilitySymbol As String 'Matt A 7-26-18
        Public PerformanceTypeText As String
        Public BodyTypeText As String

        Public ResultVendor As Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType = Diamond.Common.Enums.VehicleInfoLookupType.VehicleInfoLookupType.NA

        Public Description As String '7-10-14

        Public ISOBodyStyle As String ' Added 5-10-16 Matt A
        Public CyclinderCount As String ' Added 5-10-16 Matt A
        Public CyclinderDescription As String ' Added 5-10-16 Matt A

        Public CostNew As String 'Added 06/30/2021 for CAP Endorsements Tasks 53028 and 53030 MLW
        Public Size As String 'Added 06/30/2021 for CAP Endorsements Tasks 53028 and 53030 MLW
        Public RatingType As String 'Added 08/05/2021 for CAP Endorsements Tasks 53028 and 53030 MLW

        Public BodilyInjurySymbol As String
        Public MedPaySymbol As String
        Public PropertyDamageSymbol As String
    End Class

End Namespace
